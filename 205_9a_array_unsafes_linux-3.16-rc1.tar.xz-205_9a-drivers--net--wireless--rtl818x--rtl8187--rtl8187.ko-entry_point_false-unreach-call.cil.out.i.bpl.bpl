var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]ref;

var $M.3: ref;

var $M.4: i32;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]i24;

var $M.11: [ref]i8;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]i32;

var $M.16: [ref]i16;

var $M.17: [ref]i16;

var $M.18: [ref]i8;

var $M.19: [ref]i8;

var $M.20: [ref]i32;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]i8;

var $M.24: [ref]i8;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: ref;

var $M.28: ref;

var $M.29: ref;

var $M.30: [ref]i8;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.59: [ref]i8;

var $M.60: [ref]i16;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $M.63: [ref]i16;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.146: [ref]i8;

var $M.147: [ref]i8;

var $M.148: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 405270);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const rtl8187_ops_group0: ref;

axiom rtl8187_ops_group0 == $sub.ref(0, 2060);

const rtl8187_ops_group1: ref;

axiom rtl8187_ops_group1 == $sub.ref(0, 3092);

const rtl8187_driver_group1: ref;

axiom rtl8187_driver_group1 == $sub.ref(0, 4124);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 5152);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 6180);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 7208);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 8236);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 9264);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 10292);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 11320);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 12348);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 13376);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 14404);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 15432);

const rtl8225_ops_group0: ref;

axiom rtl8225_ops_group0 == $sub.ref(0, 16464);

const rtl8225z2_b_ops_group0: ref;

axiom rtl8225z2_b_ops_group0 == $sub.ref(0, 17496);

const rtl8225z2_ops_group0: ref;

axiom rtl8225z2_ops_group0 == $sub.ref(0, 18528);

const last_index: ref;

axiom last_index == $sub.ref(0, 19556);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 20588);

const __mod_usb__rtl8187_table_device_table: ref;

axiom __mod_usb__rtl8187_table_device_table == $sub.ref(0, 21644);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 22788);

const {:count 21} rtl8225z2_gain_bg: ref;

axiom rtl8225z2_gain_bg == $sub.ref(0, 23833);

const {:count 7} rtl8225_threshold: ref;

axiom rtl8225_threshold == $sub.ref(0, 24864);

const {:count 28} rtl8225_gain: ref;

axiom rtl8225_gain == $sub.ref(0, 25916);

const {:count 128} rtl8225_agc: ref;

axiom rtl8225_agc == $sub.ref(0, 27068);

const {:count 95} rtl8225bcd_rxgain: ref;

axiom rtl8225bcd_rxgain == $sub.ref(0, 28282);

const {:count 60} rtl8225z2_ofdm: ref;

axiom rtl8225z2_ofdm == $sub.ref(0, 29366);

const {:count 128} rtl8225z2_agc: ref;

axiom rtl8225z2_agc == $sub.ref(0, 30518);

const {:count 95} rtl8225z2_rxgain: ref;

axiom rtl8225z2_rxgain == $sub.ref(0, 31732);

const {:count 14} rtl8225_chan: ref;

axiom rtl8225_chan == $sub.ref(0, 32812);

const {:count 36} rtl8225z2_tx_gain_cck_ofdm: ref;

axiom rtl8225z2_tx_gain_cck_ofdm == $sub.ref(0, 33872);

const {:count 32} rtl8225z2_tx_power_cck: ref;

axiom rtl8225z2_tx_power_cck == $sub.ref(0, 34928);

const {:count 32} rtl8225z2_tx_power_cck_ch14: ref;

axiom rtl8225z2_tx_power_cck_ch14 == $sub.ref(0, 35984);

const {:count 6} rtl8225_tx_power_ofdm: ref;

axiom rtl8225_tx_power_ofdm == $sub.ref(0, 37014);

const {:count 48} rtl8225_tx_power_cck: ref;

axiom rtl8225_tx_power_cck == $sub.ref(0, 38086);

const {:count 48} rtl8225_tx_power_cck_ch14: ref;

axiom rtl8225_tx_power_cck_ch14 == $sub.ref(0, 39158);

const {:count 6} rtl8225_tx_gain_cck_ofdm: ref;

axiom rtl8225_tx_gain_cck_ofdm == $sub.ref(0, 40188);

const rtl8225z2_b_ops: ref;

axiom rtl8225z2_b_ops == $sub.ref(0, 41252);

const rtl8225z2_ops: ref;

axiom rtl8225z2_ops == $sub.ref(0, 42316);

const rtl8225_ops: ref;

axiom rtl8225_ops == $sub.ref(0, 43380);

const {:count 4} rtl8187b_ac_addr: ref;

axiom rtl8187b_ac_addr == $sub.ref(0, 44436);

const {:count 85} rtl8187b_reg_table: ref;

axiom rtl8187b_reg_table == $sub.ref(0, 45715);

const {:count 22} rtl8187_table: ref;

axiom rtl8187_table == $sub.ref(0, 47443);

const rtl8187_driver: ref;

axiom rtl8187_driver == $sub.ref(0, 48771);

const {:count 12} rtl818x_rates: ref;

axiom rtl818x_rates == $sub.ref(0, 49939);

const {:count 14} rtl818x_channels: ref;

axiom rtl818x_channels == $sub.ref(0, 51859);

const rtl8187_ops: ref;

axiom rtl8187_ops == $sub.ref(0, 53515);

const {:count 3} .str.9: ref;

axiom .str.9 == $sub.ref(0, 54542);

const {:count 4} .str.10: ref;

axiom .str.10 == $sub.ref(0, 55570);

const {:count 43} .str.11: ref;

axiom .str.11 == $sub.ref(0, 56637);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 34} .str.34: ref;

axiom .str.34 == $sub.ref(0, 57695);

const {:count 35} .str.35: ref;

axiom .str.35 == $sub.ref(0, 58754);

const {:count 23} .str.28: ref;

axiom .str.28 == $sub.ref(0, 59801);

const {:count 24} .str.29: ref;

axiom .str.29 == $sub.ref(0, 60849);

const {:count 14} .str.32: ref;

axiom .str.32 == $sub.ref(0, 61887);

const {:count 24} .str.33: ref;

axiom .str.33 == $sub.ref(0, 62935);

const {:count 16} .str.30: ref;

axiom .str.30 == $sub.ref(0, 63975);

const {:count 23} .str.31: ref;

axiom .str.31 == $sub.ref(0, 65022);

const {:count 8} .str.27: ref;

axiom .str.27 == $sub.ref(0, 66054);

const {:count 14} .str.37: ref;

axiom .str.37 == $sub.ref(0, 67092);

const {:count 239} .str.38: ref;

axiom .str.38 == $sub.ref(0, 68355);

const {:count 28} .str.39: ref;

axiom .str.39 == $sub.ref(0, 69407);

const {:count 23} .str.36: ref;

axiom .str.36 == $sub.ref(0, 70454);

const {:count 34} .str.12: ref;

axiom .str.12 == $sub.ref(0, 71512);

const {:count 16} .str.13: ref;

axiom .str.13 == $sub.ref(0, 72552);

const {:count 64} .str.14: ref;

axiom .str.14 == $sub.ref(0, 73640);

const {:count 18} .str.15: ref;

axiom .str.15 == $sub.ref(0, 74682);

const {:count 10} .str.16: ref;

axiom .str.16 == $sub.ref(0, 75716);

const {:count 20} .str.17: ref;

axiom .str.17 == $sub.ref(0, 76760);

const {:count 11} .str.18: ref;

axiom .str.18 == $sub.ref(0, 77795);

const {:count 11} .str.19: ref;

axiom .str.19 == $sub.ref(0, 78830);

const {:count 11} .str.20: ref;

axiom .str.20 == $sub.ref(0, 79865);

const {:count 21} .str.21: ref;

axiom .str.21 == $sub.ref(0, 80910);

const {:count 51} .str.22: ref;

axiom .str.22 == $sub.ref(0, 81985);

const {:count 34} .str.23: ref;

axiom .str.23 == $sub.ref(0, 83043);

const {:count 18} .str.24: ref;

axiom .str.24 == $sub.ref(0, 84085);

const {:count 41} .str.25: ref;

axiom .str.25 == $sub.ref(0, 85150);

const {:count 33} .str.8: ref;

axiom .str.8 == $sub.ref(0, 86207);

const .str: ref;

axiom .str == $sub.ref(0, 87264);

const {:count 25} .str.1: ref;

axiom .str.1 == $sub.ref(0, 88313);

const {:count 26} .str.2: ref;

axiom .str.2 == $sub.ref(0, 89363);

const {:count 26} .str.3: ref;

axiom .str.3 == $sub.ref(0, 90413);

const {:count 27} .str.4: ref;

axiom .str.4 == $sub.ref(0, 91464);

const {:count 18} .str.5: ref;

axiom .str.5 == $sub.ref(0, 92506);

const {:count 15} .str.6: ref;

axiom .str.6 == $sub.ref(0, 93545);

const {:count 15} .str.7: ref;

axiom .str.7 == $sub.ref(0, 94584);

const {:count 30} .str.43: ref;

axiom .str.43 == $sub.ref(0, 95638);

const {:count 22} .str.26: ref;

axiom .str.26 == $sub.ref(0, 96684);

const {:count 8} .str.40: ref;

axiom .str.40 == $sub.ref(0, 97716);

const {:count 27} .str.42: ref;

axiom .str.42 == $sub.ref(0, 98767);

const {:count 10} .str.41: ref;

axiom .str.41 == $sub.ref(0, 99801);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 100833);

const {:count 3} .str.1.102: ref;

axiom .str.1.102 == $sub.ref(0, 101860);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 102898);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 103926);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 104958);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 105990);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 107022);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 108054);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const rtl8187_tx: ref;

axiom rtl8187_tx == $sub.ref(0, 109086);

procedure rtl8187_tx($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.5, $M.4;



implementation rtl8187_tx($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $i55: i16;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p64: ref;
  var $i65: i16;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $i82: i16;
  var $i83: i16;
  var $i84: i32;
  var $i56: i16;
  var $i57: i32;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i32;
  var $i97: i16;
  var $p98: ref;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $i112: i16;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i16;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p157: ref;
  var $i158: i8;
  var $i159: i8;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i32;
  var $p169: ref;
  var $i170: i32;
  var $i171: i64;
  var $i172: i16;
  var $p173: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i179: i16;
  var $i180: i32;
  var $i181: i64;
  var $p182: ref;
  var $i183: i32;
  var $i178: i32;
  var $i137: i32;
  var $p138: ref;
  var $p185: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $p200: ref;
  var $i201: i32;
  var $p202: ref;
  var $p203: ref;
  var $i204: i32;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p7 := IEEE80211_SKB_CB($p2);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p11 := usb_alloc_urb(0, 32);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 14} {:cexpr "flags"} boogie_si_record_i32($i15);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 32768);
    call {:si_unique_call 15} {:cexpr "flags"} boogie_si_record_i32($i16);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p17 := ieee80211_get_tx_rate($p0, $p7);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 24);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, $i16);
    call {:si_unique_call 17} {:cexpr "flags"} boogie_si_record_i32($i22);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i27 := ieee80211_has_morefrags($i26);
    call {:si_unique_call 19} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i22;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i39 := $and.i16($i38, 2047);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 1);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p61, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $p64);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i66 := $and.i16($i65, 2047);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 2);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i83, $i84 := 0, $i30;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i56, $i57 := $i83, $i84;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 2);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i117 == 1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p139, 6);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p140, 7);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p141, 5);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p142, 4);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p10, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i144 := $load.i16($M.0, $p143);
    call {:si_unique_call 32} {:cexpr "fc"} boogie_si_record_i16($i144);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p145 := skb_push($p2, 32);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p147 := ieee80211_get_tx_rate($p0, $p7);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p146);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 35} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p148, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p146, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, $i57);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p146, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, $i56);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($add.ref($p154, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.0, $p157);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i159 := $and.i8($i158, 31);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i160, $sub.i32(0, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i162 := $shl.i32($i161, 8);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p146, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, $i162);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(16, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.0, $p166);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i171 := $zext.i32.i64($i170);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i172 := ieee80211_generic_frame_duration($p0, $p165, $i168, $i171, $p147);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p146, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p173, $i172);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i144);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 12);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i177 == 1);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i179 := skb_get_queue_mapping($p2);
    call {:si_unique_call 44} {:cexpr "tmp___7"} boogie_si_record_i16($i179);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i179);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i181 := $sext.i32.i64($i180);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref($i181, 4));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.1, $p182);
    call {:si_unique_call 45} {:cexpr "ep"} boogie_si_record_i32($i183);
    assume {:verifier.code 0} true;
    $i178 := $i183;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i137, $p138 := $i178, $p145;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p186, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p188, $p0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(1, 8));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p193, $p11);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i196 := __create_pipe($p195, $i137);
    call {:si_unique_call 38} {:cexpr "tmp___8"} boogie_si_record_i32($i196);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i199 := $or.i32($i196, $sub.i32(0, 1073741824));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p2);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} usb_fill_bulk_urb($p11, $p198, $i199, $p138, $i201, rtl8187_tx_cb, $p202);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.0, $p203);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i205 := $or.i32($i204, 64);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, $i205);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} usb_anchor_urb($p11, $p207);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i208 := usb_submit_urb($p11, 32);
    call {:si_unique_call 42} {:cexpr "rc"} boogie_si_record_i32($i208);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i208, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} usb_free_urb($p11);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i209 == 1;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} usb_unanchor_urb($p11);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ldv_kfree_skb_14($p2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i177 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i178 := 12;
    goto $bb25;

  $bb20:
    assume $i117 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p118 := skb_push($p2, 12);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, $i57);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p119, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p119, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p122, $i56);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p126, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i131 := $and.i8($i130, 31);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i132, $sub.i32(0, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i134 := $shl.i32($i133, 8);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p119, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i134);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i137, $p138 := 2, $p118;
    goto $bb22;

  $bb14:
    assume $i88 == 1;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 16);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p10, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 15);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p10, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p104, $i103);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p10, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(4290, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i111 := $or.i32($i107, $i110);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p10, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p113, $i112);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i92 == 1;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(4290, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, 16);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(4290, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, $i97);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i69 == 1;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i30, 8650752);
    call {:si_unique_call 26} {:cexpr "flags"} boogie_si_record_i32($i70);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p71 := ieee80211_get_rts_cts_rate($p0, $p7);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i75 := $shl.i32($i74, 19);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, $i70);
    call {:si_unique_call 28} {:cexpr "flags"} boogie_si_record_i32($i76);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(16, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i82 := ieee80211_ctstoself_duration($p0, $p78, $i81, $p7);
    call {:si_unique_call 30} {:cexpr "rts_dur"} boogie_si_record_i16($i82);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i83, $i84 := $i82, $i76;
    goto $bb13;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i30, 8388608);
    call {:si_unique_call 21} {:cexpr "flags"} boogie_si_record_i32($i43);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p44 := ieee80211_get_rts_cts_rate($p0, $p7);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i47, 19);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, $i43);
    call {:si_unique_call 23} {:cexpr "flags"} boogie_si_record_i32($i49);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(16, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i55 := ieee80211_rts_duration($p0, $p51, $i54, $p7);
    call {:si_unique_call 25} {:cexpr "rts_dur"} boogie_si_record_i16($i55);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i56, $i57 := $i55, $i49;
    goto $bb10;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i22, 131072);
    call {:si_unique_call 20} {:cexpr "flags"} boogie_si_record_i32($i29);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} ldv_kfree_skb_13($p2);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8187_start: ref;

axiom rtl8187_start == $sub.ref(0, 110118);

procedure rtl8187_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.5, $M.4;



implementation rtl8187_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i14: i32;
  var $i13: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i8;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i8;
  var $p115: ref;
  var $p116: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p124: ref;
  var $p127: ref;
  var $p130: ref;
  var $p132: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $p140: ref;
  var $i16: i32;
  var $p141: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} mutex_lock_nested($p7, 0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i14 := rtl8187b_init_hw($p0);
    call {:si_unique_call 56} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i13, 0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} init_usb_anchor($p17);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1728, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} rtl818x_iowrite16($p6, $p53, $sub.i16(0, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} rtl818x_iowrite32($p6, $p58, $sub.i32(0, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(1, 4));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} rtl818x_iowrite32($p6, $p64, $sub.i32(0, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i65 := rtl8187_init_urbs($p0);
    call {:si_unique_call 77} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $sub.i32(0, 1869284342));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 256)), $mul.ref(68, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} rtl818x_iowrite32($p6, $p70, $sub.i32(0, 1869284342));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 256)), $mul.ref(188, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i74 := rtl818x_ioread8($p6, $p73);
    call {:si_unique_call 80} {:cexpr "tmp___2"} boogie_si_record_i8($i74);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    call {:si_unique_call 81} {:cexpr "reg"} boogie_si_record_i32($i75);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, $sub.i32(0, 2));
    call {:si_unique_call 82} {:cexpr "reg"} boogie_si_record_i32($i76);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i76, 2);
    call {:si_unique_call 83} {:cexpr "reg"} boogie_si_record_i32($i77);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 256)), $mul.ref(188, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i77);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} rtl818x_iowrite8($p6, $p80, $i83);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 256)), $mul.ref(156, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i87 := rtl818x_ioread8($p6, $p86);
    call {:si_unique_call 86} {:cexpr "tmp___3"} boogie_si_record_i8($i87);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    call {:si_unique_call 87} {:cexpr "reg"} boogie_si_record_i32($i88);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, $sub.i32(0, 2));
    call {:si_unique_call 88} {:cexpr "reg"} boogie_si_record_i32($i89);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, $sub.i32(0, 3));
    call {:si_unique_call 89} {:cexpr "reg"} boogie_si_record_i32($i90);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, $sub.i32(0, 5));
    call {:si_unique_call 90} {:cexpr "reg"} boogie_si_record_i32($i91);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 256)), $mul.ref(156, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i91);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} rtl818x_iowrite8($p6, $p94, $i97);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} rtl818x_iowrite32($p6, $p100, $sub.i32(0, 2132279296));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i104 := rtl818x_ioread8($p6, $p103);
    call {:si_unique_call 94} {:cexpr "tmp___4"} boogie_si_record_i8($i104);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    call {:si_unique_call 95} {:cexpr "reg"} boogie_si_record_i32($i105);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i105, 4);
    call {:si_unique_call 96} {:cexpr "reg"} boogie_si_record_i32($i106);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, 8);
    call {:si_unique_call 97} {:cexpr "reg"} boogie_si_record_i32($i107);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i107);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} rtl818x_iowrite8($p6, $p110, $i113);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1)), $mul.ref(0, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} __init_work($p115, 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p116, 137438953408);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p2);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 100} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p120, $p121, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} lockdep_init_map($p124, .str.28, $p1, 0);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} INIT_LIST_HEAD($p127);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, rtl8187_work);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1)), $mul.ref(80, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} init_timer_key($p132, 2, .str.29, $p3);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, delayed_work_timer_fn);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1504, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p140, $i137);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i16 := $i65;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} mutex_unlock($p141);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb17:
    assume $i66 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i16 := $i65;
    goto $bb6;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $sub.i32(0, 1869284338));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 256)), $mul.ref(68, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} rtl818x_iowrite32($p6, $p26, $sub.i32(0, 1869284338));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 256)), $mul.ref(156, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i30 := rtl818x_ioread8($p6, $p29);
    call {:si_unique_call 61} {:cexpr "tmp___1"} boogie_si_record_i8($i30);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    call {:si_unique_call 62} {:cexpr "reg"} boogie_si_record_i32($i31);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, $sub.i32(0, 2));
    call {:si_unique_call 63} {:cexpr "reg"} boogie_si_record_i32($i32);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 3));
    call {:si_unique_call 64} {:cexpr "reg"} boogie_si_record_i32($i33);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, $sub.i32(0, 5));
    call {:si_unique_call 65} {:cexpr "reg"} boogie_si_record_i32($i34);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 256)), $mul.ref(156, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i34);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} rtl818x_iowrite8($p6, $p37, $i40);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} rtl818x_iowrite32($p6, $p43, 1356859143);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i44 := rtl8187_init_urbs($p0);
    call {:si_unique_call 69} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i46 := rtl8187b_init_status_urb($p0);
    call {:si_unique_call 71} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i16 := $i46;
    goto $bb6;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} usb_kill_anchored_urbs($p48);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i16 := $i44;
    goto $bb6;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i12 := rtl8187_init_hw($p0);
    call {:si_unique_call 54} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const rtl8187_stop: ref;

axiom rtl8187_stop == $sub.ref(0, 111150);

procedure rtl8187_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.5, $M.4;



implementation rtl8187_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p50: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var vslice_dummy_var_49: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} mutex_lock_nested($p4, 0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} rtl818x_iowrite16($p3, $p9, 0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i13 := rtl818x_ioread8($p3, $p12);
    call {:si_unique_call 107} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    call {:si_unique_call 108} {:cexpr "reg"} boogie_si_record_i32($i14);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, $sub.i32(0, 5));
    call {:si_unique_call 109} {:cexpr "reg"} boogie_si_record_i32($i15);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, $sub.i32(0, 9));
    call {:si_unique_call 110} {:cexpr "reg"} boogie_si_record_i32($i16);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i16);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} rtl818x_iowrite8($p3, $p19, $i22);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(8, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 112} devirtbounce($p26, $p0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} rtl8187_set_anaparam($p3, 0);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} rtl818x_iowrite8($p3, $p29, $sub.i8(0, 64));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 256)), $mul.ref(90, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i33 := rtl818x_ioread8($p3, $p32);
    call {:si_unique_call 116} {:cexpr "tmp___0"} boogie_si_record_i8($i33);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    call {:si_unique_call 117} {:cexpr "reg"} boogie_si_record_i32($i34);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 256)), $mul.ref(90, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i34);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 128);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} rtl818x_iowrite8($p3, $p37, $i41);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} rtl818x_iowrite8($p3, $p44, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p47 := ldv_skb_dequeue_18($p46);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} usb_kill_anchored_urbs($p54);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} mutex_unlock($p55);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i59 == 1;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1504, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} vslice_dummy_var_49 := cancel_delayed_work_sync($p60);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i49 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p50 := $p47;
    goto $bb4;

  $bb4:
    call $p51, $i52, $i53, $p50 := rtl8187_stop_loop_$bb4($p46, $p51, $i52, $i53, $p50);
    goto $bb4_last;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} dev_kfree_skb_any($p50);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p51 := ldv_skb_dequeue_18($p46);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i53 == 1);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $p50 := $p51;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_498;
}



const rtl8187_add_interface: ref;

axiom rtl8187_add_interface == $sub.ref(0, 112182);

procedure rtl8187_add_interface($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rtl8187_add_interface($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p36: ref;
  var $p39: ref;
  var $p41: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i13: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i8;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i8;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} mutex_lock_nested($p8, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(16, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 95);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} mutex_unlock($p66);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(16, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p1);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} __init_work($p24, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, 137438953408);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 132} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p29, $p30, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} lockdep_init_map($p33, .str.34, $p2, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} INIT_LIST_HEAD($p36);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, rtl8187_beacon_work);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(80, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} init_timer_key($p41, 2, .str.35, $p4);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, delayed_work_timer_fn);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i46);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} rtl818x_iowrite8($p7, $p53, $sub.i8(0, 64));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} rtl818x_iowrite8($p7, $p57, $i62);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref(1, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(1, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} rtl818x_iowrite8($p7, $p71, $i77);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(2, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(2, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} rtl818x_iowrite8($p7, $p82, $i88);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(3, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(3, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} rtl818x_iowrite8($p7, $p93, $i99);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(4, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(4, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} rtl818x_iowrite8($p7, $p104, $i110);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref(5, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p117, $mul.ref(5, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i8($i120);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} rtl818x_iowrite8($p7, $p115, $i121);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} rtl818x_iowrite8($p7, $p65, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 95);
    goto $bb3;
}



const rtl8187_remove_interface: ref;

axiom rtl8187_remove_interface == $sub.ref(0, 113214);

procedure rtl8187_remove_interface($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_remove_interface($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} mutex_lock_nested($p5, 0);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(16, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} mutex_unlock($p7);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_config: ref;

axiom rtl8187_config == $sub.ref(0, 114246);

procedure rtl8187_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} {:cexpr "rtl8187_config:arg:changed"} boogie_si_record_i32($i1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} mutex_lock_nested($p6, 0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i10 := rtl818x_ioread32($p4, $p9);
    call {:si_unique_call 149} {:cexpr "reg"} boogie_si_record_i32($i10);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i10, 131072);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} rtl818x_iowrite32($p4, $p13, $i14);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(8, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 151} devirtbounce.1($p18, $p0, $p5);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} msleep(10);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} rtl818x_iowrite32($p4, $p21, $i10);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 256)), $mul.ref(114, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} rtl818x_iowrite16($p4, $p24, 2);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 256)), $mul.ref(118, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} rtl818x_iowrite16($p4, $p27, 100);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(112, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} rtl818x_iowrite16($p4, $p30, 100);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(116, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} rtl818x_iowrite16($p4, $p33, 100);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} mutex_unlock($p34);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const rtl8187_bss_info_changed: ref;

axiom rtl8187_bss_info_changed == $sub.ref(0, 115278);

procedure rtl8187_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i37: i8;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i1;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i8;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i8;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i8;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i8;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i8;
  var vslice_dummy_var_50: i1;
  var vslice_dummy_var_51: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "rtl8187_bss_info_changed:arg:changed"} boogie_si_record_i32($i3);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i3, 128);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i3, 12);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i3, 512);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i3, 768);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_50 := cancel_delayed_work_sync($p65);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_51 := schedule_work($p71);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(17, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($i59);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i8($i60);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i62);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(15, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} rtl8187_conf_erp($p6, $i52, $i55);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} mutex_lock_nested($p11, 0);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 256)), $mul.ref(46, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} rtl818x_iowrite8($p6, $p15, $i20);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 256)), $mul.ref(46, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(1, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(1, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} rtl818x_iowrite8($p6, $p77, $i83);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 256)), $mul.ref(46, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(2, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(2, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} rtl818x_iowrite8($p6, $p88, $i94);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 256)), $mul.ref(46, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(3, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p101, $mul.ref(3, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} rtl818x_iowrite8($p6, $p99, $i105);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 256)), $mul.ref(46, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(4, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(4, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} rtl818x_iowrite8($p6, $p110, $i116);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 256)), $mul.ref(46, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(5, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p123, $mul.ref(5, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i8($i126);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} rtl818x_iowrite8($p6, $p121, $i127);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i28 := is_valid_ether_addr($p27);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 164} {:cexpr "tmp"} boogie_si_record_i8($i29);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i25;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 256)), $mul.ref(88, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i41);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} rtl818x_iowrite8($p6, $p44, $i46);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} mutex_unlock($p47);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i25);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 8);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    call {:si_unique_call 166} {:cexpr "reg"} boogie_si_record_i8($i40);
    assume {:verifier.code 0} true;
    $i37 := $i40;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i41 := $i37;
    goto $bb15;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i25);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 4);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 165} {:cexpr "reg"} boogie_si_record_i8($i36);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb14;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i25 := 16;
    goto $bb9;
}



const rtl8187_prepare_multicast: ref;

axiom rtl8187_prepare_multicast == $sub.ref(0, 116310);

procedure rtl8187_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rtl8187_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rtl8187_configure_filter: ref;

axiom rtl8187_configure_filter == $sub.ref(0, 117342);

procedure rtl8187_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rtl8187_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} {:cexpr "rtl8187_configure_filter:arg:changed_flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 177} {:cexpr "rtl8187_configure_filter:arg:multicast"} boogie_si_record_i64($i3);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 4);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, 32);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i1, 64);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p2);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 2);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i3, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, $sub.i32(0, 5));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 32);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 524288);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 4);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 256)), $mul.ref(68, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} rtl818x_iowrite32_async($p6, $p63, $i65);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i58 == 1;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p2);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 2);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i60);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p2);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, 64);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i54);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p2);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 32);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i48);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p2);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 4);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i42);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 4);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb11;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i23 := $xor.i32($i22, 1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i17 := $xor.i32($i16, 524288);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i11 := $xor.i32($i10, 32);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1312, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8187_conf_tx: ref;

axiom rtl8187_conf_tx == $sub.ref(0, 118374);

procedure rtl8187_conf_tx($p0: ref, $p1: ref, $i2: i16, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_conf_tx($p0: ref, $p1: ref, $i2: i16, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "rtl8187_conf_tx:arg:queue"} boogie_si_record_i16($i2);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i2);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 3);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i13 := fls($i12);
    call {:si_unique_call 181} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 182} {:cexpr "cw_min"} boogie_si_record_i8($i14);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i18 := fls($i17);
    call {:si_unique_call 184} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 185} {:cexpr "cw_max"} boogie_si_record_i8($i19);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i2);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 256)), $mul.ref(189, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i19);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i59 := $shl.i32($i58, 4);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i61 := $sext.i8.i32($i60);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i62 := $sext.i8.i32($i14);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i61, $i62);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} rtl818x_iowrite8($p6, $p57, $i66);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i54 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i2);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref($i27, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i25);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i2);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref(rtl8187b_ac_addr, $mul.ref(0, 32)), $mul.ref($i31, 8));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.2, $p32);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i36, 16);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i19);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i39 := $shl.i32($i38, 12);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i37, $i39);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i14);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i41, 8);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i40, $i42);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i46, $i49);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 10);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i43, $i51);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} rtl818x_iowrite32($p6, $p33, $i52);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const rtl8187_get_tsf: ref;

axiom rtl8187_get_tsf == $sub.ref(0, 119406);

procedure rtl8187_get_tsf($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rtl8187_get_tsf($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i9 := rtl818x_ioread32($p4, $p8);
    call {:si_unique_call 189} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(1, 4));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i15 := rtl818x_ioread32($p4, $p14);
    call {:si_unique_call 191} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i9);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i15);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i18 := $shl.i64($i17, 32);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i16, $i18);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const rtl8187_rfkill_poll: ref;

axiom rtl8187_rfkill_poll == $sub.ref(0, 120438);

procedure rtl8187_rfkill_poll($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_rfkill_poll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} mutex_lock_nested($p4, 0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i5 := rtl8187_is_radio_enabled($p3);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 194} {:cexpr "enabled"} boogie_si_record_i8($i6);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(4288, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i6);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, $i12);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 196} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} mutex_unlock($p30);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i6);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(4288, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i18);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i20);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i6);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p22 := (if $i21 == 1 then .str.9 else .str.10);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_52 := printk.ref.ref(.str.11, $p22);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i6);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i29 := $xor.i1($i28, 1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} wiphy_rfkill_set_hw_state($p25, $i29);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 121470);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_is_radio_enabled: ref;

axiom rtl8187_is_radio_enabled == $sub.ref(0, 122502);

procedure rtl8187_is_radio_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_is_radio_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(145, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i4 := rtl818x_ioread8($p0, $p3);
    call {:si_unique_call 202} {:cexpr "gpio"} boogie_si_record_i8($i4);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(145, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3951, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i11 := $xor.i32($i10, $sub.i32(0, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i12 := $sext.i8.i32($i4);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i11, $i12);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} rtl818x_iowrite8($p0, $p7, $i16);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 256)), $mul.ref(146, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i20 := rtl818x_ioread8($p0, $p19);
    call {:si_unique_call 205} {:cexpr "gpio"} boogie_si_record_i8($i20);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3951, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i20);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i23, $i24);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 123534);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 207} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 124566);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 210} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 211} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 212} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 213} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wiphy_rfkill_set_hw_state: ref;

axiom wiphy_rfkill_set_hw_state == $sub.ref(0, 125598);

procedure wiphy_rfkill_set_hw_state($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation wiphy_rfkill_set_hw_state($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} {:cexpr "wiphy_rfkill_set_hw_state:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 126630);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_ioread8: ref;

axiom rtl818x_ioread8 == $sub.ref(0, 127662);

procedure rtl818x_ioread8($p0: ref, $p1: ref) returns ($r: i8);
  free requires assertsPassed;



implementation rtl818x_ioread8($p0: ref, $p1: ref) returns ($r: i8)
{
  var $i2: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i2 := rtl818x_ioread8_idx($p0, $p1, 0);
    call {:si_unique_call 216} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rtl818x_iowrite8: ref;

axiom rtl818x_iowrite8 == $sub.ref(0, 128694);

procedure rtl818x_iowrite8($p0: ref, $p1: ref, $i2: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl818x_iowrite8($p0: ref, $p1: ref, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} {:cexpr "rtl818x_iowrite8:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} rtl818x_iowrite8_idx($p0, $p1, $i4, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_iowrite8_idx: ref;

axiom rtl818x_iowrite8_idx == $sub.ref(0, 129726);

procedure rtl818x_iowrite8_idx($p0: ref, $p1: ref, $i2: i8, $i3: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl818x_iowrite8_idx($p0: ref, $p1: ref, $i2: i8, $i3: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} {:cexpr "rtl818x_iowrite8_idx:arg:val"} boogie_si_record_i8($i2);
    call {:si_unique_call 220} {:cexpr "rtl818x_iowrite8_idx:arg:idx"} boogie_si_record_i8($i3);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} mutex_lock_nested($p4, 0);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i2);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i10 := __create_pipe($p9, 0);
    call {:si_unique_call 223} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, $sub.i32(0, 2147483648));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i16($i14);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i3);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 3);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_53 := usb_control_msg($p12, $i13, 5, 64, $i17, $i20, $p23, 1, 125);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} mutex_unlock($p25);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 130758);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 131790);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 228} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 229} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 230} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 231} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 232} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 233} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 235} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const rtl818x_ioread8_idx: ref;

axiom rtl818x_ioread8_idx == $sub.ref(0, 132822);

procedure rtl818x_ioread8_idx($p0: ref, $p1: ref, $i2: i8) returns ($r: i8);
  free requires assertsPassed;



implementation rtl818x_ioread8_idx($p0: ref, $p1: ref, $i2: i8) returns ($r: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "rtl818x_ioread8_idx:arg:idx"} boogie_si_record_i8($i2);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} mutex_lock_nested($p3, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i6 := __create_pipe($p5, 0);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i6, $sub.i32(0, 2147483520));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i16($i10);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i2);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 3);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_54 := usb_control_msg($p8, $i9, 5, $sub.i8(0, 64), $i13, $i16, $p19, 1, 125);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    call {:si_unique_call 241} {:cexpr "val"} boogie_si_record_i8($i24);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} mutex_unlock($p25);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;
}



const rtl818x_ioread32: ref;

axiom rtl818x_ioread32 == $sub.ref(0, 133854);

procedure rtl818x_ioread32($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rtl818x_ioread32($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i2 := rtl818x_ioread32_idx($p0, $p1, 0);
    call {:si_unique_call 244} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rtl818x_ioread32_idx: ref;

axiom rtl818x_ioread32_idx == $sub.ref(0, 134886);

procedure rtl818x_ioread32_idx($p0: ref, $p1: ref, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation rtl818x_ioread32_idx($p0: ref, $p1: ref, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} {:cexpr "rtl818x_ioread32_idx:arg:idx"} boogie_si_record_i8($i2);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} mutex_lock_nested($p3, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i6 := __create_pipe($p5, 0);
    call {:si_unique_call 248} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i6, $sub.i32(0, 2147483520));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i16($i10);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i2);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 3);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_55 := usb_control_msg($p8, $i9, 5, $sub.i8(0, 64), $i13, $i16, $p20, 4, 125);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 250} {:cexpr "val"} boogie_si_record_i32($i25);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} mutex_unlock($p26);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 135918);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 253} $i1 := devirtbounce.2(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 254} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rtl818x_iowrite32: ref;

axiom rtl818x_iowrite32 == $sub.ref(0, 136950);

procedure rtl818x_iowrite32($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl818x_iowrite32($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} {:cexpr "rtl818x_iowrite32:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} rtl818x_iowrite32_idx($p0, $p1, $i2, 0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_iowrite32_idx: ref;

axiom rtl818x_iowrite32_idx == $sub.ref(0, 137982);

procedure rtl818x_iowrite32_idx($p0: ref, $p1: ref, $i2: i32, $i3: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl818x_iowrite32_idx($p0: ref, $p1: ref, $i2: i32, $i3: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "rtl818x_iowrite32_idx:arg:val"} boogie_si_record_i32($i2);
    call {:si_unique_call 258} {:cexpr "rtl818x_iowrite32_idx:arg:idx"} boogie_si_record_i8($i3);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} mutex_lock_nested($p4, 0);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i2);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i10 := __create_pipe($p9, 0);
    call {:si_unique_call 261} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, $sub.i32(0, 2147483648));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i16($i14);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i3);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 3);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_56 := usb_control_msg($p12, $i13, 5, 64, $i17, $i20, $p24, 4, 125);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} mutex_unlock($p26);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_iowrite32_async: ref;

axiom rtl818x_iowrite32_async == $sub.ref(0, 139014);

procedure rtl818x_iowrite32_async($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rtl818x_iowrite32_async($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 265} {:cexpr "rtl818x_iowrite32_async:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i16($i4);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} rtl8187_iowrite_async($p0, $i7, $p8, 4);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_iowrite_async: ref;

axiom rtl8187_iowrite_async == $sub.ref(0, 140046);

procedure rtl8187_iowrite_async($p0: ref, $i1: i16, $p2: ref, $i3: i16);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rtl8187_iowrite_async($p0: ref, $i1: i16, $p2: ref, $i3: i16)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "rtl8187_iowrite_async:arg:addr"} boogie_si_record_i16($i1);
    call {:si_unique_call 268} {:cexpr "rtl8187_iowrite_async:arg:len"} boogie_si_record_i16($i3);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p4 := kmalloc(12, 32);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p8 := usb_alloc_urb(0, 32);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(4, 1));
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 64);
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 5);
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i1);
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 0);
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(4, 1)), $mul.ref(6, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $i3);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i64($i3);
    call {:si_unique_call 272} {:cexpr "__len"} boogie_si_record_i64($i18);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p5);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 273} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p19, $p2, $i18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i22 := __create_pipe($p21, 0);
    call {:si_unique_call 275} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i22, $sub.i32(0, 2147483648));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p12);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i3);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p5);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} usb_fill_control_urb($p8, $p24, $i25, $p26, $p27, $i28, rtl8187_iowrite_async_cb, $p29);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} usb_anchor_urb($p8, $p30);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i31 := usb_submit_urb($p8, 32);
    call {:si_unique_call 279} {:cexpr "rc"} boogie_si_record_i32($i31);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} usb_free_urb($p8);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p5);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} kfree($p33);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} usb_unanchor_urb($p8);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} kfree($p11);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 141078);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 284} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 142110);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 287} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p2 := external_alloc();
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 143142);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} free_($p0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 144174);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const rtl8187_iowrite_async_cb: ref;

axiom rtl8187_iowrite_async_cb == $sub.ref(0, 145206);

procedure rtl8187_iowrite_async_cb($p0: ref);
  free requires assertsPassed;



implementation rtl8187_iowrite_async_cb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} kfree($p2);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    return;
}



const usb_fill_control_urb: ref;

axiom usb_fill_control_urb == $sub.ref(0, 146238);

procedure usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} {:cexpr "usb_fill_control_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 292} {:cexpr "usb_fill_control_urb:arg:buffer_length"} boogie_si_record_i32($i5);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p4);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i5);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p7);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    return;
}



const usb_anchor_urb: ref;

axiom usb_anchor_urb == $sub.ref(0, 147270);

procedure usb_anchor_urb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_anchor_urb($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    return;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 148302);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 293} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 294} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 295} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_unanchor_urb: ref;

axiom usb_unanchor_urb == $sub.ref(0, 149334);

procedure usb_unanchor_urb($p0: ref);
  free requires assertsPassed;



implementation usb_unanchor_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 150366);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 151398);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 296} $free($p0);
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 152430);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 297} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 298} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 153462);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 300} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 302} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const rtl8187_conf_erp: ref;

axiom rtl8187_conf_erp == $sub.ref(0, 154494);

procedure rtl8187_conf_erp($p0: ref, $i1: i1, $i2: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_conf_erp($p0: ref, $i1: i1, $i2: i1)
{
  var $i3: i8;
  var $i4: i8;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p13: ref;
  var $i11: i8;
  var $i12: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i8;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i45: i16;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i8;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i8;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 303} {:cexpr "rtl8187_conf_erp:arg:use_short_slot"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 304} {:cexpr "rtl8187_conf_erp:arg:use_short_preamble"} boogie_si_record_i1($i2);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 256)), $mul.ref(180, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} rtl818x_iowrite8($p0, $p72, 34);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i3);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 256)), $mul.ref(182, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} rtl818x_iowrite8($p0, $p87, 20);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 256)), $mul.ref(181, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} rtl818x_iowrite8($p0, $p90, 36);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 256)), $mul.ref(52, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} rtl818x_iowrite8($p0, $p95, 55);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 256)), $mul.ref(182, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} rtl818x_iowrite8($p0, $p76, 9);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 256)), $mul.ref(181, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} rtl818x_iowrite8($p0, $p79, 20);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 256)), $mul.ref(52, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} rtl818x_iowrite8($p0, $p84, 71);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i3);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 20);
    assume {:verifier.code 0} true;
    $i11, $i12 := 50, 91;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 256)), $mul.ref(180, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} rtl818x_iowrite8($p0, $p16, 34);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 256)), $mul.ref(182, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} rtl818x_iowrite8($p0, $p19, $i23);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 256)), $mul.ref(181, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i11);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} rtl818x_iowrite8($p0, $p26, $i28);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(1, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i12);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} rtl818x_iowrite8($p0, $p34, $i36);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i16($i11);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 160);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    call {:si_unique_call 310} {:cexpr "ack_timeout"} boogie_si_record_i16($i40);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i4);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i41 == 1);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i40);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 144);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    call {:si_unique_call 312} {:cexpr "ack_timeout"} boogie_si_record_i16($i48);
    assume {:verifier.code 0} true;
    $i45 := $i48;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 256)), $mul.ref(121, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i45);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 3);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i54 := $sdiv.i32($i53, 4);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} rtl818x_iowrite8($p0, $p51, $i57);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.2, rtl8187b_ac_addr);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref(0, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i67 := $mul.i32($i63, $i66);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, 10);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} rtl818x_iowrite8($p0, $p59, $i69);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.2, $add.ref($add.ref(rtl8187b_ac_addr, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref(1, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i105 := $mul.i32($i101, $i104);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 10);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} rtl818x_iowrite8($p0, $p97, $i107);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.2, $add.ref($add.ref(rtl8187b_ac_addr, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref(2, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i117 := $mul.i32($i113, $i116);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, 10);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} rtl818x_iowrite8($p0, $p109, $i119);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.2, $add.ref($add.ref(rtl8187b_ac_addr, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref(3, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i129 := $mul.i32($i125, $i128);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i129, 10);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} rtl818x_iowrite8($p0, $p121, $i131);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i41 == 1;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i40);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 72);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    call {:si_unique_call 311} {:cexpr "ack_timeout"} boogie_si_record_i16($i44);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb8;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 9);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i11, $i12 := 28, 83;
    goto $bb5;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 155526);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 324} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 325} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 156558);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i2 := queue_work($p1, $p0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 327} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 157590);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 329} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 158622);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 330} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 332} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 159654);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 160686);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 161718);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_iowrite16: ref;

axiom rtl818x_iowrite16 == $sub.ref(0, 162750);

procedure rtl818x_iowrite16($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl818x_iowrite16($p0: ref, $p1: ref, $i2: i16)
{
  var $i3: i32;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} {:cexpr "rtl818x_iowrite16:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} rtl818x_iowrite16_idx($p0, $p1, $i4, 0);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_iowrite16_idx: ref;

axiom rtl818x_iowrite16_idx == $sub.ref(0, 163782);

procedure rtl818x_iowrite16_idx($p0: ref, $p1: ref, $i2: i16, $i3: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl818x_iowrite16_idx($p0: ref, $p1: ref, $i2: i16, $i3: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "rtl818x_iowrite16_idx:arg:val"} boogie_si_record_i16($i2);
    call {:si_unique_call 337} {:cexpr "rtl818x_iowrite16_idx:arg:idx"} boogie_si_record_i8($i3);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} mutex_lock_nested($p4, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i2);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i10 := __create_pipe($p9, 0);
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, $sub.i32(0, 2147483648));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i16($i14);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i3);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 3);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_57 := usb_control_msg($p12, $i13, 5, 64, $i17, $i20, $p24, 2, 125);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} mutex_unlock($p26);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 164814);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 165846);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 166878);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_beacon_work: ref;

axiom rtl8187_beacon_work == $sub.ref(0, 167910);

procedure rtl8187_beacon_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.5, $M.4;



implementation rtl8187_beacon_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var vslice_dummy_var_58: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 240));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 280), 296));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 240)), $mul.ref(0, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i9 := ieee80211_queue_stopped($p8, 0);
    call {:si_unique_call 346} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p11 := ieee80211_beacon_get($p8, $p6);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i17 := rtl8187_get_tsf($p8, $p6);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i17);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} skb_set_queue_mapping($p11, 0);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} rtl8187_tx($p8, $0.ref, $p11);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 1024);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i26 := usecs_to_jiffies($i25);
    call {:si_unique_call 348} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 240)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_58 := schedule_delayed_work($p27, $i26);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 168942);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 169974);

procedure delayed_work_timer_fn($i0: i64);



const ieee80211_queue_stopped: ref;

axiom ieee80211_queue_stopped == $sub.ref(0, 171006);

procedure ieee80211_queue_stopped($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_queue_stopped($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 355} {:cexpr "ieee80211_queue_stopped:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 1} true;
    call {:si_unique_call 356} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 357} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ieee80211_beacon_get: ref;

axiom ieee80211_beacon_get == $sub.ref(0, 172038);

procedure ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p2 := ieee80211_beacon_get_tim($p0, $p1, $0.ref, $0.ref);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_set_queue_mapping: ref;

axiom skb_set_queue_mapping == $sub.ref(0, 173070);

procedure skb_set_queue_mapping($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_set_queue_mapping($p0: ref, $i1: i16)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} {:cexpr "skb_set_queue_mapping:arg:queue_mapping"} boogie_si_record_i16($i1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i1);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    return;
}



const usecs_to_jiffies: ref;

axiom usecs_to_jiffies == $sub.ref(0, 174102);

procedure usecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation usecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 360} {:cexpr "usecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 362} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 175134);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 365} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 176166);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i3 := queue_delayed_work_on(8192, $p0, $p1, $i2);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 368} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 177198);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 369} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 370} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 371} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 372} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_beacon_get_tim: ref;

axiom ieee80211_beacon_get_tim == $sub.ref(0, 178230);

procedure ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p4 := external_alloc();
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const rtl8187_set_anaparam: ref;

axiom rtl8187_set_anaparam == $sub.ref(0, 179262);

procedure rtl8187_set_anaparam($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_set_anaparam($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i10: i32;
  var $i11: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 374} {:cexpr "rtl8187_set_anaparam:arg:rfon"} boogie_si_record_i1($i1);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i2);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13, $i14 := 1912618832, 1430783576;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10, $i11 := $i13, $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} rtl818x_iowrite8($p0, $p17, $sub.i8(0, 64));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i21 := rtl818x_ioread8($p0, $p20);
    call {:si_unique_call 377} {:cexpr "reg"} boogie_si_record_i8($i21);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 64);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    call {:si_unique_call 378} {:cexpr "reg"} boogie_si_record_i8($i24);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i24);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} rtl818x_iowrite8($p0, $p27, $i29);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 256)), $mul.ref(84, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} rtl818x_iowrite32($p0, $p32, $i11);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 256)), $mul.ref(96, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} rtl818x_iowrite32($p0, $p35, $i10);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i24);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 191);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    call {:si_unique_call 383} {:cexpr "reg"} boogie_si_record_i8($i48);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i48);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} rtl818x_iowrite8($p0, $p51, $i53);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} rtl818x_iowrite8($p0, $p56, 0);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 256)), $mul.ref(238, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32(0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} rtl818x_iowrite8($p0, $p43, $i45);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i13, $i14 := 1920941906, 1158219352;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8, $i9 := $sub.i32(0, 2079462383), $sub.i32(0, 1609831591);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i10, $i11 := $i8, $i9;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i8, $i9 := $sub.i32(0, 2046004462), $sub.i32(0, 1610610087);
    goto $bb5;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 180294);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_dequeue_18: ref;

axiom ldv_skb_dequeue_18 == $sub.ref(0, 181326);

procedure ldv_skb_dequeue_18($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4, $M.0, $CurrAddr;



implementation ldv_skb_dequeue_18($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p1 := ldv_skb_alloc();
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_kill_anchored_urbs: ref;

axiom usb_kill_anchored_urbs == $sub.ref(0, 182358);

procedure usb_kill_anchored_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_kill_anchored_urbs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 183390);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4, $M.0, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p0 := ldv_zalloc(232);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p5 := $M.3;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} ldv_set_add($p5, $p2);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 184422);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 391} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 392} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 393} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p4 := calloc(1, $i0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 395} __VERIFIER_assume($i7);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 185454);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i2 := $M.4;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.4;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i16 := $M.4;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p18, $p1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i19 := $M.4;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.4 := $i20;
    call {:si_unique_call 397} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.5, $p6);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 396} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i12 := $M.4;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1855;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 186486);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_init_hw: ref;

axiom rtl8187_init_hw == $sub.ref(0, 187518);

procedure rtl8187_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.5, $M.4;



implementation rtl8187_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i8;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i8;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i8;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} rtl8187_set_anaparam($p3, 1);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} rtl818x_iowrite16($p3, $p8, 0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} msleep(200);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} rtl818x_iowrite8($p3, $i2p.i64.ref(65048), 16);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} rtl818x_iowrite8($p3, $i2p.i64.ref(65048), 17);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} rtl818x_iowrite8($p3, $i2p.i64.ref(65048), 0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} msleep(200);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i9 := rtl8187_cmd_reset($p0);
    call {:si_unique_call 407} {:cexpr "res"} boogie_si_record_i32($i9);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} rtl8187_set_anaparam($p3, 1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} rtl818x_iowrite16($p3, $p14, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(145, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} rtl818x_iowrite8($p3, $p17, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} rtl818x_iowrite16($p3, $p20, 1024);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 256)), $mul.ref(145, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} rtl818x_iowrite8($p3, $p23, 1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} rtl818x_iowrite8($p3, $p26, 0);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} rtl818x_iowrite8($p3, $p29, $sub.i8(0, 64));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} rtl818x_iowrite16($p3, $i2p.i64.ref(65524), $sub.i16(0, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 256)), $mul.ref(82, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i33 := rtl818x_ioread8($p3, $p32);
    call {:si_unique_call 417} {:cexpr "reg"} boogie_si_record_i8($i33);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 63);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 418} {:cexpr "reg"} boogie_si_record_i8($i36);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 128);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    call {:si_unique_call 419} {:cexpr "reg"} boogie_si_record_i8($i39);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 256)), $mul.ref(82, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i39);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} rtl818x_iowrite8($p3, $p42, $i44);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} rtl818x_iowrite8($p3, $p47, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 256)), $mul.ref(72, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} rtl818x_iowrite32($p3, $p50, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(176, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} rtl818x_iowrite8($p3, $p53, 0);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(190, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} rtl818x_iowrite8($p3, $p56, 0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 256)), $mul.ref(52, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} rtl818x_iowrite8($p3, $p61, $sub.i8(0, 128));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} rtl818x_iowrite16($p3, $p65, 499);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} rtl818x_iowrite16($p3, $p68, 0);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 256)), $mul.ref(145, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} rtl818x_iowrite8($p3, $p71, 0);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i72 := rtl818x_ioread8($p3, $i2p.i64.ref(65107));
    call {:si_unique_call 430} {:cexpr "reg"} boogie_si_record_i8($i72);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 128);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} rtl818x_iowrite8($p3, $i2p.i64.ref(65107), $i75);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} rtl818x_iowrite16($p3, $p78, 1024);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 256)), $mul.ref(145, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} rtl818x_iowrite8($p3, $p81, 32);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} rtl818x_iowrite8($p3, $p84, 0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} rtl818x_iowrite16($p3, $p87, 128);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} rtl818x_iowrite16($p3, $p90, 128);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} rtl818x_iowrite16($p3, $p93, 128);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} msleep(100);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 256)), $mul.ref(140, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} rtl818x_iowrite32($p3, $p96, 688136);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} rtl818x_iowrite16($p3, $p100, $sub.i16(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 256)), $mul.ref(136, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} rtl818x_iowrite32($p3, $p103, 1048644);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} rtl818x_iowrite8($p3, $p106, $sub.i8(0, 64));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} rtl818x_iowrite8($p3, $p109, 68);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} rtl818x_iowrite8($p3, $p112, 0);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} rtl818x_iowrite16($p3, $p115, 8183);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} msleep(100);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(8, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    call {:si_unique_call 447} devirtbounce($p119, $p0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} rtl818x_iowrite16($p3, $p123, 499);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i127 := rtl818x_ioread8($p3, $p126);
    call {:si_unique_call 450} {:cexpr "tmp"} boogie_si_record_i8($i127);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 254);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    call {:si_unique_call 451} {:cexpr "reg"} boogie_si_record_i8($i130);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i130);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i135 := $or.i32($i134, 1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i135);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} rtl818x_iowrite8($p3, $p133, $i136);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} rtl818x_iowrite16($p3, $i2p.i64.ref(65534), 16);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 256)), $mul.ref(252, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} rtl818x_iowrite8($p3, $p140, $sub.i8(0, 128));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} rtl818x_iowrite8($p3, $i2p.i64.ref(65535), 96);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i130);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i8($i144);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} rtl818x_iowrite8($p3, $p143, $i145);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const rtl8187b_init_hw: ref;

axiom rtl8187b_init_hw == $sub.ref(0, 188550);

procedure rtl8187b_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.5, $M.4;



implementation rtl8187b_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} rtl8187_set_anaparam($p3, 1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} rtl818x_iowrite8($p3, $i2p.i64.ref(65377), 16);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i4 := rtl818x_ioread8($p3, $i2p.i64.ref(65378));
    call {:si_unique_call 460} {:cexpr "reg"} boogie_si_record_i8($i4);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 223);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} rtl818x_iowrite8($p3, $i2p.i64.ref(65378), $i7);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i4);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 32);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} rtl818x_iowrite8($p3, $i2p.i64.ref(65378), $i10);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i11 := rtl8187_cmd_reset($p0);
    call {:si_unique_call 464} {:cexpr "res"} boogie_si_record_i32($i11);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} rtl8187_set_anaparam($p3, 1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} rtl818x_iowrite16($p3, $i2p.i64.ref(65332), 4095);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 256)), $mul.ref(188, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i17 := rtl818x_ioread8($p3, $p16);
    call {:si_unique_call 468} {:cexpr "reg"} boogie_si_record_i8($i17);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 2);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 469} {:cexpr "reg"} boogie_si_record_i8($i20);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 256)), $mul.ref(188, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i20);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} rtl818x_iowrite8($p3, $p23, $i25);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65504), 4095, 1);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65506), 0, 1);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65492), $sub.i16(0, 1), 1);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} rtl818x_iowrite8($p3, $p28, $sub.i8(0, 64));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 256)), $mul.ref(82, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i32 := rtl818x_ioread8($p3, $p31);
    call {:si_unique_call 476} {:cexpr "reg"} boogie_si_record_i8($i32);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 256)), $mul.ref(82, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i36 := $sext.i8.i32($i32);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 63);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, $sub.i32(0, 128));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} rtl818x_iowrite8($p3, $p35, $i41);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} rtl818x_iowrite8($p3, $p44, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 256)), $mul.ref(176, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} rtl818x_iowrite8($p3, $p47, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65520), 50, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65521), 50, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65522), 0, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65523), 0, 0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65524), 50, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65525), 67, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65526), 0, 0);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65527), 0, 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65528), 70, 0);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65529), $sub.i8(0, 92), 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65530), 0, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65531), 0, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65532), $sub.i8(0, 106), 0);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65533), $sub.i8(0, 92), 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65534), 0, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65535), 0, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65368), 75, 1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65369), 0, 1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65370), 75, 1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65371), 0, 1);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65376), 75, 1);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65377), 9, 1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65378), 75, 1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65379), 9, 1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65486), 15, 1);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65487), 0, 1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65520), 78, 1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65521), 1, 1);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65522), 2, 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65523), 3, 1);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65524), 4, 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65525), 5, 1);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65526), 6, 1);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65527), 7, 1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65528), 8, 1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65358), 0, 2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65292), 4, 2);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65313), 97, 2);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65314), 104, 2);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65315), 111, 2);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65316), 118, 2);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65317), 125, 2);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65318), $sub.i8(0, 124), 2);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65319), $sub.i8(0, 115), 2);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65357), 8, 2);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65360), 5, 2);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65361), $sub.i8(0, 11), 2);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65362), 4, 2);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65363), $sub.i8(0, 96), 2);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65364), 31, 2);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65365), 35, 2);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65366), 69, 2);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65367), 103, 2);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65368), 8, 2);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65369), 8, 2);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65370), 8, 2);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65371), 8, 2);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65376), 8, 2);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65377), 8, 2);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65378), 8, 2);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65379), 8, 2);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65380), $sub.i8(0, 49), 2);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65371), 64, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65412), $sub.i8(0, 120), 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65413), 36, 0);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65416), 84, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65419), $sub.i8(0, 72), 0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65420), 7, 0);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65421), 0, 0);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65428), 27, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65429), 18, 0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65430), 0, 0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65431), 6, 0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65437), 26, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65439), 16, 0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65460), 34, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65470), $sub.i8(0, 128), 0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65499), 0, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65518), 0, 0);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65356), 0, 2);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65439), 0, 3);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65420), 1, 0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65421), 16, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65422), 8, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65423), 0, 0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 256)), $mul.ref(232, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} rtl818x_iowrite16($p3, $p50, $sub.i16(0, 1456));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(226, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} rtl818x_iowrite16($p3, $p53, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} rtl818x_iowrite32_idx($p3, $i2p.i64.ref(65520), 0, 1);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} rtl818x_iowrite32_idx($p3, $i2p.i64.ref(65524), 0, 1);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65528), 0, 1);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(140, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} rtl818x_iowrite32($p3, $p56, 16385);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65394), 22170, 2);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} rtl818x_iowrite16($p3, $p59, 1152);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} rtl818x_iowrite16($p3, $p62, 9352);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} rtl818x_iowrite16($p3, $p65, 8191);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} msleep(100);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(8, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    call {:si_unique_call 493} devirtbounce($p69, $p0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32(12);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} rtl818x_iowrite8($p3, $p72, $i74);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} rtl818x_iowrite16($p3, $p79, $sub.i16(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} rtl818x_iowrite8($p3, $i2p.i64.ref(65089), $sub.i8(0, 12));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} rtl818x_iowrite8($p3, $i2p.i64.ref(65088), 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} rtl818x_iowrite8($p3, $i2p.i64.ref(65090), 0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} rtl818x_iowrite8($p3, $i2p.i64.ref(65090), 1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} rtl818x_iowrite8($p3, $i2p.i64.ref(65088), 15);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} rtl818x_iowrite8($p3, $i2p.i64.ref(65090), 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} rtl818x_iowrite8($p3, $i2p.i64.ref(65090), 1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i80 := rtl818x_ioread8($p3, $i2p.i64.ref(65499));
    call {:si_unique_call 504} {:cexpr "reg"} boogie_si_record_i8($i80);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, 4);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} rtl818x_iowrite8($p3, $i2p.i64.ref(65499), $i83);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65394), 23034, 3);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65396), 22994, 3);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65398), 22994, 3);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65400), 6650, 3);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65402), 6650, 3);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65404), 208, 3);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} rtl818x_iowrite8($p3, $i2p.i64.ref(65377), 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65408), 15, 1);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65411), 3, 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} rtl818x_iowrite8($p3, $i2p.i64.ref(65498), 16);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} rtl818x_iowrite8_idx($p3, $i2p.i64.ref(65357), 8, 2);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 256)), $mul.ref(148, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} rtl818x_iowrite32($p3, $p86, 100676123);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} rtl818x_iowrite16_idx($p3, $i2p.i64.ref(65516), 2048, 1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3946, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 9);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, 2);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref(1, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 2);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref(2, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 7);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3947, 1)), $mul.ref(3, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, 3);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 256)), $mul.ref(191, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} rtl818x_iowrite8($p3, $p98, 0);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 256)), $mul.ref(88, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} rtl818x_iowrite8($p3, $p101, 16);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const init_usb_anchor: ref;

axiom init_usb_anchor == $sub.ref(0, 189582);

procedure init_usb_anchor($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_usb_anchor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var vslice_dummy_var_59: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 606} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p3, 0, 184, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} INIT_LIST_HEAD($p4);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} __init_waitqueue_head($p5, .str.32, $p1);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_59 := spinlock_check($p6);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __raw_spin_lock_init($p10, .str.33, $p2);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_init_urbs: ref;

axiom rtl8187_init_urbs == $sub.ref(0, 190614);

procedure rtl8187_init_urbs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.4;



implementation rtl8187_init_urbs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i7: i32;
  var $p12: ref;
  var $i13: i32;
  var $p47: ref;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3848, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i5 := skb_queue_len($p4);
    call {:si_unique_call 612} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i6 := $ule.i32($i5, 31);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i46 := $i7;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $p11, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $p27, $p28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i43, $i44, $i45 := rtl8187_init_urbs_loop_$bb4($p0, $p3, $p4, $p8, $i9, $i10, $p11, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $p27, $p28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i43, $i44, $i45);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p8 := __dev_alloc_skb(2500, 208);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p11 := $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p14 := usb_alloc_urb(0, 208);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p17 := $p8;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p18 := skb_tail_pointer($p8);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 3 else 1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i26 := __create_pipe($p20, $i25);
    call {:si_unique_call 619} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i26, $sub.i32(0, 1073741696));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p8);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} usb_fill_bulk_urb($p14, $p28, $i29, $p18, 2500, rtl8187_rx_cb, $p30);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p8, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p14);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3848, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} skb_queue_tail($p35, $p8);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} usb_anchor_urb($p14, $p36);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i37 := usb_submit_urb($p14, 208);
    call {:si_unique_call 624} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} usb_free_urb($p14);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p39, $p40, $i41 := $p8, $p14, $i37;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i43 := skb_queue_len($p4);
    call {:si_unique_call 629} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i44 := $ule.i32($i43, 31);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i45 := $i37;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i7 := $i45;
    goto $bb3;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb16_dummy;

  $bb13:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3848, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} skb_unlink($p39, $p42);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} usb_unanchor_urb($p40);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p12, $i13 := $p39, $i41;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} ldv_kfree_skb_16($p12);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} usb_kill_anchored_urbs($p47);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i46 := $i13;
    goto $bb19;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p12, $i13 := $p17, $sub.i32(0, 12);
    goto $bb8;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p12, $i13 := $p11, $sub.i32(0, 12);
    goto $bb8;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rtl8187b_init_status_urb: ref;

axiom rtl8187b_init_status_urb == $sub.ref(0, 191646);

procedure rtl8187b_init_status_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187b_init_status_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p4 := usb_alloc_urb(0, 208);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i10 := __create_pipe($p9, 9);
    call {:si_unique_call 632} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, $sub.i32(0, 1073741696));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(0, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} usb_fill_bulk_urb($p4, $p12, $i13, $p17, 8, rtl8187b_status_cb, $p18);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} usb_anchor_urb($p4, $p19);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i20 := usb_submit_urb($p4, 208);
    call {:si_unique_call 636} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} usb_free_urb($p4);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} usb_unanchor_urb($p4);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const rtl8187_work: ref;

axiom rtl8187_work == $sub.ref(0, 192678);

procedure rtl8187_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.4, $CurrAddr;



implementation rtl8187_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i8;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1504), 4296));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1504), 4296)), $mul.ref(1728, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1504), 4296)), $mul.ref(24, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} mutex_lock_nested($p5, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i6 := rtl818x_ioread16($p2, $i2p.i64.ref(65530));
    call {:si_unique_call 641} {:cexpr "tmp"} boogie_si_record_i16($i6);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1504), 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i9 := skb_queue_len($p8);
    call {:si_unique_call 643} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 645} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i6);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($u0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, $i17);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 647} {:cexpr "tmp___2"} boogie_si_record_i64($i21);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i6);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($u0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i23, $i24);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i26 := $sdiv.i32($i25, $i15);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    call {:si_unique_call 648} {:cexpr "avg_retry"} boogie_si_record_i16($i27);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1504), 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i30 := skb_queue_len($p29);
    call {:si_unique_call 650} {:cexpr "tmp___3"} boogie_si_record_i32($i30);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1504), 4296)), $mul.ref(24, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} mutex_unlock($p64);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p33, $p34, $p35, $i36, $i37, $i38, $i39, $p40, $p41, $p44, $i45, $i46, $i47, $i48, $p49, $p50, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $p61, $i62, $i63 := rtl8187_work_loop_$bb10($p1, $p4, $i27, $p29, $p33, $p34, $p35, $i36, $i37, $i38, $i39, $p40, $p41, $p44, $i45, $i46, $i47, $i48, $p49, $p50, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $p61, $i62, $i63);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1504), 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p34 := ldv_skb_dequeue_17($p33);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p35 := IEEE80211_SKB_CB($p34);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i16.i8($i27);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p35, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p41, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i46 := $and.i8($i39, 31);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i45, $sub.i8(0, 32));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i48 := $or.i8($i47, $i46);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i48);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p35, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i55 := $and.i8($i54, 31);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 7);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ieee80211_tx_status_irqsafe($p4, $p34);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i62 := skb_queue_len($p29);
    call {:si_unique_call 655} {:cexpr "tmp___3"} boogie_si_record_i32($i62);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i63 == 1);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb15_dummy;

  $bb12:
    assume $i57 == 1;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p35, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, $sub.i32(0, 513));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p35, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const rtl818x_ioread16: ref;

axiom rtl818x_ioread16 == $sub.ref(0, 193710);

procedure rtl818x_ioread16($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation rtl818x_ioread16($p0: ref, $p1: ref) returns ($r: i16)
{
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i2 := rtl818x_ioread16_idx($p0, $p1, 0);
    call {:si_unique_call 658} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 194742);

procedure skb_queue_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_skb_dequeue_17: ref;

axiom ldv_skb_dequeue_17 == $sub.ref(0, 195774);

procedure ldv_skb_dequeue_17($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4, $M.0, $CurrAddr;



implementation ldv_skb_dequeue_17($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p1 := ldv_skb_alloc();
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IEEE80211_SKB_CB: ref;

axiom IEEE80211_SKB_CB == $sub.ref(0, 196806);

procedure IEEE80211_SKB_CB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_CB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_tx_status_irqsafe: ref;

axiom ieee80211_tx_status_irqsafe == $sub.ref(0, 197838);

procedure ieee80211_tx_status_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_tx_status_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_ioread16_idx: ref;

axiom rtl818x_ioread16_idx == $sub.ref(0, 198870);

procedure rtl818x_ioread16_idx($p0: ref, $p1: ref, $i2: i8) returns ($r: i16);
  free requires assertsPassed;



implementation rtl818x_ioread16_idx($p0: ref, $p1: ref, $i2: i8) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $p26: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} {:cexpr "rtl818x_ioread16_idx:arg:idx"} boogie_si_record_i8($i2);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} mutex_lock_nested($p3, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i6 := __create_pipe($p5, 0);
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i6, $sub.i32(0, 2147483520));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i16($i10);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i2);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 3);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_60 := usb_control_msg($p8, $i9, 5, $sub.i8(0, 64), $i13, $i16, $p20, 2, 125);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    call {:si_unique_call 665} {:cexpr "val"} boogie_si_record_i16($i25);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} mutex_unlock($p26);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;
}



const rtl8187b_status_cb: ref;

axiom rtl8187b_status_cb == $sub.ref(0, 199902);

procedure rtl8187b_status_cb($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187b_status_cb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i1;
  var $i26: i8;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p46: ref;
  var $p61: ref;
  var $p45: ref;
  var $p56: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p70: ref;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i8;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i8;
  var $i87: i8;
  var $i88: i8;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 668} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    call {:si_unique_call 669} {:cexpr "val"} boogie_si_record_i64($i17);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i18 := $lshr.i64($i17, 30);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 3);
    call {:si_unique_call 670} {:cexpr "cmd_type"} boogie_si_record_i32($i20);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} usb_anchor_urb($p0, $p92);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i93 := usb_submit_urb($p0, 32);
    call {:si_unique_call 683} {:cexpr "tmp___2"} boogie_si_record_i32($i93);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i94 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} usb_unanchor_urb($p0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i17);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 255);
    call {:si_unique_call 671} {:cexpr "pkt_rc"} boogie_si_record_i32($i23);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i17, 32768);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 672} {:cexpr "tok"} boogie_si_record_i8($i26);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i64($i17, 16);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 4095);
    call {:si_unique_call 673} {:cexpr "seq_no"} boogie_si_record_i32($i29);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1)), $mul.ref(24, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p33 := spinlock_check($p32);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i34 := _raw_spin_lock_irqsave($p33);
    call {:si_unique_call 676} {:cexpr "flags"} boogie_si_record_i64($i34);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p38);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i42, $i43);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p45 := $p38;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p56 := $p45;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p56);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i65, $i66);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1)), $mul.ref(24, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} spin_unlock_irqrestore($p91, $i34);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i67 == 1;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p68 := IEEE80211_SKB_CB($p56);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} __skb_unlink($p56, $p70);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i26);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i23);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, 1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p68, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p81, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i86 := $and.i8($i79, 31);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i87 := $and.i8($i85, $sub.i8(0, 32));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i88 := $or.i8($i87, $i86);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, $i88);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ieee80211_tx_status_irqsafe($p3, $p56);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i71 == 1;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p68, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 512);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p68, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p46 := $p38;
    goto $bb10;

  $bb10:
    call $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $p55, $p57, $p58, $i59, $i60, $p46, $p61 := rtl8187b_status_cb_loop_$bb10($i29, $i42, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $p55, $p57, $p58, $i59, $i60, $p46, $p61);
    goto $bb10_last;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 4095);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, $i29);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p55 := $p46;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p46, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i42, $i59);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p61 := $p58;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p45 := $p61;
    goto $bb9;

  $bb16:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $p46 := $p58;
    goto $bb16_dummy;

  $bb12:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p56 := $p55;
    goto $bb14;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2694;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 200934);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 686} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 201966);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 202998);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 687} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 688} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 204030);

procedure __skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p9);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p7);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 205062);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 206094);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    return;
}



const __dev_alloc_skb: ref;

axiom __dev_alloc_skb == $sub.ref(0, 207126);

procedure __dev_alloc_skb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __dev_alloc_skb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} {:cexpr "__dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    call {:si_unique_call 693} {:cexpr "__dev_alloc_skb:arg:gfp_mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p2 := __netdev_alloc_skb($0.ref, $i0, $i1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_tail_pointer: ref;

axiom skb_tail_pointer == $sub.ref(0, 208158);

procedure skb_tail_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_tail_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const rtl8187_rx_cb: ref;

axiom rtl8187_rx_cb == $sub.ref(0, 209190);

procedure rtl8187_rx_cb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, $M.4;



implementation rtl8187_rx_cb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i75: i32;
  var $i76: i32;
  var $i96: i8;
  var $p97: ref;
  var $i98: i8;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $p104: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i16;
  var $p111: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i8;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $i146: i32;
  var $i147: i64;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var vslice_dummy_var_61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 0);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(22, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(25, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(27, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(29, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(0, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(1, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(2, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(3, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3848, 1)), $mul.ref(24, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p36 := spinlock_check($p35);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i37 := _raw_spin_lock_irqsave($p36);
    call {:si_unique_call 698} {:cexpr "f"} boogie_si_record_i64($i37);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3848, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} __skb_unlink($p4, $p38);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3848, 1)), $mul.ref(24, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} spin_unlock_irqrestore($p40, $i37);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_61 := skb_put($p4, $i42);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 703} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i54 == 1);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p77 := skb_tail_pointer($p4);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p78, $mul.ref($sub.ref(0, 20), 24)), $mul.ref(0, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    call {:si_unique_call 709} {:cexpr "flags"} boogie_si_record_i32($i81);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p78, $mul.ref($sub.ref(0, 20), 24)), $mul.ref(18, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i85 := $udiv.i32($i84, 2);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32(14, $i85);
    call {:si_unique_call 710} {:cexpr "signal"} boogie_si_record_i32($i86);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p78, $mul.ref($sub.ref(0, 20), 24)), $mul.ref(17, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i90 := $ashr.i32($i89, 7);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(27, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i91);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p78, $mul.ref($sub.ref(0, 20), 24)), $mul.ref(8, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p95, $i94);
    assume {:verifier.code 0} true;
    $i75, $i76 := $i86, $i81;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i75);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, $i96);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i75);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3944, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i98);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i100 := $lshr.i32($i76, 20);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 15);
    call {:si_unique_call 711} {:cexpr "rate"} boogie_si_record_i32($i101);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i76, 4095);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} skb_trim($p4, $i102);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i101);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, $i103);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.0, $p109);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p111, $i110);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, $i118);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i122 := $or.i32($i121, 128);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i122);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i76, 33554432);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i76, 8192);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i136 := $ugt.i64(40, 63);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i136 == 1);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p140 := IEEE80211_SKB_RXCB($p4);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p1);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 716} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p141, $p142, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} ieee80211_rx_irqsafe($p8, $p4);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p143 := ldv_dev_alloc_skb_15(2500);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i145 := $eq.i64($i144, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i146 := $zext.i1.i32($i145);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i146);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i148 := ldv__builtin_expect($i147, 0);
    call {:si_unique_call 720} {:cexpr "tmp___5"} boogie_si_record_i64($i148);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p143, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p152, $p0);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p151, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p153, $p8);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p154 := skb_tail_pointer($p143);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, $p154);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p157, $p143);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3848, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} skb_queue_tail($p158, $p143);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} usb_anchor_urb($p0, $p159);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i160 := usb_submit_urb($p0, 32);
    call {:si_unique_call 725} {:cexpr "tmp___7"} boogie_si_record_i32($i160);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i161 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} usb_unanchor_urb($p0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3848, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} skb_unlink($p143, $p162);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} dev_kfree_skb_irq($p143);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i149 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i136 == 1;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p137 := IEEE80211_SKB_RXCB($p4);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 714} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p138, $p139, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i131 == 1;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i133, 32);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i134);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i125 == 1;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i128 := $or.i32($i127, 256);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i128);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i54 == 1;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p55 := skb_tail_pointer($p4);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p56, $mul.ref($sub.ref(0, 16), 16)), $mul.ref(0, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    call {:si_unique_call 706} {:cexpr "flags"} boogie_si_record_i32($i59);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p56, $mul.ref($sub.ref(0, 16), 16)), $mul.ref(6, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i62, 27);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i64 := $ashr.i32($i63, 6);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($sub.i32(0, 4), $i64);
    call {:si_unique_call 707} {:cexpr "signal"} boogie_si_record_i32($i65);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p56, $mul.ref($sub.ref(0, 16), 16)), $mul.ref(5, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i69 := $ashr.i32($i68, 7);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(27, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i70);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p56, $mul.ref($sub.ref(0, 16), 16)), $mul.ref(8, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, $i73);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i75, $i76 := $i65, $i59;
    goto $bb7;

  $bb1:
    assume $i50 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} dev_kfree_skb_irq($p4);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_queue_tail: ref;

axiom skb_queue_tail == $sub.ref(0, 210222);

procedure skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_queue_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    return;
}



const skb_unlink: ref;

axiom skb_unlink == $sub.ref(0, 211254);

procedure skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_unlink($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kfree_skb_16: ref;

axiom ldv_kfree_skb_16 == $sub.ref(0, 212286);

procedure ldv_kfree_skb_16($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4;



implementation ldv_kfree_skb_16($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} ldv_skb_free($p1);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 213318);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p1 := $M.3;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ldv_set_remove($p1, $p2);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 214350);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i2 := $M.4;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 732} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i18 := $M.4;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.4;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $M.4 := $i31;
    call {:si_unique_call 734} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.5, $p22);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p26, $p23);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 733} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i28 := $M.4;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.5, $p7);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 731} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i14 := $M.4;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3083;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 215382);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p2 := external_alloc();
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_kfree_skb_irq: ref;

axiom dev_kfree_skb_irq == $sub.ref(0, 216414);

procedure dev_kfree_skb_irq($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} __dev_kfree_skb_irq($p0, 1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    return;
}



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 217446);

procedure skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation skb_trim($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} {:cexpr "skb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    return;
}



const IEEE80211_SKB_RXCB: ref;

axiom IEEE80211_SKB_RXCB == $sub.ref(0, 218478);

procedure IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_rx_irqsafe: ref;

axiom ieee80211_rx_irqsafe == $sub.ref(0, 219510);

procedure ieee80211_rx_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_rx_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_alloc_skb_15: ref;

axiom ldv_dev_alloc_skb_15 == $sub.ref(0, 220542);

procedure ldv_dev_alloc_skb_15($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4, $M.0, $CurrAddr;



implementation ldv_dev_alloc_skb_15($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "ldv_dev_alloc_skb_15:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p1 := ldv_skb_alloc();
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __dev_kfree_skb_irq: ref;

axiom __dev_kfree_skb_irq == $sub.ref(0, 221574);

procedure __dev_kfree_skb_irq($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_irq($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} {:cexpr "__dev_kfree_skb_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    return;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 222606);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 743} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p3 := external_alloc();
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 223638);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 224670);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 225702);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_cmd_reset: ref;

axiom rtl8187_cmd_reset == $sub.ref(0, 226734);

procedure rtl8187_cmd_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_cmd_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i26: i32;
  var $i27: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i36: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i56: i32;
  var $i57: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i66: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i45: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i7 := rtl818x_ioread8($p3, $p6);
    call {:si_unique_call 746} {:cexpr "reg"} boogie_si_record_i8($i7);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 747} {:cexpr "reg"} boogie_si_record_i8($i10);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 16);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 748} {:cexpr "reg"} boogie_si_record_i8($i13);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i13);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} rtl818x_iowrite8($p3, $p16, $i18);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} msleep(2);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i22 := rtl818x_ioread8($p3, $p21);
    call {:si_unique_call 752} {:cexpr "tmp"} boogie_si_record_i8($i22);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i26 := 10;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i25 == 1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i27 := 10;
    goto $bb4;

  $bb4:
    call $i28, $p29, $p30, $i31, $i32, $i33, $i34, $i35, $i27, $i37, $i38, $i39 := rtl8187_cmd_reset_loop_$bb4($p3, $p19, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $i35, $i27, $i37, $i38, $i39);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i27, 1);
    call {:si_unique_call 756} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i28, $i39 := $i37, $i37;
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i36 := $i39;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i36, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} rtl818x_iowrite8($p3, $p48, 64);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} msleep(4);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i52 := rtl818x_ioread8($p3, $p51);
    call {:si_unique_call 761} {:cexpr "tmp___0"} boogie_si_record_i8($i52);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 192);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i56 := 10;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i55 == 1);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i57 := 10;
    goto $bb19;

  $bb19:
    call $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $i57, $i67, $i68, $i69 := rtl8187_cmd_reset_loop_$bb19($p3, $p49, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $i57, $i67, $i68, $i69);
    goto $bb19_last;

  $bb24:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i57, 1);
    call {:si_unique_call 765} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i58, $i69 := $i67, $i67;
    assume true;
    goto $bb20, $bb25;

  $bb25:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i66 := $i69;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i66, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb27:
    assume $i70 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_63 := dev_err.ref.ref($p73, .str.31);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 110);
    goto $bb14;

  $bb20:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} msleep(4);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p49);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i61 := rtl818x_ioread8($p3, $p60);
    call {:si_unique_call 764} {:cexpr "tmp___0"} boogie_si_record_i8($i61);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 192);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i65 := $i58;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i58;
    goto $bb22_dummy;

  $bb21:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i56 := $i65;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i66 := $i56;
    goto $bb23;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb17;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_62 := dev_err.ref.ref($p43, .str.30);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 110);
    goto $bb14;

  $bb5:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} msleep(2);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p19);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i31 := rtl818x_ioread8($p3, $p30);
    call {:si_unique_call 755} {:cexpr "tmp"} boogie_si_record_i8($i31);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i35 := $i28;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb7_dummy;

  $bb6:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i26 := $i35;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i36 := $i26;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 227766);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 767} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 768} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_kfree_skb_13: ref;

axiom ldv_kfree_skb_13 == $sub.ref(0, 228798);

procedure ldv_kfree_skb_13($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4;



implementation ldv_kfree_skb_13($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} ldv_skb_free($p1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_get_tx_rate: ref;

axiom ieee80211_get_tx_rate == $sub.ref(0, 229830);

procedure ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $p57: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 770} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i12);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 772} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i12, 0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 780} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 1768)), $mul.ref(216, 1)), $mul.ref($i40, 8));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i64($i55);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p47, $mul.ref($i56, 12));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p36 := $p57;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $r := $p36;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb12;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(1);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 773} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 775} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 778} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} warn_slowpath_null(.str.36, 1807);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ieee80211_has_morefrags: ref;

axiom ieee80211_has_morefrags == $sub.ref(0, 230862);

procedure ieee80211_has_morefrags($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_has_morefrags($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} {:cexpr "ieee80211_has_morefrags:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1024);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_get_rts_cts_rate: ref;

axiom ieee80211_get_rts_cts_rate == $sub.ref(0, 231894);

procedure ieee80211_get_rts_cts_rate($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_rts_cts_rate($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $p29: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 1768)), $mul.ref(216, 1)), $mul.ref($i14, 8));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i64($i27);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p21, $mul.ref($i28, 12));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p10 := $p29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;
}



const ieee80211_rts_duration: ref;

axiom ieee80211_rts_duration == $sub.ref(0, 232926);

procedure ieee80211_rts_duration($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i16);
  free requires assertsPassed;



implementation ieee80211_rts_duration($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i16)
{
  var $i4: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 782} {:cexpr "ieee80211_rts_duration:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 783} $i4 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 784} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i4);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_ctstoself_duration: ref;

axiom ieee80211_ctstoself_duration == $sub.ref(0, 233958);

procedure ieee80211_ctstoself_duration($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i16);
  free requires assertsPassed;



implementation ieee80211_ctstoself_duration($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i16)
{
  var $i4: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 785} {:cexpr "ieee80211_ctstoself_duration:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 786} $i4 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 787} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i4);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_push: ref;

axiom skb_push == $sub.ref(0, 234990);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p2 := external_alloc();
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_generic_frame_duration: ref;

axiom ieee80211_generic_frame_duration == $sub.ref(0, 236022);

procedure ieee80211_generic_frame_duration($p0: ref, $p1: ref, $i2: i32, $i3: i64, $p4: ref) returns ($r: i16);
  free requires assertsPassed;



implementation ieee80211_generic_frame_duration($p0: ref, $p1: ref, $i2: i32, $i3: i64, $p4: ref) returns ($r: i16)
{
  var $i5: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 790} {:cexpr "ieee80211_generic_frame_duration:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 791} {:cexpr "ieee80211_generic_frame_duration:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 792} $i5 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 793} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i5);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const skb_get_queue_mapping: ref;

axiom skb_get_queue_mapping == $sub.ref(0, 237054);

procedure skb_get_queue_mapping($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation skb_get_queue_mapping($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rtl8187_tx_cb: ref;

axiom rtl8187_tx_cb == $sub.ref(0, 238086);

procedure rtl8187_tx_cb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.5, $M.4;



implementation rtl8187_tx_cb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $p73: ref;
  var vslice_dummy_var_64: ref;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p5 := IEEE80211_SKB_CB($p4);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1 then 32 else 12);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_64 := skb_pull($p4, $i19);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} ieee80211_tx_info_clear_status($p5);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} skb_queue_tail($p72, $p4);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(1504, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} ieee80211_queue_delayed_work($p11, $p73, 0);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i70 == 1;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} ieee80211_tx_status_irqsafe($p11, $p4);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 4);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb3;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 512);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} skb_queue_tail($p33, $p4);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i36 := skb_queue_len($p35);
    call {:si_unique_call 800} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i36, 5);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p38, $p39, $p40, $p41, $p42, $p43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $p56, $p59, $p60, $i61, $i62, vslice_dummy_var_65 := rtl8187_tx_cb_loop_$bb11($p1, $p11, $p14, $p35, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $p56, $p59, $p60, $i61, $i62, vslice_dummy_var_65);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p38, .str.27);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p39, .str.37);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p40, .str.38);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p41, .str.39);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.10, $p43);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 252);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p43, $i46);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p47, 0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.11, $p48);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 802} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p60 := ldv_skb_dequeue_12($p59);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ieee80211_tx_status_irqsafe($p11, $p60);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i61 := skb_queue_len($p35);
    call {:si_unique_call 807} {:cexpr "tmp___1"} boogie_si_record_i32($i61);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i32($i61, 5);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb16_dummy;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p14, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} vslice_dummy_var_65 := __dynamic_dev_dbg.ref.ref.ref($p1, $p56, .str.39);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const ldv_kfree_skb_14: ref;

axiom ldv_kfree_skb_14 == $sub.ref(0, 239118);

procedure ldv_kfree_skb_14($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4;



implementation ldv_kfree_skb_14($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} ldv_skb_free($p1);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    return;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 240150);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p2 := external_alloc();
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_tx_info_clear_status: ref;

axiom ieee80211_tx_info_clear_status == $sub.ref(0, 241182);

procedure ieee80211_tx_info_clear_status($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ieee80211_tx_info_clear_status($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 32));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i7);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(1, 4)), $mul.ref(1, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 32));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i17);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 4)), $mul.ref(1, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, $sub.i8(0, 32));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i24);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(3, 4)), $mul.ref(1, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, $sub.i8(0, 32));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i31);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 814} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p10, 0, 24, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 242214);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 815} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 816} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_skb_dequeue_12: ref;

axiom ldv_skb_dequeue_12 == $sub.ref(0, 243246);

procedure ldv_skb_dequeue_12($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, $M.4, $M.0, $CurrAddr;



implementation ldv_skb_dequeue_12($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p1 := ldv_skb_alloc();
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_queue_delayed_work: ref;

axiom ieee80211_queue_delayed_work == $sub.ref(0, 244278);

procedure ieee80211_queue_delayed_work($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation ieee80211_queue_delayed_work($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} {:cexpr "ieee80211_queue_delayed_work:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 245310);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_probe: ref;

axiom rtl8187_probe == $sub.ref(0, 246342);

procedure rtl8187_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.17, $CurrAddr;



implementation rtl8187_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i16;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i1;
  var $i92: i8;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $i105: i16;
  var $p106: ref;
  var $i107: i64;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $i112: i16;
  var $p113: ref;
  var $p114: ref;
  var $i116: i16;
  var $i117: i32;
  var $i118: i32;
  var $i119: i16;
  var $p120: ref;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i16;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i16;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i16;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i8;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i16;
  var $i153: i8;
  var $i154: i32;
  var $i155: i8;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i1;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i1;
  var $i178: i1;
  var $i179: i1;
  var $i180: i1;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p182: ref;
  var $p174: ref;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i192: i16;
  var $i193: i32;
  var $i194: i32;
  var $i195: i16;
  var $p196: ref;
  var $p197: ref;
  var $i198: i16;
  var $i199: i32;
  var $i200: i32;
  var $i201: i16;
  var $p202: ref;
  var $p203: ref;
  var $i204: i16;
  var $i205: i32;
  var $i206: i32;
  var $i207: i16;
  var $p208: ref;
  var $p209: ref;
  var $i210: i16;
  var $i211: i32;
  var $i212: i32;
  var $i213: i16;
  var $p214: ref;
  var $p215: ref;
  var $i216: i16;
  var $i217: i32;
  var $i218: i32;
  var $i219: i16;
  var $p220: ref;
  var $i221: i16;
  var $i222: i32;
  var $i223: i32;
  var $i224: i16;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $i231: i16;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i64;
  var $i242: i1;
  var $p243: ref;
  var $i244: i8;
  var $i245: i32;
  var $i246: i1;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i8;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $p255: ref;
  var $p256: ref;
  var $i257: i8;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $p265: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i8;
  var $i274: i32;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i8;
  var $i281: i32;
  var $i283: i16;
  var $i284: i32;
  var $i285: i32;
  var $i286: i16;
  var $i287: i16;
  var $i288: i32;
  var $i289: i16;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $i34: i32;
  var $i16: i32;
  var $p293: ref;
  var $i294: i16;
  var $i295: i32;
  var $i296: i32;
  var $i297: i16;
  var $p298: ref;
  var $i299: i16;
  var $i300: i32;
  var $i301: i32;
  var $i302: i16;
  var $p303: ref;
  var $p304: ref;
  var $i305: i16;
  var $i306: i32;
  var $i307: i32;
  var $i308: i16;
  var $p309: ref;
  var $p191: ref;
  var $i310: i16;
  var $i311: i32;
  var $i312: i32;
  var $i313: i16;
  var $p314: ref;
  var $i315: i64;
  var $i317: i16;
  var $i318: i32;
  var $i319: i32;
  var $i320: i16;
  var $p321: ref;
  var $i322: i64;
  var $i324: i16;
  var $i325: i32;
  var $i326: i32;
  var $i327: i16;
  var $p328: ref;
  var $i329: i64;
  var $i331: i16;
  var $i332: i32;
  var $i333: i32;
  var $i334: i16;
  var $p335: ref;
  var $i336: i64;
  var $p115: ref;
  var $i337: i16;
  var $i338: i32;
  var $i339: i32;
  var $i340: i16;
  var $p341: ref;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: ref;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p5 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p8 := interface_to_usbdev($p0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    call {:si_unique_call 827} {:cexpr "product_id"} boogie_si_record_i16($i11);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p12 := ieee80211_alloc_hw(4416, rtl8187_ops);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 1);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i24);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p26 := kmalloc(64, 208);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p26);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} __mutex_init($p35, .str.13, $p6);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} SET_IEEE80211_DEV($p12, $p36);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p12);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} usb_set_intfdata($p0, $p37);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p8);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_67 := usb_get_dev($p8);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3848, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} skb_queue_head_init($p40);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i64(896, 63);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(192, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 838} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p45, rtl818x_channels, 896, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i64(144, 63);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1088, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 840} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p50, rtl818x_rates, 144, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $i2p.i64.ref(65280));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1232, 1)), $mul.ref(16, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(192, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1232, 1)), $mul.ref(0, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p54);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1232, 1)), $mul.ref(20, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 14);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1088, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1232, 1)), $mul.ref(8, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p60);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1232, 1)), $mul.ref(24, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 12);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1232, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p68, $mul.ref(0, 1768)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p66);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 70);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(109, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(111, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 7);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p75, $p12);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p76, rtl8187_eeprom_register_read);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p77, rtl8187_eeprom_register_write);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 256)), $mul.ref(68, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i81 := rtl818x_ioread32($p19, $p80);
    call {:si_unique_call 842} {:cexpr "tmp___1"} boogie_si_record_i32($i81);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 64);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i83 == 1);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p85, 6);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} rtl818x_iowrite8($p19, $p88, $sub.i8(0, 64));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} __const_udelay(42950);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p5);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} eeprom_93cx6_multiread($p2, 7, $p89, 3);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p5);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i91 := is_valid_ether_addr($p90);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i8($i91);
    call {:si_unique_call 847} {:cexpr "tmp___2"} boogie_si_record_i8($i92);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i92);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p5);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} SET_IEEE80211_PERM_ADDR($p12, $p98);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(192, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} eeprom_93cx6_read($p2, 22, $p3);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.16, $p3);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 255);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i16($i104);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p100, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p106, $i105);
    $i107 := $add.i64(1, 1);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.16, $p3);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i111 := $ashr.i32($i110, 8);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p100, $mul.ref(1, 64)), $mul.ref(6, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p113, $i112);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} eeprom_93cx6_read($p2, 23, $p3);
    $i315 := $add.i64($i107, 1);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i317 := $load.i16($M.16, $p3);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i318 := $zext.i16.i32($i317);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i319 := $and.i32($i318, 255);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i320 := $trunc.i32.i16($i319);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p100, $mul.ref($i107, 64)), $mul.ref(6, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p321, $i320);
    $i322 := $add.i64($i315, 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i324 := $load.i16($M.16, $p3);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i325 := $zext.i16.i32($i324);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i326 := $ashr.i32($i325, 8);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i32.i16($i326);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p100, $mul.ref($i315, 64)), $mul.ref(6, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p328, $i327);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} eeprom_93cx6_read($p2, 24, $p3);
    $i329 := $add.i64($i322, 1);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i331 := $load.i16($M.16, $p3);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i332 := $zext.i16.i32($i331);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i333 := $and.i32($i332, 255);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i334 := $trunc.i32.i16($i333);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p100, $mul.ref($i322, 64)), $mul.ref(6, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p335, $i334);
    $i336 := $add.i64($i329, 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p100, $mul.ref($i336, 64));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i337 := $load.i16($M.16, $p3);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i338 := $zext.i16.i32($i337);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i339 := $ashr.i32($i338, 8);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i16($i339);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p100, $mul.ref($i329, 64)), $mul.ref(6, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p341, $i340);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} eeprom_93cx6_read($p2, 61, $p3);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p115, $mul.ref(1, 64));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.16, $p3);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 255);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p115, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p120, $i119);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p114, $mul.ref(1, 64));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.16, $p3);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i124 := $ashr.i32($i123, 8);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p114, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p126, $i125);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} eeprom_93cx6_read($p2, 62, $p3);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($p121, $mul.ref(1, 64));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i305 := $load.i16($M.16, $p3);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i306 := $zext.i16.i32($i305);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i307 := $and.i32($i306, 255);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i16($i307);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p121, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p309, $i308);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p304, $mul.ref(1, 64));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i310 := $load.i16($M.16, $p3);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i311 := $zext.i16.i32($i310);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i312 := $ashr.i32($i311, 8);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i32.i16($i312);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p304, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p314, $i313);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3840, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} eeprom_93cx6_read($p2, 5, $p127);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i131 := rtl818x_ioread8($p19, $p130);
    call {:si_unique_call 857} {:cexpr "tmp___8"} boogie_si_record_i8($i131);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i16($i131);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i132);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 65534);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.17 := $store.i16($M.17, $p4, $i135);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i139 := $load.i16($M.17, $p4);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i16.i8($i139);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i142 := $or.i32($i141, 1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i8($i142);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} rtl818x_iowrite8($p19, $p138, $i143);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i144 := rtl818x_ioread8($p19, $i2p.i64.ref(65534));
    call {:si_unique_call 860} {:cexpr "tmp___9"} boogie_si_record_i8($i144);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 3);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3842, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p148, $i147);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i152 := $load.i16($M.17, $p4);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i16.i8($i152);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i154);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} rtl818x_iowrite8($p19, $p151, $i155);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} rtl818x_iowrite8($p19, $p158, 0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i162 == 1);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i175 := rtl818x_ioread8($p19, $i2p.i64.ref(65505));
    call {:si_unique_call 867} {:cexpr "tmp___10"} boogie_si_record_i8($i175);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i177 := $slt.i32($i176, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i176, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i176, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i179 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p182 := .str.21;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p174 := $p182;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 0);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i189 == 1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} eeprom_93cx6_read($p2, 27, $p3);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p191, $mul.ref(1, 64));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i204 := $load.i16($M.16, $p3);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i205 := $zext.i16.i32($i204);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 255);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i16($i206);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p191, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p208, $i207);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} eeprom_93cx6_read($p2, 10, $p3);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p203, $mul.ref(1, 64));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i210 := $load.i16($M.16, $p3);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32($i210);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i212 := $and.i32($i211, 255);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i16($i212);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p203, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p214, $i213);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} eeprom_93cx6_read($p2, 28, $p3);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p209, $mul.ref(1, 64));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i216 := $load.i16($M.16, $p3);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i218 := $and.i32($i217, 255);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i16($i218);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p209, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p220, $i219);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i221 := $load.i16($M.16, $p3);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i222 := $zext.i16.i32($i221);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i223 := $ashr.i32($i222, 8);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i16($i223);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p215, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p225, $i224);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3951, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p226, 2);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i227 := $zext.i16.i32($i11);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 33175);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i228 == 1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i11);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 33176);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(92, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p236, 240);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 1768)), $mul.ref(48, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p239, 6);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i241 := $load.i64($M.0, $p240);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i242 := $eq.i64($i241, 0);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p248 := rtl8187_detect_rf($p12);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(8, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p249, $p248);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i251 := $load.i8($M.0, $p250);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i252 := $zext.i8.i32($i251);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 0);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i254 := (if $i253 == 1 then 12 else 32);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(84, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, $i254);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.0, $p256);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 0);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i259 == 1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p261, 4);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i262 := ieee80211_register_hw($p12);
    call {:si_unique_call 877} {:cexpr "err"} boogie_si_record_i32($i262);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(24, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} __mutex_init($p265, .str.24, $p7);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} skb_queue_head_init($p267);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p269, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p5);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3842, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.0, $p272);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i32($i273);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(8, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.0, $p275);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p276, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3951, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i280 := $load.i8($M.0, $p279);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i280);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_71 := _dev_info.ref.ref.ref.ref.i32.ref.i32($p270, .str.25, $p271, $p174, $i274, $p278, $i281);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} eeprom_93cx6_read($p2, 63, $p4);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i283 := $load.i16($M.17, $p4);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i284 := $zext.i16.i32($i283);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i285 := $and.i32($i284, 255);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i16($i285);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.17 := $store.i16($M.17, $p4, $i286);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i287 := $load.i16($M.17, $p4);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i288 := $zext.i16.i32($i287);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i32.i16($i288);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} rtl8187_leds_init($p12, $i289);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} rtl8187_rfkill_init($p12);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb84:
    assume $i263 == 1;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_70 := printk.ref(.str.23);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p292 := $bitcast.ref.ref($p291);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} kfree($p292);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} usb_put_dev($p8);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i34 := $i262;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} ieee80211_free_hw($p12);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i16 := $i34;
    goto $bb3;

  $bb81:
    assume $i259 == 1;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p260, 1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb75:
    assume $i242 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.0, $p243);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i244);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb77;

  $bb78:
    assume $i246 == 1;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_69 := printk.ref(.str.22);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} eeprom_93cx6_read($p2, 59, $p4);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i231 := $load.i16($M.17, $p4);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i231);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i233 := $and.i32($i232, 65280);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i234 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3951, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p235, 4);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb67;

  $bb59:
    assume $i189 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} eeprom_93cx6_read($p2, 27, $p3);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p191, $mul.ref(1, 64));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i192 := $load.i16($M.16, $p3);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i193 := $zext.i16.i32($i192);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i194 := $and.i32($i193, 255);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i16($i194);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p191, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p196, $i195);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($p190, $mul.ref(1, 64));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i198 := $load.i16($M.16, $p3);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i199 := $zext.i16.i32($i198);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i200 := $ashr.i32($i199, 8);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i16($i200);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p190, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p202, $i201);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} eeprom_93cx6_read($p2, 28, $p3);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($p197, $mul.ref(1, 64));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i294 := $load.i16($M.16, $p3);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i295 := $zext.i16.i32($i294);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i296 := $and.i32($i295, 255);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i297 := $trunc.i32.i16($i296);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p197, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p298, $i297);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i299 := $load.i16($M.16, $p3);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i300 := $zext.i16.i32($i299);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i301 := $ashr.i32($i300, 8);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i302 := $trunc.i32.i16($i301);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p293, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p303, $i302);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb51:
    assume $i179 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, 2);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p182 := .str.20;
    goto $bb56;

  $bb49:
    assume $i178 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, 1);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p182 := .str.19;
    goto $bb56;

  $bb47:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i176, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb53;

  $bb54:
    assume $i180 == 1;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, 0);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p182 := .str.18;
    goto $bb56;

  $bb32:
    assume $i162 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i166 := rtl818x_ioread32($p19, $p165);
    call {:si_unique_call 864} {:cexpr "reg32"} boogie_si_record_i32($i166);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 234881024);
    call {:si_unique_call 865} {:cexpr "reg32"} boogie_si_record_i32($i167);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i167, 201326592);
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i167, 201326592);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p173 := .str.17;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p174 := $p173;
    goto $bb45;

  $bb37:
    assume $i169 == 1;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p171, 1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p173 := .str.15;
    goto $bb42;

  $bb35:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i167, 167772160);
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb39;

  $bb40:
    assume $i170 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p173 := .str.16;
    goto $bb42;

  $bb21:
    assume $i95 == 1;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} vslice_dummy_var_68 := printk.ref(.str.14);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p5);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} eth_random_addr($p97);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i93 == 1;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i94 := 0;
    goto $bb20;

  $bb15:
    assume $i83 == 1;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p84, 8);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i46 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(1088, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 839} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p48, rtl818x_rates, 144, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p19, $mul.ref(0, 4296)), $mul.ref(192, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 837} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p43, rtl818x_channels, 896, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_66 := printk.ref(.str.12);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;
}



const rtl8187_disconnect: ref;

axiom rtl8187_disconnect == $sub.ref(0, 247374);

procedure rtl8187_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} rtl8187_leds_exit($p2);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} rtl8187_rfkill_exit($p2);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ieee80211_unregister_hw($p2);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_72 := usb_reset_device($p9);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p11 := interface_to_usbdev($p0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} usb_put_dev($p11);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} kfree($p14);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ieee80211_free_hw($p2);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 248406);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rtl8187_leds_exit: ref;

axiom rtl8187_leds_exit == $sub.ref(0, 249438);

procedure rtl8187_leds_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_leds_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var vslice_dummy_var_73: i1;
  var vslice_dummy_var_74: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(1736, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} rtl8187_unregister_led($p4);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(2840, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} rtl8187_unregister_led($p5);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(2288, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} rtl8187_unregister_led($p6);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3616, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_73 := cancel_delayed_work_sync($p7);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3392, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} vslice_dummy_var_74 := cancel_delayed_work_sync($p9);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_rfkill_exit: ref;

axiom rtl8187_rfkill_exit == $sub.ref(0, 250470);

procedure rtl8187_rfkill_exit($p0: ref);
  free requires assertsPassed;



implementation rtl8187_rfkill_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} wiphy_rfkill_stop_polling($p2);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_unregister_hw: ref;

axiom ieee80211_unregister_hw == $sub.ref(0, 251502);

procedure ieee80211_unregister_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_unregister_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 252534);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 253566);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 254598);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_free_hw: ref;

axiom ieee80211_free_hw == $sub.ref(0, 255630);

procedure ieee80211_free_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_free_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    return;
}



const wiphy_rfkill_stop_polling: ref;

axiom wiphy_rfkill_stop_polling == $sub.ref(0, 256662);

procedure wiphy_rfkill_stop_polling($p0: ref);
  free requires assertsPassed;



implementation wiphy_rfkill_stop_polling($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_unregister_led: ref;

axiom rtl8187_unregister_led == $sub.ref(0, 257694);

procedure rtl8187_unregister_led($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_unregister_led($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var vslice_dummy_var_75: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(8, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} led_classdev_unregister($p6);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(3616, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_75 := flush_delayed_work($p7);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    return;
}



const led_classdev_unregister: ref;

axiom led_classdev_unregister == $sub.ref(0, 258726);

procedure led_classdev_unregister($p0: ref);
  free requires assertsPassed;



implementation led_classdev_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    return;
}



const flush_delayed_work: ref;

axiom flush_delayed_work == $sub.ref(0, 259758);

procedure flush_delayed_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation flush_delayed_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 1} true;
    call {:si_unique_call 909} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 910} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 260790);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_alloc_hw: ref;

axiom ieee80211_alloc_hw == $sub.ref(0, 261822);

procedure ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} {:cexpr "ieee80211_alloc_hw:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p2 := external_alloc();
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 262854);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    return;
}



const SET_IEEE80211_DEV: ref;

axiom SET_IEEE80211_DEV == $sub.ref(0, 263886);

procedure SET_IEEE80211_DEV($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_DEV($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} set_wiphy_dev($p3, $p1);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 264918);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} dev_set_drvdata($p2, $p1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 265950);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p1 := external_alloc();
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 266982);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_76: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_76 := spinlock_check($p2);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} __raw_spin_lock_init($p6, .str.26, $p1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __skb_queue_head_init($p0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_eeprom_register_read: ref;

axiom rtl8187_eeprom_register_read == $sub.ref(0, 268014);

procedure rtl8187_eeprom_register_read($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_eeprom_register_read($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i10 := rtl818x_ioread8($p6, $p9);
    call {:si_unique_call 921} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(29, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i10);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i10);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 4);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i10);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_eeprom_register_write: ref;

axiom rtl8187_eeprom_register_write == $sub.ref(0, 269046);

procedure rtl8187_eeprom_register_write($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_eeprom_register_write($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i8;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i8;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i8;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(29, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i14 := $sub.i8(0, 128);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i17 := $sext.i8.i32($i16);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i22;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i33 := $sext.i8.i32($i32);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i30;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i38);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} rtl818x_iowrite8($p6, $p41, $i43);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} __const_udelay(42950);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i30);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 8);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    call {:si_unique_call 925} {:cexpr "reg"} boogie_si_record_i8($i37);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb12;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i22);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 4);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    call {:si_unique_call 924} {:cexpr "reg"} boogie_si_record_i8($i29);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i14);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    call {:si_unique_call 923} {:cexpr "reg"} boogie_si_record_i8($i21);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($sub.i8(0, 128));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 2);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 922} {:cexpr "reg"} boogie_si_record_i8($i13);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 270078);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    return;
}



const eeprom_93cx6_multiread: ref;

axiom eeprom_93cx6_multiread == $sub.ref(0, 271110);

procedure eeprom_93cx6_multiread($p0: ref, $i1: i8, $p2: ref, $i3: i16);
  free requires assertsPassed;



implementation eeprom_93cx6_multiread($p0: ref, $i1: i8, $p2: ref, $i3: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} {:cexpr "eeprom_93cx6_multiread:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 930} {:cexpr "eeprom_93cx6_multiread:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    return;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 272142);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} get_random_bytes($p0, 6);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i4);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i8);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    return;
}



const SET_IEEE80211_PERM_ADDR: ref;

axiom SET_IEEE80211_PERM_ADDR == $sub.ref(0, 273174);

procedure SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64(6, 63);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1768)), $mul.ref(0, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 933} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p10, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1768)), $mul.ref(0, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 932} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p6, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const eeprom_93cx6_read: ref;

axiom eeprom_93cx6_read == $sub.ref(0, 274206);

procedure eeprom_93cx6_read($p0: ref, $i1: i8, $p2: ref);
  free requires assertsPassed;



implementation eeprom_93cx6_read($p0: ref, $i1: i8, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} {:cexpr "eeprom_93cx6_read:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_detect_rf: ref;

axiom rtl8187_detect_rf == $sub.ref(0, 275238);

procedure rtl8187_detect_rf($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_detect_rf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p14 := rtl8225z2_b_ops;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} rtl8225_write($p0, 0, 439);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i8 := rtl8225_read($p0, 8);
    call {:si_unique_call 937} {:cexpr "reg8"} boogie_si_record_i16($i8);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i9 := rtl8225_read($p0, 9);
    call {:si_unique_call 939} {:cexpr "reg9"} boogie_si_record_i16($i9);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} rtl8225_write($p0, 0, 183);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i8);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1416);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i9);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 1792);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := rtl8225z2_ops;
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := rtl8225_ops;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb4;
}



const ieee80211_register_hw: ref;

axiom ieee80211_register_hw == $sub.ref(0, 276270);

procedure ieee80211_register_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_register_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 941} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 942} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 277302);

procedure _dev_info.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rtl8187_leds_init: ref;

axiom rtl8187_leds_init == $sub.ref(0, 278334);

procedure rtl8187_leds_init($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rtl8187_leds_init($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i8;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $p40: ref;
  var $p43: ref;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p64: ref;
  var $p67: ref;
  var $p70: ref;
  var $p72: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p2 := $alloc($mul.ref(22, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 952} {:cexpr "rtl8187_leds_init:arg:custid"} boogie_si_record_i16($i1);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} vslice_dummy_var_77 := printk.ref.i32(.str, $i12);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, 255);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 255);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i26 := 2;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1)), $mul.ref(0, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} __init_work($p28, 0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, 137438953408);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p4);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 955} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p33, $p34, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} lockdep_init_map($p37, .str.1, $p3, 0);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} INIT_LIST_HEAD($p40);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, led_turn_on);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1)), $mul.ref(80, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} init_timer_key($p45, 2, .str.2, $p5);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, delayed_work_timer_fn);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3392, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i50);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1)), $mul.ref(0, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} __init_work($p55, 0);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, 137438953408);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p7);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 960} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p60, $p61, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} lockdep_init_map($p64, .str.3, $p6, 0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} INIT_LIST_HEAD($p67);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, led_turn_off);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1)), $mul.ref(80, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} init_timer_key($p72, 2, .str.4, $p8);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, delayed_work_timer_fn);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(3616, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, $i77);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $p83 := wiphy_name($p82);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p2);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_78 := snprintf.ref.i64.ref.ref($p84, 22, .str.5, $p83);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p86 := ieee80211_get_radio_led_name($p0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(1736, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p2);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i26);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i91 := rtl8187_register_led($p0, $p87, $p88, $p86, $i90, 1);
    call {:si_unique_call 968} {:cexpr "err"} boogie_si_record_i32($i91);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p95 := wiphy_name($p94);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p2);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_79 := snprintf.ref.i64.ref.ref($p96, 22, .str.6, $p95);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p98 := ieee80211_get_tx_led_name($p0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(2288, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p2);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i26);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i103 := rtl8187_register_led($p0, $p99, $p100, $p98, $i102, 0);
    call {:si_unique_call 973} {:cexpr "err"} boogie_si_record_i32($i103);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p107 := wiphy_name($p106);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p2);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_80 := snprintf.ref.i64.ref.ref($p108, 22, .str.7, $p107);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p110 := ieee80211_get_rx_led_name($p0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(2840, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p2);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i26);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i115 := rtl8187_register_led($p0, $p111, $p112, $p110, $i114, 0);
    call {:si_unique_call 979} {:cexpr "err"} boogie_si_record_i32($i115);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 0);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(2288, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} rtl8187_unregister_led($p117);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p11, $mul.ref(0, 4296)), $mul.ref(1736, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} rtl8187_unregister_led($p118);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i116 == 1;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb37:
    assume $i104 == 1;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i92 == 1;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i26 := 2;
    goto $bb30;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i14, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb13;

  $bb4:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i14, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb17;

  $bb15:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb19;

  $bb2:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i14, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i23 == 1);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i26 := 3;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb24;

  $bb21:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb30;

  $bb26:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb28:
    assume $i25 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const rtl8187_rfkill_init: ref;

axiom rtl8187_rfkill_init == $sub.ref(0, 279366);

procedure rtl8187_rfkill_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_rfkill_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i4 := rtl8187_is_radio_enabled($p3);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(4288, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i6);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(4288, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p10 := (if $i9 == 1 then .str.9 else .str.10);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_81 := printk.ref.ref(.str.8, $p10);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(4288, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} wiphy_rfkill_set_hw_state($p13, $i19);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} wiphy_rfkill_start_polling($p21);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    return;
}



const wiphy_rfkill_start_polling: ref;

axiom wiphy_rfkill_start_polling == $sub.ref(0, 280398);

procedure wiphy_rfkill_start_polling($p0: ref);
  free requires assertsPassed;



implementation wiphy_rfkill_start_polling($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    return;
}



const led_turn_on: ref;

axiom led_turn_on == $sub.ref(0, 281430);

procedure led_turn_on($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation led_turn_on($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(16, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(16, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(24, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} mutex_lock_nested($p17, 0);
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(2288, 1)), $mul.ref(528, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(24, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} mutex_unlock($p56);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(145, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} rtl818x_iowrite8($p2, $p28, 1);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} rtl818x_iowrite8($p2, $p31, 0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i47 := rtl818x_ioread8($p2, $p46);
    call {:si_unique_call 989} {:cexpr "tmp___0"} boogie_si_record_i8($i47);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 223);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    call {:si_unique_call 990} {:cexpr "reg"} boogie_si_record_i8($i50);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i50);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} rtl818x_iowrite8($p2, $p53, $i55);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb18;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i35 := rtl818x_ioread8($p2, $p34);
    call {:si_unique_call 993} {:cexpr "tmp"} boogie_si_record_i8($i35);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 239);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    call {:si_unique_call 994} {:cexpr "reg"} boogie_si_record_i8($i38);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3392), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i38);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} rtl818x_iowrite8($p2, $p41, $i43);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const led_turn_off: ref;

axiom led_turn_off == $sub.ref(0, 282462);

procedure led_turn_off($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation led_turn_off($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(16, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(16, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(24, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} mutex_lock_nested($p17, 0);
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(2288, 1)), $mul.ref(528, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(24, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} mutex_unlock($p56);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(145, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} rtl818x_iowrite8($p2, $p28, 1);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} rtl818x_iowrite8($p2, $p31, 1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i47 := rtl818x_ioread8($p2, $p46);
    call {:si_unique_call 1001} {:cexpr "tmp___0"} boogie_si_record_i8($i47);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, 32);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    call {:si_unique_call 1002} {:cexpr "reg"} boogie_si_record_i8($i50);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i50);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} rtl818x_iowrite8($p2, $p53, $i55);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb18;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i35 := rtl818x_ioread8($p2, $p34);
    call {:si_unique_call 1005} {:cexpr "tmp"} boogie_si_record_i8($i35);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, 16);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    call {:si_unique_call 1006} {:cexpr "reg"} boogie_si_record_i8($i38);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 3616), 4296)), $mul.ref(0, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i38);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} rtl818x_iowrite8($p2, $p41, $i43);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const wiphy_name: ref;

axiom wiphy_name == $sub.ref(0, 283494);

procedure wiphy_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wiphy_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p2 := dev_name($p1);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 284526);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const ieee80211_get_radio_led_name: ref;

axiom ieee80211_get_radio_led_name == $sub.ref(0, 285558);

procedure ieee80211_get_radio_led_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_radio_led_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p1 := __ieee80211_get_radio_led_name($p0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const rtl8187_register_led: ref;

axiom rtl8187_register_led == $sub.ref(0, 286590);

procedure rtl8187_register_led($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i8, $i5: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_register_led($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i8, $i5: i1) returns ($r: i32)
{
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i14: i32;
  var vslice_dummy_var_82: ref;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} {:cexpr "rtl8187_register_led:arg:ledpin"} boogie_si_record_i8($i4);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1012} {:cexpr "rtl8187_register_led:arg:is_radio"} boogie_si_record_i1($i5);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p3);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(528, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i4);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i6);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(551, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i19);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i21);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(529, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_82 := strncpy($p23, $p2, 22);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(529, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p25);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(8, 1)), $mul.ref(72, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p3);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, rtl8187_led_brightness_set);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(8, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i37 := led_classdev_register($p35, $p36);
    call {:si_unique_call 1015} {:cexpr "err"} boogie_si_record_i32($i37);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_83 := printk.ref.ref(.str.43, $p2);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i14 := $i37;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 17);
    goto $bb3;
}



const ieee80211_get_tx_led_name: ref;

axiom ieee80211_get_tx_led_name == $sub.ref(0, 287622);

procedure ieee80211_get_tx_led_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_tx_led_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p1 := __ieee80211_get_tx_led_name($p0);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ieee80211_get_rx_led_name: ref;

axiom ieee80211_get_rx_led_name == $sub.ref(0, 288654);

procedure ieee80211_get_rx_led_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_rx_led_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p1 := __ieee80211_get_rx_led_name($p0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __ieee80211_get_rx_led_name: ref;

axiom __ieee80211_get_rx_led_name == $sub.ref(0, 289686);

procedure __ieee80211_get_rx_led_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __ieee80211_get_rx_led_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $p1 := external_alloc();
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __ieee80211_get_tx_led_name: ref;

axiom __ieee80211_get_tx_led_name == $sub.ref(0, 290718);

procedure __ieee80211_get_tx_led_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __ieee80211_get_tx_led_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p1 := external_alloc();
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const strncpy: ref;

axiom strncpy == $sub.ref(0, 291750);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const rtl8187_led_brightness_set: ref;

axiom rtl8187_led_brightness_set == $sub.ref(0, 292782);

procedure rtl8187_led_brightness_set($p0: ref, $i1: i32);



const led_classdev_register: ref;

axiom led_classdev_register == $sub.ref(0, 293814);

procedure led_classdev_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation led_classdev_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1022} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cancel_delayed_work: ref;

axiom cancel_delayed_work == $sub.ref(0, 294846);

procedure cancel_delayed_work($p0: ref) returns ($r: i1);



const __ieee80211_get_radio_led_name: ref;

axiom __ieee80211_get_radio_led_name == $sub.ref(0, 295878);

procedure __ieee80211_get_radio_led_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __ieee80211_get_radio_led_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p1 := external_alloc();
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 296910);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $p9 := kobject_name($p8);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 297942);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rtl8225_write: ref;

axiom rtl8225_write == $sub.ref(0, 298974);

procedure rtl8225_write($p0: ref, $i1: i8, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_write($p0: ref, $i1: i8, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} {:cexpr "rtl8225_write:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 1026} {:cexpr "rtl8225_write:arg:data"} boogie_si_record_i16($i2);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(3842, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i2);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} rtl8225_write_bitbang($p0, $i15, $i17);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i2);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} rtl8225_write_8051($p0, $i11, $i13);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8225_read: ref;

axiom rtl8225_read == $sub.ref(0, 300006);

procedure rtl8225_read($p0: ref, $i1: i8) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_read($p0: ref, $i1: i8) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i16;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i16;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i16;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i16;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i16;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i16;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i16;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i16;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i16;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i16;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i16;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i16;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i16;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i16;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i16;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $i172: i16;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i16;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i16;
  var $i180: i16;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $i189: i16;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i32;
  var $i195: i16;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i32;
  var $i201: i16;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $i207: i16;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i32;
  var $i212: i32;
  var $i213: i16;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i16;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i222: i32;
  var $i223: i32;
  var $i224: i16;
  var $i221: i16;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i32;
  var $i230: i16;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i236: i16;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $i242: i16;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i32;
  var $i247: i32;
  var $i248: i16;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $i254: i16;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i16;
  var $i259: i32;
  var $i260: i32;
  var $i261: i1;
  var $i263: i32;
  var $i264: i32;
  var $i265: i16;
  var $i262: i16;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $i271: i16;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $i275: i32;
  var $i276: i32;
  var $i277: i16;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $i281: i32;
  var $i282: i32;
  var $i283: i16;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i16;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $i293: i32;
  var $i294: i32;
  var $i295: i16;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $i299: i16;
  var $i300: i32;
  var $i301: i32;
  var $i302: i1;
  var $i304: i32;
  var $i305: i32;
  var $i306: i16;
  var $i303: i16;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $i312: i16;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i32;
  var $i317: i32;
  var $i318: i16;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i32;
  var $i323: i32;
  var $i324: i16;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i32;
  var $i329: i32;
  var $i330: i16;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i334: i32;
  var $i335: i32;
  var $i336: i16;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $i340: i16;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var $i345: i32;
  var $i346: i32;
  var $i347: i16;
  var $i344: i16;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i32;
  var $i352: i32;
  var $i353: i16;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i32;
  var $i359: i16;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i32;
  var $i364: i32;
  var $i365: i16;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $i369: i32;
  var $i370: i32;
  var $i371: i16;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $i375: i32;
  var $i376: i32;
  var $i377: i16;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $i381: i16;
  var $i382: i32;
  var $i383: i32;
  var $i384: i1;
  var $i386: i32;
  var $i387: i32;
  var $i388: i16;
  var $i385: i16;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $i392: i32;
  var $i393: i32;
  var $i394: i16;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i32;
  var $i399: i32;
  var $i400: i16;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $i405: i32;
  var $i406: i16;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $i410: i32;
  var $i411: i32;
  var $i412: i16;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i32;
  var $i417: i32;
  var $i418: i16;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $i422: i16;
  var $i423: i32;
  var $i424: i32;
  var $i425: i1;
  var $i427: i32;
  var $i428: i32;
  var $i429: i16;
  var $i426: i16;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i32;
  var $i434: i32;
  var $i435: i16;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $i439: i32;
  var $i440: i32;
  var $i441: i16;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i32;
  var $i446: i32;
  var $i447: i16;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $i451: i32;
  var $i452: i32;
  var $i453: i16;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $i457: i32;
  var $i458: i32;
  var $i459: i16;
  var $p460: ref;
  var $p461: ref;
  var $p462: ref;
  var $i463: i16;
  var $i464: i32;
  var $i465: i32;
  var $i466: i1;
  var $i468: i32;
  var $i469: i32;
  var $i470: i16;
  var $i467: i16;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $i474: i32;
  var $i475: i32;
  var $i476: i16;
  var $p477: ref;
  var $p478: ref;
  var $p479: ref;
  var $i480: i32;
  var $i481: i32;
  var $i482: i16;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $i486: i32;
  var $i487: i32;
  var $i488: i16;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $i492: i32;
  var $i493: i32;
  var $i494: i16;
  var $p495: ref;
  var $p496: ref;
  var $p497: ref;
  var $i498: i32;
  var $i499: i32;
  var $i500: i16;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $i504: i16;
  var $i505: i32;
  var $i506: i32;
  var $i507: i1;
  var $i509: i32;
  var $i510: i32;
  var $i511: i16;
  var $i508: i16;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $i515: i32;
  var $i516: i32;
  var $i517: i16;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $i521: i32;
  var $i522: i32;
  var $i523: i16;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $i527: i32;
  var $i528: i32;
  var $i529: i16;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $i533: i32;
  var $i534: i32;
  var $i535: i16;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $i539: i32;
  var $i540: i32;
  var $i541: i16;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $i545: i16;
  var $i546: i32;
  var $i547: i32;
  var $i548: i1;
  var $i550: i32;
  var $i551: i32;
  var $i552: i16;
  var $i549: i16;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $i556: i32;
  var $i557: i32;
  var $i558: i16;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $i562: i32;
  var $i563: i32;
  var $i564: i16;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $i568: i32;
  var $i569: i32;
  var $i570: i16;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $i574: i32;
  var $i575: i32;
  var $i576: i16;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i32;
  var $i581: i32;
  var $i582: i16;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $i586: i16;
  var $i587: i32;
  var $i588: i32;
  var $i589: i1;
  var $i590: i32;
  var $i591: i32;
  var $i592: i16;
  var $i148: i16;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $i596: i32;
  var $i597: i32;
  var $i598: i16;
  var $i599: i32;
  var $i600: i32;
  var $i601: i16;
  var $i602: i32;
  var $i603: i32;
  var $i604: i32;
  var $i605: i32;
  var $i606: i16;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $i610: i32;
  var $i611: i16;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $i615: i32;
  var $i616: i32;
  var $i617: i16;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $i621: i32;
  var $i622: i32;
  var $i623: i16;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $i627: i32;
  var $i628: i16;
  var $i629: i32;
  var $i630: i32;
  var $i631: i16;
  var $i632: i32;
  var $i633: i32;
  var $i634: i32;
  var $i635: i32;
  var $i636: i16;
  var $p637: ref;
  var $p638: ref;
  var $p639: ref;
  var $i640: i32;
  var $i641: i16;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $i645: i32;
  var $i646: i32;
  var $i647: i16;
  var $p648: ref;
  var $p649: ref;
  var $p650: ref;
  var $i651: i32;
  var $i652: i32;
  var $i653: i16;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $i657: i32;
  var $i658: i16;
  var $i659: i32;
  var $i660: i32;
  var $i661: i16;
  var $i662: i32;
  var $i663: i32;
  var $i664: i32;
  var $i665: i32;
  var $i666: i16;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $i670: i32;
  var $i671: i16;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $i675: i32;
  var $i676: i32;
  var $i677: i16;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $i681: i32;
  var $i682: i32;
  var $i683: i16;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $i687: i32;
  var $i688: i16;
  var $i689: i32;
  var $i690: i16;
  var $i691: i32;
  var $i692: i32;
  var $i693: i32;
  var $i694: i32;
  var $i695: i16;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $i699: i32;
  var $i700: i16;
  var $p701: ref;
  var $p702: ref;
  var $p703: ref;
  var $i704: i32;
  var $i705: i32;
  var $i706: i16;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $i710: i32;
  var $i711: i32;
  var $i712: i16;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $i716: i32;
  var $i717: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} {:cexpr "rtl8225_read:arg:addr"} boogie_si_record_i8($i1);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i8 := rtl818x_ioread16($p4, $p7);
    call {:si_unique_call 1031} {:cexpr "reg80"} boogie_si_record_i16($i8);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i12 := rtl818x_ioread16($p4, $p11);
    call {:si_unique_call 1033} {:cexpr "reg82"} boogie_si_record_i16($i12);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i16 := rtl818x_ioread16($p4, $p15);
    call {:si_unique_call 1035} {:cexpr "reg84"} boogie_si_record_i16($i16);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i8);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 65520);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    call {:si_unique_call 1036} {:cexpr "reg80"} boogie_si_record_i16($i19);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i12);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 15);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} rtl818x_iowrite16($p4, $p22, $i25);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i16);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 15);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} rtl818x_iowrite16($p4, $p28, $i31);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i19);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 4);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} rtl818x_iowrite16($p4, $p34, $i37);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} __const_udelay(17180);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i19);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} rtl818x_iowrite16($p4, $p40, $i42);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} __const_udelay(21475);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i1);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i44 := $ashr.i32($i43, 4);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i46 := $sext.i16.i32($i45);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i48 := $sext.i16.i32($i19);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i47, $i48);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    call {:si_unique_call 1043} {:cexpr "reg"} boogie_si_record_i16($i50);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i50);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 2);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} rtl818x_iowrite16($p4, $p58, $i61);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} __const_udelay(8590);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i50);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, 2);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} rtl818x_iowrite16($p4, $p64, $i67);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} __const_udelay(8590);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i599 := $zext.i8.i32($i1);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i600 := $ashr.i32($i599, 3);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i601 := $trunc.i32.i16($i600);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i602 := $sext.i16.i32($i601);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i603 := $and.i32($i602, 1);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i604 := $sext.i16.i32($i19);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i605 := $or.i32($i603, $i604);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i606 := $trunc.i32.i16($i605);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb61, $bb62;

  $bb62:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p613 := $load.ref($M.0, $p612);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p613, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i615 := $zext.i16.i32($i606);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i616 := $or.i32($i615, 2);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i617 := $trunc.i32.i16($i616);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} rtl818x_iowrite16($p4, $p614, $i617);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} __const_udelay(8590);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.0, $p618);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p619, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i621 := $zext.i16.i32($i606);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i622 := $or.i32($i621, 2);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i623 := $trunc.i32.i16($i622);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} rtl818x_iowrite16($p4, $p620, $i623);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} __const_udelay(8590);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb64, $bb65;

  $bb65:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i629 := $zext.i8.i32($i1);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i630 := $ashr.i32($i629, 2);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i631 := $trunc.i32.i16($i630);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i632 := $sext.i16.i32($i631);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i633 := $and.i32($i632, 1);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i634 := $sext.i16.i32($i19);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i635 := $or.i32($i633, $i634);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i636 := $trunc.i32.i16($i635);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb68, $bb69;

  $bb69:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p643 := $load.ref($M.0, $p642);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p643, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i645 := $zext.i16.i32($i636);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i646 := $or.i32($i645, 2);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i647 := $trunc.i32.i16($i646);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} rtl818x_iowrite16($p4, $p644, $i647);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} __const_udelay(8590);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p649 := $load.ref($M.0, $p648);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p649, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i651 := $zext.i16.i32($i636);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i652 := $or.i32($i651, 2);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i653 := $trunc.i32.i16($i652);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} rtl818x_iowrite16($p4, $p650, $i653);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __const_udelay(8590);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb71, $bb72;

  $bb72:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i659 := $zext.i8.i32($i1);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i660 := $ashr.i32($i659, 1);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i661 := $trunc.i32.i16($i660);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i662 := $sext.i16.i32($i661);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i663 := $and.i32($i662, 1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i664 := $sext.i16.i32($i19);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i665 := $or.i32($i663, $i664);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i666 := $trunc.i32.i16($i665);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb75, $bb76;

  $bb76:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p673 := $load.ref($M.0, $p672);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($p673, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i675 := $zext.i16.i32($i666);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i676 := $or.i32($i675, 2);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i677 := $trunc.i32.i16($i676);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} rtl818x_iowrite16($p4, $p674, $i677);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __const_udelay(8590);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p679 := $load.ref($M.0, $p678);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($p679, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i681 := $zext.i16.i32($i666);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i682 := $or.i32($i681, 2);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i683 := $trunc.i32.i16($i682);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} rtl818x_iowrite16($p4, $p680, $i683);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} __const_udelay(8590);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb78, $bb79;

  $bb79:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i689 := $zext.i8.i32($i1);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i690 := $trunc.i32.i16($i689);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i691 := $sext.i16.i32($i690);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i692 := $and.i32($i691, 1);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i693 := $sext.i16.i32($i19);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i694 := $or.i32($i692, $i693);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i695 := $trunc.i32.i16($i694);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb82, $bb83;

  $bb83:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.0, $p701);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p702, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i704 := $zext.i16.i32($i695);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i705 := $or.i32($i704, 2);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i706 := $trunc.i32.i16($i705);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} rtl818x_iowrite16($p4, $p703, $i706);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __const_udelay(8590);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.0, $p707);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p708, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i710 := $zext.i16.i32($i695);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i711 := $or.i32($i710, 2);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i712 := $trunc.i32.i16($i711);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} rtl818x_iowrite16($p4, $p709, $i712);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} __const_udelay(8590);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb85, $bb86;

  $bb86:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i19);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i76, 10);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} rtl818x_iowrite16($p4, $p75, $i78);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} __const_udelay(8590);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i19);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i82, 8);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} rtl818x_iowrite16($p4, $p81, $i84);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __const_udelay(8590);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i19);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, 8);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} rtl818x_iowrite16($p4, $p87, $i90);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} __const_udelay(8590);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i19);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i94, 8);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} rtl818x_iowrite16($p4, $p93, $i96);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} __const_udelay(4295);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i19);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, 10);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} rtl818x_iowrite16($p4, $p99, $i102);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __const_udelay(8590);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i19);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, 10);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} rtl818x_iowrite16($p4, $p105, $i108);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __const_udelay(8590);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i19);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 10);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} rtl818x_iowrite16($p4, $p111, $i114);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} __const_udelay(8590);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i118 := rtl818x_ioread16($p4, $p117);
    call {:si_unique_call 1067} {:cexpr "tmp"} boogie_si_record_i16($i118);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 2);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i19);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i126, 8);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i127);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} rtl818x_iowrite16($p4, $p125, $i128);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __const_udelay(8590);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i19);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i152, 8);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i16($i153);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} rtl818x_iowrite16($p4, $p151, $i154);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} __const_udelay(4295);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i19);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i158, 10);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i159);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} rtl818x_iowrite16($p4, $p157, $i160);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __const_udelay(8590);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32($i19);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i164, 10);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} rtl818x_iowrite16($p4, $p163, $i166);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __const_udelay(8590);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i170 := $zext.i16.i32($i19);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i170, 10);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i171);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} rtl818x_iowrite16($p4, $p169, $i172);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} __const_udelay(8590);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i176 := rtl818x_ioread16($p4, $p175);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i176);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, 2);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    $i180 := $i122;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p185, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i187 := $zext.i16.i32($i19);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i188 := $or.i32($i187, 8);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i32.i16($i188);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} rtl818x_iowrite16($p4, $p186, $i189);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} __const_udelay(8590);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i193 := $zext.i16.i32($i19);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i194 := $or.i32($i193, 8);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i16($i194);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} rtl818x_iowrite16($p4, $p192, $i195);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} __const_udelay(4295);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i199 := $zext.i16.i32($i19);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i200 := $or.i32($i199, 10);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i16($i200);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} rtl818x_iowrite16($p4, $p198, $i201);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} __const_udelay(8590);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i205 := $zext.i16.i32($i19);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i206 := $or.i32($i205, 10);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i16($i206);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} rtl818x_iowrite16($p4, $p204, $i207);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} __const_udelay(8590);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32($i19);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i212 := $or.i32($i211, 10);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i16($i212);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} rtl818x_iowrite16($p4, $p210, $i213);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} __const_udelay(8590);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i217 := rtl818x_ioread16($p4, $p216);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i217);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i218, 2);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    $i221 := $i180;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p226, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i19);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i229 := $or.i32($i228, 8);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i230 := $trunc.i32.i16($i229);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} rtl818x_iowrite16($p4, $p227, $i230);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} __const_udelay(8590);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p232, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i234 := $zext.i16.i32($i19);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i235 := $or.i32($i234, 8);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i16($i235);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} rtl818x_iowrite16($p4, $p233, $i236);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} __const_udelay(4295);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i240 := $zext.i16.i32($i19);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i241 := $or.i32($i240, 10);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} rtl818x_iowrite16($p4, $p239, $i242);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} __const_udelay(8590);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p244, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i246 := $zext.i16.i32($i19);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i247 := $or.i32($i246, 10);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i16($i247);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} rtl818x_iowrite16($p4, $p245, $i248);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} __const_udelay(8590);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p250, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i252 := $zext.i16.i32($i19);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i253 := $or.i32($i252, 10);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i254 := $trunc.i32.i16($i253);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} rtl818x_iowrite16($p4, $p251, $i254);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} __const_udelay(8590);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p256, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i258 := rtl818x_ioread16($p4, $p257);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i259 := $zext.i16.i32($i258);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i260 := $and.i32($i259, 2);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    $i262 := $i221;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p267, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i269 := $zext.i16.i32($i19);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i270 := $or.i32($i269, 8);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i32.i16($i270);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} rtl818x_iowrite16($p4, $p268, $i271);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(8590);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.0, $p272);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p273, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i275 := $zext.i16.i32($i19);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i276 := $or.i32($i275, 8);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i32.i16($i276);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} rtl818x_iowrite16($p4, $p274, $i277);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(4295);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.0, $p278);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p279, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i281 := $zext.i16.i32($i19);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i282 := $or.i32($i281, 10);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i283 := $trunc.i32.i16($i282);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} rtl818x_iowrite16($p4, $p280, $i283);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(8590);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p285, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i287 := $zext.i16.i32($i19);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i288 := $or.i32($i287, 10);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i32.i16($i288);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} rtl818x_iowrite16($p4, $p286, $i289);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(8590);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p291, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i293 := $zext.i16.i32($i19);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i294 := $or.i32($i293, 10);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i32.i16($i294);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} rtl818x_iowrite16($p4, $p292, $i295);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} __const_udelay(8590);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p297, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i299 := rtl818x_ioread16($p4, $p298);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i300 := $zext.i16.i32($i299);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i301 := $and.i32($i300, 2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    $i303 := $i262;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.0, $p307);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p308, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i310 := $zext.i16.i32($i19);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i311 := $or.i32($i310, 8);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i312 := $trunc.i32.i16($i311);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} rtl818x_iowrite16($p4, $p309, $i312);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __const_udelay(8590);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.0, $p313);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p314, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i316 := $zext.i16.i32($i19);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i317 := $or.i32($i316, 8);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i318 := $trunc.i32.i16($i317);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} rtl818x_iowrite16($p4, $p315, $i318);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p320, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i322 := $zext.i16.i32($i19);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i323 := $or.i32($i322, 10);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i324 := $trunc.i32.i16($i323);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} rtl818x_iowrite16($p4, $p321, $i324);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __const_udelay(8590);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.0, $p325);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p326, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i328 := $zext.i16.i32($i19);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i329 := $or.i32($i328, 10);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i330 := $trunc.i32.i16($i329);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} rtl818x_iowrite16($p4, $p327, $i330);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __const_udelay(8590);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $p331);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p332, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i334 := $zext.i16.i32($i19);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i335 := $or.i32($i334, 10);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i32.i16($i335);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} rtl818x_iowrite16($p4, $p333, $i336);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} __const_udelay(8590);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.0, $p337);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p338, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i340 := rtl818x_ioread16($p4, $p339);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i341 := $zext.i16.i32($i340);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i342 := $and.i32($i341, 2);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i343 := $ne.i32($i342, 0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    $i344 := $i303;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.0, $p348);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p349, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i351 := $zext.i16.i32($i19);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i352 := $or.i32($i351, 8);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i353 := $trunc.i32.i16($i352);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} rtl818x_iowrite16($p4, $p350, $i353);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} __const_udelay(8590);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p355, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i357 := $zext.i16.i32($i19);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i358 := $or.i32($i357, 8);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i359 := $trunc.i32.i16($i358);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} rtl818x_iowrite16($p4, $p356, $i359);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} __const_udelay(4295);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p361 := $load.ref($M.0, $p360);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p361, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i363 := $zext.i16.i32($i19);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i364 := $or.i32($i363, 10);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i32.i16($i364);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} rtl818x_iowrite16($p4, $p362, $i365);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __const_udelay(8590);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p367, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i369 := $zext.i16.i32($i19);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i370 := $or.i32($i369, 10);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i32.i16($i370);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} rtl818x_iowrite16($p4, $p368, $i371);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} __const_udelay(8590);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p373, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i375 := $zext.i16.i32($i19);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i376 := $or.i32($i375, 10);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i377 := $trunc.i32.i16($i376);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} rtl818x_iowrite16($p4, $p374, $i377);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} __const_udelay(8590);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.0, $p378);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p379, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i381 := rtl818x_ioread16($p4, $p380);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i382 := $zext.i16.i32($i381);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i383 := $and.i32($i382, 2);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i384 := $ne.i32($i383, 0);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    $i385 := $i344;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.0, $p389);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p390, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i392 := $zext.i16.i32($i19);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i393 := $or.i32($i392, 8);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i394 := $trunc.i32.i16($i393);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} rtl818x_iowrite16($p4, $p391, $i394);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} __const_udelay(8590);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.0, $p395);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p396, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i398 := $zext.i16.i32($i19);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i399 := $or.i32($i398, 8);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i400 := $trunc.i32.i16($i399);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} rtl818x_iowrite16($p4, $p397, $i400);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} __const_udelay(4295);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.0, $p401);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i404 := $zext.i16.i32($i19);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i405 := $or.i32($i404, 10);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i406 := $trunc.i32.i16($i405);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} rtl818x_iowrite16($p4, $p403, $i406);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} __const_udelay(8590);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.0, $p407);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p408, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i410 := $zext.i16.i32($i19);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i411 := $or.i32($i410, 10);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i412 := $trunc.i32.i16($i411);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} rtl818x_iowrite16($p4, $p409, $i412);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} __const_udelay(8590);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p414, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i416 := $zext.i16.i32($i19);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i417 := $or.i32($i416, 10);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i418 := $trunc.i32.i16($i417);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} rtl818x_iowrite16($p4, $p415, $i418);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} __const_udelay(8590);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p420 := $load.ref($M.0, $p419);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p420, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i422 := rtl818x_ioread16($p4, $p421);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i423 := $zext.i16.i32($i422);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i424 := $and.i32($i423, 2);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i425 := $ne.i32($i424, 0);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    $i426 := $i385;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.0, $p430);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p431, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i433 := $zext.i16.i32($i19);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i434 := $or.i32($i433, 8);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i435 := $trunc.i32.i16($i434);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} rtl818x_iowrite16($p4, $p432, $i435);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} __const_udelay(8590);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p437, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i439 := $zext.i16.i32($i19);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i440 := $or.i32($i439, 8);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i441 := $trunc.i32.i16($i440);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} rtl818x_iowrite16($p4, $p438, $i441);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} __const_udelay(4295);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p443, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i445 := $zext.i16.i32($i19);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i446 := $or.i32($i445, 10);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i447 := $trunc.i32.i16($i446);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} rtl818x_iowrite16($p4, $p444, $i447);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} __const_udelay(8590);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p449 := $load.ref($M.0, $p448);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p449, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i451 := $zext.i16.i32($i19);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i452 := $or.i32($i451, 10);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i453 := $trunc.i32.i16($i452);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} rtl818x_iowrite16($p4, $p450, $i453);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} __const_udelay(8590);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p455 := $load.ref($M.0, $p454);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p455, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i457 := $zext.i16.i32($i19);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i458 := $or.i32($i457, 10);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i459 := $trunc.i32.i16($i458);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} rtl818x_iowrite16($p4, $p456, $i459);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} __const_udelay(8590);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p461 := $load.ref($M.0, $p460);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p461, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i463 := rtl818x_ioread16($p4, $p462);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i464 := $zext.i16.i32($i463);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i465 := $and.i32($i464, 2);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i466 := $ne.i32($i465, 0);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    $i467 := $i426;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p472, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i474 := $zext.i16.i32($i19);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i475 := $or.i32($i474, 8);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i476 := $trunc.i32.i16($i475);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} rtl818x_iowrite16($p4, $p473, $i476);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} __const_udelay(8590);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.0, $p477);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p478, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i480 := $zext.i16.i32($i19);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i481 := $or.i32($i480, 8);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i482 := $trunc.i32.i16($i481);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} rtl818x_iowrite16($p4, $p479, $i482);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} __const_udelay(4295);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.0, $p483);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p484, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i486 := $zext.i16.i32($i19);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i487 := $or.i32($i486, 10);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i488 := $trunc.i32.i16($i487);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} rtl818x_iowrite16($p4, $p485, $i488);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __const_udelay(8590);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p490 := $load.ref($M.0, $p489);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p490, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i492 := $zext.i16.i32($i19);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i493 := $or.i32($i492, 10);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i494 := $trunc.i32.i16($i493);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} rtl818x_iowrite16($p4, $p491, $i494);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} __const_udelay(8590);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p496 := $load.ref($M.0, $p495);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p496, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i498 := $zext.i16.i32($i19);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i499 := $or.i32($i498, 10);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i500 := $trunc.i32.i16($i499);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} rtl818x_iowrite16($p4, $p497, $i500);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} __const_udelay(8590);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p502 := $load.ref($M.0, $p501);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p502, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i504 := rtl818x_ioread16($p4, $p503);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i505 := $zext.i16.i32($i504);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i506 := $and.i32($i505, 2);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i507 := $ne.i32($i506, 0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    $i508 := $i467;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p513 := $load.ref($M.0, $p512);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p513, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i515 := $zext.i16.i32($i19);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i516 := $or.i32($i515, 8);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i517 := $trunc.i32.i16($i516);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} rtl818x_iowrite16($p4, $p514, $i517);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} __const_udelay(8590);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.0, $p518);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p519, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i521 := $zext.i16.i32($i19);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i522 := $or.i32($i521, 8);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i523 := $trunc.i32.i16($i522);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} rtl818x_iowrite16($p4, $p520, $i523);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} __const_udelay(4295);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p525 := $load.ref($M.0, $p524);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p525, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i527 := $zext.i16.i32($i19);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i528 := $or.i32($i527, 10);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i529 := $trunc.i32.i16($i528);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} rtl818x_iowrite16($p4, $p526, $i529);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} __const_udelay(8590);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p531 := $load.ref($M.0, $p530);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p531, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i533 := $zext.i16.i32($i19);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i534 := $or.i32($i533, 10);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i535 := $trunc.i32.i16($i534);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} rtl818x_iowrite16($p4, $p532, $i535);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} __const_udelay(8590);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p537 := $load.ref($M.0, $p536);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($p537, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i539 := $zext.i16.i32($i19);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i540 := $or.i32($i539, 10);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i541 := $trunc.i32.i16($i540);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} rtl818x_iowrite16($p4, $p538, $i541);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} __const_udelay(8590);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p543 := $load.ref($M.0, $p542);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p543, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i545 := rtl818x_ioread16($p4, $p544);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i546 := $zext.i16.i32($i545);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i547 := $and.i32($i546, 2);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i548 := $ne.i32($i547, 0);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i548 == 1);
    assume {:verifier.code 0} true;
    $i549 := $i508;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p554 := $load.ref($M.0, $p553);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p554, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i556 := $zext.i16.i32($i19);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i557 := $or.i32($i556, 8);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i558 := $trunc.i32.i16($i557);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} rtl818x_iowrite16($p4, $p555, $i558);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} __const_udelay(8590);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p560 := $load.ref($M.0, $p559);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p560, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i562 := $zext.i16.i32($i19);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i563 := $or.i32($i562, 8);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i564 := $trunc.i32.i16($i563);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} rtl818x_iowrite16($p4, $p561, $i564);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} __const_udelay(4295);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p566 := $load.ref($M.0, $p565);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p566, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i568 := $zext.i16.i32($i19);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i569 := $or.i32($i568, 10);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i570 := $trunc.i32.i16($i569);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} rtl818x_iowrite16($p4, $p567, $i570);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} __const_udelay(8590);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p572 := $load.ref($M.0, $p571);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p572, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i574 := $zext.i16.i32($i19);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i575 := $or.i32($i574, 10);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i576 := $trunc.i32.i16($i575);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} rtl818x_iowrite16($p4, $p573, $i576);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} __const_udelay(8590);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p578 := $load.ref($M.0, $p577);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p578, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i580 := $zext.i16.i32($i19);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i581 := $or.i32($i580, 10);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i582 := $trunc.i32.i16($i581);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} rtl818x_iowrite16($p4, $p579, $i582);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} __const_udelay(8590);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p584 := $load.ref($M.0, $p583);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p584, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i586 := rtl818x_ioread16($p4, $p585);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i587 := $zext.i16.i32($i586);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i588 := $and.i32($i587, 2);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i589 := $ne.i32($i588, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i589} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i589 == 1);
    assume {:verifier.code 0} true;
    $i148 := $i549;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p594 := $load.ref($M.0, $p593);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p594, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i596 := $zext.i16.i32($i19);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i597 := $or.i32($i596, 8);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i598 := $trunc.i32.i16($i597);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} rtl818x_iowrite16($p4, $p595, $i598);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} __const_udelay(8590);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i19);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i132, 12);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i16($i133);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} rtl818x_iowrite16($p4, $p131, $i134);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} __const_udelay(8590);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i12);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} rtl818x_iowrite16($p4, $p137, $i139);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i16);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i16($i143);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} rtl818x_iowrite16($p4, $p142, $i144);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} rtl818x_iowrite16($p4, $p147, 928);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $r := $i148;
    return;

  $bb58:
    assume $i589 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i590 := $sext.i16.i32($i549);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i591 := $or.i32(1, $i590);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i592 := $trunc.i32.i16($i591);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i148 := $i592;
    goto $bb60;

  $bb54:
    assume $i548 == 1;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i550 := $sext.i16.i32($i508);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i551 := $or.i32(2, $i550);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i552 := $trunc.i32.i16($i551);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i549 := $i552;
    goto $bb56;

  $bb50:
    assume $i507 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i509 := $sext.i16.i32($i467);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i510 := $or.i32(4, $i509);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i32.i16($i510);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i508 := $i511;
    goto $bb52;

  $bb46:
    assume $i466 == 1;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i468 := $sext.i16.i32($i426);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i469 := $or.i32(8, $i468);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i470 := $trunc.i32.i16($i469);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i467 := $i470;
    goto $bb48;

  $bb42:
    assume $i425 == 1;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i427 := $sext.i16.i32($i385);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i428 := $or.i32(16, $i427);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i429 := $trunc.i32.i16($i428);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i426 := $i429;
    goto $bb44;

  $bb38:
    assume $i384 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i386 := $sext.i16.i32($i344);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i387 := $or.i32(32, $i386);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i388 := $trunc.i32.i16($i387);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i385 := $i388;
    goto $bb40;

  $bb34:
    assume $i343 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i345 := $sext.i16.i32($i303);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i346 := $or.i32(64, $i345);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i32.i16($i346);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i344 := $i347;
    goto $bb36;

  $bb30:
    assume $i302 == 1;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i304 := $sext.i16.i32($i262);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i305 := $or.i32(128, $i304);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i306 := $trunc.i32.i16($i305);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i303 := $i306;
    goto $bb32;

  $bb26:
    assume $i261 == 1;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i263 := $sext.i16.i32($i221);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i264 := $or.i32(256, $i263);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i32.i16($i264);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i262 := $i265;
    goto $bb28;

  $bb22:
    assume $i220 == 1;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i222 := $sext.i16.i32($i180);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i223 := $or.i32(512, $i222);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i16($i223);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i221 := $i224;
    goto $bb24;

  $bb18:
    assume $i179 == 1;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i181 := $sext.i16.i32($i122);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i182 := $or.i32(1024, $i181);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i32.i16($i182);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i180 := $i183;
    goto $bb20;

  $bb13:
    assume $i121 == 1;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i122 := 2048;
    goto $bb15;

  $bb85:
    assume 0 == 1;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p714 := $load.ref($M.0, $p713);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p714, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i716 := $zext.i16.i32($i695);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i717 := $trunc.i32.i16($i716);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} rtl818x_iowrite16($p4, $p715, $i717);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} __const_udelay(4295);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume 1 == 1;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p697 := $load.ref($M.0, $p696);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p697, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i699 := $zext.i16.i32($i695);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i700 := $trunc.i32.i16($i699);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} rtl818x_iowrite16($p4, $p698, $i700);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} __const_udelay(4295);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb78:
    assume 1 == 1;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p685 := $load.ref($M.0, $p684);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p685, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i687 := $zext.i16.i32($i666);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i688 := $trunc.i32.i16($i687);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} rtl818x_iowrite16($p4, $p686, $i688);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} __const_udelay(4295);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume 0 == 1;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.0, $p667);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p668, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i670 := $zext.i16.i32($i666);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i671 := $trunc.i32.i16($i670);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} rtl818x_iowrite16($p4, $p669, $i671);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} __const_udelay(4295);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb71:
    assume 0 == 1;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p655 := $load.ref($M.0, $p654);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p655, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i657 := $zext.i16.i32($i636);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i658 := $trunc.i32.i16($i657);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} rtl818x_iowrite16($p4, $p656, $i658);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __const_udelay(4295);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume 1 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p638 := $load.ref($M.0, $p637);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p638, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i640 := $zext.i16.i32($i636);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i641 := $trunc.i32.i16($i640);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} rtl818x_iowrite16($p4, $p639, $i641);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __const_udelay(4295);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume 1 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p625 := $load.ref($M.0, $p624);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p625, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i627 := $zext.i16.i32($i606);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i628 := $trunc.i32.i16($i627);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} rtl818x_iowrite16($p4, $p626, $i628);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} __const_udelay(4295);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume 0 == 1;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.0, $p607);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p608, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i610 := $zext.i16.i32($i606);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i611 := $trunc.i32.i16($i610);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} rtl818x_iowrite16($p4, $p609, $i611);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} __const_udelay(4295);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb6:
    assume 0 == 1;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i50);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} rtl818x_iowrite16($p4, $p70, $i72);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} __const_udelay(4295);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i50);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} rtl818x_iowrite16($p4, $p53, $i55);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __const_udelay(4295);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rtl8225_write_8051: ref;

axiom rtl8225_write_8051 == $sub.ref(0, 301038);

procedure rtl8225_write_8051($p0: ref, $i1: i8, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_write_8051($p0: ref, $i1: i8, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i16;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i16;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} {:cexpr "rtl8225_write_8051:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 1229} {:cexpr "rtl8225_write_8051:arg:data"} boogie_si_record_i16($i2);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i9 := rtl818x_ioread16($p5, $p8);
    call {:si_unique_call 1231} {:cexpr "reg80"} boogie_si_record_i16($i9);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i13 := rtl818x_ioread16($p5, $p12);
    call {:si_unique_call 1233} {:cexpr "reg82"} boogie_si_record_i16($i13);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i17 := rtl818x_ioread16($p5, $p16);
    call {:si_unique_call 1235} {:cexpr "reg84"} boogie_si_record_i16($i17);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i9);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 65523);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    call {:si_unique_call 1236} {:cexpr "reg80"} boogie_si_record_i16($i20);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i17);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 65520);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    call {:si_unique_call 1237} {:cexpr "reg84"} boogie_si_record_i16($i23);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i13);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 7);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} rtl818x_iowrite16($p5, $p26, $i29);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i23);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 7);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} rtl818x_iowrite16($p5, $p32, $i35);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} __const_udelay(42950);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i20);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 4);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} rtl818x_iowrite16($p5, $p38, $i41);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} __const_udelay(8590);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i20);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} rtl818x_iowrite16($p5, $p44, $i46);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} __const_udelay(42950);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} mutex_lock_nested($p47, 0);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $i2);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i53 := __create_pipe($p52, 0);
    call {:si_unique_call 1247} {:cexpr "tmp"} boogie_si_record_i32($i53);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i53, $sub.i32(0, 2147483648));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i1);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(4280, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_84 := usb_control_msg($p55, $i56, 5, 64, $i58, $sub.i16(0, 32219), $p62, 2, 125);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(4112, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} mutex_unlock($p64);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i20);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, 4);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} rtl818x_iowrite16($p5, $p67, $i70);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} __const_udelay(42950);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i20);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, 4);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} rtl818x_iowrite16($p5, $p73, $i76);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i23);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} rtl818x_iowrite16($p5, $p79, $i81);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_write_bitbang: ref;

axiom rtl8225_write_bitbang == $sub.ref(0, 302070);

procedure rtl8225_write_bitbang($p0: ref, $i1: i8, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_write_bitbang($p0: ref, $i1: i8, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i16;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i16;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i16;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i16;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i16;
  var $i95: i32;
  var $i96: i32;
  var $i97: i16;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i16;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i16;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i16;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i16;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i16;
  var $i124: i32;
  var $i125: i32;
  var $i126: i16;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i16;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i16;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i16;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i16;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i16;
  var $i153: i32;
  var $i154: i32;
  var $i155: i16;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i16;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i16;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $i170: i16;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i176: i16;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $i181: i16;
  var $i182: i32;
  var $i183: i32;
  var $i184: i16;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $i188: i16;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i16;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $i198: i32;
  var $i199: i16;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $i205: i16;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i16;
  var $i211: i32;
  var $i212: i32;
  var $i213: i16;
  var $i214: i32;
  var $i215: i32;
  var $i216: i32;
  var $i217: i16;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i16;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $i228: i16;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $i234: i16;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i32;
  var $i239: i16;
  var $i240: i32;
  var $i241: i32;
  var $i242: i16;
  var $i243: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i16;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i32;
  var $i251: i16;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i32;
  var $i256: i32;
  var $i257: i16;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i261: i32;
  var $i262: i32;
  var $i263: i16;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $i267: i32;
  var $i268: i16;
  var $i269: i32;
  var $i270: i32;
  var $i271: i16;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $i275: i16;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i32;
  var $i280: i16;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $i286: i16;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i32;
  var $i291: i32;
  var $i292: i16;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i32;
  var $i297: i16;
  var $i298: i32;
  var $i299: i32;
  var $i300: i16;
  var $i301: i32;
  var $i302: i32;
  var $i303: i32;
  var $i304: i16;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i309: i16;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $i313: i32;
  var $i314: i32;
  var $i315: i16;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i32;
  var $i320: i32;
  var $i321: i16;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i32;
  var $i326: i16;
  var $i327: i32;
  var $i328: i32;
  var $i329: i16;
  var $i330: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i16;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $i337: i32;
  var $i338: i16;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i32;
  var $i343: i32;
  var $i344: i16;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $i348: i32;
  var $i349: i32;
  var $i350: i16;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i16;
  var $i356: i32;
  var $i357: i32;
  var $i358: i16;
  var $i359: i32;
  var $i360: i32;
  var $i361: i32;
  var $i362: i16;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $i366: i32;
  var $i367: i16;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $i371: i32;
  var $i372: i32;
  var $i373: i16;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i32;
  var $i378: i32;
  var $i379: i16;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $i383: i32;
  var $i384: i16;
  var $i385: i32;
  var $i386: i32;
  var $i387: i16;
  var $i388: i32;
  var $i389: i32;
  var $i390: i32;
  var $i391: i16;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $i395: i32;
  var $i396: i16;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $i400: i32;
  var $i401: i32;
  var $i402: i16;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $i406: i32;
  var $i407: i32;
  var $i408: i16;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $i412: i32;
  var $i413: i16;
  var $i414: i32;
  var $i415: i32;
  var $i416: i16;
  var $i417: i32;
  var $i418: i32;
  var $i419: i32;
  var $i420: i16;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $i424: i32;
  var $i425: i16;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $i429: i32;
  var $i430: i32;
  var $i431: i16;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $i435: i32;
  var $i436: i32;
  var $i437: i16;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $i441: i32;
  var $i442: i16;
  var $i443: i32;
  var $i444: i32;
  var $i445: i16;
  var $i446: i32;
  var $i447: i32;
  var $i448: i32;
  var $i449: i16;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $i453: i32;
  var $i454: i16;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $i458: i32;
  var $i459: i32;
  var $i460: i16;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $i464: i32;
  var $i465: i32;
  var $i466: i16;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $i470: i32;
  var $i471: i16;
  var $i472: i32;
  var $i473: i32;
  var $i474: i16;
  var $i475: i32;
  var $i476: i32;
  var $i477: i32;
  var $i478: i16;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $i482: i32;
  var $i483: i16;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $i487: i32;
  var $i488: i32;
  var $i489: i16;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $i493: i32;
  var $i494: i32;
  var $i495: i16;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $i499: i32;
  var $i500: i16;
  var $i501: i32;
  var $i502: i16;
  var $i503: i32;
  var $i504: i32;
  var $i505: i32;
  var $i506: i16;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $i510: i32;
  var $i511: i16;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $i515: i32;
  var $i516: i32;
  var $i517: i16;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $i521: i32;
  var $i522: i32;
  var $i523: i16;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $i527: i32;
  var $i528: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} {:cexpr "rtl8225_write_bitbang:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 1255} {:cexpr "rtl8225_write_bitbang:arg:data"} boogie_si_record_i16($i2);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i2);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 4);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 15);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $i9);
    call {:si_unique_call 1256} {:cexpr "bangdata"} boogie_si_record_i32($i10);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i14 := rtl818x_ioread16($p5, $p13);
    call {:si_unique_call 1258} {:cexpr "tmp"} boogie_si_record_i16($i14);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 65523);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    call {:si_unique_call 1259} {:cexpr "reg80"} boogie_si_record_i16($i17);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i21 := rtl818x_ioread16($p5, $p20);
    call {:si_unique_call 1261} {:cexpr "reg82"} boogie_si_record_i16($i21);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i21);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 7);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} rtl818x_iowrite16($p5, $p24, $i27);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i31 := rtl818x_ioread16($p5, $p30);
    call {:si_unique_call 1264} {:cexpr "reg84"} boogie_si_record_i16($i31);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i31);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 7);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} rtl818x_iowrite16($p5, $p34, $i37);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} __const_udelay(42950);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i17);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 4);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} rtl818x_iowrite16($p5, $p40, $i43);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __const_udelay(8590);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i17);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} rtl818x_iowrite16($p5, $p46, $i48);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} __const_udelay(42950);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i49 := $and.i32(32768, $i10);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i32($i49, 15);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i17);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i52, $i53);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    call {:si_unique_call 1271} {:cexpr "reg"} boogie_si_record_i16($i55);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i55);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 2);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} rtl818x_iowrite16($p5, $p63, $i66);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i55);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 2);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} rtl818x_iowrite16($p5, $p69, $i72);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i95 := $and.i32(16384, $i10);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i96 := $lshr.i32($i95, 14);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i17);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i98, $i99);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i101);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i111 := $or.i32($i110, 2);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} rtl818x_iowrite16($p5, $p109, $i112);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i101);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i116, 2);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} rtl818x_iowrite16($p5, $p115, $i118);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb14, $bb15;

  $bb15:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i124 := $and.i32(8192, $i10);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i125 := $lshr.i32($i124, 13);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i125);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i17);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i129 := $or.i32($i127, $i128);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb18, $bb19;

  $bb19:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i130);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i140 := $or.i32($i139, 2);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i16($i140);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} rtl818x_iowrite16($p5, $p138, $i141);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i130);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i145, 2);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} rtl818x_iowrite16($p5, $p144, $i147);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb21, $bb22;

  $bb22:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i153 := $and.i32(4096, $i10);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i154 := $lshr.i32($i153, 12);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i16($i154);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i155);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i17);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i158 := $or.i32($i156, $i157);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i16($i158);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb25, $bb26;

  $bb26:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i159);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i169 := $or.i32($i168, 2);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i16($i169);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} rtl818x_iowrite16($p5, $p167, $i170);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i159);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i175 := $or.i32($i174, 2);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i32.i16($i175);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} rtl818x_iowrite16($p5, $p173, $i176);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb28, $bb29;

  $bb29:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i182 := $and.i32(2048, $i10);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i183 := $lshr.i32($i182, 11);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i16($i183);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i185 := $zext.i16.i32($i184);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i186 := $zext.i16.i32($i17);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i185, $i186);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i16($i187);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32($i188);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i198 := $or.i32($i197, 2);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i16($i198);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} rtl818x_iowrite16($p5, $p196, $i199);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i203 := $zext.i16.i32($i188);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i204 := $or.i32($i203, 2);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i16($i204);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} rtl818x_iowrite16($p5, $p202, $i205);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb35, $bb36;

  $bb36:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i211 := $and.i32(1024, $i10);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i212 := $lshr.i32($i211, 10);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i16($i212);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i215 := $zext.i16.i32($i17);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i216 := $or.i32($i214, $i215);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i16($i216);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb39, $bb40;

  $bb40:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p224, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i226 := $zext.i16.i32($i217);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i227 := $or.i32($i226, 2);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i32.i16($i227);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} rtl818x_iowrite16($p5, $p225, $i228);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p230, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i217);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i233 := $or.i32($i232, 2);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i234 := $trunc.i32.i16($i233);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} rtl818x_iowrite16($p5, $p231, $i234);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb42, $bb43;

  $bb43:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i240 := $and.i32(512, $i10);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i241 := $lshr.i32($i240, 9);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i243 := $zext.i16.i32($i242);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i244 := $zext.i16.i32($i17);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i245 := $or.i32($i243, $i244);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i32.i16($i245);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb46, $bb47;

  $bb47:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p253, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i255 := $zext.i16.i32($i246);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i256 := $or.i32($i255, 2);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i16($i256);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} rtl818x_iowrite16($p5, $p254, $i257);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p259, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i261 := $zext.i16.i32($i246);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i262 := $or.i32($i261, 2);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i263 := $trunc.i32.i16($i262);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} rtl818x_iowrite16($p5, $p260, $i263);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb49, $bb50;

  $bb50:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i269 := $and.i32(256, $i10);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i270 := $lshr.i32($i269, 8);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i32.i16($i270);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i271);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i273 := $zext.i16.i32($i17);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i274 := $or.i32($i272, $i273);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i275 := $trunc.i32.i16($i274);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb53, $bb54;

  $bb54:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p282, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i284 := $zext.i16.i32($i275);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i285 := $or.i32($i284, 2);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i16($i285);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} rtl818x_iowrite16($p5, $p283, $i286);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p288, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i290 := $zext.i16.i32($i275);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i291 := $or.i32($i290, 2);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i32.i16($i291);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} rtl818x_iowrite16($p5, $p289, $i292);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb56, $bb57;

  $bb57:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i298 := $and.i32(128, $i10);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i299 := $lshr.i32($i298, 7);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i300 := $trunc.i32.i16($i299);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i301 := $zext.i16.i32($i300);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i302 := $zext.i16.i32($i17);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i303 := $or.i32($i301, $i302);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i304 := $trunc.i32.i16($i303);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb60, $bb61;

  $bb61:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p311, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i313 := $zext.i16.i32($i304);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i314 := $or.i32($i313, 2);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i32.i16($i314);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} rtl818x_iowrite16($p5, $p312, $i315);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p317, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i319 := $zext.i16.i32($i304);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i320 := $or.i32($i319, 2);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i321 := $trunc.i32.i16($i320);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} rtl818x_iowrite16($p5, $p318, $i321);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb63, $bb64;

  $bb64:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i327 := $and.i32(64, $i10);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i328 := $lshr.i32($i327, 6);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i329 := $trunc.i32.i16($i328);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i330 := $zext.i16.i32($i329);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i331 := $zext.i16.i32($i17);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i332 := $or.i32($i330, $i331);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i32.i16($i332);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb67, $bb68;

  $bb68:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.0, $p339);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p340, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i342 := $zext.i16.i32($i333);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i343 := $or.i32($i342, 2);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i344 := $trunc.i32.i16($i343);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} rtl818x_iowrite16($p5, $p341, $i344);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.0, $p345);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p346, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i348 := $zext.i16.i32($i333);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i349 := $or.i32($i348, 2);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i32.i16($i349);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} rtl818x_iowrite16($p5, $p347, $i350);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb70, $bb71;

  $bb71:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i356 := $and.i32(32, $i10);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i357 := $lshr.i32($i356, 5);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i358 := $trunc.i32.i16($i357);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i359 := $zext.i16.i32($i358);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i360 := $zext.i16.i32($i17);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i361 := $or.i32($i359, $i360);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i362 := $trunc.i32.i16($i361);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb74, $bb75;

  $bb75:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.0, $p368);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p369, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i371 := $zext.i16.i32($i362);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i372 := $or.i32($i371, 2);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i373 := $trunc.i32.i16($i372);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} rtl818x_iowrite16($p5, $p370, $i373);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p375, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i362);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i378 := $or.i32($i377, 2);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i32.i16($i378);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} rtl818x_iowrite16($p5, $p376, $i379);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb77, $bb78;

  $bb78:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i385 := $and.i32(16, $i10);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i386 := $lshr.i32($i385, 4);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i32.i16($i386);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i388 := $zext.i16.i32($i387);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i389 := $zext.i16.i32($i17);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i390 := $or.i32($i388, $i389);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i391 := $trunc.i32.i16($i390);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb81, $bb82;

  $bb82:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.0, $p397);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p398, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i400 := $zext.i16.i32($i391);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i401 := $or.i32($i400, 2);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i402 := $trunc.i32.i16($i401);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} rtl818x_iowrite16($p5, $p399, $i402);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.0, $p403);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p404, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i406 := $zext.i16.i32($i391);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i407 := $or.i32($i406, 2);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i408 := $trunc.i32.i16($i407);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} rtl818x_iowrite16($p5, $p405, $i408);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb84, $bb85;

  $bb85:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i414 := $and.i32(8, $i10);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i415 := $lshr.i32($i414, 3);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i416 := $trunc.i32.i16($i415);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i417 := $zext.i16.i32($i416);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i418 := $zext.i16.i32($i17);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i419 := $or.i32($i417, $i418);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i420 := $trunc.i32.i16($i419);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb88, $bb89;

  $bb89:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p427, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i429 := $zext.i16.i32($i420);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i430 := $or.i32($i429, 2);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i431 := $trunc.i32.i16($i430);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} rtl818x_iowrite16($p5, $p428, $i431);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p433 := $load.ref($M.0, $p432);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p433, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i435 := $zext.i16.i32($i420);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i436 := $or.i32($i435, 2);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i437 := $trunc.i32.i16($i436);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} rtl818x_iowrite16($p5, $p434, $i437);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb91, $bb92;

  $bb92:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i443 := $and.i32(4, $i10);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i444 := $lshr.i32($i443, 2);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i445 := $trunc.i32.i16($i444);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i446 := $zext.i16.i32($i445);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i447 := $zext.i16.i32($i17);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i448 := $or.i32($i446, $i447);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i449 := $trunc.i32.i16($i448);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb95, $bb96;

  $bb96:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.0, $p455);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p456, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i458 := $zext.i16.i32($i449);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i459 := $or.i32($i458, 2);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i460 := $trunc.i32.i16($i459);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} rtl818x_iowrite16($p5, $p457, $i460);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p462 := $load.ref($M.0, $p461);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p462, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i464 := $zext.i16.i32($i449);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i465 := $or.i32($i464, 2);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i466 := $trunc.i32.i16($i465);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} rtl818x_iowrite16($p5, $p463, $i466);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb98, $bb99;

  $bb99:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i472 := $and.i32(2, $i10);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i473 := $lshr.i32($i472, 1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i474 := $trunc.i32.i16($i473);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i475 := $zext.i16.i32($i474);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i476 := $zext.i16.i32($i17);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i477 := $or.i32($i475, $i476);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i478 := $trunc.i32.i16($i477);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb102, $bb103;

  $bb103:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.0, $p484);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p485, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i487 := $zext.i16.i32($i478);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i488 := $or.i32($i487, 2);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i489 := $trunc.i32.i16($i488);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} rtl818x_iowrite16($p5, $p486, $i489);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.0, $p490);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p491, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i493 := $zext.i16.i32($i478);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i494 := $or.i32($i493, 2);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i495 := $trunc.i32.i16($i494);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} rtl818x_iowrite16($p5, $p492, $i495);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb105, $bb106;

  $bb106:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i501 := $and.i32(1, $i10);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i502 := $trunc.i32.i16($i501);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i503 := $zext.i16.i32($i502);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i504 := $zext.i16.i32($i17);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i505 := $or.i32($i503, $i504);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i506 := $trunc.i32.i16($i505);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb109, $bb110;

  $bb110:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p513 := $load.ref($M.0, $p512);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p513, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i515 := $zext.i16.i32($i506);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i516 := $or.i32($i515, 2);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i517 := $trunc.i32.i16($i516);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} rtl818x_iowrite16($p5, $p514, $i517);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.0, $p518);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p519, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i521 := $zext.i16.i32($i506);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i522 := $or.i32($i521, 2);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i523 := $trunc.i32.i16($i522);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} rtl818x_iowrite16($p5, $p520, $i523);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb112, $bb113;

  $bb113:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i17);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, 4);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} rtl818x_iowrite16($p5, $p80, $i83);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} __const_udelay(42950);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i17);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 4);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} rtl818x_iowrite16($p5, $p86, $i89);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i31);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} rtl818x_iowrite16($p5, $p92, $i94);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    return;

  $bb112:
    assume 1 == 1;
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p525 := $load.ref($M.0, $p524);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p525, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i527 := $zext.i16.i32($i506);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i528 := $trunc.i32.i16($i527);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} rtl818x_iowrite16($p5, $p526, $i528);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume 0 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p508 := $load.ref($M.0, $p507);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p508, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i510 := $zext.i16.i32($i506);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i32.i16($i510);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} rtl818x_iowrite16($p5, $p509, $i511);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb105:
    assume 0 == 1;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p497 := $load.ref($M.0, $p496);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p497, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i499 := $zext.i16.i32($i478);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i500 := $trunc.i32.i16($i499);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} rtl818x_iowrite16($p5, $p498, $i500);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume 1 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.0, $p479);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p480, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i482 := $zext.i16.i32($i478);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i32.i16($i482);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} rtl818x_iowrite16($p5, $p481, $i483);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb98:
    assume 1 == 1;
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p468 := $load.ref($M.0, $p467);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p468, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i470 := $zext.i16.i32($i449);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i471 := $trunc.i32.i16($i470);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} rtl818x_iowrite16($p5, $p469, $i471);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume 0 == 1;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p451 := $load.ref($M.0, $p450);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p451, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i453 := $zext.i16.i32($i449);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i454 := $trunc.i32.i16($i453);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} rtl818x_iowrite16($p5, $p452, $i454);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb91:
    assume 0 == 1;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.0, $p438);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p439, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i441 := $zext.i16.i32($i420);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i442 := $trunc.i32.i16($i441);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} rtl818x_iowrite16($p5, $p440, $i442);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume 1 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.0, $p421);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p422, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i424 := $zext.i16.i32($i420);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i425 := $trunc.i32.i16($i424);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} rtl818x_iowrite16($p5, $p423, $i425);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume 1 == 1;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p410, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i412 := $zext.i16.i32($i391);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i413 := $trunc.i32.i16($i412);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} rtl818x_iowrite16($p5, $p411, $i413);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume 0 == 1;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.0, $p392);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p393, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i395 := $zext.i16.i32($i391);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i396 := $trunc.i32.i16($i395);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} rtl818x_iowrite16($p5, $p394, $i396);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb77:
    assume 0 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p381 := $load.ref($M.0, $p380);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p381, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i383 := $zext.i16.i32($i362);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i384 := $trunc.i32.i16($i383);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} rtl818x_iowrite16($p5, $p382, $i384);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume 1 == 1;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p364 := $load.ref($M.0, $p363);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p364, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i366 := $zext.i16.i32($i362);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i32.i16($i366);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} rtl818x_iowrite16($p5, $p365, $i367);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb70:
    assume 1 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p352, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i354 := $zext.i16.i32($i333);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i32.i16($i354);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} rtl818x_iowrite16($p5, $p353, $i355);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume 0 == 1;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.0, $p334);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p335, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i337 := $zext.i16.i32($i333);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i16($i337);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} rtl818x_iowrite16($p5, $p336, $i338);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb63:
    assume 0 == 1;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p323, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i325 := $zext.i16.i32($i304);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i326 := $trunc.i32.i16($i325);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} rtl818x_iowrite16($p5, $p324, $i326);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume 1 == 1;
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p306, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i308 := $zext.i16.i32($i304);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i309 := $trunc.i32.i16($i308);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} rtl818x_iowrite16($p5, $p307, $i309);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume 1 == 1;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p294, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i296 := $zext.i16.i32($i275);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i297 := $trunc.i32.i16($i296);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} rtl818x_iowrite16($p5, $p295, $i297);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume 0 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p277, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i279 := $zext.i16.i32($i275);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i280 := $trunc.i32.i16($i279);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} rtl818x_iowrite16($p5, $p278, $i280);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume 0 == 1;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.0, $p264);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p265, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i267 := $zext.i16.i32($i246);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i32.i16($i267);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} rtl818x_iowrite16($p5, $p266, $i268);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume 1 == 1;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i250 := $zext.i16.i32($i246);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i32.i16($i250);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} rtl818x_iowrite16($p5, $p249, $i251);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb42:
    assume 1 == 1;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p236, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i238 := $zext.i16.i32($i217);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i32.i16($i238);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} rtl818x_iowrite16($p5, $p237, $i239);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume 0 == 1;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p219, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i221 := $zext.i16.i32($i217);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i222 := $trunc.i32.i16($i221);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} rtl818x_iowrite16($p5, $p220, $i222);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume 0 == 1;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i188);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i32.i16($i209);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} rtl818x_iowrite16($p5, $p208, $i210);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume 1 == 1;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i188);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i16($i192);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} rtl818x_iowrite16($p5, $p191, $i193);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume 1 == 1;
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p178, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i159);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} rtl818x_iowrite16($p5, $p179, $i181);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume 0 == 1;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i163 := $zext.i16.i32($i159);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i16($i163);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} rtl818x_iowrite16($p5, $p162, $i164);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume 0 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i130);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} rtl818x_iowrite16($p5, $p150, $i152);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume 1 == 1;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i130);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} rtl818x_iowrite16($p5, $p133, $i135);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume 1 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i101);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i122);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} rtl818x_iowrite16($p5, $p121, $i123);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume 0 == 1;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i101);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i16($i105);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} rtl818x_iowrite16($p5, $p104, $i106);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume 0 == 1;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i55);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} rtl818x_iowrite16($p5, $p75, $i77);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i55);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} rtl818x_iowrite16($p5, $p58, $i60);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 303102);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 304134);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 305166);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    return;
}



const set_wiphy_dev: ref;

axiom set_wiphy_dev == $sub.ref(0, 306198);

procedure set_wiphy_dev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_wiphy_dev($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1768)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_rf_init: ref;

axiom rtl8225_rf_init == $sub.ref(0, 307230);

procedure rtl8225_rf_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} rtl8225_write($p0, 0, 103);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} rtl8225_write($p0, 1, 4064);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} rtl8225_write($p0, 3, 1089);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} rtl8225_write($p0, 4, 1158);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} rtl8225_write($p0, 5, 3008);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} rtl8225_write($p0, 6, 2790);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} rtl8225_write($p0, 7, 2090);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} rtl8225_write($p0, 8, 31);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} rtl8225_write($p0, 9, 820);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} rtl8225_write($p0, 10, 4052);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} rtl8225_write($p0, 11, 913);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} rtl8225_write($p0, 12, 80);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} rtl8225_write($p0, 13, 1755);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} rtl8225_write($p0, 14, 41);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} rtl8225_write($p0, 15, 2324);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} msleep(100);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} rtl8225_write($p0, 2, 3149);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} msleep(200);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} msleep(200);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i4 := rtl8225_read($p0, 6);
    call {:si_unique_call 1363} {:cexpr "tmp___1"} boogie_si_record_i16($i4);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 128);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} rtl8225_write($p0, 0, 295);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} rtl8225_write($p0, 1, 1);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} rtl8225_write($p0, 2, 1024);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} rtl8225_write($p0, 1, 2);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} rtl8225_write($p0, 2, 1025);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} rtl8225_write($p0, 1, 3);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} rtl8225_write($p0, 2, 1026);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} rtl8225_write($p0, 1, 4);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} rtl8225_write($p0, 2, 1027);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} rtl8225_write($p0, 1, 5);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} rtl8225_write($p0, 2, 1028);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} rtl8225_write($p0, 1, 6);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} rtl8225_write($p0, 2, 1029);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} rtl8225_write($p0, 1, 7);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} rtl8225_write($p0, 2, 1032);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} rtl8225_write($p0, 1, 8);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} rtl8225_write($p0, 2, 1033);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} rtl8225_write($p0, 1, 9);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} rtl8225_write($p0, 2, 1034);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} rtl8225_write($p0, 1, 10);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} rtl8225_write($p0, 2, 1035);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} rtl8225_write($p0, 1, 11);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} rtl8225_write($p0, 2, 1282);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} rtl8225_write($p0, 1, 12);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} rtl8225_write($p0, 2, 1283);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} rtl8225_write($p0, 1, 13);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} rtl8225_write($p0, 2, 1284);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} rtl8225_write($p0, 1, 14);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} rtl8225_write($p0, 2, 1285);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} rtl8225_write($p0, 1, 15);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} rtl8225_write($p0, 2, 1344);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} rtl8225_write($p0, 1, 16);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} rtl8225_write($p0, 2, 1345);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} rtl8225_write($p0, 1, 17);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} rtl8225_write($p0, 2, 1346);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} rtl8225_write($p0, 1, 18);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} rtl8225_write($p0, 2, 1347);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} rtl8225_write($p0, 1, 19);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} rtl8225_write($p0, 2, 1348);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} rtl8225_write($p0, 1, 20);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} rtl8225_write($p0, 2, 1349);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} rtl8225_write($p0, 1, 21);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} rtl8225_write($p0, 2, 1408);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} rtl8225_write($p0, 1, 22);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} rtl8225_write($p0, 2, 1409);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} rtl8225_write($p0, 1, 23);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} rtl8225_write($p0, 2, 1410);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} rtl8225_write($p0, 1, 24);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} rtl8225_write($p0, 2, 1411);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} rtl8225_write($p0, 1, 25);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} rtl8225_write($p0, 2, 1412);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} rtl8225_write($p0, 1, 26);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} rtl8225_write($p0, 2, 1413);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} rtl8225_write($p0, 1, 27);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} rtl8225_write($p0, 2, 1416);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} rtl8225_write($p0, 1, 28);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} rtl8225_write($p0, 2, 1417);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} rtl8225_write($p0, 1, 29);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} rtl8225_write($p0, 2, 1418);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} rtl8225_write($p0, 1, 30);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} rtl8225_write($p0, 2, 1419);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} rtl8225_write($p0, 1, 31);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} rtl8225_write($p0, 2, 1603);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} rtl8225_write($p0, 1, 32);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} rtl8225_write($p0, 2, 1604);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} rtl8225_write($p0, 1, 33);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} rtl8225_write($p0, 2, 1605);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} rtl8225_write($p0, 1, 34);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} rtl8225_write($p0, 2, 1664);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} rtl8225_write($p0, 1, 35);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} rtl8225_write($p0, 2, 1665);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} rtl8225_write($p0, 1, 36);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} rtl8225_write($p0, 2, 1666);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} rtl8225_write($p0, 1, 37);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} rtl8225_write($p0, 2, 1667);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} rtl8225_write($p0, 1, 38);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} rtl8225_write($p0, 2, 1668);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} rtl8225_write($p0, 1, 39);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} rtl8225_write($p0, 2, 1669);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} rtl8225_write($p0, 1, 40);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} rtl8225_write($p0, 2, 1672);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} rtl8225_write($p0, 1, 41);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} rtl8225_write($p0, 2, 1673);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} rtl8225_write($p0, 1, 42);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} rtl8225_write($p0, 2, 1674);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} rtl8225_write($p0, 1, 43);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} rtl8225_write($p0, 2, 1675);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} rtl8225_write($p0, 1, 44);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} rtl8225_write($p0, 2, 1676);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} rtl8225_write($p0, 1, 45);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} rtl8225_write($p0, 2, 1858);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} rtl8225_write($p0, 1, 46);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} rtl8225_write($p0, 2, 1859);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} rtl8225_write($p0, 1, 47);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} rtl8225_write($p0, 2, 1860);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} rtl8225_write($p0, 1, 48);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} rtl8225_write($p0, 2, 1861);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} rtl8225_write($p0, 1, 49);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} rtl8225_write($p0, 2, 1920);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} rtl8225_write($p0, 1, 50);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} rtl8225_write($p0, 2, 1921);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} rtl8225_write($p0, 1, 51);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} rtl8225_write($p0, 2, 1922);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} rtl8225_write($p0, 1, 52);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} rtl8225_write($p0, 2, 1923);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} rtl8225_write($p0, 1, 53);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} rtl8225_write($p0, 2, 1924);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} rtl8225_write($p0, 1, 54);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} rtl8225_write($p0, 2, 1925);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} rtl8225_write($p0, 1, 55);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} rtl8225_write($p0, 2, 1928);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} rtl8225_write($p0, 1, 56);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} rtl8225_write($p0, 2, 1929);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} rtl8225_write($p0, 1, 57);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} rtl8225_write($p0, 2, 1930);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} rtl8225_write($p0, 1, 58);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} rtl8225_write($p0, 2, 1931);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} rtl8225_write($p0, 1, 59);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} rtl8225_write($p0, 2, 1932);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} rtl8225_write($p0, 1, 60);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} rtl8225_write($p0, 2, 1933);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} rtl8225_write($p0, 1, 61);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} rtl8225_write($p0, 2, 1936);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} rtl8225_write($p0, 1, 62);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} rtl8225_write($p0, 2, 1937);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} rtl8225_write($p0, 1, 63);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} rtl8225_write($p0, 2, 1938);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} rtl8225_write($p0, 1, 64);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} rtl8225_write($p0, 2, 1939);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} rtl8225_write($p0, 1, 65);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} rtl8225_write($p0, 2, 1940);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} rtl8225_write($p0, 1, 66);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} rtl8225_write($p0, 2, 1941);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} rtl8225_write($p0, 1, 67);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} rtl8225_write($p0, 2, 1944);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} rtl8225_write($p0, 1, 68);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} rtl8225_write($p0, 2, 1945);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} rtl8225_write($p0, 1, 69);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} rtl8225_write($p0, 2, 1946);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} rtl8225_write($p0, 1, 70);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} rtl8225_write($p0, 2, 1947);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} rtl8225_write($p0, 1, 71);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} rtl8225_write($p0, 2, 1948);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} rtl8225_write($p0, 1, 72);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} rtl8225_write($p0, 2, 1949);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} rtl8225_write($p0, 1, 73);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} rtl8225_write($p0, 2, 1952);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} rtl8225_write($p0, 1, 74);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} rtl8225_write($p0, 2, 1953);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} rtl8225_write($p0, 1, 75);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} rtl8225_write($p0, 2, 1954);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} rtl8225_write($p0, 1, 76);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} rtl8225_write($p0, 2, 1955);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} rtl8225_write($p0, 1, 77);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} rtl8225_write($p0, 2, 1956);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} rtl8225_write($p0, 1, 78);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} rtl8225_write($p0, 2, 1957);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} rtl8225_write($p0, 1, 79);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} rtl8225_write($p0, 2, 1960);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} rtl8225_write($p0, 1, 80);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} rtl8225_write($p0, 2, 1961);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} rtl8225_write($p0, 1, 81);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} rtl8225_write($p0, 2, 1962);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} rtl8225_write($p0, 1, 82);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} rtl8225_write($p0, 2, 1963);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} rtl8225_write($p0, 1, 83);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} rtl8225_write($p0, 2, 1964);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} rtl8225_write($p0, 1, 84);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} rtl8225_write($p0, 2, 1965);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} rtl8225_write($p0, 1, 85);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} rtl8225_write($p0, 2, 1968);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} rtl8225_write($p0, 1, 86);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} rtl8225_write($p0, 2, 1969);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} rtl8225_write($p0, 1, 87);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} rtl8225_write($p0, 2, 1970);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} rtl8225_write($p0, 1, 88);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} rtl8225_write($p0, 2, 1971);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} rtl8225_write($p0, 1, 89);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} rtl8225_write($p0, 2, 1972);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} rtl8225_write($p0, 1, 90);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} rtl8225_write($p0, 2, 1973);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} rtl8225_write($p0, 1, 91);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} rtl8225_write($p0, 2, 1976);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} rtl8225_write($p0, 1, 92);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} rtl8225_write($p0, 2, 1977);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} rtl8225_write($p0, 1, 93);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} rtl8225_write($p0, 2, 1978);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} rtl8225_write($p0, 1, 94);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} rtl8225_write($p0, 2, 1979);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} rtl8225_write($p0, 1, 95);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} rtl8225_write($p0, 2, 1979);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} rtl8225_write($p0, 0, 39);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} rtl8225_write($p0, 0, 559);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} rtl8225_write_phy_ofdm($p0, 10, 128);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} rtl8225_write_phy_ofdm($p0, 10, 129);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} rtl8225_write_phy_ofdm($p0, 10, 130);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} rtl8225_write_phy_ofdm($p0, 10, 131);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} rtl8225_write_phy_ofdm($p0, 10, 132);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} rtl8225_write_phy_ofdm($p0, 10, 133);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} rtl8225_write_phy_ofdm($p0, 10, 134);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} rtl8225_write_phy_ofdm($p0, 10, 135);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} rtl8225_write_phy_ofdm($p0, 11, 157);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} rtl8225_write_phy_ofdm($p0, 10, 136);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} rtl8225_write_phy_ofdm($p0, 11, 156);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} rtl8225_write_phy_ofdm($p0, 10, 137);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} rtl8225_write_phy_ofdm($p0, 11, 155);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} rtl8225_write_phy_ofdm($p0, 10, 138);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} rtl8225_write_phy_ofdm($p0, 11, 154);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} rtl8225_write_phy_ofdm($p0, 10, 139);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} rtl8225_write_phy_ofdm($p0, 11, 153);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} rtl8225_write_phy_ofdm($p0, 10, 140);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} rtl8225_write_phy_ofdm($p0, 11, 152);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} rtl8225_write_phy_ofdm($p0, 10, 141);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} rtl8225_write_phy_ofdm($p0, 11, 151);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} rtl8225_write_phy_ofdm($p0, 10, 142);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} rtl8225_write_phy_ofdm($p0, 11, 150);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} rtl8225_write_phy_ofdm($p0, 10, 143);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} rtl8225_write_phy_ofdm($p0, 11, 149);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} rtl8225_write_phy_ofdm($p0, 10, 144);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} rtl8225_write_phy_ofdm($p0, 11, 148);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} rtl8225_write_phy_ofdm($p0, 10, 145);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} rtl8225_write_phy_ofdm($p0, 11, 147);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} rtl8225_write_phy_ofdm($p0, 10, 146);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} rtl8225_write_phy_ofdm($p0, 11, 146);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} rtl8225_write_phy_ofdm($p0, 10, 147);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} rtl8225_write_phy_ofdm($p0, 11, 145);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} rtl8225_write_phy_ofdm($p0, 10, 148);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} rtl8225_write_phy_ofdm($p0, 11, 144);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} rtl8225_write_phy_ofdm($p0, 10, 149);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} rtl8225_write_phy_ofdm($p0, 11, 143);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} rtl8225_write_phy_ofdm($p0, 10, 150);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} rtl8225_write_phy_ofdm($p0, 11, 142);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} rtl8225_write_phy_ofdm($p0, 10, 151);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} rtl8225_write_phy_ofdm($p0, 11, 141);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} rtl8225_write_phy_ofdm($p0, 10, 152);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} rtl8225_write_phy_ofdm($p0, 11, 140);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} rtl8225_write_phy_ofdm($p0, 10, 153);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} rtl8225_write_phy_ofdm($p0, 11, 139);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} rtl8225_write_phy_ofdm($p0, 10, 154);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} rtl8225_write_phy_ofdm($p0, 11, 138);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} rtl8225_write_phy_ofdm($p0, 10, 155);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} rtl8225_write_phy_ofdm($p0, 11, 137);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} rtl8225_write_phy_ofdm($p0, 10, 156);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} rtl8225_write_phy_ofdm($p0, 11, 136);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} rtl8225_write_phy_ofdm($p0, 10, 157);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} rtl8225_write_phy_ofdm($p0, 11, 135);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} rtl8225_write_phy_ofdm($p0, 10, 158);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} rtl8225_write_phy_ofdm($p0, 11, 134);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} rtl8225_write_phy_ofdm($p0, 10, 159);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} rtl8225_write_phy_ofdm($p0, 11, 133);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} rtl8225_write_phy_ofdm($p0, 10, 160);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} rtl8225_write_phy_ofdm($p0, 11, 132);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} rtl8225_write_phy_ofdm($p0, 10, 161);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} rtl8225_write_phy_ofdm($p0, 11, 131);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} rtl8225_write_phy_ofdm($p0, 10, 162);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} rtl8225_write_phy_ofdm($p0, 11, 130);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} rtl8225_write_phy_ofdm($p0, 10, 163);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} rtl8225_write_phy_ofdm($p0, 11, 129);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} rtl8225_write_phy_ofdm($p0, 10, 164);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} rtl8225_write_phy_ofdm($p0, 11, 128);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} rtl8225_write_phy_ofdm($p0, 10, 165);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} rtl8225_write_phy_ofdm($p0, 11, 63);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} rtl8225_write_phy_ofdm($p0, 10, 166);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} rtl8225_write_phy_ofdm($p0, 11, 62);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} rtl8225_write_phy_ofdm($p0, 10, 167);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} rtl8225_write_phy_ofdm($p0, 11, 61);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} rtl8225_write_phy_ofdm($p0, 10, 168);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} rtl8225_write_phy_ofdm($p0, 11, 60);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} rtl8225_write_phy_ofdm($p0, 10, 169);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} rtl8225_write_phy_ofdm($p0, 11, 59);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} rtl8225_write_phy_ofdm($p0, 10, 170);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} rtl8225_write_phy_ofdm($p0, 11, 58);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} rtl8225_write_phy_ofdm($p0, 10, 171);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} rtl8225_write_phy_ofdm($p0, 11, 57);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} rtl8225_write_phy_ofdm($p0, 10, 172);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} rtl8225_write_phy_ofdm($p0, 11, 56);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} rtl8225_write_phy_ofdm($p0, 10, 173);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} rtl8225_write_phy_ofdm($p0, 11, 55);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} rtl8225_write_phy_ofdm($p0, 10, 174);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} rtl8225_write_phy_ofdm($p0, 11, 54);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} rtl8225_write_phy_ofdm($p0, 10, 175);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} rtl8225_write_phy_ofdm($p0, 11, 53);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} rtl8225_write_phy_ofdm($p0, 10, 176);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} rtl8225_write_phy_ofdm($p0, 11, 52);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} rtl8225_write_phy_ofdm($p0, 10, 177);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} rtl8225_write_phy_ofdm($p0, 11, 51);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} rtl8225_write_phy_ofdm($p0, 10, 178);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} rtl8225_write_phy_ofdm($p0, 11, 50);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} rtl8225_write_phy_ofdm($p0, 10, 179);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} rtl8225_write_phy_ofdm($p0, 11, 49);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} rtl8225_write_phy_ofdm($p0, 10, 180);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} rtl8225_write_phy_ofdm($p0, 11, 48);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} rtl8225_write_phy_ofdm($p0, 10, 181);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} rtl8225_write_phy_ofdm($p0, 11, 47);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} rtl8225_write_phy_ofdm($p0, 10, 182);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} rtl8225_write_phy_ofdm($p0, 11, 46);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} rtl8225_write_phy_ofdm($p0, 10, 183);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} rtl8225_write_phy_ofdm($p0, 11, 45);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} rtl8225_write_phy_ofdm($p0, 10, 184);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} rtl8225_write_phy_ofdm($p0, 11, 44);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} rtl8225_write_phy_ofdm($p0, 10, 185);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} rtl8225_write_phy_ofdm($p0, 11, 43);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} rtl8225_write_phy_ofdm($p0, 10, 186);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} rtl8225_write_phy_ofdm($p0, 11, 42);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} rtl8225_write_phy_ofdm($p0, 10, 187);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} rtl8225_write_phy_ofdm($p0, 11, 41);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} rtl8225_write_phy_ofdm($p0, 10, 188);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} rtl8225_write_phy_ofdm($p0, 11, 40);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} rtl8225_write_phy_ofdm($p0, 10, 189);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} rtl8225_write_phy_ofdm($p0, 11, 39);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} rtl8225_write_phy_ofdm($p0, 10, 190);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} rtl8225_write_phy_ofdm($p0, 11, 38);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} rtl8225_write_phy_ofdm($p0, 10, 191);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} rtl8225_write_phy_ofdm($p0, 11, 37);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} rtl8225_write_phy_ofdm($p0, 10, 192);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} rtl8225_write_phy_ofdm($p0, 11, 36);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} rtl8225_write_phy_ofdm($p0, 10, 193);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} rtl8225_write_phy_ofdm($p0, 11, 35);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} rtl8225_write_phy_ofdm($p0, 10, 194);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} rtl8225_write_phy_ofdm($p0, 11, 34);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} rtl8225_write_phy_ofdm($p0, 10, 195);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} rtl8225_write_phy_ofdm($p0, 11, 33);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} rtl8225_write_phy_ofdm($p0, 10, 196);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} rtl8225_write_phy_ofdm($p0, 11, 32);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} rtl8225_write_phy_ofdm($p0, 10, 197);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} rtl8225_write_phy_ofdm($p0, 11, 31);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} rtl8225_write_phy_ofdm($p0, 10, 198);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} rtl8225_write_phy_ofdm($p0, 11, 30);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} rtl8225_write_phy_ofdm($p0, 10, 199);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} rtl8225_write_phy_ofdm($p0, 11, 29);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} rtl8225_write_phy_ofdm($p0, 10, 200);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} rtl8225_write_phy_ofdm($p0, 11, 28);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} rtl8225_write_phy_ofdm($p0, 10, 201);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} rtl8225_write_phy_ofdm($p0, 11, 27);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} rtl8225_write_phy_ofdm($p0, 10, 202);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} rtl8225_write_phy_ofdm($p0, 11, 26);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} rtl8225_write_phy_ofdm($p0, 10, 203);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} rtl8225_write_phy_ofdm($p0, 11, 25);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} rtl8225_write_phy_ofdm($p0, 10, 204);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} rtl8225_write_phy_ofdm($p0, 11, 24);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} rtl8225_write_phy_ofdm($p0, 10, 205);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} rtl8225_write_phy_ofdm($p0, 11, 23);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} rtl8225_write_phy_ofdm($p0, 10, 206);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} rtl8225_write_phy_ofdm($p0, 11, 22);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} rtl8225_write_phy_ofdm($p0, 10, 207);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} rtl8225_write_phy_ofdm($p0, 11, 21);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} rtl8225_write_phy_ofdm($p0, 10, 208);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} rtl8225_write_phy_ofdm($p0, 11, 20);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} rtl8225_write_phy_ofdm($p0, 10, 209);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} rtl8225_write_phy_ofdm($p0, 11, 19);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} rtl8225_write_phy_ofdm($p0, 10, 210);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} rtl8225_write_phy_ofdm($p0, 11, 18);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} rtl8225_write_phy_ofdm($p0, 10, 211);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} rtl8225_write_phy_ofdm($p0, 11, 17);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} rtl8225_write_phy_ofdm($p0, 10, 212);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} rtl8225_write_phy_ofdm($p0, 11, 16);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} rtl8225_write_phy_ofdm($p0, 10, 213);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} rtl8225_write_phy_ofdm($p0, 11, 15);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} rtl8225_write_phy_ofdm($p0, 10, 214);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} rtl8225_write_phy_ofdm($p0, 11, 14);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} rtl8225_write_phy_ofdm($p0, 10, 215);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} rtl8225_write_phy_ofdm($p0, 11, 13);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} rtl8225_write_phy_ofdm($p0, 10, 216);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} rtl8225_write_phy_ofdm($p0, 11, 12);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} rtl8225_write_phy_ofdm($p0, 10, 217);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} rtl8225_write_phy_ofdm($p0, 11, 11);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} rtl8225_write_phy_ofdm($p0, 10, 218);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} rtl8225_write_phy_ofdm($p0, 11, 10);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} rtl8225_write_phy_ofdm($p0, 10, 219);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} rtl8225_write_phy_ofdm($p0, 11, 9);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} rtl8225_write_phy_ofdm($p0, 10, 220);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} rtl8225_write_phy_ofdm($p0, 11, 8);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} rtl8225_write_phy_ofdm($p0, 10, 221);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} rtl8225_write_phy_ofdm($p0, 11, 7);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} rtl8225_write_phy_ofdm($p0, 10, 222);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} rtl8225_write_phy_ofdm($p0, 11, 6);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} rtl8225_write_phy_ofdm($p0, 10, 223);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} rtl8225_write_phy_ofdm($p0, 11, 5);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} rtl8225_write_phy_ofdm($p0, 10, 224);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} rtl8225_write_phy_ofdm($p0, 11, 4);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} rtl8225_write_phy_ofdm($p0, 10, 225);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} rtl8225_write_phy_ofdm($p0, 11, 3);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} rtl8225_write_phy_ofdm($p0, 10, 226);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} rtl8225_write_phy_ofdm($p0, 11, 2);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} rtl8225_write_phy_ofdm($p0, 10, 227);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} rtl8225_write_phy_ofdm($p0, 10, 228);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} rtl8225_write_phy_ofdm($p0, 10, 229);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} rtl8225_write_phy_ofdm($p0, 10, 230);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} rtl8225_write_phy_ofdm($p0, 10, 231);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} rtl8225_write_phy_ofdm($p0, 10, 232);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} rtl8225_write_phy_ofdm($p0, 10, 233);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} rtl8225_write_phy_ofdm($p0, 10, 234);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} rtl8225_write_phy_ofdm($p0, 10, 235);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} rtl8225_write_phy_ofdm($p0, 10, 236);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} rtl8225_write_phy_ofdm($p0, 10, 237);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} rtl8225_write_phy_ofdm($p0, 10, 238);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} rtl8225_write_phy_ofdm($p0, 10, 239);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} rtl8225_write_phy_ofdm($p0, 10, 240);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} rtl8225_write_phy_ofdm($p0, 10, 241);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} rtl8225_write_phy_ofdm($p0, 10, 242);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} rtl8225_write_phy_ofdm($p0, 10, 243);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} rtl8225_write_phy_ofdm($p0, 10, 244);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} rtl8225_write_phy_ofdm($p0, 10, 245);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} rtl8225_write_phy_ofdm($p0, 10, 246);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} rtl8225_write_phy_ofdm($p0, 10, 247);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} rtl8225_write_phy_ofdm($p0, 10, 248);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} rtl8225_write_phy_ofdm($p0, 10, 249);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} rtl8225_write_phy_ofdm($p0, 10, 250);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} rtl8225_write_phy_ofdm($p0, 10, 251);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} rtl8225_write_phy_ofdm($p0, 10, 252);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} rtl8225_write_phy_ofdm($p0, 10, 253);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} rtl8225_write_phy_ofdm($p0, 10, 254);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} rtl8225_write_phy_ofdm($p0, 10, 255);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} msleep(1);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} rtl8225_write_phy_ofdm($p0, 0, 1);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} rtl8225_write_phy_ofdm($p0, 1, 2);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} rtl8225_write_phy_ofdm($p0, 2, 66);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} rtl8225_write_phy_ofdm($p0, 3, 0);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} rtl8225_write_phy_ofdm($p0, 4, 0);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} rtl8225_write_phy_ofdm($p0, 5, 0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} rtl8225_write_phy_ofdm($p0, 6, 64);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} rtl8225_write_phy_ofdm($p0, 7, 0);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} rtl8225_write_phy_ofdm($p0, 8, 64);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} rtl8225_write_phy_ofdm($p0, 9, 254);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} rtl8225_write_phy_ofdm($p0, 10, 9);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} rtl8225_write_phy_ofdm($p0, 11, 128);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} rtl8225_write_phy_ofdm($p0, 12, 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} rtl8225_write_phy_ofdm($p0, 14, 211);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} rtl8225_write_phy_ofdm($p0, 15, 56);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} rtl8225_write_phy_ofdm($p0, 16, 132);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} rtl8225_write_phy_ofdm($p0, 17, 6);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} rtl8225_write_phy_ofdm($p0, 18, 32);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} rtl8225_write_phy_ofdm($p0, 19, 32);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} rtl8225_write_phy_ofdm($p0, 20, 0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} rtl8225_write_phy_ofdm($p0, 21, 64);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} rtl8225_write_phy_ofdm($p0, 22, 0);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} rtl8225_write_phy_ofdm($p0, 23, 64);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} rtl8225_write_phy_ofdm($p0, 24, 239);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} rtl8225_write_phy_ofdm($p0, 25, 25);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} rtl8225_write_phy_ofdm($p0, 26, 32);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} rtl8225_write_phy_ofdm($p0, 27, 118);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} rtl8225_write_phy_ofdm($p0, 28, 4);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} rtl8225_write_phy_ofdm($p0, 30, 149);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} rtl8225_write_phy_ofdm($p0, 31, 117);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} rtl8225_write_phy_ofdm($p0, 32, 31);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} rtl8225_write_phy_ofdm($p0, 33, 39);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} rtl8225_write_phy_ofdm($p0, 34, 22);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} rtl8225_write_phy_ofdm($p0, 36, 70);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} rtl8225_write_phy_ofdm($p0, 37, 32);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} rtl8225_write_phy_ofdm($p0, 38, 144);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} rtl8225_write_phy_ofdm($p0, 39, 136);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(8, 1)));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} rtl8225_write_phy_ofdm($p0, 13, $i19);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(10, 1)));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} rtl8225_write_phy_ofdm($p0, 27, $i21);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(11, 1)));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} rtl8225_write_phy_ofdm($p0, 29, $i23);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(9, 1)));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} rtl8225_write_phy_ofdm($p0, 35, $i25);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} rtl8225_write_phy_cck($p0, 0, 152);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} rtl8225_write_phy_cck($p0, 3, 32);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} rtl8225_write_phy_cck($p0, 4, 126);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} rtl8225_write_phy_cck($p0, 5, 18);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} rtl8225_write_phy_cck($p0, 6, 252);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} rtl8225_write_phy_cck($p0, 7, 120);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} rtl8225_write_phy_cck($p0, 8, 46);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} rtl8225_write_phy_cck($p0, 16, 155);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} rtl8225_write_phy_cck($p0, 17, 136);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} rtl8225_write_phy_cck($p0, 18, 71);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} rtl8225_write_phy_cck($p0, 19, 208);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} rtl8225_write_phy_cck($p0, 25, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} rtl8225_write_phy_cck($p0, 26, 160);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} rtl8225_write_phy_cck($p0, 27, 8);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} rtl8225_write_phy_cck($p0, 64, 134);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} rtl8225_write_phy_cck($p0, 65, 141);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} rtl8225_write_phy_cck($p0, 66, 21);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} rtl8225_write_phy_cck($p0, 67, 24);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} rtl8225_write_phy_cck($p0, 68, 31);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} rtl8225_write_phy_cck($p0, 69, 30);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} rtl8225_write_phy_cck($p0, 70, 26);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} rtl8225_write_phy_cck($p0, 71, 21);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} rtl8225_write_phy_cck($p0, 72, 16);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} rtl8225_write_phy_cck($p0, 73, 10);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} rtl8225_write_phy_cck($p0, 74, 5);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} rtl8225_write_phy_cck($p0, 75, 2);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} rtl8225_write_phy_cck($p0, 76, 5);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(91, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} rtl818x_iowrite8($p3, $p28, 13);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} rtl8225_rf_set_tx_power($p0, 1);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} rtl8225_write_phy_cck($p0, 16, 155);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} rtl8225_write_phy_ofdm($p0, 38, 144);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} rtl818x_iowrite8($p3, $p31, 3);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} msleep(1);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} rtl818x_iowrite32($p3, $i2p.i64.ref(65428), 1035993090);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} rtl8225_write($p0, 12, 80);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(8, 1)));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} rtl8225_write_phy_ofdm($p0, 13, $i33);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(10, 1)));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} rtl8225_write_phy_ofdm($p0, 27, $i35);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(11, 1)));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} rtl8225_write_phy_ofdm($p0, 29, $i37);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(9, 1)));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} rtl8225_write_phy_ofdm($p0, 35, $i39);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.19, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(2, 1)));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} rtl8225_write_phy_cck($p0, 65, $i41);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} rtl8225_write($p0, 2, 3149);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} msleep(200);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} msleep(100);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i8 := rtl8225_read($p0, 6);
    call {:si_unique_call 1369} {:cexpr "tmp___0"} boogie_si_record_i16($i8);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 128);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i12 := rtl8225_read($p0, 6);
    call {:si_unique_call 1371} {:cexpr "tmp"} boogie_si_record_i16($i12);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i12);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_85 := dev_warn.ref.ref.i32($p15, .str.42, $i16);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rtl8225_rf_stop: ref;

axiom rtl8225_rf_stop == $sub.ref(0, 308262);

procedure rtl8225_rf_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_rf_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} rtl8225_write($p0, 4, 31);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_rf_set_channel: ref;

axiom rtl8225_rf_set_channel == $sub.ref(0, 309294);

procedure rtl8225_rf_set_channel($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_rf_set_channel($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $i11 := ieee80211_frequency_to_channel($i10);
    call {:si_unique_call 1906} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(8, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, $p2i.ref.i64(rtl8225_rf_init));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(8, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, $p2i.ref.i64(rtl8225z2_rf_init));
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} rtl8225z2_b_rf_set_tx_power($p0, $i11);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref($i25, 4));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.20, $p26);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} rtl8225_write($p0, 7, $i30);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} msleep(10);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} rtl8225z2_rf_set_tx_power($p0, $i11);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} rtl8225_rf_set_tx_power($p0, $i11);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_frequency_to_channel: ref;

axiom ieee80211_frequency_to_channel == $sub.ref(0, 310326);

procedure ieee80211_frequency_to_channel($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_frequency_to_channel($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1912} {:cexpr "ieee80211_frequency_to_channel:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1913} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1914} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rtl8225_rf_set_tx_power: ref;

axiom rtl8225_rf_set_tx_power == $sub.ref(0, 311358);

procedure rtl8225_rf_set_tx_power($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_rf_set_tx_power($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i64;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i29: i32;
  var $i28: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i33: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $p54: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i8;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i8;
  var $i109: i32;
  var $i110: i64;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i64;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i64;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i64;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i126: i64;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i64;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i8;
  var $i135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} {:cexpr "rtl8225_rf_set_tx_power:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(192, 1)), $mul.ref($i6, 64)), $mul.ref(6, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i16.i8($i10);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 15);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 1916} {:cexpr "cck_power"} boogie_si_record_i8($i14);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(192, 1)), $mul.ref($i16, 64)), $mul.ref(6, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i32($i21, 4);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    call {:si_unique_call 1917} {:cexpr "ofdm_power"} boogie_si_record_i8($i23);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i14);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32(11);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, $i25);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32(11);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i28);
    call {:si_unique_call 1918} {:cexpr "cck_power"} boogie_si_record_i8($i30);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i23);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, 15);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i23);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 10);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 1919} {:cexpr "ofdm_power"} boogie_si_record_i8($i36);
    assume {:verifier.code 0} true;
    $i33 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i30);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i41 := $udiv.i32($i40, 6);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref($i42, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.21, $p43);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i46 := $ashr.i32($i45, 1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} rtl818x_iowrite8($p4, $p39, $i47);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i1, 14);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i30);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i56 := $urem.i32($i55, 6);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i57 := $mul.i32($i56, 8);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    $p59 := $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref($i58, 1));
    assume {:verifier.code 0} true;
    $p54 := $p59;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p54, $mul.ref(1, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.22, $p54);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} rtl8225_write_phy_cck($p0, 68, $i62);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $i110 := $add.i64(1, 1);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p54, $mul.ref($i110, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.22, $p60);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} rtl8225_write_phy_cck($p0, 69, $i113);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $i114 := $add.i64($i110, 1);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p54, $mul.ref($i114, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.22, $p111);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} rtl8225_write_phy_cck($p0, 70, $i117);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $i118 := $add.i64($i114, 1);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p54, $mul.ref($i118, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.22, $p115);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} rtl8225_write_phy_cck($p0, 71, $i121);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $i122 := $add.i64($i118, 1);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p54, $mul.ref($i122, 1));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.22, $p119);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} rtl8225_write_phy_cck($p0, 72, $i125);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $i126 := $add.i64($i122, 1);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p54, $mul.ref($i126, 1));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.22, $p123);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} rtl8225_write_phy_cck($p0, 73, $i129);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $i130 := $add.i64($i126, 1);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p54, $mul.ref($i130, 1));
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.22, $p127);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} rtl8225_write_phy_cck($p0, 74, $i133);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.22, $p131);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} rtl8225_write_phy_cck($p0, 75, $i135);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} msleep(1);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} rtl818x_iowrite8($p4, $p65, $sub.i8(0, 64));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $i69 := rtl818x_ioread8($p4, $p68);
    call {:si_unique_call 1926} {:cexpr "tmp___1"} boogie_si_record_i8($i69);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    call {:si_unique_call 1927} {:cexpr "reg"} boogie_si_record_i32($i70);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i70);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 64);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} rtl818x_iowrite8($p4, $p73, $i77);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 256)), $mul.ref(96, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} rtl818x_iowrite32($p4, $p80, $sub.i32(0, 2046004462));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i70);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 191);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} rtl818x_iowrite8($p4, $p83, $i87);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} rtl818x_iowrite8($p4, $p90, 0);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} rtl8225_write_phy_ofdm($p0, 2, 66);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} rtl8225_write_phy_ofdm($p0, 6, 0);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} rtl8225_write_phy_ofdm($p0, 8, 0);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 256)), $mul.ref(158, 1));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i33);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i95 := $udiv.i32($i94, 6);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref($i96, 1));
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.21, $p97);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i100 := $ashr.i32($i99, 1);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} rtl818x_iowrite8($p4, $p93, $i101);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i33);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i103 := $urem.i32($i102, 6);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i103);
    $p105 := $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref($i104, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.23, $p105);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} rtl8225_write_phy_ofdm($p0, 5, $i107);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.23, $p105);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} rtl8225_write_phy_ofdm($p0, 7, $i109);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} msleep(1);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i30);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i50 := $urem.i32($i49, 6);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i50, 8);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    $p53 := $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref($i52, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p54 := $p53;
    goto $bb9;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i33 := 25;
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i14);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb3;
}



const rtl8225z2_rf_init: ref;

axiom rtl8225z2_rf_init == $sub.ref(0, 312390);

procedure rtl8225z2_rf_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225z2_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} rtl8225_write($p0, 0, 703);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} rtl8225_write($p0, 1, 3808);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} rtl8225_write($p0, 3, 1089);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} rtl8225_write($p0, 4, 2243);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} rtl8225_write($p0, 5, 3186);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} rtl8225_write($p0, 6, 230);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} rtl8225_write($p0, 7, 2090);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} rtl8225_write($p0, 8, 63);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} rtl8225_write($p0, 9, 821);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} rtl8225_write($p0, 10, 2516);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} rtl8225_write($p0, 11, 1979);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} rtl8225_write($p0, 12, 2128);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} rtl8225_write($p0, 13, 3295);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} rtl8225_write($p0, 14, 43);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} rtl8225_write($p0, 15, 276);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} msleep(100);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} rtl8225_write($p0, 0, 439);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} rtl8225_write($p0, 1, 1);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} rtl8225_write($p0, 2, 1024);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} rtl8225_write($p0, 1, 2);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} rtl8225_write($p0, 2, 1025);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} rtl8225_write($p0, 1, 3);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} rtl8225_write($p0, 2, 1026);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} rtl8225_write($p0, 1, 4);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} rtl8225_write($p0, 2, 1027);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} rtl8225_write($p0, 1, 5);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} rtl8225_write($p0, 2, 1028);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} rtl8225_write($p0, 1, 6);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} rtl8225_write($p0, 2, 1029);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} rtl8225_write($p0, 1, 7);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} rtl8225_write($p0, 2, 1032);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} rtl8225_write($p0, 1, 8);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} rtl8225_write($p0, 2, 1033);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} rtl8225_write($p0, 1, 9);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} rtl8225_write($p0, 2, 1034);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} rtl8225_write($p0, 1, 10);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} rtl8225_write($p0, 2, 1035);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} rtl8225_write($p0, 1, 11);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} rtl8225_write($p0, 2, 1282);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} rtl8225_write($p0, 1, 12);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} rtl8225_write($p0, 2, 1283);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} rtl8225_write($p0, 1, 13);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} rtl8225_write($p0, 2, 1284);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} rtl8225_write($p0, 1, 14);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} rtl8225_write($p0, 2, 1285);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} rtl8225_write($p0, 1, 15);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} rtl8225_write($p0, 2, 1344);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} rtl8225_write($p0, 1, 16);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} rtl8225_write($p0, 2, 1345);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} rtl8225_write($p0, 1, 17);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} rtl8225_write($p0, 2, 1346);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} rtl8225_write($p0, 1, 18);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} rtl8225_write($p0, 2, 1347);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} rtl8225_write($p0, 1, 19);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} rtl8225_write($p0, 2, 1348);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} rtl8225_write($p0, 1, 20);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} rtl8225_write($p0, 2, 1349);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} rtl8225_write($p0, 1, 21);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} rtl8225_write($p0, 2, 1408);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} rtl8225_write($p0, 1, 22);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} rtl8225_write($p0, 2, 1409);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} rtl8225_write($p0, 1, 23);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} rtl8225_write($p0, 2, 1410);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} rtl8225_write($p0, 1, 24);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} rtl8225_write($p0, 2, 1411);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} rtl8225_write($p0, 1, 25);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} rtl8225_write($p0, 2, 1412);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} rtl8225_write($p0, 1, 26);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} rtl8225_write($p0, 2, 1413);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} rtl8225_write($p0, 1, 27);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} rtl8225_write($p0, 2, 1416);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} rtl8225_write($p0, 1, 28);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} rtl8225_write($p0, 2, 1417);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} rtl8225_write($p0, 1, 29);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} rtl8225_write($p0, 2, 1418);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} rtl8225_write($p0, 1, 30);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} rtl8225_write($p0, 2, 1419);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} rtl8225_write($p0, 1, 31);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} rtl8225_write($p0, 2, 1603);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} rtl8225_write($p0, 1, 32);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} rtl8225_write($p0, 2, 1604);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} rtl8225_write($p0, 1, 33);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} rtl8225_write($p0, 2, 1605);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} rtl8225_write($p0, 1, 34);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} rtl8225_write($p0, 2, 1664);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} rtl8225_write($p0, 1, 35);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} rtl8225_write($p0, 2, 1665);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} rtl8225_write($p0, 1, 36);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} rtl8225_write($p0, 2, 1666);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} rtl8225_write($p0, 1, 37);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} rtl8225_write($p0, 2, 1667);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} rtl8225_write($p0, 1, 38);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} rtl8225_write($p0, 2, 1668);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} rtl8225_write($p0, 1, 39);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} rtl8225_write($p0, 2, 1669);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} rtl8225_write($p0, 1, 40);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} rtl8225_write($p0, 2, 1672);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} rtl8225_write($p0, 1, 41);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} rtl8225_write($p0, 2, 1673);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} rtl8225_write($p0, 1, 42);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} rtl8225_write($p0, 2, 1674);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} rtl8225_write($p0, 1, 43);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} rtl8225_write($p0, 2, 1675);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} rtl8225_write($p0, 1, 44);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} rtl8225_write($p0, 2, 1676);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} rtl8225_write($p0, 1, 45);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} rtl8225_write($p0, 2, 1858);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} rtl8225_write($p0, 1, 46);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} rtl8225_write($p0, 2, 1859);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} rtl8225_write($p0, 1, 47);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} rtl8225_write($p0, 2, 1860);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} rtl8225_write($p0, 1, 48);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} rtl8225_write($p0, 2, 1861);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} rtl8225_write($p0, 1, 49);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} rtl8225_write($p0, 2, 1920);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} rtl8225_write($p0, 1, 50);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} rtl8225_write($p0, 2, 1921);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} rtl8225_write($p0, 1, 51);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} rtl8225_write($p0, 2, 1922);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} rtl8225_write($p0, 1, 52);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} rtl8225_write($p0, 2, 1923);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} rtl8225_write($p0, 1, 53);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} rtl8225_write($p0, 2, 1924);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} rtl8225_write($p0, 1, 54);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} rtl8225_write($p0, 2, 1925);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} rtl8225_write($p0, 1, 55);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} rtl8225_write($p0, 2, 1928);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} rtl8225_write($p0, 1, 56);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} rtl8225_write($p0, 2, 1929);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} rtl8225_write($p0, 1, 57);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} rtl8225_write($p0, 2, 1930);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} rtl8225_write($p0, 1, 58);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} rtl8225_write($p0, 2, 1931);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} rtl8225_write($p0, 1, 59);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} rtl8225_write($p0, 2, 1932);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} rtl8225_write($p0, 1, 60);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} rtl8225_write($p0, 2, 1933);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} rtl8225_write($p0, 1, 61);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} rtl8225_write($p0, 2, 1936);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} rtl8225_write($p0, 1, 62);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} rtl8225_write($p0, 2, 1937);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} rtl8225_write($p0, 1, 63);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} rtl8225_write($p0, 2, 1938);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} rtl8225_write($p0, 1, 64);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} rtl8225_write($p0, 2, 1939);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} rtl8225_write($p0, 1, 65);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} rtl8225_write($p0, 2, 1940);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} rtl8225_write($p0, 1, 66);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} rtl8225_write($p0, 2, 1941);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} rtl8225_write($p0, 1, 67);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} rtl8225_write($p0, 2, 1944);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} rtl8225_write($p0, 1, 68);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} rtl8225_write($p0, 2, 1945);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} rtl8225_write($p0, 1, 69);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} rtl8225_write($p0, 2, 1946);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} rtl8225_write($p0, 1, 70);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} rtl8225_write($p0, 2, 1947);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} rtl8225_write($p0, 1, 71);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} rtl8225_write($p0, 2, 1948);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} rtl8225_write($p0, 1, 72);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} rtl8225_write($p0, 2, 1949);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} rtl8225_write($p0, 1, 73);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} rtl8225_write($p0, 2, 1952);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} rtl8225_write($p0, 1, 74);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} rtl8225_write($p0, 2, 1953);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} rtl8225_write($p0, 1, 75);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} rtl8225_write($p0, 2, 1954);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} rtl8225_write($p0, 1, 76);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} rtl8225_write($p0, 2, 1955);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} rtl8225_write($p0, 1, 77);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} rtl8225_write($p0, 2, 1956);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} rtl8225_write($p0, 1, 78);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} rtl8225_write($p0, 2, 1957);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} rtl8225_write($p0, 1, 79);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} rtl8225_write($p0, 2, 1960);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} rtl8225_write($p0, 1, 80);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} rtl8225_write($p0, 2, 1961);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} rtl8225_write($p0, 1, 81);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} rtl8225_write($p0, 2, 938);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} rtl8225_write($p0, 1, 82);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} rtl8225_write($p0, 2, 939);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} rtl8225_write($p0, 1, 83);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} rtl8225_write($p0, 2, 940);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} rtl8225_write($p0, 1, 84);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} rtl8225_write($p0, 2, 941);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} rtl8225_write($p0, 1, 85);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} rtl8225_write($p0, 2, 944);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} rtl8225_write($p0, 1, 86);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} rtl8225_write($p0, 2, 945);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} rtl8225_write($p0, 1, 87);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} rtl8225_write($p0, 2, 946);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} rtl8225_write($p0, 1, 88);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} rtl8225_write($p0, 2, 947);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} rtl8225_write($p0, 1, 89);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} rtl8225_write($p0, 2, 948);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} rtl8225_write($p0, 1, 90);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} rtl8225_write($p0, 2, 949);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} rtl8225_write($p0, 1, 91);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} rtl8225_write($p0, 2, 952);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} rtl8225_write($p0, 1, 92);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} rtl8225_write($p0, 2, 953);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} rtl8225_write($p0, 1, 93);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} rtl8225_write($p0, 2, 954);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} rtl8225_write($p0, 1, 94);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} rtl8225_write($p0, 2, 955);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} rtl8225_write($p0, 1, 95);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} rtl8225_write($p0, 2, 955);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} rtl8225_write($p0, 3, 128);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} rtl8225_write($p0, 5, 4);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} rtl8225_write($p0, 0, 183);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} rtl8225_write($p0, 2, 3149);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} msleep(200);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} msleep(100);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} $i4 := rtl8225_read($p0, 6);
    call {:si_unique_call 1975} {:cexpr "tmp___1"} boogie_si_record_i16($i4);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 128);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} msleep(200);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} rtl8225_write($p0, 0, 703);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} rtl8225_write_phy_ofdm($p0, 10, 128);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} rtl8225_write_phy_ofdm($p0, 10, 129);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} rtl8225_write_phy_ofdm($p0, 10, 130);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} rtl8225_write_phy_ofdm($p0, 10, 131);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} rtl8225_write_phy_ofdm($p0, 10, 132);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} rtl8225_write_phy_ofdm($p0, 10, 133);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} rtl8225_write_phy_ofdm($p0, 10, 134);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} rtl8225_write_phy_ofdm($p0, 11, 158);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} rtl8225_write_phy_ofdm($p0, 10, 135);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} rtl8225_write_phy_ofdm($p0, 11, 157);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} rtl8225_write_phy_ofdm($p0, 10, 136);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} rtl8225_write_phy_ofdm($p0, 11, 156);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} rtl8225_write_phy_ofdm($p0, 10, 137);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} rtl8225_write_phy_ofdm($p0, 11, 155);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} rtl8225_write_phy_ofdm($p0, 10, 138);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} rtl8225_write_phy_ofdm($p0, 11, 154);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} rtl8225_write_phy_ofdm($p0, 10, 139);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} rtl8225_write_phy_ofdm($p0, 11, 153);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} rtl8225_write_phy_ofdm($p0, 10, 140);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} rtl8225_write_phy_ofdm($p0, 11, 152);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} rtl8225_write_phy_ofdm($p0, 10, 141);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} rtl8225_write_phy_ofdm($p0, 11, 151);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} rtl8225_write_phy_ofdm($p0, 10, 142);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} rtl8225_write_phy_ofdm($p0, 11, 150);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} rtl8225_write_phy_ofdm($p0, 10, 143);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} rtl8225_write_phy_ofdm($p0, 11, 149);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} rtl8225_write_phy_ofdm($p0, 10, 144);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} rtl8225_write_phy_ofdm($p0, 11, 148);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} rtl8225_write_phy_ofdm($p0, 10, 145);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} rtl8225_write_phy_ofdm($p0, 11, 147);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} rtl8225_write_phy_ofdm($p0, 10, 146);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} rtl8225_write_phy_ofdm($p0, 11, 146);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} rtl8225_write_phy_ofdm($p0, 10, 147);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} rtl8225_write_phy_ofdm($p0, 11, 145);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} rtl8225_write_phy_ofdm($p0, 10, 148);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} rtl8225_write_phy_ofdm($p0, 11, 144);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} rtl8225_write_phy_ofdm($p0, 10, 149);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} rtl8225_write_phy_ofdm($p0, 11, 143);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} rtl8225_write_phy_ofdm($p0, 10, 150);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} rtl8225_write_phy_ofdm($p0, 11, 142);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} rtl8225_write_phy_ofdm($p0, 10, 151);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} rtl8225_write_phy_ofdm($p0, 11, 141);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} rtl8225_write_phy_ofdm($p0, 10, 152);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} rtl8225_write_phy_ofdm($p0, 11, 140);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} rtl8225_write_phy_ofdm($p0, 10, 153);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} rtl8225_write_phy_ofdm($p0, 11, 139);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} rtl8225_write_phy_ofdm($p0, 10, 154);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} rtl8225_write_phy_ofdm($p0, 11, 138);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} rtl8225_write_phy_ofdm($p0, 10, 155);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} rtl8225_write_phy_ofdm($p0, 11, 137);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} rtl8225_write_phy_ofdm($p0, 10, 156);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} rtl8225_write_phy_ofdm($p0, 11, 136);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} rtl8225_write_phy_ofdm($p0, 10, 157);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} rtl8225_write_phy_ofdm($p0, 11, 135);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} rtl8225_write_phy_ofdm($p0, 10, 158);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} rtl8225_write_phy_ofdm($p0, 11, 134);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} rtl8225_write_phy_ofdm($p0, 10, 159);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} rtl8225_write_phy_ofdm($p0, 11, 133);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} rtl8225_write_phy_ofdm($p0, 10, 160);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} rtl8225_write_phy_ofdm($p0, 11, 132);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} rtl8225_write_phy_ofdm($p0, 10, 161);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} rtl8225_write_phy_ofdm($p0, 11, 131);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} rtl8225_write_phy_ofdm($p0, 10, 162);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} rtl8225_write_phy_ofdm($p0, 11, 130);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} rtl8225_write_phy_ofdm($p0, 10, 163);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} rtl8225_write_phy_ofdm($p0, 11, 129);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} rtl8225_write_phy_ofdm($p0, 10, 164);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} rtl8225_write_phy_ofdm($p0, 11, 128);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} rtl8225_write_phy_ofdm($p0, 10, 165);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} rtl8225_write_phy_ofdm($p0, 11, 63);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} rtl8225_write_phy_ofdm($p0, 10, 166);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} rtl8225_write_phy_ofdm($p0, 11, 62);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} rtl8225_write_phy_ofdm($p0, 10, 167);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} rtl8225_write_phy_ofdm($p0, 11, 61);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} rtl8225_write_phy_ofdm($p0, 10, 168);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} rtl8225_write_phy_ofdm($p0, 11, 60);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} rtl8225_write_phy_ofdm($p0, 10, 169);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} rtl8225_write_phy_ofdm($p0, 11, 59);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} rtl8225_write_phy_ofdm($p0, 10, 170);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} rtl8225_write_phy_ofdm($p0, 11, 58);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} rtl8225_write_phy_ofdm($p0, 10, 171);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} rtl8225_write_phy_ofdm($p0, 11, 57);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} rtl8225_write_phy_ofdm($p0, 10, 172);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} rtl8225_write_phy_ofdm($p0, 11, 56);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} rtl8225_write_phy_ofdm($p0, 10, 173);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} rtl8225_write_phy_ofdm($p0, 11, 55);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} rtl8225_write_phy_ofdm($p0, 10, 174);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} rtl8225_write_phy_ofdm($p0, 11, 54);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} rtl8225_write_phy_ofdm($p0, 10, 175);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} rtl8225_write_phy_ofdm($p0, 11, 53);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} rtl8225_write_phy_ofdm($p0, 10, 176);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} rtl8225_write_phy_ofdm($p0, 11, 52);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} rtl8225_write_phy_ofdm($p0, 10, 177);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} rtl8225_write_phy_ofdm($p0, 11, 51);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} rtl8225_write_phy_ofdm($p0, 10, 178);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} rtl8225_write_phy_ofdm($p0, 11, 50);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} rtl8225_write_phy_ofdm($p0, 10, 179);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} rtl8225_write_phy_ofdm($p0, 11, 49);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} rtl8225_write_phy_ofdm($p0, 10, 180);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} rtl8225_write_phy_ofdm($p0, 11, 48);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} rtl8225_write_phy_ofdm($p0, 10, 181);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} rtl8225_write_phy_ofdm($p0, 11, 47);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} rtl8225_write_phy_ofdm($p0, 10, 182);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} rtl8225_write_phy_ofdm($p0, 11, 46);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} rtl8225_write_phy_ofdm($p0, 10, 183);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} rtl8225_write_phy_ofdm($p0, 11, 45);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} rtl8225_write_phy_ofdm($p0, 10, 184);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} rtl8225_write_phy_ofdm($p0, 11, 44);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} rtl8225_write_phy_ofdm($p0, 10, 185);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} rtl8225_write_phy_ofdm($p0, 11, 43);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} rtl8225_write_phy_ofdm($p0, 10, 186);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} rtl8225_write_phy_ofdm($p0, 11, 42);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} rtl8225_write_phy_ofdm($p0, 10, 187);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} rtl8225_write_phy_ofdm($p0, 11, 41);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} rtl8225_write_phy_ofdm($p0, 10, 188);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} rtl8225_write_phy_ofdm($p0, 11, 40);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} rtl8225_write_phy_ofdm($p0, 10, 189);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} rtl8225_write_phy_ofdm($p0, 11, 39);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} rtl8225_write_phy_ofdm($p0, 10, 190);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} rtl8225_write_phy_ofdm($p0, 11, 38);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} rtl8225_write_phy_ofdm($p0, 10, 191);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} rtl8225_write_phy_ofdm($p0, 11, 37);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} rtl8225_write_phy_ofdm($p0, 10, 192);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} rtl8225_write_phy_ofdm($p0, 11, 36);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} rtl8225_write_phy_ofdm($p0, 10, 193);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} rtl8225_write_phy_ofdm($p0, 11, 35);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} rtl8225_write_phy_ofdm($p0, 10, 194);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} rtl8225_write_phy_ofdm($p0, 11, 34);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} rtl8225_write_phy_ofdm($p0, 10, 195);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} rtl8225_write_phy_ofdm($p0, 11, 33);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} rtl8225_write_phy_ofdm($p0, 10, 196);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} rtl8225_write_phy_ofdm($p0, 11, 32);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} rtl8225_write_phy_ofdm($p0, 10, 197);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} rtl8225_write_phy_ofdm($p0, 11, 31);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} rtl8225_write_phy_ofdm($p0, 10, 198);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} rtl8225_write_phy_ofdm($p0, 11, 30);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} rtl8225_write_phy_ofdm($p0, 10, 199);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} rtl8225_write_phy_ofdm($p0, 11, 29);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} rtl8225_write_phy_ofdm($p0, 10, 200);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} rtl8225_write_phy_ofdm($p0, 11, 28);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} rtl8225_write_phy_ofdm($p0, 10, 201);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} rtl8225_write_phy_ofdm($p0, 11, 27);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} rtl8225_write_phy_ofdm($p0, 10, 202);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} rtl8225_write_phy_ofdm($p0, 11, 26);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} rtl8225_write_phy_ofdm($p0, 10, 203);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} rtl8225_write_phy_ofdm($p0, 11, 25);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} rtl8225_write_phy_ofdm($p0, 10, 204);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} rtl8225_write_phy_ofdm($p0, 11, 24);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} rtl8225_write_phy_ofdm($p0, 10, 205);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} rtl8225_write_phy_ofdm($p0, 11, 23);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} rtl8225_write_phy_ofdm($p0, 10, 206);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} rtl8225_write_phy_ofdm($p0, 11, 22);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} rtl8225_write_phy_ofdm($p0, 10, 207);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} rtl8225_write_phy_ofdm($p0, 11, 21);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} rtl8225_write_phy_ofdm($p0, 10, 208);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} rtl8225_write_phy_ofdm($p0, 11, 20);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} rtl8225_write_phy_ofdm($p0, 10, 209);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} rtl8225_write_phy_ofdm($p0, 11, 19);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} rtl8225_write_phy_ofdm($p0, 10, 210);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} rtl8225_write_phy_ofdm($p0, 11, 18);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} rtl8225_write_phy_ofdm($p0, 10, 211);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} rtl8225_write_phy_ofdm($p0, 11, 17);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} rtl8225_write_phy_ofdm($p0, 10, 212);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} rtl8225_write_phy_ofdm($p0, 11, 16);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} rtl8225_write_phy_ofdm($p0, 10, 213);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} rtl8225_write_phy_ofdm($p0, 11, 15);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} rtl8225_write_phy_ofdm($p0, 10, 214);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} rtl8225_write_phy_ofdm($p0, 11, 14);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} rtl8225_write_phy_ofdm($p0, 10, 215);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} rtl8225_write_phy_ofdm($p0, 11, 13);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} rtl8225_write_phy_ofdm($p0, 10, 216);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} rtl8225_write_phy_ofdm($p0, 11, 12);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} rtl8225_write_phy_ofdm($p0, 10, 217);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} rtl8225_write_phy_ofdm($p0, 11, 11);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} rtl8225_write_phy_ofdm($p0, 10, 218);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} rtl8225_write_phy_ofdm($p0, 11, 10);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} rtl8225_write_phy_ofdm($p0, 10, 219);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} rtl8225_write_phy_ofdm($p0, 11, 9);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} rtl8225_write_phy_ofdm($p0, 10, 220);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} rtl8225_write_phy_ofdm($p0, 11, 8);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} rtl8225_write_phy_ofdm($p0, 10, 221);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} rtl8225_write_phy_ofdm($p0, 11, 7);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} rtl8225_write_phy_ofdm($p0, 10, 222);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} rtl8225_write_phy_ofdm($p0, 11, 6);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} rtl8225_write_phy_ofdm($p0, 10, 223);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} rtl8225_write_phy_ofdm($p0, 11, 5);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} rtl8225_write_phy_ofdm($p0, 10, 224);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} rtl8225_write_phy_ofdm($p0, 11, 4);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} rtl8225_write_phy_ofdm($p0, 10, 225);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} rtl8225_write_phy_ofdm($p0, 11, 3);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} rtl8225_write_phy_ofdm($p0, 10, 226);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} rtl8225_write_phy_ofdm($p0, 11, 2);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} rtl8225_write_phy_ofdm($p0, 10, 227);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} rtl8225_write_phy_ofdm($p0, 10, 228);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} rtl8225_write_phy_ofdm($p0, 10, 229);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} rtl8225_write_phy_ofdm($p0, 10, 230);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} rtl8225_write_phy_ofdm($p0, 10, 231);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} rtl8225_write_phy_ofdm($p0, 10, 232);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} rtl8225_write_phy_ofdm($p0, 10, 233);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} rtl8225_write_phy_ofdm($p0, 10, 234);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} rtl8225_write_phy_ofdm($p0, 10, 235);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} rtl8225_write_phy_ofdm($p0, 10, 236);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} rtl8225_write_phy_ofdm($p0, 10, 237);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} rtl8225_write_phy_ofdm($p0, 10, 238);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} rtl8225_write_phy_ofdm($p0, 10, 239);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} rtl8225_write_phy_ofdm($p0, 10, 240);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} rtl8225_write_phy_ofdm($p0, 10, 241);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} rtl8225_write_phy_ofdm($p0, 10, 242);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} rtl8225_write_phy_ofdm($p0, 10, 243);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} rtl8225_write_phy_ofdm($p0, 10, 244);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} rtl8225_write_phy_ofdm($p0, 10, 245);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} rtl8225_write_phy_ofdm($p0, 10, 246);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} rtl8225_write_phy_ofdm($p0, 10, 247);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} rtl8225_write_phy_ofdm($p0, 10, 248);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} rtl8225_write_phy_ofdm($p0, 10, 249);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} rtl8225_write_phy_ofdm($p0, 10, 250);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} rtl8225_write_phy_ofdm($p0, 10, 251);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} rtl8225_write_phy_ofdm($p0, 10, 252);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} rtl8225_write_phy_ofdm($p0, 10, 253);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} rtl8225_write_phy_ofdm($p0, 10, 254);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} rtl8225_write_phy_ofdm($p0, 10, 255);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} msleep(1);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} rtl8225_write_phy_ofdm($p0, 0, 1);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} rtl8225_write_phy_ofdm($p0, 1, 2);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} rtl8225_write_phy_ofdm($p0, 2, 66);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} rtl8225_write_phy_ofdm($p0, 3, 0);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} rtl8225_write_phy_ofdm($p0, 4, 0);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} rtl8225_write_phy_ofdm($p0, 5, 0);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} rtl8225_write_phy_ofdm($p0, 6, 64);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} rtl8225_write_phy_ofdm($p0, 7, 0);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} rtl8225_write_phy_ofdm($p0, 8, 64);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} rtl8225_write_phy_ofdm($p0, 9, 254);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} rtl8225_write_phy_ofdm($p0, 10, 8);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} rtl8225_write_phy_ofdm($p0, 11, 128);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} rtl8225_write_phy_ofdm($p0, 12, 1);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} rtl8225_write_phy_ofdm($p0, 13, 67);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} rtl8225_write_phy_ofdm($p0, 14, 211);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} rtl8225_write_phy_ofdm($p0, 15, 56);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} rtl8225_write_phy_ofdm($p0, 16, 132);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} rtl8225_write_phy_ofdm($p0, 17, 7);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} rtl8225_write_phy_ofdm($p0, 18, 32);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} rtl8225_write_phy_ofdm($p0, 19, 32);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} rtl8225_write_phy_ofdm($p0, 20, 0);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} rtl8225_write_phy_ofdm($p0, 21, 64);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} rtl8225_write_phy_ofdm($p0, 22, 0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} rtl8225_write_phy_ofdm($p0, 23, 64);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} rtl8225_write_phy_ofdm($p0, 24, 239);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} rtl8225_write_phy_ofdm($p0, 25, 25);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} rtl8225_write_phy_ofdm($p0, 26, 32);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} rtl8225_write_phy_ofdm($p0, 27, 21);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} rtl8225_write_phy_ofdm($p0, 28, 4);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} rtl8225_write_phy_ofdm($p0, 29, 197);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} rtl8225_write_phy_ofdm($p0, 30, 149);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} rtl8225_write_phy_ofdm($p0, 31, 117);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} rtl8225_write_phy_ofdm($p0, 32, 31);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} rtl8225_write_phy_ofdm($p0, 33, 23);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} rtl8225_write_phy_ofdm($p0, 34, 22);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} rtl8225_write_phy_ofdm($p0, 35, 128);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} rtl8225_write_phy_ofdm($p0, 36, 70);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} rtl8225_write_phy_ofdm($p0, 37, 0);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} rtl8225_write_phy_ofdm($p0, 38, 144);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} rtl8225_write_phy_ofdm($p0, 39, 136);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(12, 1)));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} rtl8225_write_phy_ofdm($p0, 11, $i19);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(13, 1)));
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} rtl8225_write_phy_ofdm($p0, 27, $i21);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(14, 1)));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} rtl8225_write_phy_ofdm($p0, 29, $i23);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} rtl8225_write_phy_ofdm($p0, 33, 55);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} rtl8225_write_phy_cck($p0, 0, 152);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} rtl8225_write_phy_cck($p0, 3, 32);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} rtl8225_write_phy_cck($p0, 4, 126);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} rtl8225_write_phy_cck($p0, 5, 18);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} rtl8225_write_phy_cck($p0, 6, 252);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} rtl8225_write_phy_cck($p0, 7, 120);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} rtl8225_write_phy_cck($p0, 8, 46);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} rtl8225_write_phy_cck($p0, 16, 155);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} rtl8225_write_phy_cck($p0, 17, 136);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} rtl8225_write_phy_cck($p0, 18, 71);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} rtl8225_write_phy_cck($p0, 19, 208);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} rtl8225_write_phy_cck($p0, 25, 0);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} rtl8225_write_phy_cck($p0, 26, 160);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} rtl8225_write_phy_cck($p0, 27, 8);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} rtl8225_write_phy_cck($p0, 64, 134);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} rtl8225_write_phy_cck($p0, 65, 141);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} rtl8225_write_phy_cck($p0, 66, 21);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} rtl8225_write_phy_cck($p0, 67, 24);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} rtl8225_write_phy_cck($p0, 68, 54);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} rtl8225_write_phy_cck($p0, 69, 53);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} rtl8225_write_phy_cck($p0, 70, 46);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} rtl8225_write_phy_cck($p0, 71, 37);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} rtl8225_write_phy_cck($p0, 72, 28);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} rtl8225_write_phy_cck($p0, 73, 18);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} rtl8225_write_phy_cck($p0, 74, 9);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} rtl8225_write_phy_cck($p0, 75, 4);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} rtl8225_write_phy_cck($p0, 76, 5);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} rtl818x_iowrite8($p3, $i2p.i64.ref(65371), 13);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} msleep(1);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} rtl8225z2_rf_set_tx_power($p0, 1);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} rtl8225_write_phy_cck($p0, 16, 155);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} rtl8225_write_phy_ofdm($p0, 38, 144);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} rtl818x_iowrite8($p3, $p26, 3);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} msleep(1);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} rtl818x_iowrite32($p3, $i2p.i64.ref(65428), 1035993090);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} rtl8225_write($p0, 2, 3149);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} msleep(200);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} msleep(100);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i8 := rtl8225_read($p0, 6);
    call {:si_unique_call 1981} {:cexpr "tmp___0"} boogie_si_record_i16($i8);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 128);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $i12 := rtl8225_read($p0, 6);
    call {:si_unique_call 1983} {:cexpr "tmp"} boogie_si_record_i16($i12);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i12);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} vslice_dummy_var_86 := dev_warn.ref.ref.i32($p15, .str.42, $i16);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const rtl8225z2_rf_set_tx_power: ref;

axiom rtl8225z2_rf_set_tx_power == $sub.ref(0, 313422);

procedure rtl8225z2_rf_set_tx_power($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225z2_rf_set_tx_power($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i64;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i29: i32;
  var $i28: i32;
  var $i30: i8;
  var $p31: ref;
  var $i32: i16;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i44: i32;
  var $i43: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $i48: i8;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i66: i32;
  var $i65: i32;
  var $i67: i8;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i8;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i8;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i8;
  var $i119: i64;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i64;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i64;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i64;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i64;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i64;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i8;
  var $i144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} {:cexpr "rtl8225z2_rf_set_tx_power:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(192, 1)), $mul.ref($i6, 64)), $mul.ref(6, 1));
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i16.i8($i10);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 15);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 2510} {:cexpr "cck_power"} boogie_si_record_i8($i14);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(192, 1)), $mul.ref($i16, 64)), $mul.ref(6, 1));
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i32($i21, 4);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    call {:si_unique_call 2511} {:cexpr "ofdm_power"} boogie_si_record_i8($i23);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i14);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32(15);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, $i25);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32(15);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i28);
    call {:si_unique_call 2512} {:cexpr "cck_power"} boogie_si_record_i8($i30);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3840, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i16.i8($i32);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 15);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i30);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i35, $i36);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    call {:si_unique_call 2513} {:cexpr "cck_power"} boogie_si_record_i8($i38);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32(35);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, $i40);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32(35);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i43);
    call {:si_unique_call 2514} {:cexpr "cck_power"} boogie_si_record_i8($i45);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i23);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 15);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i47 == 1);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i23);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 10);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    call {:si_unique_call 2515} {:cexpr "ofdm_power"} boogie_si_record_i8($i51);
    assume {:verifier.code 0} true;
    $i48 := $i51;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3840, 1));
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i32($i54, 4);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i48);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i57, $i58);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    call {:si_unique_call 2516} {:cexpr "ofdm_power"} boogie_si_record_i8($i60);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32(35);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i61, $i62);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i63 == 1);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32(35);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i65);
    call {:si_unique_call 2517} {:cexpr "ofdm_power"} boogie_si_record_i8($i67);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i1, 14);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $p69 := rtl8225z2_tx_power_cck;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(1, 1));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.25, $p69);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} rtl8225_write_phy_cck($p0, 68, $i72);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $i119 := $add.i64(1, 1);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p69, $mul.ref($i119, 1));
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.25, $p70);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} rtl8225_write_phy_cck($p0, 69, $i122);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $i123 := $add.i64($i119, 1);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p69, $mul.ref($i123, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.25, $p120);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} rtl8225_write_phy_cck($p0, 70, $i126);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $i127 := $add.i64($i123, 1);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p69, $mul.ref($i127, 1));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.25, $p124);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} rtl8225_write_phy_cck($p0, 71, $i130);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $i131 := $add.i64($i127, 1);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p69, $mul.ref($i131, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.25, $p128);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} rtl8225_write_phy_cck($p0, 72, $i134);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $i135 := $add.i64($i131, 1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p69, $mul.ref($i135, 1));
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.25, $p132);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} rtl8225_write_phy_cck($p0, 73, $i138);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $i139 := $add.i64($i135, 1);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p69, $mul.ref($i139, 1));
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.25, $p136);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} rtl8225_write_phy_cck($p0, 74, $i142);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.25, $p140);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} rtl8225_write_phy_cck($p0, 75, $i144);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i45);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref($i77, 1));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.26, $p78);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} rtl818x_iowrite8($p4, $p75, $i81);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} msleep(1);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} rtl818x_iowrite8($p4, $p84, $sub.i8(0, 64));
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} $i88 := rtl818x_ioread8($p4, $p87);
    call {:si_unique_call 2524} {:cexpr "tmp___1"} boogie_si_record_i8($i88);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    call {:si_unique_call 2525} {:cexpr "reg"} boogie_si_record_i32($i89);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i89);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i94, 64);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} rtl818x_iowrite8($p4, $p92, $i96);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 256)), $mul.ref(96, 1));
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} rtl818x_iowrite32($p4, $p99, $sub.i32(0, 2046004462));
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i89);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 191);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} rtl818x_iowrite8($p4, $p102, $i106);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} rtl818x_iowrite8($p4, $p109, 0);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} rtl8225_write_phy_ofdm($p0, 2, 66);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} rtl8225_write_phy_ofdm($p0, 5, 0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} rtl8225_write_phy_ofdm($p0, 6, 64);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} rtl8225_write_phy_ofdm($p0, 7, 0);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} rtl8225_write_phy_ofdm($p0, 8, 64);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 256)), $mul.ref(158, 1));
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i67);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref($i114, 1));
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.26, $p115);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} rtl818x_iowrite8($p4, $p112, $i118);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} msleep(1);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i68 == 1;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p69 := rtl8225z2_tx_power_cck_ch14;
    goto $bb15;

  $bb10:
    assume $i63 == 1;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i60);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb12;

  $bb7:
    assume $i47 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i48 := 25;
    goto $bb9;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i38);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i14);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb3;
}



const rtl8225z2_b_rf_set_tx_power: ref;

axiom rtl8225z2_b_rf_set_tx_power == $sub.ref(0, 314454);

procedure rtl8225z2_b_rf_set_tx_power($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225z2_b_rf_set_tx_power($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i64;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i8;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i31: i8;
  var $p39: ref;
  var $i40: i16;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i52: i32;
  var $i51: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i8;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i61: i8;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i84: i32;
  var $i83: i32;
  var $i85: i8;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p98: ref;
  var $p97: ref;
  var $p93: ref;
  var $i100: i32;
  var $i101: i1;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p111: ref;
  var $p110: ref;
  var $p106: ref;
  var $p102: ref;
  var $p99: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i64;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i124: i8;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i64;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i64;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i64;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i64;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $i156: i64;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $i160: i64;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $i164: i64;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i8;
  var $i169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} {:cexpr "rtl8225z2_b_rf_set_tx_power:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(192, 1)), $mul.ref($i6, 64)), $mul.ref(6, 1));
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i16.i8($i10);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 15);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 2544} {:cexpr "cck_power"} boogie_si_record_i8($i14);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(192, 1)), $mul.ref($i16, 64)), $mul.ref(6, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i32($i21, 4);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    call {:si_unique_call 2545} {:cexpr "ofdm_power"} boogie_si_record_i8($i23);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i14);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i24, 15);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i35 := (if $i34 == 1 then 0 else 7);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i14);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i35, $i36);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    call {:si_unique_call 2547} {:cexpr "cck_power"} boogie_si_record_i8($i38);
    assume {:verifier.code 0} true;
    $i31 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3840, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i16.i8($i40);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 15);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i31);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i43, $i44);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    call {:si_unique_call 2548} {:cexpr "cck_power"} boogie_si_record_i8($i46);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32(35);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i47, $i48);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i49 == 1);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32(35);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i51 := $i52;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i51);
    call {:si_unique_call 2549} {:cexpr "cck_power"} boogie_si_record_i8($i53);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i23);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i55 := $ugt.i32($i54, 15);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i55 == 1);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i65 := (if $i64 == 1 then 2 else 10);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i23);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i65, $i66);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    call {:si_unique_call 2551} {:cexpr "ofdm_power"} boogie_si_record_i8($i68);
    assume {:verifier.code 0} true;
    $i61 := $i68;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3840, 1));
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i72 := $ashr.i32($i71, 4);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 15);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i61);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i75, $i76);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    call {:si_unique_call 2552} {:cexpr "ofdm_power"} boogie_si_record_i8($i78);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32(35);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i79, $i80);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i81 == 1);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32(35);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i83 := $i84;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i83);
    call {:si_unique_call 2553} {:cexpr "ofdm_power"} boogie_si_record_i8($i85);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i1, 14);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $p87 := rtl8225z2_tx_power_cck;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i90 == 1);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i53);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i101 := $ule.i32($i100, 5);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i101 == 1);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i53);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i104 := $ule.i32($i103, 11);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i104 == 1);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i53);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i108 := $ule.i32($i107, 17);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i108 == 1);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p87, $mul.ref(24, 1));
    assume {:verifier.code 0} true;
    $p110 := $p111;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p106 := $p110;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p102 := $p106;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p99 := $p102;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p99, $mul.ref(1, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.25, $p99);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} rtl8225_write_phy_cck($p0, 68, $i114);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $i144 := $add.i64(1, 1);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p99, $mul.ref($i144, 1));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.25, $p112);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} rtl8225_write_phy_cck($p0, 69, $i147);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    $i148 := $add.i64($i144, 1);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p99, $mul.ref($i148, 1));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.25, $p145);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} rtl8225_write_phy_cck($p0, 70, $i151);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $i152 := $add.i64($i148, 1);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p99, $mul.ref($i152, 1));
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.25, $p149);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} rtl8225_write_phy_cck($p0, 71, $i155);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    $i156 := $add.i64($i152, 1);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p99, $mul.ref($i156, 1));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.25, $p153);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} rtl8225_write_phy_cck($p0, 72, $i159);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    $i160 := $add.i64($i156, 1);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p99, $mul.ref($i160, 1));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.25, $p157);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} rtl8225_write_phy_cck($p0, 73, $i163);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    $i164 := $add.i64($i160, 1);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p99, $mul.ref($i164, 1));
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.25, $p161);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} rtl8225_write_phy_cck($p0, 74, $i167);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.25, $p165);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i168);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} rtl8225_write_phy_cck($p0, 75, $i169);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i53);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i118);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref($i119, 1));
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.26, $p120);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i123 := $shl.i32($i122, 1);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i123);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} rtl818x_iowrite8($p4, $p117, $i124);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} msleep(1);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 256)), $mul.ref(158, 1));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i85);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i128);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref($i129, 1));
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.26, $p130);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i133 := $shl.i32($i132, 1);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} rtl818x_iowrite8($p4, $p127, $i134);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i137 == 1);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i85);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i141 := $ule.i32($i140, 11);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i141 == 1);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i85);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i143 := $ule.i32($i142, 17);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i143 == 1);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 121), 80);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 119), 80);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} msleep(1);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i143 == 1;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 121), 84);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 119), 84);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i141 == 1;
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 121), 92);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 119), 92);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb38:
    assume $i137 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i85);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i139 := $ule.i32($i138, 11);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i139 == 1);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 121), 92);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 119), 92);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i139 == 1;
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 121), 96);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 119), 96);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb31:
    assume $i108 == 1;
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p87, $mul.ref(16, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p110 := $p109;
    goto $bb33;

  $bb28:
    assume $i104 == 1;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p87, $mul.ref(8, 1));
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $p106 := $p105;
    goto $bb30;

  $bb25:
    assume $i101 == 1;
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $p102 := $p87;
    goto $bb27;

  $bb16:
    assume $i90 == 1;
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i53);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i92 := $ule.i32($i91, 6);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i92 == 1);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i53);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $i95 := $ule.i32($i94, 11);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i95 == 1);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p87, $mul.ref(16, 1));
    assume {:verifier.code 0} true;
    $p97 := $p98;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p93 := $p97;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p99 := $p93;
    goto $bb24;

  $bb21:
    assume $i95 == 1;
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p87, $mul.ref(8, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $p97 := $p96;
    goto $bb23;

  $bb18:
    assume $i92 == 1;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $p93 := $p87;
    goto $bb20;

  $bb13:
    assume $i86 == 1;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $p87 := rtl8225z2_tx_power_cck_ch14;
    goto $bb15;

  $bb10:
    assume $i81 == 1;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i78);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb12;

  $bb7:
    assume $i55 == 1;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i59 := (if $i58 == 1 then 17 else 25);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    call {:si_unique_call 2550} {:cexpr "ofdm_power"} boogie_si_record_i8($i60);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb9;

  $bb4:
    assume $i49 == 1;
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i46);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb6;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 4296)), $mul.ref(3844, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 15 else 22);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    call {:si_unique_call 2546} {:cexpr "cck_power"} boogie_si_record_i8($i30);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb3;
}



const rtl8225_write_phy_cck: ref;

axiom rtl8225_write_phy_cck == $sub.ref(0, 315486);

procedure rtl8225_write_phy_cck($p0: ref, $i1: i8, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_write_phy_cck($p0: ref, $i1: i8, $i2: i32)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} {:cexpr "rtl8225_write_phy_cck:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 2577} {:cexpr "rtl8225_write_phy_cck:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i2, 65536);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} rtl8187_write_phy($p0, $i4, $i5);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_write_phy_ofdm: ref;

axiom rtl8225_write_phy_ofdm == $sub.ref(0, 316518);

procedure rtl8225_write_phy_ofdm($p0: ref, $i1: i8, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225_write_phy_ofdm($p0: ref, $i1: i8, $i2: i32)
{
  var $i3: i32;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} {:cexpr "rtl8225_write_phy_ofdm:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 2580} {:cexpr "rtl8225_write_phy_ofdm:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} rtl8187_write_phy($p0, $i4, $i2);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_write_phy: ref;

axiom rtl8187_write_phy == $sub.ref(0, 317550);

procedure rtl8187_write_phy($p0: ref, $i1: i8, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8187_write_phy($p0: ref, $i1: i8, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} {:cexpr "rtl8187_write_phy:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 2583} {:cexpr "rtl8187_write_phy:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i2, 8);
    call {:si_unique_call 2584} {:cexpr "data"} boogie_si_record_i32($i6);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 128);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, $i6);
    call {:si_unique_call 2585} {:cexpr "data"} boogie_si_record_i32($i9);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(3, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i9, 24);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} rtl818x_iowrite8($p5, $p14, $i18);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(2, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i32($i9, 16);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} rtl818x_iowrite8($p5, $p23, $i27);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(1, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i33 := $lshr.i32($i9, 8);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} rtl818x_iowrite8($p5, $p32, $i36);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i9);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} rtl818x_iowrite8($p5, $p40, $i43);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 318582);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2590} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2591} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rtl8225z2_b_rf_init: ref;

axiom rtl8225z2_b_rf_init == $sub.ref(0, 319614);

procedure rtl8225z2_b_rf_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8225z2_b_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} rtl8225_write($p0, 0, 183);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} rtl8225_write($p0, 1, 3808);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} rtl8225_write($p0, 3, 1089);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} rtl8225_write($p0, 4, 2243);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} rtl8225_write($p0, 5, 3186);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} rtl8225_write($p0, 6, 230);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} rtl8225_write($p0, 7, 2090);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} rtl8225_write($p0, 8, 63);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} rtl8225_write($p0, 9, 821);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} rtl8225_write($p0, 10, 2516);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} rtl8225_write($p0, 11, 1979);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} rtl8225_write($p0, 12, 2128);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} rtl8225_write($p0, 13, 3295);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} rtl8225_write($p0, 14, 43);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} rtl8225_write($p0, 15, 276);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} rtl8225_write($p0, 0, 439);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} rtl8225_write($p0, 1, 1);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} rtl8225_write($p0, 2, 1024);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} rtl8225_write($p0, 1, 2);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} rtl8225_write($p0, 2, 1025);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} rtl8225_write($p0, 1, 3);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} rtl8225_write($p0, 2, 1026);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} rtl8225_write($p0, 1, 4);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} rtl8225_write($p0, 2, 1027);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} rtl8225_write($p0, 1, 5);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3077} rtl8225_write($p0, 2, 1028);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} rtl8225_write($p0, 1, 6);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} rtl8225_write($p0, 2, 1029);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} rtl8225_write($p0, 1, 7);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} rtl8225_write($p0, 2, 1032);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} rtl8225_write($p0, 1, 8);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3083} rtl8225_write($p0, 2, 1033);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} rtl8225_write($p0, 1, 9);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} rtl8225_write($p0, 2, 1034);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} rtl8225_write($p0, 1, 10);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} rtl8225_write($p0, 2, 1035);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} rtl8225_write($p0, 1, 11);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3089} rtl8225_write($p0, 2, 1282);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} rtl8225_write($p0, 1, 12);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} rtl8225_write($p0, 2, 1283);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} rtl8225_write($p0, 1, 13);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3093} rtl8225_write($p0, 2, 1284);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} rtl8225_write($p0, 1, 14);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3095} rtl8225_write($p0, 2, 1285);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} rtl8225_write($p0, 1, 15);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} rtl8225_write($p0, 2, 1344);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3098} rtl8225_write($p0, 1, 16);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} rtl8225_write($p0, 2, 1345);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} rtl8225_write($p0, 1, 17);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} rtl8225_write($p0, 2, 1346);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} rtl8225_write($p0, 1, 18);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3103} rtl8225_write($p0, 2, 1347);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} rtl8225_write($p0, 1, 19);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} rtl8225_write($p0, 2, 1348);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} rtl8225_write($p0, 1, 20);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} rtl8225_write($p0, 2, 1349);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} rtl8225_write($p0, 1, 21);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} rtl8225_write($p0, 2, 1408);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} rtl8225_write($p0, 1, 22);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3111} rtl8225_write($p0, 2, 1409);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} rtl8225_write($p0, 1, 23);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} rtl8225_write($p0, 2, 1410);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} rtl8225_write($p0, 1, 24);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} rtl8225_write($p0, 2, 1411);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} rtl8225_write($p0, 1, 25);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} rtl8225_write($p0, 2, 1412);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3118} rtl8225_write($p0, 1, 26);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} rtl8225_write($p0, 2, 1413);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3120} rtl8225_write($p0, 1, 27);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3121} rtl8225_write($p0, 2, 1416);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} rtl8225_write($p0, 1, 28);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3123} rtl8225_write($p0, 2, 1417);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} rtl8225_write($p0, 1, 29);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} rtl8225_write($p0, 2, 1418);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3126} rtl8225_write($p0, 1, 30);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} rtl8225_write($p0, 2, 1419);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} rtl8225_write($p0, 1, 31);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} rtl8225_write($p0, 2, 1603);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} rtl8225_write($p0, 1, 32);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} rtl8225_write($p0, 2, 1604);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} rtl8225_write($p0, 1, 33);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} rtl8225_write($p0, 2, 1605);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} rtl8225_write($p0, 1, 34);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} rtl8225_write($p0, 2, 1664);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} rtl8225_write($p0, 1, 35);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} rtl8225_write($p0, 2, 1665);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} rtl8225_write($p0, 1, 36);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} rtl8225_write($p0, 2, 1666);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} rtl8225_write($p0, 1, 37);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3141} rtl8225_write($p0, 2, 1667);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} rtl8225_write($p0, 1, 38);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} rtl8225_write($p0, 2, 1668);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3144} rtl8225_write($p0, 1, 39);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} rtl8225_write($p0, 2, 1669);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} rtl8225_write($p0, 1, 40);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} rtl8225_write($p0, 2, 1672);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} rtl8225_write($p0, 1, 41);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} rtl8225_write($p0, 2, 1673);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3150} rtl8225_write($p0, 1, 42);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} rtl8225_write($p0, 2, 1674);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3152} rtl8225_write($p0, 1, 43);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} rtl8225_write($p0, 2, 1675);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} rtl8225_write($p0, 1, 44);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} rtl8225_write($p0, 2, 1676);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3156} rtl8225_write($p0, 1, 45);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} rtl8225_write($p0, 2, 1858);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} rtl8225_write($p0, 1, 46);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3159} rtl8225_write($p0, 2, 1859);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3160} rtl8225_write($p0, 1, 47);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} rtl8225_write($p0, 2, 1860);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} rtl8225_write($p0, 1, 48);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} rtl8225_write($p0, 2, 1861);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} rtl8225_write($p0, 1, 49);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} rtl8225_write($p0, 2, 1920);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3166} rtl8225_write($p0, 1, 50);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3167} rtl8225_write($p0, 2, 1921);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} rtl8225_write($p0, 1, 51);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} rtl8225_write($p0, 2, 1922);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} rtl8225_write($p0, 1, 52);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} rtl8225_write($p0, 2, 1923);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} rtl8225_write($p0, 1, 53);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} rtl8225_write($p0, 2, 1924);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} rtl8225_write($p0, 1, 54);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} rtl8225_write($p0, 2, 1925);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3176} rtl8225_write($p0, 1, 55);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} rtl8225_write($p0, 2, 1928);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3178} rtl8225_write($p0, 1, 56);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} rtl8225_write($p0, 2, 1929);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3180} rtl8225_write($p0, 1, 57);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3181} rtl8225_write($p0, 2, 1930);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3182} rtl8225_write($p0, 1, 58);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} rtl8225_write($p0, 2, 1931);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3184} rtl8225_write($p0, 1, 59);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3185} rtl8225_write($p0, 2, 1932);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} rtl8225_write($p0, 1, 60);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3187} rtl8225_write($p0, 2, 1933);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} rtl8225_write($p0, 1, 61);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} rtl8225_write($p0, 2, 1936);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3190} rtl8225_write($p0, 1, 62);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} rtl8225_write($p0, 2, 1937);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} rtl8225_write($p0, 1, 63);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} rtl8225_write($p0, 2, 1938);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} rtl8225_write($p0, 1, 64);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} rtl8225_write($p0, 2, 1939);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} rtl8225_write($p0, 1, 65);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} rtl8225_write($p0, 2, 1940);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} rtl8225_write($p0, 1, 66);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} rtl8225_write($p0, 2, 1941);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} rtl8225_write($p0, 1, 67);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3201} rtl8225_write($p0, 2, 1944);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} rtl8225_write($p0, 1, 68);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} rtl8225_write($p0, 2, 1945);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} rtl8225_write($p0, 1, 69);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} rtl8225_write($p0, 2, 1946);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3206} rtl8225_write($p0, 1, 70);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} rtl8225_write($p0, 2, 1947);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3208} rtl8225_write($p0, 1, 71);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} rtl8225_write($p0, 2, 1948);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} rtl8225_write($p0, 1, 72);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} rtl8225_write($p0, 2, 1949);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} rtl8225_write($p0, 1, 73);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3213} rtl8225_write($p0, 2, 1952);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} rtl8225_write($p0, 1, 74);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} rtl8225_write($p0, 2, 1953);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3216} rtl8225_write($p0, 1, 75);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} rtl8225_write($p0, 2, 1954);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} rtl8225_write($p0, 1, 76);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3219} rtl8225_write($p0, 2, 1955);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3220} rtl8225_write($p0, 1, 77);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} rtl8225_write($p0, 2, 1956);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} rtl8225_write($p0, 1, 78);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} rtl8225_write($p0, 2, 1957);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} rtl8225_write($p0, 1, 79);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} rtl8225_write($p0, 2, 1960);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} rtl8225_write($p0, 1, 80);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} rtl8225_write($p0, 2, 1961);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} rtl8225_write($p0, 1, 81);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} rtl8225_write($p0, 2, 938);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} rtl8225_write($p0, 1, 82);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} rtl8225_write($p0, 2, 939);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} rtl8225_write($p0, 1, 83);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} rtl8225_write($p0, 2, 940);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} rtl8225_write($p0, 1, 84);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} rtl8225_write($p0, 2, 941);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} rtl8225_write($p0, 1, 85);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} rtl8225_write($p0, 2, 944);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} rtl8225_write($p0, 1, 86);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} rtl8225_write($p0, 2, 945);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} rtl8225_write($p0, 1, 87);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} rtl8225_write($p0, 2, 946);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} rtl8225_write($p0, 1, 88);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} rtl8225_write($p0, 2, 947);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} rtl8225_write($p0, 1, 89);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} rtl8225_write($p0, 2, 948);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} rtl8225_write($p0, 1, 90);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} rtl8225_write($p0, 2, 949);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} rtl8225_write($p0, 1, 91);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} rtl8225_write($p0, 2, 952);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} rtl8225_write($p0, 1, 92);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3251} rtl8225_write($p0, 2, 953);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} rtl8225_write($p0, 1, 93);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} rtl8225_write($p0, 2, 954);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} rtl8225_write($p0, 1, 94);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} rtl8225_write($p0, 2, 955);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} rtl8225_write($p0, 1, 95);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} rtl8225_write($p0, 2, 955);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} rtl8225_write($p0, 3, 128);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} rtl8225_write($p0, 5, 4);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} rtl8225_write($p0, 0, 183);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} rtl8225_write($p0, 2, 3149);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} rtl8225_write($p0, 0, 703);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} rtl818x_iowrite8($p3, $p6, 3);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(158, 1));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} rtl818x_iowrite8($p3, $p9, 7);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4296)), $mul.ref(0, 1));
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} rtl818x_iowrite8($p3, $p12, 3);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 128), 18);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} rtl8225_write_phy_ofdm($p0, 15, 94);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} rtl8225_write_phy_ofdm($p0, 14, 128);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} rtl8225_write_phy_ofdm($p0, 15, 94);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} rtl8225_write_phy_ofdm($p0, 14, 129);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} rtl8225_write_phy_ofdm($p0, 15, 94);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} rtl8225_write_phy_ofdm($p0, 14, 130);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} rtl8225_write_phy_ofdm($p0, 15, 94);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} rtl8225_write_phy_ofdm($p0, 14, 131);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} rtl8225_write_phy_ofdm($p0, 15, 93);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} rtl8225_write_phy_ofdm($p0, 14, 132);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} rtl8225_write_phy_ofdm($p0, 15, 91);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} rtl8225_write_phy_ofdm($p0, 14, 133);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} rtl8225_write_phy_ofdm($p0, 15, 89);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} rtl8225_write_phy_ofdm($p0, 14, 134);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} rtl8225_write_phy_ofdm($p0, 15, 87);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} rtl8225_write_phy_ofdm($p0, 14, 135);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} rtl8225_write_phy_ofdm($p0, 15, 85);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} rtl8225_write_phy_ofdm($p0, 14, 136);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} rtl8225_write_phy_ofdm($p0, 15, 83);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} rtl8225_write_phy_ofdm($p0, 14, 137);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} rtl8225_write_phy_ofdm($p0, 15, 81);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} rtl8225_write_phy_ofdm($p0, 14, 138);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} rtl8225_write_phy_ofdm($p0, 15, 79);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} rtl8225_write_phy_ofdm($p0, 14, 139);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} rtl8225_write_phy_ofdm($p0, 15, 77);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} rtl8225_write_phy_ofdm($p0, 14, 140);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} rtl8225_write_phy_ofdm($p0, 15, 75);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} rtl8225_write_phy_ofdm($p0, 14, 141);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} rtl8225_write_phy_ofdm($p0, 15, 73);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} rtl8225_write_phy_ofdm($p0, 14, 142);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} rtl8225_write_phy_ofdm($p0, 15, 71);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} rtl8225_write_phy_ofdm($p0, 14, 143);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} rtl8225_write_phy_ofdm($p0, 15, 69);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} rtl8225_write_phy_ofdm($p0, 14, 144);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} rtl8225_write_phy_ofdm($p0, 15, 67);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} rtl8225_write_phy_ofdm($p0, 14, 145);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} rtl8225_write_phy_ofdm($p0, 15, 65);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} rtl8225_write_phy_ofdm($p0, 14, 146);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} rtl8225_write_phy_ofdm($p0, 15, 63);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} rtl8225_write_phy_ofdm($p0, 14, 147);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} rtl8225_write_phy_ofdm($p0, 15, 61);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} rtl8225_write_phy_ofdm($p0, 14, 148);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} rtl8225_write_phy_ofdm($p0, 15, 59);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} rtl8225_write_phy_ofdm($p0, 14, 149);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} rtl8225_write_phy_ofdm($p0, 15, 57);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} rtl8225_write_phy_ofdm($p0, 14, 150);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} rtl8225_write_phy_ofdm($p0, 15, 55);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} rtl8225_write_phy_ofdm($p0, 14, 151);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} rtl8225_write_phy_ofdm($p0, 15, 53);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} rtl8225_write_phy_ofdm($p0, 14, 152);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} rtl8225_write_phy_ofdm($p0, 15, 51);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} rtl8225_write_phy_ofdm($p0, 14, 153);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} rtl8225_write_phy_ofdm($p0, 14, 154);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} rtl8225_write_phy_ofdm($p0, 14, 155);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} rtl8225_write_phy_ofdm($p0, 15, 45);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} rtl8225_write_phy_ofdm($p0, 14, 156);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} rtl8225_write_phy_ofdm($p0, 15, 43);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} rtl8225_write_phy_ofdm($p0, 14, 157);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} rtl8225_write_phy_ofdm($p0, 15, 41);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} rtl8225_write_phy_ofdm($p0, 14, 158);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} rtl8225_write_phy_ofdm($p0, 15, 39);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} rtl8225_write_phy_ofdm($p0, 14, 159);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} rtl8225_write_phy_ofdm($p0, 15, 37);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} rtl8225_write_phy_ofdm($p0, 14, 160);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} rtl8225_write_phy_ofdm($p0, 15, 35);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} rtl8225_write_phy_ofdm($p0, 14, 161);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} rtl8225_write_phy_ofdm($p0, 15, 33);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} rtl8225_write_phy_ofdm($p0, 14, 162);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} rtl8225_write_phy_ofdm($p0, 15, 31);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} rtl8225_write_phy_ofdm($p0, 14, 163);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} rtl8225_write_phy_ofdm($p0, 15, 29);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} rtl8225_write_phy_ofdm($p0, 14, 164);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} rtl8225_write_phy_ofdm($p0, 15, 27);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} rtl8225_write_phy_ofdm($p0, 14, 165);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} rtl8225_write_phy_ofdm($p0, 14, 166);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} rtl8225_write_phy_ofdm($p0, 15, 23);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} rtl8225_write_phy_ofdm($p0, 14, 167);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} rtl8225_write_phy_ofdm($p0, 15, 21);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} rtl8225_write_phy_ofdm($p0, 14, 168);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} rtl8225_write_phy_ofdm($p0, 15, 19);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} rtl8225_write_phy_ofdm($p0, 14, 169);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} rtl8225_write_phy_ofdm($p0, 15, 17);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} rtl8225_write_phy_ofdm($p0, 14, 170);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} rtl8225_write_phy_ofdm($p0, 14, 171);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} rtl8225_write_phy_ofdm($p0, 15, 13);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} rtl8225_write_phy_ofdm($p0, 14, 172);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} rtl8225_write_phy_ofdm($p0, 15, 11);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} rtl8225_write_phy_ofdm($p0, 14, 173);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} rtl8225_write_phy_ofdm($p0, 15, 9);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} rtl8225_write_phy_ofdm($p0, 14, 174);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} rtl8225_write_phy_ofdm($p0, 15, 7);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} rtl8225_write_phy_ofdm($p0, 14, 175);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} rtl8225_write_phy_ofdm($p0, 15, 5);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} rtl8225_write_phy_ofdm($p0, 14, 176);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} rtl8225_write_phy_ofdm($p0, 15, 3);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} rtl8225_write_phy_ofdm($p0, 14, 177);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} rtl8225_write_phy_ofdm($p0, 14, 178);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} rtl8225_write_phy_ofdm($p0, 14, 179);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} rtl8225_write_phy_ofdm($p0, 14, 180);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} rtl8225_write_phy_ofdm($p0, 14, 181);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} rtl8225_write_phy_ofdm($p0, 14, 182);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} rtl8225_write_phy_ofdm($p0, 14, 183);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} rtl8225_write_phy_ofdm($p0, 14, 184);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} rtl8225_write_phy_ofdm($p0, 14, 185);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} rtl8225_write_phy_ofdm($p0, 14, 186);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} rtl8225_write_phy_ofdm($p0, 14, 187);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} rtl8225_write_phy_ofdm($p0, 14, 188);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} rtl8225_write_phy_ofdm($p0, 14, 189);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} rtl8225_write_phy_ofdm($p0, 14, 190);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} rtl8225_write_phy_ofdm($p0, 14, 191);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} rtl8225_write_phy_ofdm($p0, 14, 192);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} rtl8225_write_phy_ofdm($p0, 14, 193);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} rtl8225_write_phy_ofdm($p0, 14, 194);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} rtl8225_write_phy_ofdm($p0, 14, 195);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} rtl8225_write_phy_ofdm($p0, 14, 196);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} rtl8225_write_phy_ofdm($p0, 14, 197);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} rtl8225_write_phy_ofdm($p0, 14, 198);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} rtl8225_write_phy_ofdm($p0, 14, 199);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} rtl8225_write_phy_ofdm($p0, 14, 200);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} rtl8225_write_phy_ofdm($p0, 15, 32);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} rtl8225_write_phy_ofdm($p0, 14, 201);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} rtl8225_write_phy_ofdm($p0, 15, 33);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} rtl8225_write_phy_ofdm($p0, 14, 202);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} rtl8225_write_phy_ofdm($p0, 15, 34);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} rtl8225_write_phy_ofdm($p0, 14, 203);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} rtl8225_write_phy_ofdm($p0, 15, 35);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} rtl8225_write_phy_ofdm($p0, 14, 204);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} rtl8225_write_phy_ofdm($p0, 15, 36);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} rtl8225_write_phy_ofdm($p0, 14, 205);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} rtl8225_write_phy_ofdm($p0, 15, 37);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} rtl8225_write_phy_ofdm($p0, 14, 206);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} rtl8225_write_phy_ofdm($p0, 15, 38);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} rtl8225_write_phy_ofdm($p0, 14, 207);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} rtl8225_write_phy_ofdm($p0, 15, 38);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} rtl8225_write_phy_ofdm($p0, 14, 208);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} rtl8225_write_phy_ofdm($p0, 15, 39);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} rtl8225_write_phy_ofdm($p0, 14, 209);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} rtl8225_write_phy_ofdm($p0, 15, 39);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} rtl8225_write_phy_ofdm($p0, 14, 210);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} rtl8225_write_phy_ofdm($p0, 15, 40);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} rtl8225_write_phy_ofdm($p0, 14, 211);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} rtl8225_write_phy_ofdm($p0, 15, 40);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} rtl8225_write_phy_ofdm($p0, 14, 212);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} rtl8225_write_phy_ofdm($p0, 15, 41);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} rtl8225_write_phy_ofdm($p0, 14, 213);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} rtl8225_write_phy_ofdm($p0, 15, 42);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} rtl8225_write_phy_ofdm($p0, 14, 214);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} rtl8225_write_phy_ofdm($p0, 15, 42);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} rtl8225_write_phy_ofdm($p0, 14, 215);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} rtl8225_write_phy_ofdm($p0, 15, 42);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} rtl8225_write_phy_ofdm($p0, 14, 216);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} rtl8225_write_phy_ofdm($p0, 15, 43);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} rtl8225_write_phy_ofdm($p0, 14, 217);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} rtl8225_write_phy_ofdm($p0, 15, 43);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} rtl8225_write_phy_ofdm($p0, 14, 218);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2961} rtl8225_write_phy_ofdm($p0, 15, 43);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} rtl8225_write_phy_ofdm($p0, 14, 219);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} rtl8225_write_phy_ofdm($p0, 15, 44);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} rtl8225_write_phy_ofdm($p0, 14, 220);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} rtl8225_write_phy_ofdm($p0, 15, 44);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} rtl8225_write_phy_ofdm($p0, 14, 221);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} rtl8225_write_phy_ofdm($p0, 15, 44);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} rtl8225_write_phy_ofdm($p0, 14, 222);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} rtl8225_write_phy_ofdm($p0, 15, 45);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} rtl8225_write_phy_ofdm($p0, 14, 223);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} rtl8225_write_phy_ofdm($p0, 15, 45);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} rtl8225_write_phy_ofdm($p0, 14, 224);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} rtl8225_write_phy_ofdm($p0, 15, 45);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} rtl8225_write_phy_ofdm($p0, 14, 225);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} rtl8225_write_phy_ofdm($p0, 15, 45);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} rtl8225_write_phy_ofdm($p0, 14, 226);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} rtl8225_write_phy_ofdm($p0, 15, 46);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} rtl8225_write_phy_ofdm($p0, 14, 227);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} rtl8225_write_phy_ofdm($p0, 15, 46);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} rtl8225_write_phy_ofdm($p0, 14, 228);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} rtl8225_write_phy_ofdm($p0, 15, 46);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} rtl8225_write_phy_ofdm($p0, 14, 229);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} rtl8225_write_phy_ofdm($p0, 15, 46);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} rtl8225_write_phy_ofdm($p0, 14, 230);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} rtl8225_write_phy_ofdm($p0, 14, 231);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} rtl8225_write_phy_ofdm($p0, 14, 232);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} rtl8225_write_phy_ofdm($p0, 14, 233);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} rtl8225_write_phy_ofdm($p0, 15, 48);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} rtl8225_write_phy_ofdm($p0, 14, 234);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} rtl8225_write_phy_ofdm($p0, 15, 48);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} rtl8225_write_phy_ofdm($p0, 14, 235);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} rtl8225_write_phy_ofdm($p0, 14, 236);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} rtl8225_write_phy_ofdm($p0, 14, 237);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} rtl8225_write_phy_ofdm($p0, 14, 238);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3020} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} rtl8225_write_phy_ofdm($p0, 14, 239);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} rtl8225_write_phy_ofdm($p0, 14, 240);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} rtl8225_write_phy_ofdm($p0, 14, 241);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3030} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} rtl8225_write_phy_ofdm($p0, 14, 242);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3033} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} rtl8225_write_phy_ofdm($p0, 14, 243);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} rtl8225_write_phy_ofdm($p0, 14, 244);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} rtl8225_write_phy_ofdm($p0, 14, 245);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3043} rtl8225_write_phy_ofdm($p0, 14, 246);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3045} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} rtl8225_write_phy_ofdm($p0, 14, 247);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3049} rtl8225_write_phy_ofdm($p0, 14, 248);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3052} rtl8225_write_phy_ofdm($p0, 14, 249);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} rtl8225_write_phy_ofdm($p0, 14, 250);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} rtl8225_write_phy_ofdm($p0, 14, 251);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} rtl8225_write_phy_ofdm($p0, 14, 252);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} rtl8225_write_phy_ofdm($p0, 14, 253);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} rtl8225_write_phy_ofdm($p0, 14, 254);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} rtl8225_write_phy_ofdm($p0, 15, 49);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} rtl8225_write_phy_ofdm($p0, 14, 255);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} rtl8225_write_phy_ofdm($p0, 14, 0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 128), 16);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} rtl8225_write_phy_ofdm($p0, 0, 16);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} rtl8225_write_phy_ofdm($p0, 1, 13);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} rtl8225_write_phy_ofdm($p0, 2, 1);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} rtl8225_write_phy_ofdm($p0, 3, 0);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} rtl8225_write_phy_ofdm($p0, 4, 20);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} rtl8225_write_phy_ofdm($p0, 5, 251);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} rtl8225_write_phy_ofdm($p0, 6, 251);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} rtl8225_write_phy_ofdm($p0, 7, 96);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} rtl8225_write_phy_ofdm($p0, 8, 0);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} rtl8225_write_phy_ofdm($p0, 9, 96);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} rtl8225_write_phy_ofdm($p0, 10, 0);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} rtl8225_write_phy_ofdm($p0, 11, 0);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} rtl8225_write_phy_ofdm($p0, 12, 0);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} rtl8225_write_phy_ofdm($p0, 13, 92);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} rtl8225_write_phy_ofdm($p0, 16, 64);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} rtl8225_write_phy_ofdm($p0, 17, 0);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} rtl8225_write_phy_ofdm($p0, 18, 64);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} rtl8225_write_phy_ofdm($p0, 19, 0);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} rtl8225_write_phy_ofdm($p0, 20, 0);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} rtl8225_write_phy_ofdm($p0, 21, 0);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} rtl8225_write_phy_ofdm($p0, 22, 168);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} rtl8225_write_phy_ofdm($p0, 23, 38);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} rtl8225_write_phy_ofdm($p0, 24, 50);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} rtl8225_write_phy_ofdm($p0, 25, 51);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} rtl8225_write_phy_ofdm($p0, 26, 7);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} rtl8225_write_phy_ofdm($p0, 27, 165);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} rtl8225_write_phy_ofdm($p0, 28, 111);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} rtl8225_write_phy_ofdm($p0, 29, 85);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} rtl8225_write_phy_ofdm($p0, 30, 200);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} rtl8225_write_phy_ofdm($p0, 31, 179);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} rtl8225_write_phy_ofdm($p0, 32, 10);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} rtl8225_write_phy_ofdm($p0, 33, 225);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} rtl8225_write_phy_ofdm($p0, 34, 44);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} rtl8225_write_phy_ofdm($p0, 35, 138);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} rtl8225_write_phy_ofdm($p0, 36, 134);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} rtl8225_write_phy_ofdm($p0, 37, 131);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} rtl8225_write_phy_ofdm($p0, 38, 52);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} rtl8225_write_phy_ofdm($p0, 39, 15);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} rtl8225_write_phy_ofdm($p0, 40, 79);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} rtl8225_write_phy_ofdm($p0, 41, 36);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} rtl8225_write_phy_ofdm($p0, 42, 111);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} rtl8225_write_phy_ofdm($p0, 43, 194);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} rtl8225_write_phy_ofdm($p0, 44, 107);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} rtl8225_write_phy_ofdm($p0, 45, 64);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} rtl8225_write_phy_ofdm($p0, 46, 128);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} rtl8225_write_phy_ofdm($p0, 47, 0);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} rtl8225_write_phy_ofdm($p0, 48, 192);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} rtl8225_write_phy_ofdm($p0, 49, 193);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} rtl8225_write_phy_ofdm($p0, 50, 88);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} rtl8225_write_phy_ofdm($p0, 51, 241);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} rtl8225_write_phy_ofdm($p0, 52, 0);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} rtl8225_write_phy_ofdm($p0, 53, 228);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} rtl8225_write_phy_ofdm($p0, 54, 144);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} rtl8225_write_phy_ofdm($p0, 55, 62);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} rtl8225_write_phy_ofdm($p0, 56, 109);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} rtl8225_write_phy_ofdm($p0, 57, 60);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} rtl8225_write_phy_ofdm($p0, 58, 251);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} rtl8225_write_phy_ofdm($p0, 59, 7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 105), 70);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 92), 182);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} rtl8225_write_phy_ofdm($p0, $sub.i8(0, 123), 252);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} rtl8225_write_phy_cck($p0, $sub.i8(0, 63), 136);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 320646);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3258} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_initialize_ieee80211_ops_5: ref;

axiom ldv_initialize_ieee80211_ops_5 == $sub.ref(0, 321678);

procedure ldv_initialize_ieee80211_ops_5();
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.0, $CurrAddr;



implementation ldv_initialize_ieee80211_ops_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} $p0 := ldv_zalloc(144);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.27 := $p0;
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} $p2 := ldv_zalloc(280);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $M.28 := $p2;
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_4: ref;

axiom ldv_usb_driver_4 == $sub.ref(0, 322710);

procedure ldv_usb_driver_4();
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr;



implementation ldv_usb_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} $p0 := ldv_zalloc(1560);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 323742);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.0, $M.12, $M.13, $M.14, $M.15, $M.17, $M.38, $M.40, $M.27, $M.28, $M.41, $M.1, $M.29, $M.39, $M.44, $M.42, $M.43, $M.4, $M.3, $M.5, $M.24, $M.19, $M.18, $M.59, $M.60, $M.61, $M.62, $M.63, $M.20, $M.26, $M.25, $M.23, $M.22, $M.21, $M.2, $M.64, $M.65, $M.66, $M.146, $M.147, $M.148, $CurrAddr, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i64;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i64;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i16;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i16;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i64;
  var vslice_dummy_var_90: i64;
  var vslice_dummy_var_91: i64;
  var vslice_dummy_var_92: i64;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    call {:si_unique_call 3262} $initialize();
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} $p1 := ldv_zalloc(32);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} $p3 := ldv_zalloc(4);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3267} $i5 := __VERIFIER_nondet_u16();
    call {:si_unique_call 3268} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i5);
    call {:si_unique_call 3269} {:cexpr "tmp___1"} boogie_si_record_i16($i5);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3270} $i6 := __VERIFIER_nondet_uint();
    call {:si_unique_call 3271} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i6);
    call {:si_unique_call 3272} {:cexpr "tmp___2"} boogie_si_record_i32($i6);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} $p7 := ldv_zalloc(8);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} $p9 := ldv_zalloc(10);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3275} $i11 := __VERIFIER_nondet_u32();
    call {:si_unique_call 3276} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i11);
    call {:si_unique_call 3277} {:cexpr "tmp___5"} boogie_si_record_i32($i11);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3278} $i12 := __VERIFIER_nondet_u32();
    call {:si_unique_call 3279} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i12);
    call {:si_unique_call 3280} {:cexpr "tmp___6"} boogie_si_record_i32($i12);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} $p13 := ldv_zalloc(232);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} $p15 := ldv_zalloc(24);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} $p17 := ldv_zalloc(232);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} ldv_initialize();
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.30;
    call {:si_unique_call 3285} cmdloc_dummy_var_46 := $memset.i8(cmdloc_dummy_var_45, $p19, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.30 := cmdloc_dummy_var_46;
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 3286} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 3287} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 3288} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 3289} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 3290} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 3291} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 3292} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $p115, $i117, $i118, $p119, $p120, $i122, $i123, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $p132, $p133, $i134, $i135, $p136, $p137, $i138, $i139, $p140, $i141, $i142, $p143, $i144, $i145, $p146, $p147, $i149, $i150, $p151, $p152, $i154, $i155, $p156, $p157, $i158, $i159, $i161, $i162, $p163, $p164, $i165, $i166, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $i180, $p181, $p182, $i183, $i184, $p185, $p186, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96 := main_loop_$bb1($p0, $p2, $p4, $i5, $i6, $p8, $p10, $i11, $i12, $p14, $p16, $p18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $p115, $i117, $i118, $p119, $p120, $i122, $i123, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $p132, $p133, $i134, $i135, $p136, $p137, $i138, $i139, $p140, $i141, $i142, $p143, $i144, $i145, $p146, $p147, $i149, $i150, $p151, $p152, $i154, $i155, $p156, $p157, $i158, $i159, $i161, $i162, $p163, $p164, $i165, $i166, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $i180, $p181, $p182, $i183, $i184, $p185, $p186, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} ldv_stop();
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb44_dummy;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i72 := $M.37;
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb84:
    assume $i73 == 1;
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3329} $i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 3330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i74);
    call {:si_unique_call 3331} {:cexpr "tmp___13"} boogie_si_record_i32($i74);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i74, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i74, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i74, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i74, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} ldv_stop();
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb95:
    assume $i79 == 1;
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i179 := $M.37;
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 1);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i183 := $M.37;
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 2);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb181:
    assume $i184 == 1;
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $p185 := $M.27;
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p186 := $M.28;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} rtl8187_remove_interface($p185, $p186);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3378} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb178:
    assume $i180 == 1;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p181 := $M.27;
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p182 := $M.28;
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3375} rtl8187_remove_interface($p181, $p182);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3376} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb93:
    assume $i78 == 1;
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i173 := $M.37;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 1);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i176 := $M.37;
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 2);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb175:
    assume $i177 == 1;
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p178 := $M.27;
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} rtl8187_tx($p178, $p8, $p14);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3374} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume $i174 == 1;
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p175 := $M.27;
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3371} rtl8187_tx($p175, $p8, $p14);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3372} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb91:
    assume $i77 == 1;
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $i168 := $M.37;
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 2);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb169:
    assume $i169 == 1;
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $p170 := $M.27;
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} rtl8187_stop($p170);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3369} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i171 := $M.33;
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $i172 := $sub.i32($i171, 1);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $M.33 := $i172;
    call {:si_unique_call 3370} {:cexpr "ref_cnt"} boogie_si_record_i32($i172);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb89:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i74, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i74, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i81 == 1);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i154 := $M.37;
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i161 := $M.37;
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 2);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb166:
    assume $i162 == 1;
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p163 := $M.27;
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p164 := $M.28;
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i5);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3366} vslice_dummy_var_96 := rtl8187_conf_tx($p163, $p164, $i166, $p10);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3367} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb163:
    assume $i155 == 1;
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $p156 := $M.27;
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p157 := $M.28;
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i5);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i16($i158);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} vslice_dummy_var_95 := rtl8187_conf_tx($p156, $p157, $i159, $p10);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3365} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb100:
    assume $i81 == 1;
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i144 := $M.37;
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 1);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i149 := $M.37;
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 2);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb160:
    assume $i150 == 1;
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p151 := $M.27;
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $p152 := $M.28;
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} vslice_dummy_var_94 := rtl8187_add_interface($p151, $p152);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3363} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume $i145 == 1;
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p146 := $M.27;
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $p147 := $M.28;
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} vslice_dummy_var_93 := rtl8187_add_interface($p146, $p147);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3361} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb98:
    assume $i80 == 1;
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i138 := $M.37;
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 1);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i141 := $M.37;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb154:
    assume $i142 == 1;
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p143 := $M.27;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} rtl8187_rfkill_poll($p143);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3359} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i139 == 1;
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $p140 := $M.27;
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} rtl8187_rfkill_poll($p140);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3357} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb87:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i74, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i74, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i74, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i84 == 1);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i130 := $M.37;
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 1);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i134 := $M.37;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 2);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb148:
    assume $i135 == 1;
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p136 := $M.27;
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $p137 := $M.28;
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} rtl8187_bss_info_changed($p136, $p137, $p18, $i11);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3355} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb145:
    assume $i131 == 1;
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $p132 := $M.27;
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $p133 := $M.28;
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} rtl8187_bss_info_changed($p132, $p133, $p18, $i11);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3353} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb106:
    assume $i84 == 1;
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i122 := $M.37;
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i126 := $M.37;
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb142:
    assume $i127 == 1;
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p128 := $M.27;
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.30, $p0);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} rtl8187_configure_filter($p128, $i6, $p4, $i129);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3351} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume $i123 == 1;
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p124 := $M.27;
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.30, $p0);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} rtl8187_configure_filter($p124, $i6, $p4, $i125);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3349} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb104:
    assume $i83 == 1;
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i112 := $M.37;
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 1);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i117 := $M.37;
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 2);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb136:
    assume $i118 == 1;
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $p119 := $M.27;
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $p120 := $M.28;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} vslice_dummy_var_92 := rtl8187_get_tsf($p119, $p120);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3347} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i113 == 1;
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $p114 := $M.27;
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p115 := $M.28;
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} vslice_dummy_var_91 := rtl8187_get_tsf($p114, $p115);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3345} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb102:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i74, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i86 == 1);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i104 := $M.37;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i108 := $M.37;
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 2);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb130:
    assume $i109 == 1;
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $p110 := $M.27;
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} vslice_dummy_var_90 := rtl8187_prepare_multicast($p110, $p16);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3343} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i105 == 1;
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p106 := $M.27;
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} vslice_dummy_var_89 := rtl8187_prepare_multicast($p106, $p16);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3341} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb110:
    assume $i86 == 1;
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $i96 := $M.37;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i100 := $M.37;
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 2);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb124:
    assume $i101 == 1;
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p102 := $M.27;
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} vslice_dummy_var_88 := rtl8187_config($p102, $i12);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3339} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb121:
    assume $i97 == 1;
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p98 := $M.27;
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} vslice_dummy_var_87 := rtl8187_config($p98, $i12);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3337} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb108:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb97;

  $bb112:
    assume $i87 == 1;
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i88 := $M.37;
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb114:
    assume $i89 == 1;
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p90 := $M.27;
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} $i91 := rtl8187_start($p90);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $M.41 := $i91;
    call {:si_unique_call 3333} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i91);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $i92 := $M.41;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb116:
    assume $i93 == 1;
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3334} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i94 := $M.33;
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 1);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $M.33 := $i95;
    call {:si_unique_call 3335} {:cexpr "ref_cnt"} boogie_si_record_i32($i95);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i70 := $M.36;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb81:
    assume $i71 == 1;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} ldv_main_exported_2();
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i68 := $M.35;
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb78:
    assume $i69 == 1;
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} ldv_main_exported_3();
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb3:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i51 := $M.34;
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48:
    assume $i52 == 1;
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3308} $i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 3309} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i53);
    call {:si_unique_call 3310} {:cexpr "tmp___12"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} ldv_stop();
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb53:
    assume $i55 == 1;
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i61 := $M.34;
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume $i62 == 1;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} $i63 := rtl8187_driver_init();
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $M.40 := $i63;
    call {:si_unique_call 3315} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i63);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i64 := $M.40;
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i66 := $M.40;
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i67 == 1;
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 3325} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i65 == 1;
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 3316} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3317} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} ldv_initialize_ieee80211_ops_5();
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 3319} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} ldv_initialize_rtl818x_rf_ops_2();
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 3321} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} ldv_initialize_rtl818x_rf_ops_3();
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 3323} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} ldv_initialize_rtl818x_rf_ops_1();
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb51:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb55;

  $bb56:
    assume $i56 == 1;
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i57 := $M.34;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 3);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb58:
    assume $i58 == 1;
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i59 := $M.33;
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb60;

  $bb61:
    assume $i60 == 1;
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} rtl8187_driver_exit();
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 3312} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i49 := $M.32;
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45:
    assume $i50 == 1;
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} ldv_main_exported_1();
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb12:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i28 := $M.31;
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3296} $i30 := __VERIFIER_nondet_int();
    call {:si_unique_call 3297} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i30);
    call {:si_unique_call 3298} {:cexpr "tmp___11"} boogie_si_record_i32($i30);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} ldv_stop();
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb23:
    assume $i32 == 1;
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i42 := $M.31;
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35:
    assume $i43 == 1;
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $i44 := $M.39;
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb37;

  $bb38:
    assume $i45 == 1;
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p46 := $M.29;
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} rtl8187_disconnect($p46);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 3304} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i47 := $M.33;
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i47, 1);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $M.33 := $i48;
    call {:si_unique_call 3305} {:cexpr "ref_cnt"} boogie_si_record_i32($i48);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb21:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb25;

  $bb26:
    assume $i33 == 1;
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i34 := $M.31;
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i35 == 1;
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p36 := $M.29;
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} $i37 := rtl8187_probe($p36, $p2);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $M.38 := $i37;
    call {:si_unique_call 3300} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i37);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i38 := $M.38;
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i39 == 1;
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 3301} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i40 := $M.33;
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $M.33 := $i41;
    call {:si_unique_call 3302} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb44_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3293} $i20 := __VERIFIER_nondet_int();
    call {:si_unique_call 3294} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i20);
    call {:si_unique_call 3295} {:cexpr "tmp___10"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 324774);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 325806);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 326838);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p0 := $M.3;
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3381} ldv_set_init($p0);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 327870);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 328902);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.0, $CurrAddr;



implementation ldv_main_exported_1()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3382} $p0 := ldv_zalloc(56);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3383} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3384} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3385} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} ldv_stop();
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i45 := $M.32;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3408} vslice_dummy_var_101 := ldv_start_1();
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $M.32 := 4;
    call {:si_unique_call 3409} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i40 := $M.32;
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume $i41 == 1;
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} vslice_dummy_var_100 := ldv_bind_1();
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 3406} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $i43 := $M.33;
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $M.33 := $i44;
    call {:si_unique_call 3407} {:cexpr "ref_cnt"} boogie_si_record_i32($i44);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i35 := $M.32;
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb44:
    assume $i36 == 1;
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} vslice_dummy_var_99 := ldv_release_1();
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 3403} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $i38 := $M.33;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $M.33 := $i39;
    call {:si_unique_call 3404} {:cexpr "ref_cnt"} boogie_si_record_i32($i39);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i29 := $M.32;
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 4);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i32 := $M.32;
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb41:
    assume $i33 == 1;
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} vslice_dummy_var_98 := ldv_disconnect_1();
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 3401} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i30 == 1;
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} vslice_dummy_var_97 := ldv_disconnect_1();
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 3399} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i26 := $M.32;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p28 := $M.42;
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3396} rtl8225_rf_stop($p28);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $M.32 := 3;
    call {:si_unique_call 3397} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $i23 := $M.32;
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p25 := $M.42;
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3394} rtl8225z2_b_rf_init($p25);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $M.32 := 3;
    call {:si_unique_call 3395} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $i11 := $M.32;
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $M.32;
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := $M.32;
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $M.32;
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $p22 := $M.42;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3392} rtl8225_rf_set_channel($p22, $p1);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 3393} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p19 := $M.42;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3390} rtl8225_rf_set_channel($p19, $p1);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $M.32 := 3;
    call {:si_unique_call 3391} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $p16 := $M.42;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3388} rtl8225_rf_set_channel($p16, $p1);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 3389} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i12 == 1;
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $p13 := $M.42;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3386} rtl8225_rf_set_channel($p13, $p1);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $M.32 := 4;
    call {:si_unique_call 3387} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const rtl8187_driver_exit: ref;

axiom rtl8187_driver_exit == $sub.ref(0, 329934);

procedure rtl8187_driver_exit();
  free requires assertsPassed;
  modifies $M.31;



implementation rtl8187_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} ldv_usb_deregister_20(rtl8187_driver);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187_driver_init: ref;

axiom rtl8187_driver_init == $sub.ref(0, 330966);

procedure rtl8187_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.39, $M.29, $M.0, $CurrAddr;



implementation rtl8187_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3412} $i0 := ldv_usb_register_driver_19(rtl8187_driver, __this_module, .str.27);
    call {:si_unique_call 3413} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_initialize_rtl818x_rf_ops_2: ref;

axiom ldv_initialize_rtl818x_rf_ops_2 == $sub.ref(0, 331998);

procedure ldv_initialize_rtl818x_rf_ops_2();
  free requires assertsPassed;
  modifies $M.43, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} $p0 := ldv_zalloc(144);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtl818x_rf_ops_3: ref;

axiom ldv_initialize_rtl818x_rf_ops_3 == $sub.ref(0, 333030);

procedure ldv_initialize_rtl818x_rf_ops_3();
  free requires assertsPassed;
  modifies $M.44, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3415} $p0 := ldv_zalloc(144);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtl818x_rf_ops_1: ref;

axiom ldv_initialize_rtl818x_rf_ops_1 == $sub.ref(0, 334062);

procedure ldv_initialize_rtl818x_rf_ops_1();
  free requires assertsPassed;
  modifies $M.42, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} $p0 := ldv_zalloc(144);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $M.42 := $p0;
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 335094);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.35, $M.33, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3417} $p0 := ldv_zalloc(56);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3418} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3419} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3420} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} ldv_stop();
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $i45 := $M.35;
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3443} vslice_dummy_var_106 := ldv_start_3();
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $M.35 := 4;
    call {:si_unique_call 3444} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i40 := $M.35;
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume $i41 == 1;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} vslice_dummy_var_105 := ldv_bind_3();
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 3441} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i43 := $M.33;
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $M.33 := $i44;
    call {:si_unique_call 3442} {:cexpr "ref_cnt"} boogie_si_record_i32($i44);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i35 := $M.35;
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb44:
    assume $i36 == 1;
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3437} vslice_dummy_var_104 := ldv_release_3();
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 3438} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $i38 := $M.33;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $M.33 := $i39;
    call {:si_unique_call 3439} {:cexpr "ref_cnt"} boogie_si_record_i32($i39);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $i29 := $M.35;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 4);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i32 := $M.35;
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb41:
    assume $i33 == 1;
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3435} vslice_dummy_var_103 := ldv_disconnect_3();
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 3436} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i30 == 1;
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} vslice_dummy_var_102 := ldv_disconnect_3();
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 3434} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i26 := $M.35;
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $p28 := $M.44;
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3431} rtl8225_rf_stop($p28);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 3432} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $i23 := $M.35;
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $p25 := $M.44;
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} rtl8225_rf_init($p25);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 3430} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $i11 := $M.35;
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $M.35;
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := $M.35;
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $M.35;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $p22 := $M.44;
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} rtl8225_rf_set_channel($p22, $p1);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 3428} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $p19 := $M.44;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} rtl8225_rf_set_channel($p19, $p1);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 3426} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $p16 := $M.44;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} rtl8225_rf_set_channel($p16, $p1);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 3424} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i12 == 1;
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $p13 := $M.44;
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} rtl8225_rf_set_channel($p13, $p1);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $M.35 := 4;
    call {:si_unique_call 3422} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 336126);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.36, $M.33, $M.0, $CurrAddr;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3446} $p0 := ldv_zalloc(56);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3447} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3448} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3449} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3474} ldv_stop();
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i45 := $M.36;
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3472} vslice_dummy_var_111 := ldv_start_2();
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $M.36 := 4;
    call {:si_unique_call 3473} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i40 := $M.36;
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume $i41 == 1;
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3469} vslice_dummy_var_110 := ldv_bind_2();
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 3470} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i43 := $M.33;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $M.33 := $i44;
    call {:si_unique_call 3471} {:cexpr "ref_cnt"} boogie_si_record_i32($i44);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $i35 := $M.36;
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb44:
    assume $i36 == 1;
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3466} vslice_dummy_var_109 := ldv_release_2();
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 3467} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $i38 := $M.33;
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $M.33 := $i39;
    call {:si_unique_call 3468} {:cexpr "ref_cnt"} boogie_si_record_i32($i39);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i29 := $M.36;
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 4);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i32 := $M.36;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb41:
    assume $i33 == 1;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} vslice_dummy_var_108 := ldv_disconnect_2();
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 3465} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i30 == 1;
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} vslice_dummy_var_107 := ldv_disconnect_2();
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 3463} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $i26 := $M.36;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p28 := $M.43;
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} rtl8225_rf_stop($p28);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $M.36 := 3;
    call {:si_unique_call 3461} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i23 := $M.36;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $p25 := $M.43;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} rtl8225z2_rf_init($p25);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $M.36 := 3;
    call {:si_unique_call 3459} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $i11 := $M.36;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $M.36;
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := $M.36;
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $M.36;
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p22 := $M.43;
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} rtl8225_rf_set_channel($p22, $p1);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 3457} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $p19 := $M.43;
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3454} rtl8225_rf_set_channel($p19, $p1);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $M.36 := 3;
    call {:si_unique_call 3455} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $p16 := $M.43;
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3452} rtl8225_rf_set_channel($p16, $p1);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 3453} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i12 == 1;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p13 := $M.43;
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3450} rtl8225_rf_set_channel($p13, $p1);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $M.36 := 4;
    call {:si_unique_call 3451} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 337158);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $p0 := $M.3;
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 3476} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3477} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 338190);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_disconnect_2: ref;

axiom ldv_disconnect_2 == $sub.ref(0, 339222);

procedure ldv_disconnect_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3478} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_2: ref;

axiom ldv_release_2 == $sub.ref(0, 340254);

procedure ldv_release_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3480} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_2: ref;

axiom ldv_bind_2 == $sub.ref(0, 341286);

procedure ldv_bind_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3482} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3483} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_2: ref;

axiom ldv_start_2 == $sub.ref(0, 342318);

procedure ldv_start_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3484} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3485} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_disconnect_3: ref;

axiom ldv_disconnect_3 == $sub.ref(0, 343350);

procedure ldv_disconnect_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3486} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3487} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 344382);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3488} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3489} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_3: ref;

axiom ldv_bind_3 == $sub.ref(0, 345414);

procedure ldv_bind_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3490} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3491} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_3: ref;

axiom ldv_start_3 == $sub.ref(0, 346446);

procedure ldv_start_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3492} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3493} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_usb_register_driver_19: ref;

axiom ldv_usb_register_driver_19 == $sub.ref(0, 347478);

procedure ldv_usb_register_driver_19($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.39, $M.29, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_19($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 3495} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 3496} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 3497} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3498} ldv_usb_driver_4();
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 348510);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3499} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3500} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_20: ref;

axiom ldv_usb_deregister_20 == $sub.ref(0, 349542);

procedure ldv_usb_deregister_20($p0: ref);
  free requires assertsPassed;
  modifies $M.31;



implementation ldv_usb_deregister_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3501} usb_deregister($p0);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 3502} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 350574);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    return;
}



const ldv_disconnect_1: ref;

axiom ldv_disconnect_1 == $sub.ref(0, 351606);

procedure ldv_disconnect_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3503} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_1: ref;

axiom ldv_release_1 == $sub.ref(0, 352638);

procedure ldv_release_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3505} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3506} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_1: ref;

axiom ldv_bind_1 == $sub.ref(0, 353670);

procedure ldv_bind_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3507} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3508} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_1: ref;

axiom ldv_start_1 == $sub.ref(0, 354702);

procedure ldv_start_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3509} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3510} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 355734);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    call {:si_unique_call 3511} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 356766);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3512} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 1} true;
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 357798);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 358830);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 359862);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 360894);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 361926);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 362958);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 363990);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 365022);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 366054);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 367086);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 368118);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3513} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 3514} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 3515} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3516} __VERIFIER_assume($i6);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 369150);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 370182);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 371214);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3517} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3518} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3519} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3520} __VERIFIER_assume($i4);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 372246);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 373278);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 374310);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 375342);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3521} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3522} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3523} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3524} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3525} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3526} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3527} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3528} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3529} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3530} __VERIFIER_assume($i7);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3531} __VERIFIER_assume($i11);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 376374);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 377406);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 378438);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 379470);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 380502);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 381534);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3532} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3533} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3534} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3535} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3536} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 3537} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3538} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3539} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 3540} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3541} __VERIFIER_assume($i7);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3542} __VERIFIER_assume($i11);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 382566);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 383598);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 384630);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 385662);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 386694);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 387726);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 388758);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 389790);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 390822);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3543} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3544} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3545} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3546} __VERIFIER_assume($i10);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 391854);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3547} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 3548} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 3549} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 392886);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3550} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 3551} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3552} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 393918);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3553} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 3554} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3555} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 394950);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3556} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 3557} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 395982);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 397014);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3558} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3559} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 398046);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 399078);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 400110);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3560} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 3561} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3562} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3564} $p6 := malloc($i5);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 3565} cmdloc_dummy_var_48 := $memset.i8(cmdloc_dummy_var_47, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 401142);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 402174);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.44, $M.42, $M.43, $M.4, $M.3, $M.5, $M.24, $M.19, $M.18, $M.59, $M.60, $M.61, $M.62, $M.63, $M.20, $M.26, $M.25, $M.23, $M.22, $M.21, $M.0, $M.2, $M.64, $M.65, $M.66, $M.146, $M.147, $M.148;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 3566} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.27 := $0.ref;
    $M.28 := $0.ref;
    $M.29 := $0.ref;
    $M.31 := 0;
    call {:si_unique_call 3567} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 3568} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 3569} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 3570} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 3571} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 3572} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 3573} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 3574} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 3575} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 3576} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 3577} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.44 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.4 := 0;
    call {:si_unique_call 3578} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.3 := $0.ref;
    $M.5 := $store.ref($M.5, set_impl, $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.24 := $store.i8($M.24, rtl8225z2_gain_bg, 35);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(1, 1)), 21);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(2, 1)), $sub.i8(0, 91));
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(3, 1)), 35);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(4, 1)), 21);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(5, 1)), $sub.i8(0, 75));
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(6, 1)), 35);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(7, 1)), 21);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(8, 1)), $sub.i8(0, 59));
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(9, 1)), 51);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(10, 1)), 21);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(11, 1)), $sub.i8(0, 59));
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(12, 1)), 67);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(13, 1)), 21);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(14, 1)), $sub.i8(0, 59));
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(15, 1)), 83);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(16, 1)), 21);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(17, 1)), $sub.i8(0, 59));
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(19, 1)), 21);
    $M.24 := $store.i8($M.24, $add.ref($add.ref(rtl8225z2_gain_bg, $mul.ref(0, 21)), $mul.ref(20, 1)), $sub.i8(0, 59));
    $M.19 := $store.i8($M.19, rtl8225_threshold, $sub.i8(0, 115));
    $M.19 := $store.i8($M.19, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(1, 1)), $sub.i8(0, 115));
    $M.19 := $store.i8($M.19, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(2, 1)), $sub.i8(0, 115));
    $M.19 := $store.i8($M.19, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(3, 1)), $sub.i8(0, 115));
    $M.19 := $store.i8($M.19, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(4, 1)), $sub.i8(0, 99));
    $M.19 := $store.i8($M.19, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(5, 1)), $sub.i8(0, 83));
    $M.19 := $store.i8($M.19, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(6, 1)), $sub.i8(0, 67));
    $M.18 := $store.i8($M.18, rtl8225_gain, 35);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(1, 1)), $sub.i8(0, 120));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(2, 1)), 124);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(3, 1)), $sub.i8(0, 91));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(4, 1)), 35);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(5, 1)), $sub.i8(0, 120));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(6, 1)), 124);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(7, 1)), $sub.i8(0, 75));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(8, 1)), 35);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(9, 1)), $sub.i8(0, 120));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(10, 1)), 124);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(11, 1)), $sub.i8(0, 59));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(12, 1)), 51);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(13, 1)), $sub.i8(0, 128));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(14, 1)), 121);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(15, 1)), $sub.i8(0, 59));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(16, 1)), 67);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(17, 1)), 120);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(18, 1)), 118);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(19, 1)), $sub.i8(0, 59));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(20, 1)), 83);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(21, 1)), 96);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(22, 1)), 115);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(23, 1)), $sub.i8(0, 59));
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(24, 1)), 99);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(25, 1)), 88);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(26, 1)), 112);
    $M.18 := $store.i8($M.18, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(27, 1)), $sub.i8(0, 59));
    $M.59 := $store.i8($M.59, rtl8225_agc, $sub.i8(0, 98));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(1, 1)), $sub.i8(0, 98));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(2, 1)), $sub.i8(0, 98));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(3, 1)), $sub.i8(0, 98));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(4, 1)), $sub.i8(0, 98));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(5, 1)), $sub.i8(0, 98));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(6, 1)), $sub.i8(0, 98));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(7, 1)), $sub.i8(0, 98));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(8, 1)), $sub.i8(0, 99));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(9, 1)), $sub.i8(0, 100));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(10, 1)), $sub.i8(0, 101));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(11, 1)), $sub.i8(0, 102));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(12, 1)), $sub.i8(0, 103));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(13, 1)), $sub.i8(0, 104));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(14, 1)), $sub.i8(0, 105));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(15, 1)), $sub.i8(0, 106));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(16, 1)), $sub.i8(0, 107));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(17, 1)), $sub.i8(0, 108));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(18, 1)), $sub.i8(0, 109));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(19, 1)), $sub.i8(0, 110));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(20, 1)), $sub.i8(0, 111));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(21, 1)), $sub.i8(0, 112));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(22, 1)), $sub.i8(0, 113));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(23, 1)), $sub.i8(0, 114));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(24, 1)), $sub.i8(0, 115));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(25, 1)), $sub.i8(0, 116));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(26, 1)), $sub.i8(0, 117));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(27, 1)), $sub.i8(0, 118));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(28, 1)), $sub.i8(0, 119));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(29, 1)), $sub.i8(0, 120));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(30, 1)), $sub.i8(0, 121));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(31, 1)), $sub.i8(0, 122));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(32, 1)), $sub.i8(0, 123));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(33, 1)), $sub.i8(0, 124));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(34, 1)), $sub.i8(0, 125));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(35, 1)), $sub.i8(0, 126));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(36, 1)), $sub.i8(0, 127));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(37, 1)), $sub.i8(0, 128));
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(38, 1)), 63);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(39, 1)), 62);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(40, 1)), 61);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(41, 1)), 60);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(42, 1)), 59);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(43, 1)), 58);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(44, 1)), 57);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(45, 1)), 56);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(46, 1)), 55);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(47, 1)), 54);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(48, 1)), 53);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(49, 1)), 52);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(50, 1)), 51);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(51, 1)), 50);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(52, 1)), 49);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(53, 1)), 48);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(54, 1)), 47);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(55, 1)), 46);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(56, 1)), 45);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(57, 1)), 44);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(58, 1)), 43);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(59, 1)), 42);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(60, 1)), 41);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(61, 1)), 40);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(62, 1)), 39);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(63, 1)), 38);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(64, 1)), 37);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(65, 1)), 36);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(66, 1)), 35);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(67, 1)), 34);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(68, 1)), 33);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(69, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(70, 1)), 31);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(71, 1)), 30);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(72, 1)), 29);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(73, 1)), 28);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(74, 1)), 27);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(75, 1)), 26);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(76, 1)), 25);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(77, 1)), 24);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(78, 1)), 23);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(79, 1)), 22);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(80, 1)), 21);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(81, 1)), 20);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(82, 1)), 19);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(83, 1)), 18);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(84, 1)), 17);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(85, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(86, 1)), 15);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(87, 1)), 14);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(88, 1)), 13);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(89, 1)), 12);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(90, 1)), 11);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(91, 1)), 10);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(92, 1)), 9);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(93, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(94, 1)), 7);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(95, 1)), 6);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(96, 1)), 5);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(97, 1)), 4);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(98, 1)), 3);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(99, 1)), 2);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(100, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(101, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(102, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(103, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(104, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(105, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(106, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(107, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(108, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(109, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(110, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(111, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(112, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(113, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(114, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(115, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(116, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(117, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(118, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(119, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(120, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(121, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(122, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(123, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(124, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(125, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(126, 1)), 1);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(127, 1)), 1);
    $M.60 := $store.i16($M.60, rtl8225bcd_rxgain, 1024);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(1, 2)), 1025);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(2, 2)), 1026);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(3, 2)), 1027);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(4, 2)), 1028);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(5, 2)), 1029);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(6, 2)), 1032);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(7, 2)), 1033);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(8, 2)), 1034);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(9, 2)), 1035);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(10, 2)), 1282);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(11, 2)), 1283);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(12, 2)), 1284);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(13, 2)), 1285);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(14, 2)), 1344);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(15, 2)), 1345);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(16, 2)), 1346);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(17, 2)), 1347);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(18, 2)), 1348);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(19, 2)), 1349);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(20, 2)), 1408);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(21, 2)), 1409);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(22, 2)), 1410);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(23, 2)), 1411);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(24, 2)), 1412);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(25, 2)), 1413);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(26, 2)), 1416);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(27, 2)), 1417);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(28, 2)), 1418);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(29, 2)), 1419);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(30, 2)), 1603);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(31, 2)), 1604);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(32, 2)), 1605);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(33, 2)), 1664);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(34, 2)), 1665);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(35, 2)), 1666);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(36, 2)), 1667);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(37, 2)), 1668);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(38, 2)), 1669);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(39, 2)), 1672);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(40, 2)), 1673);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(41, 2)), 1674);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(42, 2)), 1675);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(43, 2)), 1676);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(44, 2)), 1858);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(45, 2)), 1859);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(46, 2)), 1860);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(47, 2)), 1861);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(48, 2)), 1920);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(49, 2)), 1921);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(50, 2)), 1922);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(51, 2)), 1923);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(52, 2)), 1924);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(53, 2)), 1925);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(54, 2)), 1928);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(55, 2)), 1929);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(56, 2)), 1930);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(57, 2)), 1931);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(58, 2)), 1932);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(59, 2)), 1933);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(60, 2)), 1936);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(61, 2)), 1937);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(62, 2)), 1938);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(63, 2)), 1939);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(64, 2)), 1940);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(65, 2)), 1941);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(66, 2)), 1944);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(67, 2)), 1945);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(68, 2)), 1946);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(69, 2)), 1947);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(70, 2)), 1948);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(71, 2)), 1949);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(72, 2)), 1952);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(73, 2)), 1953);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(74, 2)), 1954);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(75, 2)), 1955);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(76, 2)), 1956);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(77, 2)), 1957);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(78, 2)), 1960);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(79, 2)), 1961);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(80, 2)), 1962);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(81, 2)), 1963);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(82, 2)), 1964);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(83, 2)), 1965);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(84, 2)), 1968);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(85, 2)), 1969);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(86, 2)), 1970);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(87, 2)), 1971);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(88, 2)), 1972);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(89, 2)), 1973);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(90, 2)), 1976);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(91, 2)), 1977);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(92, 2)), 1978);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(93, 2)), 1979);
    $M.60 := $store.i16($M.60, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(94, 2)), 1979);
    $M.61 := $store.i8($M.61, rtl8225z2_ofdm, 16);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(1, 1)), 13);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(2, 1)), 1);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(3, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(4, 1)), 20);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(5, 1)), $sub.i8(0, 5));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(6, 1)), $sub.i8(0, 5));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(7, 1)), 96);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(8, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(9, 1)), 96);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(11, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(13, 1)), 92);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(14, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(16, 1)), 64);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(17, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(18, 1)), 64);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(19, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(20, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(21, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(22, 1)), $sub.i8(0, 88));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(23, 1)), 38);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(24, 1)), 50);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(25, 1)), 51);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(26, 1)), 7);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(27, 1)), $sub.i8(0, 91));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(28, 1)), 111);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(29, 1)), 85);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(30, 1)), $sub.i8(0, 56));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(31, 1)), $sub.i8(0, 77));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(32, 1)), 10);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(33, 1)), $sub.i8(0, 31));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(34, 1)), 44);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(35, 1)), $sub.i8(0, 118));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(36, 1)), $sub.i8(0, 122));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(37, 1)), $sub.i8(0, 125));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(38, 1)), 52);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(39, 1)), 15);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(40, 1)), 79);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(41, 1)), 36);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(42, 1)), 111);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(43, 1)), $sub.i8(0, 62));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(44, 1)), 107);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(45, 1)), 64);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(46, 1)), $sub.i8(0, 128));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(47, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(48, 1)), $sub.i8(0, 64));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(49, 1)), $sub.i8(0, 63));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(50, 1)), 88);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(51, 1)), $sub.i8(0, 15));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(52, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(53, 1)), $sub.i8(0, 28));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(54, 1)), $sub.i8(0, 112));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(55, 1)), 62);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(56, 1)), 109);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(57, 1)), 60);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(58, 1)), $sub.i8(0, 5));
    $M.61 := $store.i8($M.61, $add.ref($add.ref(rtl8225z2_ofdm, $mul.ref(0, 60)), $mul.ref(59, 1)), 7);
    $M.62 := $store.i8($M.62, rtl8225z2_agc, 94);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(1, 1)), 94);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(2, 1)), 94);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(3, 1)), 94);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(4, 1)), 93);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(5, 1)), 91);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(6, 1)), 89);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(7, 1)), 87);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(8, 1)), 85);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(9, 1)), 83);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(10, 1)), 81);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(11, 1)), 79);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(12, 1)), 77);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(13, 1)), 75);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(14, 1)), 73);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(15, 1)), 71);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(16, 1)), 69);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(17, 1)), 67);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(18, 1)), 65);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(19, 1)), 63);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(20, 1)), 61);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(21, 1)), 59);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(22, 1)), 57);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(23, 1)), 55);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(24, 1)), 53);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(25, 1)), 51);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(26, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(27, 1)), 47);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(28, 1)), 45);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(29, 1)), 43);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(30, 1)), 41);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(31, 1)), 39);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(32, 1)), 37);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(33, 1)), 35);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(34, 1)), 33);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(35, 1)), 31);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(36, 1)), 29);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(37, 1)), 27);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(38, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(39, 1)), 23);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(40, 1)), 21);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(41, 1)), 19);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(42, 1)), 17);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(43, 1)), 15);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(44, 1)), 13);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(45, 1)), 11);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(46, 1)), 9);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(47, 1)), 7);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(48, 1)), 5);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(49, 1)), 3);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(50, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(51, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(52, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(53, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(54, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(55, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(56, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(57, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(58, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(59, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(60, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(61, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(62, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(63, 1)), 1);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(64, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(65, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(66, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(67, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(68, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(69, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(70, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(71, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(72, 1)), 25);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(73, 1)), 32);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(74, 1)), 33);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(75, 1)), 34);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(76, 1)), 35);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(77, 1)), 36);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(78, 1)), 37);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(79, 1)), 38);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(80, 1)), 38);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(81, 1)), 39);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(82, 1)), 39);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(83, 1)), 40);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(84, 1)), 40);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(85, 1)), 41);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(86, 1)), 42);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(87, 1)), 42);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(88, 1)), 42);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(89, 1)), 43);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(90, 1)), 43);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(91, 1)), 43);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(92, 1)), 44);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(93, 1)), 44);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(94, 1)), 44);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(95, 1)), 45);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(96, 1)), 45);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(97, 1)), 45);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(98, 1)), 45);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(99, 1)), 46);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(100, 1)), 46);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(101, 1)), 46);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(102, 1)), 46);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(103, 1)), 47);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(104, 1)), 47);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(105, 1)), 47);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(106, 1)), 48);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(107, 1)), 48);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(108, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(109, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(110, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(111, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(112, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(113, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(114, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(115, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(116, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(117, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(118, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(119, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(120, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(121, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(122, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(123, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(124, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(125, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(126, 1)), 49);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(rtl8225z2_agc, $mul.ref(0, 128)), $mul.ref(127, 1)), 49);
    $M.63 := $store.i16($M.63, rtl8225z2_rxgain, 1024);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(1, 2)), 1025);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(2, 2)), 1026);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(3, 2)), 1027);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(4, 2)), 1028);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(5, 2)), 1029);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(6, 2)), 1032);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(7, 2)), 1033);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(8, 2)), 1034);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(9, 2)), 1035);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(10, 2)), 1282);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(11, 2)), 1283);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(12, 2)), 1284);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(13, 2)), 1285);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(14, 2)), 1344);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(15, 2)), 1345);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(16, 2)), 1346);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(17, 2)), 1347);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(18, 2)), 1348);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(19, 2)), 1349);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(20, 2)), 1408);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(21, 2)), 1409);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(22, 2)), 1410);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(23, 2)), 1411);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(24, 2)), 1412);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(25, 2)), 1413);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(26, 2)), 1416);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(27, 2)), 1417);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(28, 2)), 1418);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(29, 2)), 1419);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(30, 2)), 1603);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(31, 2)), 1604);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(32, 2)), 1605);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(33, 2)), 1664);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(34, 2)), 1665);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(35, 2)), 1666);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(36, 2)), 1667);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(37, 2)), 1668);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(38, 2)), 1669);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(39, 2)), 1672);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(40, 2)), 1673);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(41, 2)), 1674);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(42, 2)), 1675);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(43, 2)), 1676);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(44, 2)), 1858);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(45, 2)), 1859);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(46, 2)), 1860);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(47, 2)), 1861);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(48, 2)), 1920);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(49, 2)), 1921);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(50, 2)), 1922);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(51, 2)), 1923);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(52, 2)), 1924);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(53, 2)), 1925);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(54, 2)), 1928);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(55, 2)), 1929);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(56, 2)), 1930);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(57, 2)), 1931);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(58, 2)), 1932);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(59, 2)), 1933);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(60, 2)), 1936);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(61, 2)), 1937);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(62, 2)), 1938);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(63, 2)), 1939);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(64, 2)), 1940);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(65, 2)), 1941);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(66, 2)), 1944);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(67, 2)), 1945);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(68, 2)), 1946);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(69, 2)), 1947);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(70, 2)), 1948);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(71, 2)), 1949);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(72, 2)), 1952);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(73, 2)), 1953);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(74, 2)), 1954);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(75, 2)), 1955);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(76, 2)), 1956);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(77, 2)), 1957);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(78, 2)), 1960);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(79, 2)), 1961);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(80, 2)), 938);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(81, 2)), 939);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(82, 2)), 940);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(83, 2)), 941);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(84, 2)), 944);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(85, 2)), 945);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(86, 2)), 946);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(87, 2)), 947);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(88, 2)), 948);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(89, 2)), 949);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(90, 2)), 952);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(91, 2)), 953);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(92, 2)), 954);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(93, 2)), 955);
    $M.63 := $store.i16($M.63, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(94, 2)), 955);
    $M.20 := $store.i32($M.20, rtl8225_chan, 2140);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(1, 4)), 2268);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(2, 4)), 2396);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(3, 4)), 2524);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(4, 4)), 2652);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(5, 4)), 2780);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(6, 4)), 2908);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(7, 4)), 3036);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(8, 4)), 3164);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(9, 4)), 3292);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(10, 4)), 3420);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(11, 4)), 3548);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(12, 4)), 3676);
    $M.20 := $store.i32($M.20, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(13, 4)), 3954);
    $M.26 := $store.i8($M.26, rtl8225z2_tx_gain_cck_ofdm, 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(1, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(2, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(3, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(4, 1)), 4);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(5, 1)), 5);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(6, 1)), 6);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(7, 1)), 7);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(8, 1)), 8);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(9, 1)), 9);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(10, 1)), 10);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(11, 1)), 11);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(12, 1)), 12);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(13, 1)), 13);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(14, 1)), 14);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(15, 1)), 15);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(16, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(17, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(18, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(19, 1)), 19);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(20, 1)), 20);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(21, 1)), 21);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(22, 1)), 22);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(23, 1)), 23);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(24, 1)), 24);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(25, 1)), 25);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(26, 1)), 26);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(27, 1)), 27);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(28, 1)), 28);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(29, 1)), 29);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(30, 1)), 30);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(31, 1)), 31);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(32, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(33, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(34, 1)), 34);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(rtl8225z2_tx_gain_cck_ofdm, $mul.ref(0, 36)), $mul.ref(35, 1)), 35);
    $M.25 := $store.i8($M.25, rtl8225z2_tx_power_cck, 54);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(1, 1)), 53);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(2, 1)), 46);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(3, 1)), 37);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(4, 1)), 28);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(5, 1)), 18);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(6, 1)), 9);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(7, 1)), 4);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(8, 1)), 48);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(9, 1)), 47);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(10, 1)), 41);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(11, 1)), 33);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(12, 1)), 25);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(13, 1)), 16);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(14, 1)), 8);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(15, 1)), 3);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(16, 1)), 43);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(17, 1)), 42);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(18, 1)), 37);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(19, 1)), 30);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(20, 1)), 22);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(21, 1)), 14);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(22, 1)), 7);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(23, 1)), 3);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(24, 1)), 38);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(25, 1)), 37);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(26, 1)), 33);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(27, 1)), 27);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(28, 1)), 20);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(29, 1)), 13);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(30, 1)), 6);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 32)), $mul.ref(31, 1)), 3);
    $M.25 := $store.i8($M.25, rtl8225z2_tx_power_cck_ch14, 54);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(1, 1)), 53);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(2, 1)), 46);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(3, 1)), 27);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(5, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(7, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(8, 1)), 48);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(9, 1)), 47);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(10, 1)), 41);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(11, 1)), 21);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(16, 1)), 48);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(17, 1)), 47);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(18, 1)), 41);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(19, 1)), 21);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(21, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(22, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(23, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(24, 1)), 48);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(25, 1)), 47);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(26, 1)), 41);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(27, 1)), 21);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(29, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(30, 1)), 0);
    $M.25 := $store.i8($M.25, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.23 := $store.i8($M.23, rtl8225_tx_power_ofdm, $sub.i8(0, 128));
    $M.23 := $store.i8($M.23, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(1, 1)), $sub.i8(0, 112));
    $M.23 := $store.i8($M.23, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(2, 1)), $sub.i8(0, 94));
    $M.23 := $store.i8($M.23, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(3, 1)), $sub.i8(0, 75));
    $M.23 := $store.i8($M.23, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(4, 1)), $sub.i8(0, 53));
    $M.23 := $store.i8($M.23, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(5, 1)), $sub.i8(0, 28));
    $M.22 := $store.i8($M.22, rtl8225_tx_power_cck, 24);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(1, 1)), 23);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(2, 1)), 21);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(3, 1)), 17);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(4, 1)), 12);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(5, 1)), 8);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(6, 1)), 4);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(7, 1)), 2);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(8, 1)), 27);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(9, 1)), 26);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(10, 1)), 23);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(11, 1)), 19);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(12, 1)), 14);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(13, 1)), 9);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(14, 1)), 4);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(15, 1)), 2);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(16, 1)), 31);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(17, 1)), 30);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(18, 1)), 26);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(19, 1)), 21);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(20, 1)), 16);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(21, 1)), 10);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(22, 1)), 5);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(23, 1)), 2);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(24, 1)), 34);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(25, 1)), 33);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(26, 1)), 29);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(27, 1)), 24);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(28, 1)), 17);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(29, 1)), 11);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(30, 1)), 6);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(31, 1)), 2);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(32, 1)), 38);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(33, 1)), 37);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(34, 1)), 33);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(35, 1)), 27);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(36, 1)), 20);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(37, 1)), 13);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(38, 1)), 6);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(39, 1)), 3);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(40, 1)), 43);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(41, 1)), 42);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(42, 1)), 37);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(43, 1)), 30);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(44, 1)), 22);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(45, 1)), 14);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(46, 1)), 7);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(47, 1)), 3);
    $M.22 := $store.i8($M.22, rtl8225_tx_power_cck_ch14, 24);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(1, 1)), 23);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(2, 1)), 21);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(3, 1)), 12);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(4, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(8, 1)), 27);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(9, 1)), 26);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(10, 1)), 23);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(11, 1)), 14);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(12, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(13, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(14, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(15, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(16, 1)), 31);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(17, 1)), 30);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(18, 1)), 26);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(19, 1)), 15);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(20, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(21, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(22, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(23, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(24, 1)), 34);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(25, 1)), 33);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(26, 1)), 29);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(27, 1)), 17);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(28, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(29, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(30, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(31, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(32, 1)), 38);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(33, 1)), 37);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(34, 1)), 33);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(35, 1)), 19);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(36, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(37, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(38, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(39, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(40, 1)), 43);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(41, 1)), 42);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(42, 1)), 37);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(43, 1)), 21);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(44, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(45, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(46, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(47, 1)), 0);
    $M.21 := $store.i8($M.21, rtl8225_tx_gain_cck_ofdm, 2);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(1, 1)), 6);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(2, 1)), 14);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(3, 1)), 30);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(4, 1)), 62);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(5, 1)), 126);
    $M.0 := $store.ref($M.0, rtl8225z2_b_ops, .str.41);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_b_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), rtl8225z2_b_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_b_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), rtl8225_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_b_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), rtl8225_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_b_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rtl8225z2_ops, .str.41);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), rtl8225z2_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), rtl8225_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), rtl8225_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rtl8225_ops, .str.40);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), rtl8225_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), rtl8225_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), rtl8225_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.2 := $store.ref($M.2, rtl8187b_ac_addr, $i2p.i64.ref(65520));
    $M.2 := $store.ref($M.2, $add.ref($add.ref(rtl8187b_ac_addr, $mul.ref(0, 32)), $mul.ref(1, 8)), $i2p.i64.ref(65524));
    $M.2 := $store.ref($M.2, $add.ref($add.ref(rtl8187b_ac_addr, $mul.ref(0, 32)), $mul.ref(2, 8)), $i2p.i64.ref(65532));
    $M.2 := $store.ref($M.2, $add.ref($add.ref(rtl8187b_ac_addr, $mul.ref(0, 32)), $mul.ref(3, 8)), $i2p.i64.ref(65528));
    $M.64 := $store.i8($M.64, rtl8187b_reg_table, $sub.i8(0, 16));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(0, 3)), $mul.ref(1, 1)), 50);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(1, 3)), $mul.ref(0, 1)), $sub.i8(0, 15));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(1, 3)), $mul.ref(1, 1)), 50);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(1, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 14));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(2, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(3, 3)), $mul.ref(0, 1)), $sub.i8(0, 13));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(3, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(3, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(4, 3)), $mul.ref(0, 1)), $sub.i8(0, 12));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(4, 3)), $mul.ref(1, 1)), 50);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(4, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(5, 3)), $mul.ref(0, 1)), $sub.i8(0, 11));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(5, 3)), $mul.ref(1, 1)), 67);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(5, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(6, 3)), $mul.ref(0, 1)), $sub.i8(0, 10));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(6, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(6, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(7, 3)), $mul.ref(0, 1)), $sub.i8(0, 9));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(7, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(7, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(8, 3)), $mul.ref(0, 1)), $sub.i8(0, 8));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(8, 3)), $mul.ref(1, 1)), 70);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(8, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(9, 3)), $mul.ref(0, 1)), $sub.i8(0, 7));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(9, 3)), $mul.ref(1, 1)), $sub.i8(0, 92));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(9, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(10, 3)), $mul.ref(0, 1)), $sub.i8(0, 6));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(10, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(10, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(11, 3)), $mul.ref(0, 1)), $sub.i8(0, 5));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(11, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(11, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(12, 3)), $mul.ref(0, 1)), $sub.i8(0, 4));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(12, 3)), $mul.ref(1, 1)), $sub.i8(0, 106));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(12, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(13, 3)), $mul.ref(0, 1)), $sub.i8(0, 3));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(13, 3)), $mul.ref(1, 1)), $sub.i8(0, 92));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(13, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(14, 3)), $mul.ref(0, 1)), $sub.i8(0, 2));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(14, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(14, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(15, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(15, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(15, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(16, 3)), $mul.ref(0, 1)), 88);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(16, 3)), $mul.ref(1, 1)), 75);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(16, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(17, 3)), $mul.ref(0, 1)), 89);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(17, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(17, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(18, 3)), $mul.ref(0, 1)), 90);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(18, 3)), $mul.ref(1, 1)), 75);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(18, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(19, 3)), $mul.ref(0, 1)), 91);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(19, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(19, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(20, 3)), $mul.ref(0, 1)), 96);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(20, 3)), $mul.ref(1, 1)), 75);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(20, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(21, 3)), $mul.ref(0, 1)), 97);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(21, 3)), $mul.ref(1, 1)), 9);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(21, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(22, 3)), $mul.ref(0, 1)), 98);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(22, 3)), $mul.ref(1, 1)), 75);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(22, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(23, 3)), $mul.ref(0, 1)), 99);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(23, 3)), $mul.ref(1, 1)), 9);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(23, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(24, 3)), $mul.ref(0, 1)), $sub.i8(0, 50));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(24, 3)), $mul.ref(1, 1)), 15);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(24, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(25, 3)), $mul.ref(0, 1)), $sub.i8(0, 49));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(25, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(25, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(26, 3)), $mul.ref(0, 1)), $sub.i8(0, 16));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(26, 3)), $mul.ref(1, 1)), 78);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(26, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(27, 3)), $mul.ref(0, 1)), $sub.i8(0, 15));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(27, 3)), $mul.ref(1, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(27, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(28, 3)), $mul.ref(0, 1)), $sub.i8(0, 14));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(28, 3)), $mul.ref(1, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(28, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(29, 3)), $mul.ref(0, 1)), $sub.i8(0, 13));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(29, 3)), $mul.ref(1, 1)), 3);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(29, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(30, 3)), $mul.ref(0, 1)), $sub.i8(0, 12));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(30, 3)), $mul.ref(1, 1)), 4);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(30, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(31, 3)), $mul.ref(0, 1)), $sub.i8(0, 11));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(31, 3)), $mul.ref(1, 1)), 5);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(31, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(32, 3)), $mul.ref(0, 1)), $sub.i8(0, 10));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(32, 3)), $mul.ref(1, 1)), 6);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(32, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(33, 3)), $mul.ref(0, 1)), $sub.i8(0, 9));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(33, 3)), $mul.ref(1, 1)), 7);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(33, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(34, 3)), $mul.ref(0, 1)), $sub.i8(0, 8));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(34, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(34, 3)), $mul.ref(2, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(35, 3)), $mul.ref(0, 1)), 78);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(35, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(35, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(36, 3)), $mul.ref(0, 1)), 12);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(36, 3)), $mul.ref(1, 1)), 4);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(36, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(37, 3)), $mul.ref(0, 1)), 33);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(37, 3)), $mul.ref(1, 1)), 97);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(37, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(38, 3)), $mul.ref(0, 1)), 34);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(38, 3)), $mul.ref(1, 1)), 104);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(38, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(39, 3)), $mul.ref(0, 1)), 35);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(39, 3)), $mul.ref(1, 1)), 111);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(39, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(40, 3)), $mul.ref(0, 1)), 36);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(40, 3)), $mul.ref(1, 1)), 118);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(40, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(41, 3)), $mul.ref(0, 1)), 37);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(41, 3)), $mul.ref(1, 1)), 125);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(41, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(42, 3)), $mul.ref(0, 1)), 38);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(42, 3)), $mul.ref(1, 1)), $sub.i8(0, 124));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(42, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(43, 3)), $mul.ref(0, 1)), 39);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(43, 3)), $mul.ref(1, 1)), $sub.i8(0, 115));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(43, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(44, 3)), $mul.ref(0, 1)), 77);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(44, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(44, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(45, 3)), $mul.ref(0, 1)), 80);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(45, 3)), $mul.ref(1, 1)), 5);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(45, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(46, 3)), $mul.ref(0, 1)), 81);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(46, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(46, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(47, 3)), $mul.ref(0, 1)), 82);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(47, 3)), $mul.ref(1, 1)), 4);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(47, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(48, 3)), $mul.ref(0, 1)), 83);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(48, 3)), $mul.ref(1, 1)), $sub.i8(0, 96));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(48, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(49, 3)), $mul.ref(0, 1)), 84);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(49, 3)), $mul.ref(1, 1)), 31);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(49, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(50, 3)), $mul.ref(0, 1)), 85);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(50, 3)), $mul.ref(1, 1)), 35);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(50, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(51, 3)), $mul.ref(0, 1)), 86);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(51, 3)), $mul.ref(1, 1)), 69);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(51, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(52, 3)), $mul.ref(0, 1)), 87);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(52, 3)), $mul.ref(1, 1)), 103);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(52, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(53, 3)), $mul.ref(0, 1)), 88);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(53, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(53, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(54, 3)), $mul.ref(0, 1)), 89);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(54, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(54, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(55, 3)), $mul.ref(0, 1)), 90);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(55, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(55, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(56, 3)), $mul.ref(0, 1)), 91);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(56, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(56, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(57, 3)), $mul.ref(0, 1)), 96);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(57, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(57, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(58, 3)), $mul.ref(0, 1)), 97);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(58, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(58, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(59, 3)), $mul.ref(0, 1)), 98);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(59, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(59, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(60, 3)), $mul.ref(0, 1)), 99);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(60, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(60, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(61, 3)), $mul.ref(0, 1)), 100);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(61, 3)), $mul.ref(1, 1)), $sub.i8(0, 49));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(61, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(62, 3)), $mul.ref(0, 1)), 91);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(62, 3)), $mul.ref(1, 1)), 64);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(62, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(63, 3)), $mul.ref(0, 1)), $sub.i8(0, 124));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(63, 3)), $mul.ref(1, 1)), $sub.i8(0, 120));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(63, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(64, 3)), $mul.ref(0, 1)), $sub.i8(0, 123));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(64, 3)), $mul.ref(1, 1)), 36);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(64, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(65, 3)), $mul.ref(0, 1)), $sub.i8(0, 120));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(65, 3)), $mul.ref(1, 1)), 84);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(65, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(66, 3)), $mul.ref(0, 1)), $sub.i8(0, 117));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(66, 3)), $mul.ref(1, 1)), $sub.i8(0, 72));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(66, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(67, 3)), $mul.ref(0, 1)), $sub.i8(0, 116));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(67, 3)), $mul.ref(1, 1)), 7);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(67, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(68, 3)), $mul.ref(0, 1)), $sub.i8(0, 115));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(68, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(68, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(69, 3)), $mul.ref(0, 1)), $sub.i8(0, 108));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(69, 3)), $mul.ref(1, 1)), 27);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(69, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(70, 3)), $mul.ref(0, 1)), $sub.i8(0, 107));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(70, 3)), $mul.ref(1, 1)), 18);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(70, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(71, 3)), $mul.ref(0, 1)), $sub.i8(0, 106));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(71, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(71, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(72, 3)), $mul.ref(0, 1)), $sub.i8(0, 105));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(72, 3)), $mul.ref(1, 1)), 6);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(72, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(73, 3)), $mul.ref(0, 1)), $sub.i8(0, 99));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(73, 3)), $mul.ref(1, 1)), 26);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(73, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(74, 3)), $mul.ref(0, 1)), $sub.i8(0, 97));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(74, 3)), $mul.ref(1, 1)), 16);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(74, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(75, 3)), $mul.ref(0, 1)), $sub.i8(0, 76));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(75, 3)), $mul.ref(1, 1)), 34);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(75, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(76, 3)), $mul.ref(0, 1)), $sub.i8(0, 66));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(76, 3)), $mul.ref(1, 1)), $sub.i8(0, 128));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(76, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(77, 3)), $mul.ref(0, 1)), $sub.i8(0, 37));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(77, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(77, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(78, 3)), $mul.ref(0, 1)), $sub.i8(0, 18));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(78, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(78, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(79, 3)), $mul.ref(0, 1)), 76);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(79, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(79, 3)), $mul.ref(2, 1)), 2);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(80, 3)), $mul.ref(0, 1)), $sub.i8(0, 97));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(80, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(80, 3)), $mul.ref(2, 1)), 3);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(81, 3)), $mul.ref(0, 1)), $sub.i8(0, 116));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(81, 3)), $mul.ref(1, 1)), 1);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(81, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(82, 3)), $mul.ref(0, 1)), $sub.i8(0, 115));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(82, 3)), $mul.ref(1, 1)), 16);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(82, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(83, 3)), $mul.ref(0, 1)), $sub.i8(0, 114));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(83, 3)), $mul.ref(1, 1)), 8);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(83, 3)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(84, 3)), $mul.ref(0, 1)), $sub.i8(0, 113));
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(84, 3)), $mul.ref(1, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(rtl8187b_reg_table, $mul.ref(0, 255)), $mul.ref(84, 3)), $mul.ref(2, 1)), 0);
    $M.65 := $store.i16($M.65, rtl8187_table, 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(2, 1)), 2821);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(4, 1)), 5917);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1293);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(4, 1)), 28766);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(2, 1)), 3034);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(4, 1)), $sub.i16(0, 32377));
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(2, 1)), 3034);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(4, 1)), $sub.i16(0, 32375));
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(3, 32)), $mul.ref(24, 1)), 1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(2, 1)), 3034);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(4, 1)), $sub.i16(0, 32361));
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(4, 32)), $mul.ref(24, 1)), 1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(2, 1)), 3034);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(4, 1)), $sub.i16(0, 32360));
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(5, 32)), $mul.ref(24, 1)), 1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1897);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(4, 1)), 4594);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(2, 1)), 1929);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(4, 1)), 268);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(2, 1)), 2118);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(4, 1)), 24832);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(2, 1)), 2118);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(4, 1)), 27136);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(2, 1)), 2118);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(4, 1)), 16992);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(10, 32)), $mul.ref(24, 1)), 1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1008);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(4, 1)), $sub.i16(0, 13822));
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(2, 1)), 3574);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(4, 1)), 13);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(2, 1)), 3574);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(4, 1)), 40);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(13, 32)), $mul.ref(24, 1)), 1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(2, 1)), 3574);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(4, 1)), 41);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(14, 32)), $mul.ref(24, 1)), 1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(2, 1)), 4427);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(4, 1)), 336);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(2, 1)), 4977);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(4, 1)), $sub.i16(0, 27647));
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(2, 1)), 5073);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(4, 1)), $sub.i16(0, 21530));
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(2, 1)), 6376);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(4, 1)), 25138);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(2, 1)), 7029);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(4, 1)), $sub.i16(0, 32377));
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(2, 1)), 5943);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(4, 1)), 115);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(20, 32)), $mul.ref(24, 1)), 1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(2, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(4, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(rtl8187_table, $mul.ref(0, 704)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.66 := $store.ref($M.66, rtl8187_driver, .str.27);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), rtl8187_probe);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), rtl8187_disconnect);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), rtl8187_table);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.66 := $store.i64($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(rtl8187_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    $M.0 := $store.i32($M.0, rtl818x_rates, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, rtl818x_channels, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(4, 1)), 2412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(4, 1)), 2417);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(4, 1)), 2422);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(4, 1)), 2427);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(4, 1)), 2432);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(4, 1)), 2437);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(4, 1)), 2442);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(4, 1)), 2447);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(4, 1)), 2452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(4, 1)), 2457);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(4, 1)), 2462);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(4, 1)), 2467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(4, 1)), 2472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(4, 1)), 2484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(2, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(7, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(9, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(10, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(15, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(16, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(2, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(8, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(2, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(8, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(10, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(18, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(2, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(7, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(9, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(2, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(7, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(9, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(2, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(7, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(2, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(7, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(9, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(11, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(19, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.146 := $store.i8($M.146, .str.5, 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(1, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(2, 1)), 108);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(3, 1)), 56);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(4, 1)), 49);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(5, 1)), 56);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(6, 1)), 55);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(7, 1)), 45);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(8, 1)), 37);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(9, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(10, 1)), 58);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(11, 1)), 58);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(13, 1)), 97);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(16, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(.str.5, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.147 := $store.i8($M.147, .str.6, 114);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(1, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(2, 1)), 108);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(3, 1)), 56);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(4, 1)), 49);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(5, 1)), 56);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(6, 1)), 55);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(7, 1)), 45);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(8, 1)), 37);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(10, 1)), 58);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(11, 1)), 58);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(12, 1)), 116);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(13, 1)), 120);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(.str.6, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.148 := $store.i8($M.148, .str.7, 114);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(1, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(2, 1)), 108);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(3, 1)), 56);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(4, 1)), 49);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(5, 1)), 56);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(6, 1)), 55);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(7, 1)), 45);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(8, 1)), 37);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(10, 1)), 58);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(11, 1)), 58);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(12, 1)), 114);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(13, 1)), 120);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(7, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    call {:si_unique_call 3579} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 403206);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.5, $M.4;



implementation devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i28 := $eq.ref(rtl8225z2_b_rf_init, $p0);
    assume {:branchcond $i28} true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i28 == 1);
    $i27 := $eq.ref(rtl8225z2_rf_init, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i27 == 1);
    $i26 := $eq.ref(rtl8225_rf_stop, $p0);
    assume true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i26 == 1);
    $i25 := $eq.ref(rtl8225_rf_init, $p0);
    assume true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i25 == 1);
    $i24 := $eq.ref(led_turn_off, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i24 == 1);
    $i23 := $eq.ref(led_turn_on, $p0);
    assume true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i23 == 1);
    $i22 := $eq.ref(rtl8187_eeprom_register_write, $p0);
    assume true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i22 == 1);
    $i21 := $eq.ref(rtl8187_eeprom_register_read, $p0);
    assume true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i21 == 1);
    $i20 := $eq.ref(rtl8187_disconnect, $p0);
    assume {:branchcond $i20} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i20 == 1);
    $i19 := $eq.ref(rtl8187_tx_cb, $p0);
    assume {:branchcond $i19} true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i19 == 1);
    $i18 := $eq.ref(rtl8187_rx_cb, $p0);
    assume {:branchcond $i18} true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i18 == 1);
    $i17 := $eq.ref(rtl8187b_status_cb, $p0);
    assume {:branchcond $i17} true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i17 == 1);
    $i16 := $eq.ref(rtl8187_work, $p0);
    assume true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i16 == 1);
    $i15 := $eq.ref(rtl8187_beacon_work, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i15 == 1);
    $i14 := $eq.ref(rtl8187_iowrite_async_cb, $p0);
    assume {:branchcond $i14} true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i14 == 1);
    $i13 := $eq.ref(rtl8187_rfkill_poll, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i13 == 1);
    $i12 := $eq.ref(rtl8187_stop, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    call {:si_unique_call 3580} rtl8187_stop(arg);
    return;

  $bb3:
    assume $i13 == 1;
    call {:si_unique_call 3581} rtl8187_rfkill_poll(arg);
    return;

  $bb4:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3582} rtl8187_iowrite_async_cb($p1);
    return;

  $bb5:
    assume $i15 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3583} rtl8187_beacon_work($p2);
    return;

  $bb6:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3584} rtl8187_work($p3);
    return;

  $bb7:
    assume $i17 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3585} rtl8187b_status_cb($p4);
    return;

  $bb8:
    assume $i18 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3586} rtl8187_rx_cb($p5);
    return;

  $bb9:
    assume $i19 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3587} rtl8187_tx_cb($p6);
    return;

  $bb10:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3588} rtl8187_disconnect($p7);
    return;

  $bb11:
    assume $i21 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3589} rtl8187_eeprom_register_read($p8);
    return;

  $bb12:
    assume $i22 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3590} rtl8187_eeprom_register_write($p9);
    return;

  $bb13:
    assume $i23 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3591} led_turn_on($p10);
    return;

  $bb14:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3592} led_turn_off($p11);
    return;

  $bb15:
    assume $i25 == 1;
    call {:si_unique_call 3593} rtl8225_rf_init(arg);
    return;

  $bb16:
    assume $i26 == 1;
    call {:si_unique_call 3594} rtl8225_rf_stop(arg);
    return;

  $bb17:
    assume $i27 == 1;
    call {:si_unique_call 3595} rtl8225z2_rf_init(arg);
    return;

  $bb18:
    assume $i28 == 1;
    call {:si_unique_call 3596} rtl8225z2_b_rf_init(arg);
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 404238);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(rtl8225_rf_set_channel, $p0);
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    $i2 := $eq.ref(rtl8187_remove_interface, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3597} rtl8187_remove_interface(arg, $p1);
    return;

  $bb3:
    assume $i3 == 1;
    call {:si_unique_call 3598} rtl8225_rf_set_channel(arg, arg1);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 405270);

procedure devirtbounce.2(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i16;

const $u1: i8;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.44, $M.42, $M.43, $M.4, $M.3, $M.5, $M.24, $M.19, $M.18, $M.59, $M.60, $M.61, $M.62, $M.63, $M.20, $M.26, $M.25, $M.23, $M.22, $M.21, $M.0, $M.2, $M.64, $M.65, $M.66, $M.146, $M.147, $M.148, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3599} __SMACK_static_init();
    call {:si_unique_call 3600} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.0, $M.12, $M.13, $M.14, $M.15, $M.17, $M.38, $M.40, $M.27, $M.28, $M.41, $M.1, $M.29, $M.39, $M.44, $M.42, $M.43, $M.4, $M.3, $M.5, $M.24, $M.19, $M.18, $M.59, $M.60, $M.61, $M.62, $M.63, $M.20, $M.26, $M.25, $M.23, $M.22, $M.21, $M.2, $M.64, $M.65, $M.66, $M.146, $M.147, $M.148, $CurrAddr, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation rtl8187_stop_loop_$bb4(in_$p46: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p50: ref) returns (out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p50: ref)
{

  entry:
    out_$p51, out_$i52, out_$i53, out_$p50 := in_$p51, in_$i52, in_$i53, in_$p50;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_498;

  $bb6:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$p50 := out_$p51;
    goto $bb6_dummy;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} out_$p51 := ldv_skb_dequeue_18(in_$p46);
    goto corral_source_split_501;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} dev_kfree_skb_any(out_$p50);
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p51, out_$i52, out_$i53, out_$p50 := rtl8187_stop_loop_$bb4(in_$p46, out_$p51, out_$i52, out_$i53, out_$p50);
    return;

  exit:
    return;
}



procedure rtl8187_stop_loop_$bb4(in_$p46: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p50: ref) returns (out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p50: ref);
  modifies $M.5, $M.4, $M.0, $CurrAddr;



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1855;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i12 := $M.4;
    goto corral_source_split_1872;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 396} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1871;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.5, out_$p6);
    goto corral_source_split_1859;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_1858;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation rtl8187_init_urbs_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32) returns (out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$p11, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i43, out_$i44, out_$i45 := in_$p8, in_$i9, in_$i10, in_$p11, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i43, in_$i44, in_$i45;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb16_dummy;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i37;
    assume true;
    goto $bb16;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$i44 := $ule.i32(out_$i43, 31);
    goto corral_source_split_2484;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} out_$i43 := skb_queue_len(in_$p4);
    call {:si_unique_call 629} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2483;

  $bb14:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$p39, out_$p40, out_$i41 := out_$p8, out_$p14, out_$i37;
    assume true;
    goto $bb14;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} usb_free_urb(out_$p14);
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} out_$i37 := usb_submit_urb(out_$p14, 208);
    call {:si_unique_call 624} {:cexpr "ret"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} usb_anchor_urb(out_$p14, out_$p36);
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p3, $mul.ref(0, 4296)), $mul.ref(1320, 1));
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} skb_queue_tail(out_$p35, out_$p8);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p3, $mul.ref(0, 4296)), $mul.ref(3848, 1));
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, in_$p0);
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p32, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p33, out_$p14);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p8, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} usb_fill_bulk_urb(out_$p14, out_$p28, out_$i29, out_$p18, 2500, rtl8187_rx_cb, out_$p30);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$i29 := $or.i32(out_$i26, $sub.i32(0, 1073741696));
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p3, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} out_$i26 := __create_pipe(out_$p20, out_$i25);
    call {:si_unique_call 619} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    out_$i25 := (if out_$i24 == 1 then 3 else 1);
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_2456;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.0, out_$p21);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p3, $mul.ref(0, 4296)), $mul.ref(3843, 1));
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p3, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_2451;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_$p18 := skb_tail_pointer(out_$p8);
    goto corral_source_split_2450;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p8;
    assume true;
    goto $bb11;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i15, 0);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2445;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} out_$p14 := usb_alloc_urb(0, 208);
    goto corral_source_split_2444;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p8;
    assume true;
    goto $bb7;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i9, 0);
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_2434;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} out_$p8 := __dev_alloc_skb(2500, 208);
    goto corral_source_split_2433;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$p11, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i43, out_$i44, out_$i45 := rtl8187_init_urbs_loop_$bb4(in_$p0, in_$p3, in_$p4, out_$p8, out_$i9, out_$i10, out_$p11, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i43, out_$i44, out_$i45);
    return;

  exit:
    return;
}



procedure rtl8187_init_urbs_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32) returns (out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32);
  modifies $M.0;



implementation rtl8187_work_loop_$bb10(in_$p1: ref, in_$p4: ref, in_$i27: i16, in_$p29: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i32, in_$i39: i8, in_$p40: ref, in_$p41: ref, in_$p44: ref, in_$i45: i8, in_$i46: i8, in_$i47: i8, in_$i48: i8, in_$p49: ref, in_$p50: ref, in_$p53: ref, in_$i54: i8, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i32, in_$i63: i1) returns (out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i32, out_$i39: i8, out_$p40: ref, out_$p41: ref, out_$p44: ref, out_$i45: i8, out_$i46: i8, out_$i47: i8, out_$i48: i8, out_$p49: ref, out_$p50: ref, out_$p53: ref, out_$i54: i8, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i32, out_$i63: i1)
{

  entry:
    out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63 := in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i63 == 1;
    goto $bb15_dummy;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} out_$i62 := skb_queue_len(in_$p29);
    call {:si_unique_call 655} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_2594;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ieee80211_tx_status_irqsafe(in_$p4, out_$p34);
    goto corral_source_split_2593;

  $bb13:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p61, out_$i60);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p35, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i59, $sub.i32(0, 513));
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p35, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  $bb12:
    assume out_$i57 == 1;
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$i57 := $sgt.i32(out_$i56, 7);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i8(out_$i54, 31);
    goto corral_source_split_2582;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i8($M.0, out_$p53);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref($add.ref(out_$p50, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_2579;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p35, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2578;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p44, out_$i48);
    goto corral_source_split_2577;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$i48 := $or.i8(out_$i47, out_$i46);
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i8(out_$i45, $sub.i8(0, 32));
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i8(out_$i39, 31);
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref(out_$p41, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p35, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i8(out_$i38);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i37, 1);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i16.i8(in_$i27);
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} out_$p35 := IEEE80211_SKB_CB(out_$p34);
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} out_$p34 := ldv_skb_dequeue_17(out_$p33);
    goto corral_source_split_2564;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 1504), 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_2563;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63 := rtl8187_work_loop_$bb10(in_$p1, in_$p4, in_$i27, in_$p29, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63);
    return;

  exit:
    return;
}



procedure rtl8187_work_loop_$bb10(in_$p1: ref, in_$p4: ref, in_$i27: i16, in_$p29: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i32, in_$i39: i8, in_$p40: ref, in_$p41: ref, in_$p44: ref, in_$i45: i8, in_$i46: i8, in_$i47: i8, in_$i48: i8, in_$p49: ref, in_$p50: ref, in_$p53: ref, in_$i54: i8, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i32, in_$i63: i1) returns (out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i32, out_$i39: i8, out_$p40: ref, out_$p41: ref, out_$p44: ref, out_$i45: i8, out_$i46: i8, out_$i47: i8, out_$i48: i8, out_$p49: ref, out_$p50: ref, out_$p53: ref, out_$i54: i8, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i32, out_$i63: i1);
  modifies $M.0, $M.5, $M.4, $CurrAddr;



implementation rtl8187b_status_cb_loop_$bb10(in_$i29: i32, in_$i42: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p46: ref, in_$p61: ref) returns (out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p46: ref, out_$p61: ref)
{

  entry:
    out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p57, out_$p58, out_$i59, out_$i60, out_$p46, out_$p61 := in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p57, in_$p58, in_$i59, in_$i60, in_$p46, in_$p61;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2694;

  $bb16:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p58;
    goto $bb16_dummy;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p58;
    assume true;
    goto $bb16;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(in_$i42, out_$i59);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_2715;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p46, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2714;

  $bb13:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p46;
    assume true;
    goto $bb13;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, in_$i29);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i32(out_$i52, 4095);
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, out_$p50);
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_2697;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p57, out_$p58, out_$i59, out_$i60, out_$p46, out_$p61 := rtl8187b_status_cb_loop_$bb10(in_$i29, in_$i42, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p57, out_$p58, out_$i59, out_$i60, out_$p46, out_$p61);
    return;

  exit:
    return;
}



procedure rtl8187b_status_cb_loop_$bb10(in_$i29: i32, in_$i42: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p46: ref, in_$p61: ref) returns (out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p46: ref, out_$p61: ref);



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3083;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i28 := $M.4;
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 733} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p26, out_$p23);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.5, out_$p22);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_3086;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.5;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i14 := $M.4;
    goto corral_source_split_3073;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 731} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_3072;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3062;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.5, out_$p7);
    goto corral_source_split_3060;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_3059;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_3058;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation rtl8187_cmd_reset_loop_$bb19(in_$p3: ref, in_$p49: ref, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i57: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32) returns (out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i57: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32)
{

  entry:
    out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i57, out_$i67, out_$i68, out_$i69 := in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i57, in_$i67, in_$i68, in_$i69;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := out_$i58;
    goto $bb22_dummy;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i58;
    assume true;
    goto $bb22;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 0);
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i32(out_$i62, 192);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i61);
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} out_$i61 := rtl818x_ioread8(in_$p3, out_$p60);
    call {:si_unique_call 764} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i61);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, in_$p49);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} msleep(4);
    goto corral_source_split_3206;

  $bb20:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3205;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i58, out_$i69 := out_$i67, out_$i67;
    assume true;
    goto $bb20;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_3220;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i67 := $sub.i32(out_$i57, 1);
    call {:si_unique_call 765} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3219;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i57, out_$i67, out_$i68, out_$i69 := rtl8187_cmd_reset_loop_$bb19(in_$p3, in_$p49, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i57, out_$i67, out_$i68, out_$i69);
    return;

  exit:
    return;
}



procedure rtl8187_cmd_reset_loop_$bb19(in_$p3: ref, in_$p49: ref, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i57: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32) returns (out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i57: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32);



implementation rtl8187_cmd_reset_loop_$bb4(in_$p3: ref, in_$p19: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i27: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32) returns (out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i27: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32)
{

  entry:
    out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i27, out_$i37, out_$i38, out_$i39 := in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i27, in_$i37, in_$i38, in_$i39;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := out_$i28;
    goto $bb7_dummy;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i28;
    assume true;
    goto $bb7;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, 16);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} out_$i31 := rtl818x_ioread8(in_$p3, out_$p30);
    call {:si_unique_call 755} {:cexpr "tmp"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, in_$p19);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} msleep(2);
    goto corral_source_split_3164;

  $bb5:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3163;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    out_$i28, out_$i39 := out_$i37, out_$i37;
    assume true;
    goto $bb5;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_3178;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 756} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3177;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i27, out_$i37, out_$i38, out_$i39 := rtl8187_cmd_reset_loop_$bb4(in_$p3, in_$p19, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i27, out_$i37, out_$i38, out_$i39);
    return;

  exit:
    return;
}



procedure rtl8187_cmd_reset_loop_$bb4(in_$p3: ref, in_$p19: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i27: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32) returns (out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i27: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32);



implementation rtl8187_tx_cb_loop_$bb11(in_$p1: ref, in_$p11: ref, in_$p14: ref, in_$p35: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i24, in_$i45: i24, in_$i46: i24, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_vslice_dummy_var_65: i32) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i24, out_$i45: i24, out_$i46: i24, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_vslice_dummy_var_65: i32)
{

  entry:
    out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p59, out_$p60, out_$i61, out_$i62, out_vslice_dummy_var_65 := in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$p59, in_$p60, in_$i61, in_$i62, in_vslice_dummy_var_65;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i62 == 1;
    goto $bb16_dummy;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$i62 := $ugt.i32(out_$i61, 5);
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} out_$i61 := skb_queue_len(in_$p35);
    call {:si_unique_call 807} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ieee80211_tx_status_irqsafe(in_$p11, out_$p60);
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} out_$p60 := ldv_skb_dequeue_12(out_$p59);
    goto corral_source_split_3437;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p14, $mul.ref(0, 4296)), $mul.ref(3952, 1)), $mul.ref(64, 1));
    goto corral_source_split_3436;

  $bb14:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} out_vslice_dummy_var_65 := __dynamic_dev_dbg.ref.ref.ref(in_$p1, out_$p56, .str.39);
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p14, $mul.ref(0, 4296)), $mul.ref(1304, 1));
    goto corral_source_split_3431;

  $bb13:
    assume out_$i53 == 1;
    goto corral_source_split_3430;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} out_$i52 := ldv__builtin_expect(out_$i51, 0);
    call {:si_unique_call 802} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$i51 := $and.i64(out_$i50, 1);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i64(out_$i49);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.11, out_$p48);
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3423;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, out_$p47, 0);
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3421;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, out_$p43, out_$i46);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$i46 := $or.i24(out_$i45, 252);
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i24(out_$i44, $sub.i24(0, 262144));
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i24($M.10, out_$p43);
    goto corral_source_split_3417;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3415;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p41, .str.39);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p40, .str.38);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p39, .str.37);
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p38, .str.27);
    goto corral_source_split_3408;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3407;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p59, out_$p60, out_$i61, out_$i62, out_vslice_dummy_var_65 := rtl8187_tx_cb_loop_$bb11(in_$p1, in_$p11, in_$p14, in_$p35, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p59, out_$p60, out_$i61, out_$i62, out_vslice_dummy_var_65);
    return;

  exit:
    return;
}



procedure rtl8187_tx_cb_loop_$bb11(in_$p1: ref, in_$p11: ref, in_$p14: ref, in_$p35: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i24, in_$i45: i24, in_$i46: i24, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_vslice_dummy_var_65: i32) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i24, out_$i45: i24, out_$i46: i24, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_vslice_dummy_var_65: i32);
  modifies $M.5, $M.4, $M.0, $CurrAddr, $M.11, $M.10, $M.9, $M.8, $M.7, $M.6;



implementation main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$i5: i16, in_$i6: i32, in_$p8: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i64, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i16, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$p164: ref, in_$i165: i32, in_$i166: i16, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$p186: ref, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i64, in_vslice_dummy_var_90: i64, in_vslice_dummy_var_91: i64, in_vslice_dummy_var_92: i64, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32) returns (out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i64, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i16, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$p164: ref, out_$i165: i32, out_$i166: i16, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$p186: ref, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i64, out_vslice_dummy_var_90: i64, out_vslice_dummy_var_91: i64, out_vslice_dummy_var_92: i64, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$i149, out_$i150, out_$p151, out_$p152, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$p164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i183, out_$i184, out_$p185, out_$p186, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i100, in_$i101, in_$p102, in_$i104, in_$i105, in_$p106, in_$i108, in_$i109, in_$p110, in_$i112, in_$i113, in_$p114, in_$p115, in_$i117, in_$i118, in_$p119, in_$p120, in_$i122, in_$i123, in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$i131, in_$p132, in_$p133, in_$i134, in_$i135, in_$p136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$p143, in_$i144, in_$i145, in_$p146, in_$p147, in_$i149, in_$i150, in_$p151, in_$p152, in_$i154, in_$i155, in_$p156, in_$p157, in_$i158, in_$i159, in_$i161, in_$i162, in_$p163, in_$p164, in_$i165, in_$i166, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$p181, in_$p182, in_$i183, in_$i184, in_$p185, in_$p186, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3293} out_$i20 := __VERIFIER_nondet_int();
    call {:si_unique_call 3294} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i20);
    call {:si_unique_call 3295} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i20);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb44_dummy;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb19:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $M.33 := out_$i41;
    call {:si_unique_call 3302} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_9861;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i40, 1);
    goto corral_source_split_9860;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    out_$i40 := $M.33;
    goto corral_source_split_9859;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 3301} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9858;

  $bb30:
    assume out_$i39 == 1;
    goto corral_source_split_9857;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_9855;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    out_$i38 := $M.38;
    goto corral_source_split_9854;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $M.38 := out_$i37;
    call {:si_unique_call 3300} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_9853;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} out_$i37 := rtl8187_probe(out_$p36, in_$p2);
    goto corral_source_split_9852;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    out_$p36 := $M.29;
    goto corral_source_split_9851;

  $bb28:
    assume out_$i35 == 1;
    goto corral_source_split_9850;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 1);
    goto corral_source_split_9848;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    out_$i34 := $M.31;
    goto corral_source_split_9847;

  $bb26:
    assume out_$i33 == 1;
    goto corral_source_split_9846;

  $bb21:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_9840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3296} out_$i30 := __VERIFIER_nondet_int();
    call {:si_unique_call 3297} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i30);
    call {:si_unique_call 3298} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i30);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i29 == 1;
    goto corral_source_split_9840;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_9838;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    out_$i28 := $M.31;
    goto corral_source_split_9837;

  $bb16:
    assume out_$i27 == 1;
    goto corral_source_split_9836;

  $bb12:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb3:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $M.33 := out_$i48;
    call {:si_unique_call 3305} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_9873;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(out_$i47, 1);
    goto corral_source_split_9872;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    out_$i47 := $M.33;
    goto corral_source_split_9871;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 3304} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9870;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} rtl8187_disconnect(out_$p46);
    goto corral_source_split_9869;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    out_$p46 := $M.29;
    goto corral_source_split_9868;

  $bb38:
    assume out_$i45 == 1;
    goto corral_source_split_9867;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_9865;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    out_$i44 := $M.39;
    goto corral_source_split_9864;

  $bb35:
    assume out_$i43 == 1;
    goto corral_source_split_9863;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 2);
    goto corral_source_split_9844;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    out_$i42 := $M.31;
    goto corral_source_split_9843;

  $bb23:
    assume out_$i32 == 1;
    goto corral_source_split_9842;

  $bb22:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb37;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} ldv_stop();
    goto corral_source_split_9875;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb25;

  $bb46:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} ldv_main_exported_1();
    goto corral_source_split_9878;

  $bb45:
    assume out_$i50 == 1;
    goto corral_source_split_9877;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_9830;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    out_$i49 := $M.32;
    goto corral_source_split_9829;

  $bb14:
    assume out_$i26 == 1;
    goto corral_source_split_9828;

  $bb13:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb49:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb60;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_9892;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    out_$i59 := $M.33;
    goto corral_source_split_9891;

  $bb58:
    assume out_$i58 == 1;
    goto corral_source_split_9890;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 3);
    goto corral_source_split_9888;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    out_$i57 := $M.34;
    goto corral_source_split_9887;

  $bb56:
    assume out_$i56 == 1;
    goto corral_source_split_9886;

  $bb51:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_9880:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3308} out_$i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 3309} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i53);
    call {:si_unique_call 3310} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i53);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i52 == 1;
    goto corral_source_split_9880;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_9834;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    out_$i51 := $M.34;
    goto corral_source_split_9833;

  $bb15:
    assume !(out_$i26 == 1);
    goto corral_source_split_9832;

  $bb67:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_9918;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i66 := $M.40;
    goto corral_source_split_9917;

  $bb69:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} ldv_initialize_rtl818x_rf_ops_1();
    goto corral_source_split_9915;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 3323} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9914;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} ldv_initialize_rtl818x_rf_ops_3();
    goto corral_source_split_9913;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 3321} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9912;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} ldv_initialize_rtl818x_rf_ops_2();
    goto corral_source_split_9911;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 3319} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9910;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} ldv_initialize_ieee80211_ops_5();
    goto corral_source_split_9909;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3317} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9908;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 3316} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9907;

  $bb68:
    assume out_$i65 == 1;
    goto corral_source_split_9906;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 0);
    goto corral_source_split_9904;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    out_$i64 := $M.40;
    goto corral_source_split_9903;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $M.40 := out_$i63;
    call {:si_unique_call 3315} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_9902;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} out_$i63 := rtl8187_driver_init();
    goto corral_source_split_9901;

  $bb66:
    assume out_$i62 == 1;
    goto corral_source_split_9900;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 1);
    goto corral_source_split_9884;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    out_$i61 := $M.34;
    goto corral_source_split_9883;

  $bb53:
    assume out_$i55 == 1;
    goto corral_source_split_9882;

  $bb52:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} ldv_stop();
    goto corral_source_split_9923;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb55;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb55;

  $bb79:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} ldv_main_exported_3();
    goto corral_source_split_9926;

  $bb78:
    assume out_$i69 == 1;
    goto corral_source_split_9925;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_9818;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    out_$i68 := $M.35;
    goto corral_source_split_9817;

  $bb5:
    assume out_$i22 == 1;
    goto corral_source_split_9816;

  $bb4:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i20, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb82:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} ldv_main_exported_2();
    goto corral_source_split_9929;

  $bb81:
    assume out_$i71 == 1;
    goto corral_source_split_9928;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_9822;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    out_$i70 := $M.36;
    goto corral_source_split_9821;

  $bb7:
    assume out_$i23 == 1;
    goto corral_source_split_9820;

  $bb6:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb85:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $M.33 := out_$i95;
    call {:si_unique_call 3335} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_9992;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i94, 1);
    goto corral_source_split_9991;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    out_$i94 := $M.33;
    goto corral_source_split_9990;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3334} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9989;

  $bb116:
    assume out_$i93 == 1;
    goto corral_source_split_9988;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    goto corral_source_split_9986;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    out_$i92 := $M.41;
    goto corral_source_split_9985;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $M.41 := out_$i91;
    call {:si_unique_call 3333} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9984;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} out_$i91 := rtl8187_start(out_$p90);
    goto corral_source_split_9983;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    out_$p90 := $M.27;
    goto corral_source_split_9982;

  $bb114:
    assume out_$i89 == 1;
    goto corral_source_split_9981;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 1);
    goto corral_source_split_9979;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    out_$i88 := $M.37;
    goto corral_source_split_9978;

  $bb112:
    assume out_$i87 == 1;
    goto corral_source_split_9977;

  $bb108:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb102:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb87:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i74, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i74, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_9931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3329} out_$i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 3330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i74);
    call {:si_unique_call 3331} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i74);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume out_$i73 == 1;
    goto corral_source_split_9931;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_9826;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i72 := $M.37;
    goto corral_source_split_9825;

  $bb9:
    assume out_$i24 == 1;
    goto corral_source_split_9824;

  $bb8:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb125:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3339} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10005;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} out_vslice_dummy_var_88 := rtl8187_config(out_$p102, in_$i12);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$p102 := $M.27;
    goto corral_source_split_10003;

  $bb124:
    assume out_$i101 == 1;
    goto corral_source_split_10002;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 2);
    goto corral_source_split_10000;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i100 := $M.37;
    goto corral_source_split_9999;

  $bb122:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3337} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9997;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} out_vslice_dummy_var_87 := rtl8187_config(out_$p98, in_$i12);
    goto corral_source_split_9996;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    out_$p98 := $M.27;
    goto corral_source_split_9995;

  $bb121:
    assume out_$i97 == 1;
    goto corral_source_split_9994;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 1);
    goto corral_source_split_9971;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    out_$i96 := $M.37;
    goto corral_source_split_9970;

  $bb110:
    assume out_$i86 == 1;
    goto corral_source_split_9969;

  $bb109:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i74, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb131:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3343} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10018;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} out_vslice_dummy_var_90 := rtl8187_prepare_multicast(out_$p110, in_$p16);
    goto corral_source_split_10017;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    out_$p110 := $M.27;
    goto corral_source_split_10016;

  $bb130:
    assume out_$i109 == 1;
    goto corral_source_split_10015;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 2);
    goto corral_source_split_10013;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i108 := $M.37;
    goto corral_source_split_10012;

  $bb128:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3341} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10010;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} out_vslice_dummy_var_89 := rtl8187_prepare_multicast(out_$p106, in_$p16);
    goto corral_source_split_10009;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    out_$p106 := $M.27;
    goto corral_source_split_10008;

  $bb127:
    assume out_$i105 == 1;
    goto corral_source_split_10007;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 1);
    goto corral_source_split_9975;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    out_$i104 := $M.37;
    goto corral_source_split_9974;

  $bb111:
    assume !(out_$i86 == 1);
    goto corral_source_split_9973;

  $bb137:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3347} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10033;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} out_vslice_dummy_var_92 := rtl8187_get_tsf(out_$p119, out_$p120);
    goto corral_source_split_10032;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    out_$p120 := $M.28;
    goto corral_source_split_10031;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    out_$p119 := $M.27;
    goto corral_source_split_10030;

  $bb136:
    assume out_$i118 == 1;
    goto corral_source_split_10029;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 2);
    goto corral_source_split_10027;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i117 := $M.37;
    goto corral_source_split_10026;

  $bb134:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3345} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10024;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} out_vslice_dummy_var_91 := rtl8187_get_tsf(out_$p114, out_$p115);
    goto corral_source_split_10023;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    out_$p115 := $M.28;
    goto corral_source_split_10022;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    out_$p114 := $M.27;
    goto corral_source_split_10021;

  $bb133:
    assume out_$i113 == 1;
    goto corral_source_split_10020;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 1);
    goto corral_source_split_9959;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    out_$i112 := $M.37;
    goto corral_source_split_9958;

  $bb104:
    assume out_$i83 == 1;
    goto corral_source_split_9957;

  $bb103:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i74, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb143:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3351} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10048;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} rtl8187_configure_filter(out_$p128, in_$i6, in_$p4, out_$i129);
    goto corral_source_split_10047;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i64($M.30, in_$p0);
    goto corral_source_split_10046;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    out_$p128 := $M.27;
    goto corral_source_split_10045;

  $bb142:
    assume out_$i127 == 1;
    goto corral_source_split_10044;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 2);
    goto corral_source_split_10042;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i126 := $M.37;
    goto corral_source_split_10041;

  $bb140:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3349} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10039;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} rtl8187_configure_filter(out_$p124, in_$i6, in_$p4, out_$i125);
    goto corral_source_split_10038;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i64($M.30, in_$p0);
    goto corral_source_split_10037;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    out_$p124 := $M.27;
    goto corral_source_split_10036;

  $bb139:
    assume out_$i123 == 1;
    goto corral_source_split_10035;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 1);
    goto corral_source_split_9963;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    out_$i122 := $M.37;
    goto corral_source_split_9962;

  $bb106:
    assume out_$i84 == 1;
    goto corral_source_split_9961;

  $bb105:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i74, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb149:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3355} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10063;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} rtl8187_bss_info_changed(out_$p136, out_$p137, in_$p18, in_$i11);
    goto corral_source_split_10062;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    out_$p137 := $M.28;
    goto corral_source_split_10061;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    out_$p136 := $M.27;
    goto corral_source_split_10060;

  $bb148:
    assume out_$i135 == 1;
    goto corral_source_split_10059;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 2);
    goto corral_source_split_10057;

  $bb147:
    assume {:verifier.code 0} true;
    out_$i134 := $M.37;
    goto corral_source_split_10056;

  $bb146:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3353} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10054;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} rtl8187_bss_info_changed(out_$p132, out_$p133, in_$p18, in_$i11);
    goto corral_source_split_10053;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    out_$p133 := $M.28;
    goto corral_source_split_10052;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    out_$p132 := $M.27;
    goto corral_source_split_10051;

  $bb145:
    assume out_$i131 == 1;
    goto corral_source_split_10050;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 1);
    goto corral_source_split_9967;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    out_$i130 := $M.37;
    goto corral_source_split_9966;

  $bb107:
    assume !(out_$i84 == 1);
    goto corral_source_split_9965;

  $bb155:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3359} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10076;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} rtl8187_rfkill_poll(out_$p143);
    goto corral_source_split_10075;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    out_$p143 := $M.27;
    goto corral_source_split_10074;

  $bb154:
    assume out_$i142 == 1;
    goto corral_source_split_10073;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_10071;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i141 := $M.37;
    goto corral_source_split_10070;

  $bb152:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3357} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10068;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} rtl8187_rfkill_poll(out_$p140);
    goto corral_source_split_10067;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    out_$p140 := $M.27;
    goto corral_source_split_10066;

  $bb151:
    assume out_$i139 == 1;
    goto corral_source_split_10065;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 1);
    goto corral_source_split_9947;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    out_$i138 := $M.37;
    goto corral_source_split_9946;

  $bb98:
    assume out_$i80 == 1;
    goto corral_source_split_9945;

  $bb89:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i74, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb88:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i74, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb161:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3363} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10091;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} out_vslice_dummy_var_94 := rtl8187_add_interface(out_$p151, out_$p152);
    goto corral_source_split_10090;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    out_$p152 := $M.28;
    goto corral_source_split_10089;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    out_$p151 := $M.27;
    goto corral_source_split_10088;

  $bb160:
    assume out_$i150 == 1;
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 2);
    goto corral_source_split_10085;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i149 := $M.37;
    goto corral_source_split_10084;

  $bb158:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3361} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10082;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} out_vslice_dummy_var_93 := rtl8187_add_interface(out_$p146, out_$p147);
    goto corral_source_split_10081;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    out_$p147 := $M.28;
    goto corral_source_split_10080;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    out_$p146 := $M.27;
    goto corral_source_split_10079;

  $bb157:
    assume out_$i145 == 1;
    goto corral_source_split_10078;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 1);
    goto corral_source_split_9951;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    out_$i144 := $M.37;
    goto corral_source_split_9950;

  $bb100:
    assume out_$i81 == 1;
    goto corral_source_split_9949;

  $bb99:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i74, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb167:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3367} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10110;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3366} out_vslice_dummy_var_96 := rtl8187_conf_tx(out_$p163, out_$p164, out_$i166, in_$p10);
    goto corral_source_split_10109;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i16(out_$i165);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i16.i32(in_$i5);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    out_$p164 := $M.28;
    goto corral_source_split_10106;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    out_$p163 := $M.27;
    goto corral_source_split_10105;

  $bb166:
    assume out_$i162 == 1;
    goto corral_source_split_10104;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 2);
    goto corral_source_split_10102;

  $bb165:
    assume {:verifier.code 0} true;
    out_$i161 := $M.37;
    goto corral_source_split_10101;

  $bb164:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3365} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10099;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} out_vslice_dummy_var_95 := rtl8187_conf_tx(out_$p156, out_$p157, out_$i159, in_$p10);
    goto corral_source_split_10098;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    out_$i159 := $trunc.i32.i16(out_$i158);
    goto corral_source_split_10097;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i16.i32(in_$i5);
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    out_$p157 := $M.28;
    goto corral_source_split_10095;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    out_$p156 := $M.27;
    goto corral_source_split_10094;

  $bb163:
    assume out_$i155 == 1;
    goto corral_source_split_10093;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_9955;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    out_$i154 := $M.37;
    goto corral_source_split_9954;

  $bb101:
    assume !(out_$i81 == 1);
    goto corral_source_split_9953;

  $bb170:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $M.33 := out_$i172;
    call {:si_unique_call 3370} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_10118;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    out_$i172 := $sub.i32(out_$i171, 1);
    goto corral_source_split_10117;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i171 := $M.33;
    goto corral_source_split_10116;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3369} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10115;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} rtl8187_stop(out_$p170);
    goto corral_source_split_10114;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    out_$p170 := $M.27;
    goto corral_source_split_10113;

  $bb169:
    assume out_$i169 == 1;
    goto corral_source_split_10112;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 2);
    goto corral_source_split_9935;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    out_$i168 := $M.37;
    goto corral_source_split_9934;

  $bb91:
    assume out_$i77 == 1;
    goto corral_source_split_9933;

  $bb90:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i74, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb176:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3374} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10131;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} rtl8187_tx(out_$p178, in_$p8, in_$p14);
    goto corral_source_split_10130;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    out_$p178 := $M.27;
    goto corral_source_split_10129;

  $bb175:
    assume out_$i177 == 1;
    goto corral_source_split_10128;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 2);
    goto corral_source_split_10126;

  $bb174:
    assume {:verifier.code 0} true;
    out_$i176 := $M.37;
    goto corral_source_split_10125;

  $bb173:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3372} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10123;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3371} rtl8187_tx(out_$p175, in_$p8, in_$p14);
    goto corral_source_split_10122;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    out_$p175 := $M.27;
    goto corral_source_split_10121;

  $bb172:
    assume out_$i174 == 1;
    goto corral_source_split_10120;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 1);
    goto corral_source_split_9939;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    out_$i173 := $M.37;
    goto corral_source_split_9938;

  $bb93:
    assume out_$i78 == 1;
    goto corral_source_split_9937;

  $bb92:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i74, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb182:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 3378} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10146;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} rtl8187_remove_interface(out_$p185, out_$p186);
    goto corral_source_split_10145;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    out_$p186 := $M.28;
    goto corral_source_split_10144;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    out_$p185 := $M.27;
    goto corral_source_split_10143;

  $bb181:
    assume out_$i184 == 1;
    goto corral_source_split_10142;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 2);
    goto corral_source_split_10140;

  $bb180:
    assume {:verifier.code 0} true;
    out_$i183 := $M.37;
    goto corral_source_split_10139;

  $bb179:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3376} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10137;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3375} rtl8187_remove_interface(out_$p181, out_$p182);
    goto corral_source_split_10136;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    out_$p182 := $M.28;
    goto corral_source_split_10135;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    out_$p181 := $M.27;
    goto corral_source_split_10134;

  $bb178:
    assume out_$i180 == 1;
    goto corral_source_split_10133;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 1);
    goto corral_source_split_9943;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    out_$i179 := $M.37;
    goto corral_source_split_9942;

  $bb95:
    assume out_$i79 == 1;
    goto corral_source_split_9941;

  $bb94:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i74, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} ldv_stop();
    goto corral_source_split_10148;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb96:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb97;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb97;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} ldv_stop();
    goto corral_source_split_10150;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb11;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$i149, out_$i150, out_$p151, out_$p152, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$p164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i183, out_$i184, out_$p185, out_$p186, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96 := main_loop_$bb1(in_$p0, in_$p2, in_$p4, in_$i5, in_$i6, in_$p8, in_$p10, in_$i11, in_$i12, in_$p14, in_$p16, in_$p18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$i149, out_$i150, out_$p151, out_$p152, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i161, out_$i162, out_$p163, out_$p164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i183, out_$i184, out_$p185, out_$p186, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$i5: i16, in_$i6: i32, in_$p8: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i64, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i16, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$p164: ref, in_$i165: i32, in_$i166: i16, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$p186: ref, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i64, in_vslice_dummy_var_90: i64, in_vslice_dummy_var_91: i64, in_vslice_dummy_var_92: i64, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32) returns (out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i64, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i16, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$p164: ref, out_$i165: i32, out_$i166: i16, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$p186: ref, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i64, out_vslice_dummy_var_90: i64, out_vslice_dummy_var_91: i64, out_vslice_dummy_var_92: i64, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32);
  modifies $M.33, $M.31, $M.38, $M.0, $M.12, $M.13, $M.14, $M.15, $M.17, $CurrAddr, $M.32, $M.42, $M.44, $M.35, $M.43, $M.36, $M.27, $M.28, $M.37, $M.34, $M.40, $M.39, $M.29, $M.41, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.5, $M.4;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


