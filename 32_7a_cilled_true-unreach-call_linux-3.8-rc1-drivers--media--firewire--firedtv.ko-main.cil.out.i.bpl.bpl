var $M.0: i32;

var $M.1: [ref]i8;

var $M.3: [ref]i16;

var $M.4: [ref]ref;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.7: [ref]i8;

var $M.8: [ref]i8;

var $M.9: [ref]i32;

var $M.10: [ref]i8;

var $M.11: [ref]i24;

var $M.12: [ref]i8;

var $M.13: [ref]i8;

var $M.14: [ref]i16;

var $M.15: [ref]i8;

var $M.16: [ref]i8;

var $M.17: [ref]i8;

var $M.19: [ref]i32;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: i32;

var $M.25: i32;

var $M.26: [ref]i32;

var $M.27: [ref]ref;

var $M.28: [ref]i32;

var $M.29: [ref]i16;

var $M.30: [ref]i32;

var $M.33: [ref]i16;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.37: [ref]i16;

var $M.38: i32;

var $M.39: [ref]i8;

var $M.40: i32;

var $M.41: ref;

var $M.42: ref;

var $M.43: i32;

var $M.44: ref;

var $M.45: ref;

var $M.46: i64;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i64;

var $M.51: i32;

var $M.52: ref;

var $M.53: i32;

var $M.54: ref;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: ref;

var $M.59: ref;

var $M.60: i32;

var $M.61: i32;

var $M.62: ref;

var $M.63: ref;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i64;

var $M.69: ref;

var $M.70: i64;

var $M.71: ref;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.89: [ref]i32;

var $M.90: [ref]i32;

var $M.91: [ref]i32;

var $M.92: [ref]i32;

var $M.93: [ref]i32;

var $M.94: [ref]i64;

var $M.112: [ref]i16;

var $M.113: [ref]ref;

var $M.114: [ref]ref;

var $M.115: [ref]ref;

var $M.116: [ref]ref;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: [ref]ref;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $M.122: [ref]ref;

var $M.123: [ref]ref;

var $M.124: [ref]ref;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]ref;

var $M.129: [ref]ref;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: [ref]ref;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 434487);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 1028);

const fdtv_ca_fops_group1: ref;

axiom fdtv_ca_fops_group1 == $sub.ref(0, 2060);

const fdtv_ca_fops_group2: ref;

axiom fdtv_ca_fops_group2 == $sub.ref(0, 3092);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 4120);

const ldvarg4: ref;

axiom ldvarg4 == $sub.ref(0, 5152);

const ldvarg5: ref;

axiom ldvarg5 == $sub.ref(0, 6184);

const ldvarg3: ref;

axiom ldvarg3 == $sub.ref(0, 7216);

const ldvarg2: ref;

axiom ldvarg2 == $sub.ref(0, 8244);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 9272);

const ldvarg1: ref;

axiom ldvarg1 == $sub.ref(0, 10300);

const ldvarg0: ref;

axiom ldvarg0 == $sub.ref(0, 11332);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 12360);

const ldvarg7: ref;

axiom ldvarg7 == $sub.ref(0, 13392);

const ldvarg9: ref;

axiom ldvarg9 == $sub.ref(0, 14420);

const ldvarg8: ref;

axiom ldvarg8 == $sub.ref(0, 15452);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 16480);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 17508);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 18536);

const ldvarg6: ref;

axiom ldvarg6 == $sub.ref(0, 19568);

const fdtv_driver_group0: ref;

axiom fdtv_driver_group0 == $sub.ref(0, 20600);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 21628);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 22656);

const ldvarg16: ref;

axiom ldvarg16 == $sub.ref(0, 23688);

const ldvarg14: ref;

axiom ldvarg14 == $sub.ref(0, 24720);

const ldvarg11: ref;

axiom ldvarg11 == $sub.ref(0, 25748);

const ldvarg17: ref;

axiom ldvarg17 == $sub.ref(0, 26776);

const ldvarg19: ref;

axiom ldvarg19 == $sub.ref(0, 27804);

const ldvarg10: ref;

axiom ldvarg10 == $sub.ref(0, 28832);

const ldvarg12: ref;

axiom ldvarg12 == $sub.ref(0, 29864);

const ldvarg15: ref;

axiom ldvarg15 == $sub.ref(0, 30896);

const ldvarg13: ref;

axiom ldvarg13 == $sub.ref(0, 31928);

const ldvarg18: ref;

axiom ldvarg18 == $sub.ref(0, 32960);

const __mod_ieee1394_device_table: ref;

axiom __mod_ieee1394_device_table == $sub.ref(0, 34016);

const {:count 34} oldtable: ref;

axiom oldtable == $sub.ref(0, 35108);

const {:count 53} keytable: ref;

axiom keytable == $sub.ref(0, 36238);

const fcp_region: ref;

axiom fcp_region == $sub.ref(0, 37278);

const fcp_handler: ref;

axiom fcp_handler == $sub.ref(0, 38350);

const {:count 7} fdtv_id_table: ref;

axiom fdtv_id_table == $sub.ref(0, 39598);

const fdtv_driver: ref;

axiom fdtv_driver == $sub.ref(0, 40758);

const node_list: ref;

axiom node_list == $sub.ref(0, 41798);

const node_list_lock: ref;

axiom node_list_lock == $sub.ref(0, 42894);

const {:count 5} model_names: ref;

axiom model_names == $sub.ref(0, 43958);

const {:count 8} adapter_nr: ref;

axiom adapter_nr == $sub.ref(0, 44998);

const fdtv_ca_fops: ref;

axiom fdtv_ca_fops == $sub.ref(0, 46238);

const fdtv_ca: ref;

axiom fdtv_ca == $sub.ref(0, 47422);

const {:count 4} fake_ca_system_ids: ref;

axiom fake_ca_system_ids == $sub.ref(0, 48462);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 49490);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 50518);

const ldv_mutex_demux_mutex_of_firedtv: ref;

axiom ldv_mutex_demux_mutex_of_firedtv == $sub.ref(0, 51546);

const ldv_mutex_cred_guard_mutex_of_signal_struct: ref;

axiom ldv_mutex_cred_guard_mutex_of_signal_struct == $sub.ref(0, 52574);

const ldv_mutex_avc_mutex_of_firedtv: ref;

axiom ldv_mutex_avc_mutex_of_firedtv == $sub.ref(0, 53602);

const num_fake_ca_system_ids: ref;

axiom num_fake_ca_system_ids == $sub.ref(0, 54630);

const avc_debug: ref;

axiom avc_debug == $sub.ref(0, 55658);

const .str: ref;

axiom .str == $sub.ref(0, 56710);

const {:count 36} .str.1: ref;

axiom .str.1 == $sub.ref(0, 57770);

const {:count 55} .str.25: ref;

axiom .str.25 == $sub.ref(0, 58849);

const {:count 8} .str.26: ref;

axiom .str.26 == $sub.ref(0, 59881);

const {:count 8} .str.27: ref;

axiom .str.27 == $sub.ref(0, 60913);

const {:count 29} .str.28: ref;

axiom .str.28 == $sub.ref(0, 61966);

const {:count 2} .str.29: ref;

axiom .str.29 == $sub.ref(0, 62992);

const {:count 8} .str.41: ref;

axiom .str.41 == $sub.ref(0, 64024);

const {:count 7} .str.42: ref;

axiom .str.42 == $sub.ref(0, 65055);

const {:count 17} .str.43: ref;

axiom .str.43 == $sub.ref(0, 66096);

const {:count 7} .str.44: ref;

axiom .str.44 == $sub.ref(0, 67127);

const {:count 16} .str.45: ref;

axiom .str.45 == $sub.ref(0, 68167);

const {:count 16} .str.46: ref;

axiom .str.46 == $sub.ref(0, 69207);

const {:count 9} .str.47: ref;

axiom .str.47 == $sub.ref(0, 70240);

const {:count 9} .str.48: ref;

axiom .str.48 == $sub.ref(0, 71273);

const {:count 14} .str.49: ref;

axiom .str.49 == $sub.ref(0, 72311);

const {:count 19} .str.50: ref;

axiom .str.50 == $sub.ref(0, 73354);

const {:count 8} .str.51: ref;

axiom .str.51 == $sub.ref(0, 74386);

const {:count 8} .str.52: ref;

axiom .str.52 == $sub.ref(0, 75418);

const {:count 2} .str.53: ref;

axiom .str.53 == $sub.ref(0, 76444);

const {:count 15} .str.30: ref;

axiom .str.30 == $sub.ref(0, 77483);

const {:count 22} .str.31: ref;

axiom .str.31 == $sub.ref(0, 78529);

const {:count 17} .str.32: ref;

axiom .str.32 == $sub.ref(0, 79570);

const {:count 8} .str.33: ref;

axiom .str.33 == $sub.ref(0, 80602);

const {:count 15} .str.34: ref;

axiom .str.34 == $sub.ref(0, 81641);

const {:count 11} .str.35: ref;

axiom .str.35 == $sub.ref(0, 82676);

const {:count 11} .str.36: ref;

axiom .str.36 == $sub.ref(0, 83711);

const {:count 9} .str.37: ref;

axiom .str.37 == $sub.ref(0, 84744);

const {:count 10} .str.38: ref;

axiom .str.38 == $sub.ref(0, 85778);

const {:count 8} .str.39: ref;

axiom .str.39 == $sub.ref(0, 86810);

const {:count 8} .str.40: ref;

axiom .str.40 == $sub.ref(0, 87842);

const {:count 23} .str.61: ref;

axiom .str.61 == $sub.ref(0, 88889);

const {:count 26} .str.4: ref;

axiom .str.4 == $sub.ref(0, 89939);

const {:count 26} .str.5: ref;

axiom .str.5 == $sub.ref(0, 90989);

const {:count 26} .str.54: ref;

axiom .str.54 == $sub.ref(0, 92039);

const {:count 24} .str.55: ref;

axiom .str.55 == $sub.ref(0, 93087);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 29} .str.62: ref;

axiom .str.62 == $sub.ref(0, 94140);

const {:count 33} .str.7: ref;

axiom .str.7 == $sub.ref(0, 95197);

const {:count 23} .str.8: ref;

axiom .str.8 == $sub.ref(0, 96244);

const {:count 39} .str.9: ref;

axiom .str.9 == $sub.ref(0, 97307);

const {:count 34} .str.10: ref;

axiom .str.10 == $sub.ref(0, 98365);

const {:count 18} .str.56: ref;

axiom .str.56 == $sub.ref(0, 99407);

const {:count 12} .str.57: ref;

axiom .str.57 == $sub.ref(0, 100443);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 13} .str.70: ref;

axiom .str.70 == $sub.ref(0, 101480);

const {:count 13} .str.71: ref;

axiom .str.71 == $sub.ref(0, 102517);

const {:count 13} .str.72: ref;

axiom .str.72 == $sub.ref(0, 103554);

const {:count 13} .str.73: ref;

axiom .str.73 == $sub.ref(0, 104591);

const {:count 13} .str.74: ref;

axiom .str.74 == $sub.ref(0, 105628);

const {:count 15} .str.75: ref;

axiom .str.75 == $sub.ref(0, 106667);

const {:count 8} .str.76: ref;

axiom .str.76 == $sub.ref(0, 107699);

const fw_bus_type: ref;

axiom fw_bus_type == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 21} .str.11: ref;

axiom .str.11 == $sub.ref(0, 108744);

const {:count 28} .str.12: ref;

axiom .str.12 == $sub.ref(0, 109796);

const {:count 28} .str.13: ref;

axiom .str.13 == $sub.ref(0, 110848);

const {:count 21} .str.59: ref;

axiom .str.59 == $sub.ref(0, 111893);

const {:count 21} .str.58: ref;

axiom .str.58 == $sub.ref(0, 112938);

const {:count 17} .str.66: ref;

axiom .str.66 == $sub.ref(0, 113979);

const {:count 16} .str.67: ref;

axiom .str.67 == $sub.ref(0, 115019);

const {:count 19} .str.68: ref;

axiom .str.68 == $sub.ref(0, 116062);

const {:count 26} .str.69: ref;

axiom .str.69 == $sub.ref(0, 117112);

const {:count 39} .str.21: ref;

axiom .str.21 == $sub.ref(0, 118175);

const {:count 27} .str.22: ref;

axiom .str.22 == $sub.ref(0, 119226);

const {:count 30} .str.15: ref;

axiom .str.15 == $sub.ref(0, 120280);

const {:count 31} .str.23: ref;

axiom .str.23 == $sub.ref(0, 121335);

const {:count 20} .str.6: ref;

axiom .str.6 == $sub.ref(0, 122379);

const {:count 243} .str.2: ref;

axiom .str.2 == $sub.ref(0, 123646);

const {:count 29} .str.14: ref;

axiom .str.14 == $sub.ref(0, 124699);

const {:count 47} .str.63: ref;

axiom .str.63 == $sub.ref(0, 125770);

const {:count 13} .str.64: ref;

axiom .str.64 == $sub.ref(0, 126807);

const {:count 16} .str.65: ref;

axiom .str.65 == $sub.ref(0, 127847);

const {:count 39} .str.16: ref;

axiom .str.16 == $sub.ref(0, 128910);

const {:count 43} .str.17: ref;

axiom .str.17 == $sub.ref(0, 129977);

const {:count 28} .str.18: ref;

axiom .str.18 == $sub.ref(0, 131029);

const {:count 14} .str.19: ref;

axiom .str.19 == $sub.ref(0, 132067);

const {:count 16} .str.20: ref;

axiom .str.20 == $sub.ref(0, 133107);

const {:count 32} .str.3: ref;

axiom .str.3 == $sub.ref(0, 134163);

const {:count 23} .str.24: ref;

axiom .str.24 == $sub.ref(0, 135210);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 136242);

const {:count 3} .str.1.150: ref;

axiom .str.1.150 == $sub.ref(0, 137269);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 138307);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 139335);

const avc_recv: ref;

axiom avc_recv == $sub.ref(0, 140367);

procedure avc_recv($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $CurrAddr;



implementation avc_recv($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i44: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_20: i1;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "avc_recv:arg:length"} boogie_si_record_i64($i2);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i4 := $M.0;
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64($i2, 7);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3168, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call {:si_unique_call 13} {:cexpr "avc_recv:arg:__len"} boogie_si_record_i64($i2);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 14} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p52, $p1, $i2, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i2);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p54, $i53);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3168, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p55, 1);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3080, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} __wake_up($p56, 3, 1, $0.ref);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb26:
    assume $i47 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_22 := dev_err.ref.ref($p49, .str.1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 5);
    goto $bb23;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i12 := is_register_rc($p3);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 5} {:cexpr "tmp___1"} boogie_si_record_i8($i13);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_21 := _dev_info.ref.ref.i32($p39, .str, $i42);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb23;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i35 := is_register_rc($p34);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 7} {:cexpr "tmp___0"} boogie_si_record_i8($i36);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 8);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i25, $i29);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} fdtv_handle_rc($p0, $i30);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3176, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} vslice_dummy_var_20 := schedule_work($p31);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} debug_fcp($p1, $i10);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 141399);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 142431);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 16} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const debug_fcp: ref;

axiom debug_fcp == $sub.ref(0, 143463);

procedure debug_fcp($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.4, $CurrAddr;



implementation debug_fcp($p0: ref, $i1: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} {:cexpr "debug_fcp:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 7);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p5 := .str.27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i9 := $ashr.i32($i8, 3);
    call {:si_unique_call 18} {:cexpr "subunit_type"} boogie_si_record_i32($i9);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 7);
    call {:si_unique_call 19} {:cexpr "subunit_id"} boogie_si_record_i32($i13);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i9, 30);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p20 := debug_fcp_opcode($i19, $p0, $i1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p25 := debug_fcp_ctype($i24);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_23 := printk.ref.ref.i32.i32.i32.ref.ref(.str.28, $p5, $i9, $i13, $i1, $p25, $p20);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i27 := $M.0;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 32768);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i1);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} print_hex_dump(.str.29, $p5, 0, 16, 1, $p0, $i30, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i13, 5);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 20} {:cexpr "opcode"} boogie_si_record_i32($i18);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p5 := .str.26;
    goto $bb3;
}



const is_register_rc: ref;

axiom is_register_rc == $sub.ref(0, 144495);

procedure is_register_rc($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_register_rc($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 18);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 135);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 10);
    assume {:verifier.code 0} true;
    $i5 := $i25;
    goto $bb3;
}



const fdtv_handle_rc: ref;

axiom fdtv_handle_rc == $sub.ref(0, 145527);

procedure fdtv_handle_rc($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation fdtv_handle_rc($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i30: i32;
  var $i22: i32;
  var $i14: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} {:cexpr "fdtv_handle_rc:arg:code"} boogie_si_record_i32($i1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3256, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2024)), $mul.ref(224, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i1, 767);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i1, 831);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i1, 17664);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i1, 17727);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_24 := printk.ref.i32(.str.25, $i1);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i32 := $ule.i32($i1, 17730);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb21;

  $bb22:
    assume $i32 == 1;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i1, 17697);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref($i34, 2));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.3, $p35);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    call {:si_unique_call 34} {:cexpr "code"} boogie_si_record_i32($i37);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i30 := $i37;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i22 := $i30;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} input_report_key($p3, $i14, 1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} input_sync($p3);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} input_report_key($p3, $i14, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} input_sync($p3);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i1, 17695);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i1, 17665);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref($i26, 2));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.3, $p27);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    call {:si_unique_call 32} {:cexpr "code"} boogie_si_record_i32($i29);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb18;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i16 := $ule.i32($i1, 852);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i1, 800);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p6, $mul.ref($i18, 2));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.1, $p19);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    call {:si_unique_call 31} {:cexpr "code"} boogie_si_record_i32($i21);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i1, 799);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i1, 768);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p6, $mul.ref($i10, 2));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    call {:si_unique_call 26} {:cexpr "code"} boogie_si_record_i32($i13);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 146559);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 1} true;
    call {:si_unique_call 35} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 36} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 147591);

procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 37} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 38} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 39} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 40} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 148623);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 1} true;
    call {:si_unique_call 41} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 42} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 43} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 44} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 149655);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 150687);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 46} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 151719);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 47} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 48} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.ref.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.ref.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref, p.6: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 49} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 50} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const input_report_key: ref;

axiom input_report_key == $sub.ref(0, 152751);

procedure input_report_key($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation input_report_key($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} {:cexpr "input_report_key:arg:code"} boogie_si_record_i32($i1);
    call {:si_unique_call 52} {:cexpr "input_report_key:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} input_event($p0, 1, $i1, $i4);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    return;
}



const input_sync: ref;

axiom input_sync == $sub.ref(0, 153783);

procedure input_sync($p0: ref);
  free requires assertsPassed;



implementation input_sync($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} input_event($p0, 0, 0, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    return;
}



const input_event: ref;

axiom input_event == $sub.ref(0, 154815);

procedure input_event($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation input_event($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} {:cexpr "input_event:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 56} {:cexpr "input_event:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 57} {:cexpr "input_event:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    return;
}



const debug_fcp_opcode: ref;

axiom debug_fcp_opcode == $sub.ref(0, 155847);

procedure debug_fcp_opcode($i0: i32, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation debug_fcp_opcode($i0: i32, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p14: ref;

  $bb0:
    call {:si_unique_call 58} {:cexpr "debug_fcp_opcode:arg:opcode"} boogie_si_record_i32($i0);
    call {:si_unique_call 59} {:cexpr "debug_fcp_opcode:arg:length"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 203);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 203);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p14 := .str.33;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i19 := $M.0;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 4);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $p22 := $0.ref;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p14 := $p22;
    goto $bb21;

  $bb25:
    assume $i21 == 1;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p22 := .str.32;
    goto $bb27;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i15 := $M.0;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p14 := $p18;
    goto $bb21;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p18 := .str.31;
    goto $bb24;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i10 := $M.0;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb21;

  $bb18:
    assume $i12 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p13 := .str.30;
    goto $bb20;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i2, 6);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i23 == 1);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i27 == 1);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 18);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i31 == 1);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 135);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref(6, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 87);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i38, 88);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i38, 96);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i38, 96);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p14 := .str.34;
    goto $bb21;

  $bb46:
    assume $i42 == 1;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i60 := $M.0;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 64);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $p63 := $0.ref;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p14 := $p63;
    goto $bb21;

  $bb68:
    assume $i62 == 1;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p63 := .str.38;
    goto $bb70;

  $bb44:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i38, 88);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb48;

  $bb49:
    assume $i43 == 1;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i56 := $M.0;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 32);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $p59 := $0.ref;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p14 := $p59;
    goto $bb21;

  $bb65:
    assume $i58 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p59 := .str.37;
    goto $bb67;

  $bb42:
    assume $i40 == 1;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i68 := $M.0;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 256);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $p71 := $0.ref;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p14 := $p71;
    goto $bb21;

  $bb74:
    assume $i70 == 1;
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p71 := .str.40;
    goto $bb76;

  $bb40:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i38, 82);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i38, 86);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i45 == 1);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i64 := $M.0;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 128);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $p67 := $0.ref;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p14 := $p67;
    goto $bb21;

  $bb71:
    assume $i66 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p67 := .str.39;
    goto $bb73;

  $bb53:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i38, 82);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb48;

  $bb55:
    assume $i46 == 1;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i52 := $M.0;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 16);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $p55 := $0.ref;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p14 := $p55;
    goto $bb21;

  $bb62:
    assume $i54 == 1;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p55 := .str.36;
    goto $bb64;

  $bb51:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i38, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb48;

  $bb57:
    assume $i47 == 1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i48 := $M.0;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 8);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $p51 := $0.ref;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p14 := $p51;
    goto $bb21;

  $bb59:
    assume $i50 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p51 := .str.35;
    goto $bb61;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p14 := .str.34;
    goto $bb21;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb30;
}



const debug_fcp_ctype: ref;

axiom debug_fcp_ctype == $sub.ref(0, 156879);

procedure debug_fcp_ctype($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $CurrAddr;



implementation debug_fcp_ctype($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 61} {:cexpr "debug_fcp_ctype:arg:ctype"} boogie_si_record_i32($i0);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 8));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str.41);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(1, 8));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str.42);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(2, 8));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str.43);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(3, 8));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.44);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(4, 8));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.45);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(5, 8));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, $0.ref);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(6, 8));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, $0.ref);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(7, 8));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, $0.ref);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(8, 8));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.46);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(9, 8));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.47);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(10, 8));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.48);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(11, 8));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.49);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(12, 8));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.50);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(13, 8));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.51);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(14, 8));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, $0.ref);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(15, 8));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, .str.52);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i0, 15);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p22 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $p25 := .str.53;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p25 := $p22;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref($i19, 8));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.4, $p20);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb3;
}



const print_hex_dump: ref;

axiom print_hex_dump == $sub.ref(0, 157911);

procedure print_hex_dump($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64, $i7: i1);
  free requires assertsPassed;



implementation print_hex_dump($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64, $i7: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} {:cexpr "print_hex_dump:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 63} {:cexpr "print_hex_dump:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 64} {:cexpr "print_hex_dump:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 65} {:cexpr "print_hex_dump:arg:arg6"} boogie_si_record_i64($i6);
    call {:si_unique_call 66} {:cexpr "print_hex_dump:arg:arg7"} boogie_si_record_i1($i7);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    return;
}



const fdtv_ca_ioctl: ref;

axiom fdtv_ca_ioctl == $sub.ref(0, 158943);

procedure fdtv_ca_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed;



implementation fdtv_ca_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i20: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p3 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    call {:si_unique_call 68} {:cexpr "fdtv_ca_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, $sub.i32(0, 2129891452));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 28544);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 1091334021);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 1091334021);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} vslice_dummy_var_26 := _dev_info.ref.ref.i32($p26, .str.61, $i1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 95);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} vslice_dummy_var_25 := avc_tuner_status($p9, $p3);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i24 := fdtv_ca_send_msg($p9, $p2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 70} {:cexpr "err"} boogie_si_record_i32($i24);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i20 := $i24;
    goto $bb21;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 28544);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i19 := avc_ca_reset($p9);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 72} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb21;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, $sub.i32(0, 2129891452));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i23 := fdtv_ca_get_msg($p9, $p2);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 74} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb21;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, $sub.i32(0, 2146406527));
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, $sub.i32(0, 2146406527));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i21 := fdtv_ca_get_caps($p2);
    call {:si_unique_call 76} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb21;

  $bb15:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, $sub.i32(0, 2146668670));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb19:
    assume $i18 == 1;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i22 := fdtv_ca_get_slot_info($p9, $p2);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 78} {:cexpr "err"} boogie_si_record_i32($i22);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb21;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const avc_ca_reset: ref;

axiom avc_ca_reset == $sub.ref(0, 159975);

procedure avc_ca_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.19, $M.20, $M.21, $M.22, $M.23, assertsPassed, $M.4, $CurrAddr;



implementation avc_ca_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} ldv_mutex_lock_26($p3);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 40);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $i9);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 18);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $sub.i8(0, 121));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 86);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 0);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(6, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 0);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(7, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 1);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(8, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, 12);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i31 := avc_write($p0);
    call {:si_unique_call 83} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ldv_mutex_unlock_27($p32);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const fdtv_ca_get_caps: ref;

axiom fdtv_ca_get_caps == $sub.ref(0, 161007);

procedure fdtv_ca_get_caps($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation fdtv_ca_get_caps($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 1);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 1);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, 1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fdtv_ca_get_slot_info: ref;

axiom fdtv_ca_get_slot_info == $sub.ref(0, 162039);

procedure fdtv_ca_get_slot_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed;



implementation fdtv_ca_get_slot_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i4 := avc_tuner_status($p0, $p2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 87} {:cexpr "err"} boogie_si_record_i32($i4);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, 1);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i11 := fdtv_get_ca_flags($p2);
    call {:si_unique_call 89} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, $i11);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 13);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const fdtv_ca_get_msg: ref;

axiom fdtv_ca_get_msg == $sub.ref(0, 163071);

procedure fdtv_ca_get_msg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed;



implementation fdtv_ca_get_msg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i19: i32;
  var $i9: i32;
  var $p25: ref;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2904, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 10453040);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 10453040);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i11 := avc_tuner_status($p0, $p2);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 96} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(19, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.5, $p14);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2904, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} vslice_dummy_var_27 := _dev_info.ref.ref.i32($p21, .str.62, $i23);
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 13);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i9 := $i19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2904, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i18 := fdtv_ca_get_mmi($p0, $p1);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 98} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb16;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb9;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i10 := fdtv_ca_info($p0, $p1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 92} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb9;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 10453024);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i8 := fdtv_ca_app_info($p0, $p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 94} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb9;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const fdtv_ca_send_msg: ref;

axiom fdtv_ca_send_msg == $sub.ref(0, 164103);

procedure fdtv_ca_send_msg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation fdtv_ca_send_msg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i30: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 16);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 8);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i7, $i12);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1)), $mul.ref(2, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i13, $i17);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2904, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, $i18);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2904, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 10453040);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 10453042);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 10453042);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2904, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_28 := dev_err.ref.ref.i32($p33, .str.62, $i35);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 13);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i29 := fdtv_ca_pmt($p0, $p1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 101} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb17;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 10453040);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb8;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb17;

  $bb2:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i21, 10453026);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i21, 10453026);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb8;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i31 := avc_ca_enter_menu($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 103} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb17;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i21, 10453024);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb8;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb17;
}



const avc_tuner_status: ref;

axiom avc_tuner_status == $sub.ref(0, 165135);

procedure avc_tuner_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_tuner_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p48: ref;
  var $i49: i8;
  var $p50: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $i58: i8;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $i72: i8;
  var $i73: i8;
  var $i74: i8;
  var $i75: i8;
  var $i76: i8;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $p86: ref;
  var $i87: i8;
  var $i88: i8;
  var $i89: i8;
  var $i90: i8;
  var $i91: i8;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $i99: i8;
  var $i100: i8;
  var $i101: i8;
  var $i102: i8;
  var $i103: i8;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i8;
  var $p110: ref;
  var $i111: i8;
  var $i112: i8;
  var $i113: i8;
  var $i114: i8;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $p139: ref;
  var $i140: i8;
  var $p141: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $i148: i32;
  var $i149: i32;
  var $i150: i8;
  var $p151: ref;
  var $p152: ref;
  var $i153: i24;
  var $i154: i24;
  var $i155: i24;
  var $i156: i24;
  var $i157: i24;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $p171: ref;
  var $i172: i8;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i24;
  var $i178: i24;
  var $i179: i24;
  var $i180: i24;
  var $i181: i24;
  var $i182: i24;
  var $p184: ref;
  var $i185: i8;
  var $p186: ref;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i8;
  var $i193: i32;
  var $i194: i32;
  var $i195: i8;
  var $p196: ref;
  var $i197: i8;
  var $i198: i8;
  var $i199: i8;
  var $i200: i8;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i8;
  var $i207: i32;
  var $i208: i32;
  var $i209: i8;
  var $p210: ref;
  var $i211: i8;
  var $i212: i8;
  var $i213: i8;
  var $i214: i8;
  var $i215: i8;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $i220: i32;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i8;
  var $p225: ref;
  var $i226: i8;
  var $i227: i8;
  var $i228: i8;
  var $i229: i8;
  var $i230: i8;
  var $p232: ref;
  var $i233: i8;
  var $i234: i32;
  var $i235: i32;
  var $i236: i8;
  var $p237: ref;
  var $i238: i8;
  var $i239: i8;
  var $i240: i8;
  var $i241: i8;
  var $i242: i8;
  var $p244: ref;
  var $i245: i8;
  var $i246: i32;
  var $i247: i32;
  var $i248: i16;
  var $i249: i32;
  var $p251: ref;
  var $i252: i8;
  var $i253: i16;
  var $i254: i32;
  var $i255: i32;
  var $i256: i16;
  var $p257: ref;
  var $p259: ref;
  var $i260: i8;
  var $p261: ref;
  var $p263: ref;
  var $i264: i8;
  var $p265: ref;
  var $p267: ref;
  var $i268: i8;
  var $p269: ref;
  var $p271: ref;
  var $i272: i8;
  var $i273: i32;
  var $i274: i32;
  var $i275: i8;
  var $p276: ref;
  var $i277: i8;
  var $i278: i8;
  var $i279: i8;
  var $i280: i8;
  var $p282: ref;
  var $i283: i8;
  var $i284: i32;
  var $i285: i32;
  var $i286: i8;
  var $p287: ref;
  var $i288: i8;
  var $i289: i8;
  var $i290: i8;
  var $i291: i8;
  var $i292: i8;
  var $p294: ref;
  var $i295: i8;
  var $i296: i32;
  var $i297: i32;
  var $i298: i8;
  var $i299: i32;
  var $i300: i32;
  var $i301: i8;
  var $p302: ref;
  var $i303: i8;
  var $i304: i8;
  var $i305: i8;
  var $i306: i8;
  var $i307: i8;
  var $p309: ref;
  var $i310: i8;
  var $i311: i32;
  var $i312: i32;
  var $i313: i8;
  var $i314: i32;
  var $i315: i32;
  var $i316: i8;
  var $p317: ref;
  var $i318: i8;
  var $i319: i8;
  var $i320: i8;
  var $i321: i8;
  var $i322: i8;
  var $p324: ref;
  var $i325: i8;
  var $i326: i32;
  var $i327: i32;
  var $i328: i8;
  var $i329: i32;
  var $i330: i32;
  var $i331: i8;
  var $p332: ref;
  var $i333: i8;
  var $i334: i8;
  var $i335: i8;
  var $i336: i8;
  var $i337: i8;
  var $p339: ref;
  var $i340: i8;
  var $i341: i32;
  var $i342: i32;
  var $i343: i8;
  var $i344: i32;
  var $i345: i32;
  var $i346: i8;
  var $p347: ref;
  var $i348: i8;
  var $i349: i8;
  var $i350: i8;
  var $i351: i8;
  var $i352: i8;
  var $p354: ref;
  var $i355: i8;
  var $i356: i32;
  var $i357: i32;
  var $i358: i8;
  var $i359: i32;
  var $i360: i32;
  var $i361: i8;
  var $p362: ref;
  var $i363: i8;
  var $i364: i8;
  var $i365: i8;
  var $i366: i8;
  var $i367: i8;
  var $p369: ref;
  var $i370: i8;
  var $i371: i32;
  var $i372: i32;
  var $i373: i8;
  var $i374: i32;
  var $i375: i32;
  var $i376: i8;
  var $p377: ref;
  var $i378: i8;
  var $i379: i8;
  var $i380: i8;
  var $i381: i8;
  var $i382: i8;
  var $i22: i32;
  var $p383: ref;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} ldv_mutex_lock_16($p6);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, 0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 40);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i12);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 9);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, $sub.i8(0, 128));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $sub.i8(0, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} clear_operands($p3, 2, 31);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 12);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i20 := avc_write($p0);
    call {:si_unique_call 108} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 12);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(9, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    call {:si_unique_call 111} {:cexpr "length"} boogie_si_record_i32($i37);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 16);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i42 == 1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i37, 22);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p50, $i49);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i32($i54, 7);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.7, $p57);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i59 := $and.i8($i56, 1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i58, $sub.i8(0, 2));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i61 := $or.i8($i60, $i59);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p57, $i61);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p63);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i66 := $ashr.i32($i65, 6);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.7, $p71);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i73 := $and.i8($i70, 1);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i74 := $shl.i8($i73, 1);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i75 := $and.i8($i72, $sub.i8(0, 3));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i76 := $or.i8($i75, $i74);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p71, $i76);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i81 := $ashr.i32($i80, 5);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.7, $p86);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i88 := $and.i8($i85, 1);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i89 := $shl.i8($i88, 2);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i87, $sub.i8(0, 5));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i91 := $or.i8($i90, $i89);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p86, $i91);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.1, $p93);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i96 := $ashr.i32($i95, 7);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.7, $p98);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i100 := $and.i8($i97, 1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i101 := $shl.i8($i100, 3);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i102 := $and.i8($i99, $sub.i8(0, 9));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i103 := $or.i8($i102, $i101);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p98, $i103);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.1, $p105);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 127);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.8, $p110);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i112 := $and.i8($i109, 127);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i113 := $and.i8($i111, $sub.i8(0, 128));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i114 := $or.i8($i113, $i112);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p110, $i114);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.1, $p116);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i119 := $shl.i32($i118, 24);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.1, $p121);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i124 := $shl.i32($i123, 16);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i119, $i124);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(15, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.1, $p127);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i130 := $shl.i32($i129, 8);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i131 := $or.i32($i125, $i130);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(16, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.1, $p133);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i136 := $or.i32($i131, $i135);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p137, $i136);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(17, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.1, $p139);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p141, $i140);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.1, $p143);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i146 := $ashr.i32($i145, 6);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i149 := $and.i32($i148, 2);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i32.i8($i149);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i24($i150);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i154 := $load.i24($M.11, $p152);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i155 := $and.i24($i153, 3);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i156 := $and.i24($i154, $sub.i24(0, 4));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i157 := $or.i24($i156, $i155);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p152, $i157);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.1, $p159);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 63);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i163 := $shl.i32($i162, 16);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(19, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.1, $p165);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i168 := $shl.i32($i167, 8);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i169 := $or.i32($i163, $i168);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(20, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i172 := $load.i8($M.1, $p171);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i172);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i169, $i173);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i24($i174);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i178 := $load.i24($M.11, $p176);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i179 := $and.i24($i177, 4194303);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i180 := $shl.i24($i179, 2);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i181 := $and.i24($i178, 3);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i182 := $or.i24($i181, $i180);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p176, $i182);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(21, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.1, $p184);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p186, $i185);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(22, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.1, $p188);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i191 := $ashr.i32($i190, 4);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i32.i8($i191);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i194 := $and.i32($i193, 1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i8($i194);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(13, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.13, $p196);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i198 := $and.i8($i195, 1);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i199 := $and.i8($i197, $sub.i8(0, 2));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i200 := $or.i8($i199, $i198);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p196, $i200);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(22, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.1, $p202);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i205 := $ashr.i32($i204, 3);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i32.i8($i205);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, 1);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(13, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.13, $p210);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i212 := $and.i8($i209, 1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i213 := $shl.i8($i212, 1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i214 := $and.i8($i211, $sub.i8(0, 3));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i215 := $or.i8($i214, $i213);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p210, $i215);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(22, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.1, $p217);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i220 := $ashr.i32($i219, 1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i8($i220);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, 1);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i8($i223);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(13, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.13, $p225);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i227 := $and.i8($i224, 1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i228 := $shl.i8($i227, 2);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i229 := $and.i8($i226, $sub.i8(0, 5));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i230 := $or.i8($i229, $i228);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p225, $i230);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(22, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.1, $p232);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i235 := $and.i32($i234, 1);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i8($i235);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(13, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.13, $p237);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i239 := $and.i8($i236, 1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i240 := $shl.i8($i239, 3);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i241 := $and.i8($i238, $sub.i8(0, 9));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i242 := $or.i8($i241, $i240);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p237, $i242);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(23, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.1, $p244);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i247 := $shl.i32($i246, 8);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i16($i247);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i249 := $sext.i16.i32($i248);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(24, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i252 := $load.i8($M.1, $p251);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i16($i252);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i254 := $sext.i16.i32($i253);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i255 := $or.i32($i249, $i254);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i32.i16($i255);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(14, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p257, $i256);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(27, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i260 := $load.i8($M.1, $p259);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p261, $i260);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(28, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.1, $p263);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p265, $i264);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(29, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i268 := $load.i8($M.1, $p267);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p269, $i268);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(30, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i272 := $load.i8($M.1, $p271);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i273 := $zext.i8.i32($i272);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i274 := $and.i32($i273, 1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i275 := $trunc.i32.i8($i274);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.5, $p276);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i278 := $and.i8($i275, 1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i279 := $and.i8($i277, $sub.i8(0, 2));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i280 := $or.i8($i279, $i278);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p276, $i280);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(31, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.1, $p282);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i32($i283);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i285 := $ashr.i32($i284, 7);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i8($i285);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i288 := $load.i8($M.5, $p287);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i289 := $and.i8($i286, 1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i290 := $shl.i8($i289, 1);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i291 := $and.i8($i288, $sub.i8(0, 3));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i292 := $or.i8($i291, $i290);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p287, $i292);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(31, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i295 := $load.i8($M.1, $p294);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i296 := $zext.i8.i32($i295);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i297 := $ashr.i32($i296, 6);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i8($i297);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i32($i298);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i300 := $and.i32($i299, 1);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i301 := $trunc.i32.i8($i300);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.5, $p302);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i304 := $and.i8($i301, 1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i305 := $shl.i8($i304, 2);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i306 := $and.i8($i303, $sub.i8(0, 5));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i307 := $or.i8($i306, $i305);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p302, $i307);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(31, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i310 := $load.i8($M.1, $p309);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i311 := $zext.i8.i32($i310);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i312 := $ashr.i32($i311, 5);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i32.i8($i312);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i314 := $zext.i8.i32($i313);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 1);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i32.i8($i315);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i318 := $load.i8($M.5, $p317);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i319 := $and.i8($i316, 1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i320 := $shl.i8($i319, 3);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i321 := $and.i8($i318, $sub.i8(0, 9));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i322 := $or.i8($i321, $i320);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p317, $i322);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(31, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.1, $p324);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i326 := $zext.i8.i32($i325);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i327 := $ashr.i32($i326, 4);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i8($i327);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i328);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i330 := $and.i32($i329, 1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i331 := $trunc.i32.i8($i330);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.5, $p332);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i334 := $and.i8($i331, 1);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i335 := $shl.i8($i334, 4);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i336 := $and.i8($i333, $sub.i8(0, 17));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i337 := $or.i8($i336, $i335);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p332, $i337);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(31, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i340 := $load.i8($M.1, $p339);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i341 := $zext.i8.i32($i340);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i342 := $ashr.i32($i341, 3);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i8($i342);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i344 := $zext.i8.i32($i343);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i345 := $and.i32($i344, 1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i346 := $trunc.i32.i8($i345);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i348 := $load.i8($M.5, $p347);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i349 := $and.i8($i346, 1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i350 := $shl.i8($i349, 5);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i351 := $and.i8($i348, $sub.i8(0, 33));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i352 := $or.i8($i351, $i350);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p347, $i352);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(31, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i355 := $load.i8($M.1, $p354);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i356 := $zext.i8.i32($i355);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i357 := $ashr.i32($i356, 2);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i358 := $trunc.i32.i8($i357);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i359 := $zext.i8.i32($i358);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i360 := $and.i32($i359, 1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i361 := $trunc.i32.i8($i360);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.5, $p362);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i364 := $and.i8($i361, 1);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i365 := $shl.i8($i364, 6);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i366 := $and.i8($i363, $sub.i8(0, 65));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i367 := $or.i8($i366, $i365);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p362, $i367);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(31, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i370 := $load.i8($M.1, $p369);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i371 := $zext.i8.i32($i370);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i372 := $ashr.i32($i371, 1);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i373 := $trunc.i32.i8($i372);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i373);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i375 := $and.i32($i374, 1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i376 := $trunc.i32.i8($i375);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i378 := $load.i8($M.5, $p377);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i379 := $and.i8($i376, 1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i380 := $shl.i8($i379, 7);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i381 := $and.i8($i378, 127);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i382 := $or.i8($i381, $i380);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p377, $i382);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ldv_mutex_unlock_17($p383);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_30 := dev_err.ref.ref($p45, .str.5);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb12;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 9);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb7;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_29 := dev_err.ref.ref($p32, .str.4);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_16: ref;

axiom ldv_mutex_lock_16 == $sub.ref(0, 166167);

procedure ldv_mutex_lock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} mutex_lock($p0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const clear_operands: ref;

axiom clear_operands == $sub.ref(0, 167199);

procedure clear_operands($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation clear_operands($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} {:cexpr "clear_operands:arg:from"} boogie_si_record_i32($i1);
    call {:si_unique_call 116} {:cexpr "clear_operands:arg:to"} boogie_si_record_i32($i2);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i2, $i1);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    call {:si_unique_call 117} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p6, 0, $i9, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_4;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    return;
}



const avc_write: ref;

axiom avc_write == $sub.ref(0, 168231);

procedure avc_write($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.4, $CurrAddr;



implementation avc_write($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i1;
  var $i47: i64;
  var $i45: i64;
  var $i46: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i8;
  var $i53: i1;
  var $i48: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i3: i32;
  var $p59: ref;
  var $p60: ref;
  var $i25: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3168, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb1;

  $bb1:
    call $i4, $i5, $i6, $i7, $i8, $i9, $p10, $p11, $p12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i26, $p27, $i28, $i29, $p30, $p31, $p33, $p34, $p35, $p37, $p38, $p40, $p41, $p42, $i43, $i44, $i47, $i45, $i46, $i49, $i50, $i51, $i52, $i53, $i48, $p54, $i55, $i56, $i57, $i58, $i3 := avc_write_loop_$bb1($p0, $p1, $i4, $i5, $i6, $i7, $i8, $i9, $p10, $p11, $p12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i26, $p27, $i28, $i29, $p30, $p31, $p33, $p34, $p35, $p37, $p38, $p40, $p41, $p42, $i43, $i44, $i47, $i45, $i46, $i49, $i50, $i51, $i52, $i53, $i48, $p54, $i55, $i56, $i57, $i58, $i3);
    goto $bb1_last;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $M.0;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 120} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i19 := fdtv_write($p0, 281474708278016, $p15, $i18);
    call {:si_unique_call 123} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i26 := msecs_to_jiffies(200);
    call {:si_unique_call 126} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3168, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p30 := get_current();
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p31, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p33, $p30);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p34, autoremove_wake_function);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p37, $p35);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p40, $p38);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3080, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} prepare_to_wait($p41, $p1, 2);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3168, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i45 := $i26;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i44 == 1);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i46 := $i26;
    goto $bb15;

  $bb15:
    call $i47, $i46, $i49, $i50, $i51, $i52, $i53 := avc_write_loop_$bb15($p1, $p41, $p42, $i47, $i46, $i49, $i50, $i51, $i52, $i53);
    goto $bb15_last;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i49 := schedule_timeout($i46);
    call {:si_unique_call 131} {:cexpr "__ret"} boogie_si_record_i64($i49);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} prepare_to_wait($p41, $p1, 2);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p42);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i47 := $i49;
    assume true;
    goto $bb16, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i49;
    goto $bb22_dummy;

  $bb16:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i45 := $i47;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i48 := $i45;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3080, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} finish_wait($p54, $p1);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i55 := $i48;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i3, 1);
    call {:si_unique_call 133} {:cexpr "retry"} boogie_si_record_i32($i57);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i58 := $sle.i32($i57, 5);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_32 := dev_err.ref.ref($p60, .str.55);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 110);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb27:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i57;
    goto $bb27_dummy;

  $bb24:
    assume $i56 == 1;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb8;

  $bb19:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i48 := $i51;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb13;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i55 := $i26;
    goto $bb23;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_31 := dev_err.ref.ref($p23, .str.54);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i25 := $i21;
    goto $bb8;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} debug_fcp($p11, $i13);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb27_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_995;
}



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 169263);

procedure ldv_mutex_unlock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} mutex_unlock($p0);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_avc_mutex_of_firedtv: ref;

axiom ldv_mutex_unlock_avc_mutex_of_firedtv == $sub.ref(0, 170295);

procedure ldv_mutex_unlock_avc_mutex_of_firedtv($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_avc_mutex_of_firedtv($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} ldv_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 138} {:cexpr "ldv_mutex_avc_mutex_of_firedtv"} boogie_si_record_i32(1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 171327);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 172359);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} __VERIFIER_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const fdtv_write: ref;

axiom fdtv_write == $sub.ref(0, 173391);

procedure fdtv_write($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_write($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "fdtv_write:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 141} {:cexpr "fdtv_write:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i4 := node_req($p0, $i1, $p2, $i3, 1);
    call {:si_unique_call 143} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 174423);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 144} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 175455);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p0 := devirtbounce(0, current_task);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 176487);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 177519);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 178551);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 150} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 151} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 179583);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    return;
}



const node_req: ref;

axiom node_req == $sub.ref(0, 180615);

procedure node_req($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation node_req($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} {:cexpr "node_req:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 153} {:cexpr "node_req:arg:len"} boogie_si_record_i64($i3);
    call {:si_unique_call 154} {:cexpr "node_req:arg:tcode"} boogie_si_record_i32($i4);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p5 := device_of($p0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1752)), $mul.ref(20, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    call {:si_unique_call 156} {:cexpr "generation"} boogie_si_record_i32($i7);
    call {:si_unique_call 157} devirtbounce.1(0);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1752)), $mul.ref(16, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1752)), $mul.ref(24, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i14 := fw_run_transaction($p9, $i4, $i11, $i7, $i13, $i1, $p2, $i3);
    call {:si_unique_call 159} {:cexpr "rcode"} boogie_si_record_i32($i14);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 5);
    goto $bb3;
}



const device_of: ref;

axiom device_of == $sub.ref(0, 181647);

procedure device_of($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation device_of($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p5 := fw_device($p4);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const fw_run_transaction: ref;

axiom fw_run_transaction == $sub.ref(0, 182679);

procedure fw_run_transaction($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i64, $p6: ref, $i7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fw_run_transaction($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i64, $p6: ref, $i7: i64) returns ($r: i32)
{
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} {:cexpr "fw_run_transaction:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 162} {:cexpr "fw_run_transaction:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 163} {:cexpr "fw_run_transaction:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 164} {:cexpr "fw_run_transaction:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 165} {:cexpr "fw_run_transaction:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 166} {:cexpr "fw_run_transaction:arg:arg7"} boogie_si_record_i64($i7);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const fw_device: ref;

axiom fw_device == $sub.ref(0, 183711);

procedure fw_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fw_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 40), 1752));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 184743);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_mutex_lock_avc_mutex_of_firedtv: ref;

axiom ldv_mutex_lock_avc_mutex_of_firedtv == $sub.ref(0, 185775);

procedure ldv_mutex_lock_avc_mutex_of_firedtv($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_avc_mutex_of_firedtv($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} ldv_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 170} {:cexpr "ldv_mutex_avc_mutex_of_firedtv"} boogie_si_record_i32(2);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 186807);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    return;
}



const fdtv_ca_pmt: ref;

axiom fdtv_ca_pmt == $sub.ref(0, 187839);

procedure fdtv_ca_pmt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation fdtv_ca_pmt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i32: i32;
  var $i33: i32;
  var $i14: i32;
  var $i15: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i34: i32;
  var $i35: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1)), $mul.ref(3, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1)), $mul.ref(3, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    call {:si_unique_call 171} {:cexpr "data_length"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    $i34, $i35 := 4, $i39;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i34);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p41, $mul.ref($i42, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i44 := avc_ca_pmt($p0, $p43, $i35);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 176} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1)), $mul.ref(3, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 127);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i14, $i15 := 4, 0;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i34, $i35 := $i14, $i15;
    goto $bb11;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i16, $i17, $i18 := 0, 0, 4;
    goto $bb6;

  $bb6:
    call $i19, $i20, $i21, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i16, $i17, $i18, $i32, $i33 := fdtv_ca_pmt_loop_$bb6($p2, $p9, $i19, $i20, $i21, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i16, $i17, $i18, $i32, $i33);
    goto $bb6_last;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    call {:si_unique_call 172} {:cexpr "data_pos"} boogie_si_record_i32($i19);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i17, 8);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i18);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1)), $mul.ref($i21, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i20, $i25);
    call {:si_unique_call 173} {:cexpr "data_length"} boogie_si_record_i32($i26);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i16, 1);
    call {:si_unique_call 174} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p9);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 127);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, $i27);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i19, $i26;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i32, $i33;
    goto $bb5;

  $bb8:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i16, $i17, $i18 := $i27, $i26, $i19;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;
}



const avc_ca_enter_menu: ref;

axiom avc_ca_enter_menu == $sub.ref(0, 188871);

procedure avc_ca_enter_menu($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_ca_enter_menu($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} ldv_mutex_lock_32($p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 1);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 40);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $i9);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 18);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $sub.i8(0, 121));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 86);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 7);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} clear_operands($p2, 6, 8);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, 12);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i25 := avc_write($p0);
    call {:si_unique_call 180} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} ldv_mutex_unlock_33($p26);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_32: ref;

axiom ldv_mutex_lock_32 == $sub.ref(0, 189903);

procedure ldv_mutex_lock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} mutex_lock($p0);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_33: ref;

axiom ldv_mutex_unlock_33 == $sub.ref(0, 190935);

procedure ldv_mutex_unlock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} mutex_unlock($p0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const avc_ca_pmt: ref;

axiom avc_ca_pmt == $sub.ref(0, 191967);

procedure avc_ca_pmt($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_ca_pmt($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i29: i8;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i8;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i8;
  var $p89: ref;
  var $i90: i8;
  var $p92: ref;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i64;
  var $p122: ref;
  var $i123: i8;
  var $i124: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i64;
  var $p130: ref;
  var $i131: i8;
  var $i132: i64;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i64;
  var $p138: ref;
  var $i139: i8;
  var $i140: i64;
  var $p142: ref;
  var $i143: i64;
  var $p144: ref;
  var $i145: i8;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i64;
  var $i150: i64;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i161: i8;
  var $i162: i64;
  var $p164: ref;
  var $i165: i32;
  var $i166: i8;
  var $i167: i64;
  var $p169: ref;
  var $i170: i1;
  var $i171: i32;
  var $i172: i64;
  var $p173: ref;
  var $i174: i8;
  var $i175: i32;
  var $i176: i1;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $i181: i64;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $i186: i64;
  var $p187: ref;
  var $i188: i32;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i117: i32;
  var $i118: i32;
  var $i193: i32;
  var $i116: i32;
  var $i194: i32;
  var $p196: ref;
  var $i197: i32;
  var $i198: i32;
  var $i199: i8;
  var $p201: ref;
  var $i202: i8;
  var $i203: i32;
  var $i204: i32;
  var $i205: i8;
  var $p207: ref;
  var $i208: i8;
  var $i209: i32;
  var $i210: i32;
  var $i211: i8;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i32;
  var $i222: i64;
  var $i223: i32;
  var $i224: i32;
  var $i225: i8;
  var $i226: i32;
  var $i227: i64;
  var $p229: ref;
  var $i230: i32;
  var $i231: i8;
  var $i232: i32;
  var $i233: i64;
  var $p235: ref;
  var $i236: i32;
  var $i237: i8;
  var $i238: i32;
  var $i239: i64;
  var $p241: ref;
  var $i242: i8;
  var $i243: i32;
  var $i244: i64;
  var $p246: ref;
  var $i247: i32;
  var $i248: i32;
  var $p249: ref;
  var $i250: i32;
  var $i251: i1;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i8;
  var $i261: i32;
  var $i263: i32;
  var $i252: i32;
  var $p264: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} {:cexpr "avc_ca_pmt:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i7 := $M.0;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 16384);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} ldv_mutex_lock_28($p14);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 40);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $i20);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p1);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 3);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p1);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i30 := $sext.i8.i32($i29);
    call {:si_unique_call 192} {:cexpr "list_management"} boogie_si_record_i32($i30);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i33 := $sext.i8.i32($i32);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 15);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i35 := $shl.i32($i34, 8);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i38 := $sext.i8.i32($i37);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i35, $i38);
    call {:si_unique_call 193} {:cexpr "program_info_length"} boogie_si_record_i32($i39);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, 0);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i39;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p44, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, 18);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p48, $sub.i8(0, 121));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, 86);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p52, 0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p54, 2);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(6, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p56, 0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i30);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p59, $i57);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, 1);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p63, 2);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p65, $sub.i8(0, 128));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(15, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, $i67);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(16, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p73, $i71);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.1, $p74);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(17, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p77, $i75);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p79, 0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(19, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p81, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(20, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p83, 31);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(21, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p85, $sub.i8(0, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i86 := $ashr.i32($i42, 8);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(22, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p89, $i87);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i42);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(23, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p92, $i90);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i32($i42, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i113, $i114 := 6, 24;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i113, $i2);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i116 := $i114;
    assume {:branchcond $i115} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i116, 4);
    call {:si_unique_call 220} {:cexpr "write_pos"} boogie_si_record_i32($i194);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(7, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p196, $sub.i8(0, 126));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i194, $sub.i32(0, 10));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i198 := $ashr.i32($i197, 8);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i8($i198);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(8, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p201, $i199);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i8($i194);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i203, 246);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i8($i204);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(9, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p207, $i205);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i32.i8($i194);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i209, 241);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i210);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p213, $i211);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($p215, $mul.ref(10, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.1, $p218);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i221 := $add.i32($i220, $sub.i32(0, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i221);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i223 := crc32_be(0, $p216, $i222);
    call {:si_unique_call 222} {:cexpr "tmp___10"} boogie_si_record_i32($i223);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i224 := $lshr.i32($i223, 24);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i32.i8($i224);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i226 := $add.i32($i194, $sub.i32(0, 4));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i227 := $sext.i32.i64($i226);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i227, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p229, $i225);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i230 := $ashr.i32($i223, 16);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i32.i8($i230);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i194, $sub.i32(0, 3));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i233 := $sext.i32.i64($i232);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i233, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p235, $i231);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i236 := $ashr.i32($i223, 8);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i8($i236);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i238 := $add.i32($i194, $sub.i32(0, 2));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i239 := $sext.i32.i64($i238);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i239, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p241, $i237);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i8($i223);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i243 := $add.i32($i194, $sub.i32(0, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i244 := $sext.i32.i64($i243);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i244, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p246, $i242);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} pad_operands($p4, $i194);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i247 := $add.i32($i194, 6);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i248 := $and.i32($i247, $sub.i32(0, 4));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p249, $i248);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i250 := avc_write($p0);
    call {:si_unique_call 225} {:cexpr "ret"} boogie_si_record_i32($i250);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i250, 0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.1, $p253);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 9);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    $i263 := $i250;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i252 := $i263;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} ldv_mutex_unlock_29($p264);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $r := $i252;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i256 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.1, $p257);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i260 := $load.i8($M.1, $p259);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i261 := $zext.i8.i32($i260);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} vslice_dummy_var_36 := dev_err.ref.ref.i32($p258, .str.10, $i261);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i263 := $sub.i32(0, 13);
    goto $bb45;

  $bb39:
    assume $i251 == 1;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i252 := $i250;
    goto $bb41;

  $bb19:
    assume $i115 == 1;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i117, $i118 := $i114, $i113;
    goto $bb22;

  $bb22:
    call $i119, $i120, $i121, $p122, $i123, $i124, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $p134, $i135, $i136, $i137, $p138, $i139, $i140, $p142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $p164, $i165, $i166, $i167, $p169, $i170, $i171, $i172, $p173, $i174, $i175, $i176, $i177, $p178, $p179, $i181, $p182, $p183, $i184, $p185, $i186, $p187, $i188, $i189, $i190, $i191, $i192, $i117, $i118, $i193, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_35 := avc_ca_pmt_loop_$bb22($p0, $p1, $i2, $p4, $i119, $i120, $i121, $p122, $i123, $i124, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $p134, $i135, $i136, $i137, $p138, $i139, $i140, $p142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $p164, $i165, $i166, $i167, $p169, $i170, $i171, $i172, $p173, $i174, $i175, $i176, $i177, $p178, $p179, $i181, $p182, $p183, $i184, $p185, $i186, $p187, $i188, $i189, $i190, $i191, $i192, $i117, $i118, $i193, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_35);
    goto $bb22_last;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i117, 1);
    call {:si_unique_call 202} {:cexpr "write_pos"} boogie_si_record_i32($i119);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i118, 1);
    call {:si_unique_call 203} {:cexpr "read_pos"} boogie_si_record_i32($i120);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i118);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p1, $mul.ref($i121, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.1, $p122);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i117);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i124, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p126, $i123);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i119, 1);
    call {:si_unique_call 204} {:cexpr "write_pos"} boogie_si_record_i32($i127);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i120, 1);
    call {:si_unique_call 205} {:cexpr "read_pos"} boogie_si_record_i32($i128);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i120);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p1, $mul.ref($i129, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.1, $p130);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i119);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i132, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p134, $i131);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i127, 1);
    call {:si_unique_call 206} {:cexpr "write_pos"} boogie_si_record_i32($i135);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i128, 1);
    call {:si_unique_call 207} {:cexpr "read_pos"} boogie_si_record_i32($i136);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i128);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p1, $mul.ref($i137, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.1, $p138);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i127);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i140, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p142, $i139);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i136);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p1, $mul.ref($i143, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.1, $p144);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i146 := $sext.i8.i32($i145);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 15);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i148 := $shl.i32($i147, 8);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i136);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i150 := $add.i64($i149, 1);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p1, $mul.ref($i150, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.1, $p151);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i153 := $sext.i8.i32($i152);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i148, $i153);
    call {:si_unique_call 208} {:cexpr "es_info_length"} boogie_si_record_i32($i154);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i136, 2);
    call {:si_unique_call 209} {:cexpr "read_pos"} boogie_si_record_i32($i155);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i156 := $sgt.i32($i154, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i158 := $i154;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i135, 1);
    call {:si_unique_call 211} {:cexpr "write_pos"} boogie_si_record_i32($i159);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i160 := $ashr.i32($i158, 8);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i8($i160);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i135);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i162, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p164, $i161);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i165 := $add.i32($i159, 1);
    call {:si_unique_call 212} {:cexpr "write_pos"} boogie_si_record_i32($i165);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i8($i158);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i159);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i167, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p169, $i166);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i170 := $sgt.i32($i158, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $i190, $i191 := $i155, $i165;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i190, $i2);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i193 := $i191;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i116 := $i193;
    goto $bb21;

  $bb36:
    assume $i192 == 1;
    assume {:verifier.code 0} true;
    $i117, $i118 := $i191, $i190;
    goto $bb36_dummy;

  $bb27:
    assume $i170 == 1;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i171 := $add.i32($i155, 1);
    call {:si_unique_call 213} {:cexpr "read_pos"} boogie_si_record_i32($i171);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i155);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p1, $mul.ref($i172, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.1, $p173);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i175 := $sext.i8.i32($i174);
    call {:si_unique_call 214} {:cexpr "pmt_cmd_id"} boogie_si_record_i32($i175);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 1);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i181 := $sext.i32.i64($i158);
    call {:si_unique_call 216} {:cexpr "__len___0"} boogie_si_record_i64($i181);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i165);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p183, $mul.ref($i184, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i186 := $sext.i32.i64($i171);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p1, $mul.ref($i186, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.1;
    cmdloc_dummy_var_9 := $M.1;
    call {:si_unique_call 217} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p185, $p187, $i181, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_10;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i171, $i158);
    call {:si_unique_call 218} {:cexpr "read_pos"} boogie_si_record_i32($i188);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i189 := $add.i32($i165, $i158);
    call {:si_unique_call 219} {:cexpr "write_pos"} boogie_si_record_i32($i189);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i190, $i191 := $i188, $i189;
    goto $bb35;

  $bb29:
    assume $i176 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i175, 4);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb31;

  $bb32:
    assume $i177 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.1, $p178);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} vslice_dummy_var_35 := dev_err.ref.ref.i32($p179, .str.9, $i175);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i156 == 1;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i157 := $sub.i32($i154, 1);
    call {:si_unique_call 210} {:cexpr "es_info_length"} boogie_si_record_i32($i157);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i158 := $i157;
    goto $bb26;

  $bb10:
    assume $i93 == 1;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i94 := $add.i32(6, 1);
    call {:si_unique_call 195} {:cexpr "read_pos"} boogie_si_record_i32($i94);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64(6);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p1, $mul.ref($i95, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.1, $p96);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i98 := $sext.i8.i32($i97);
    call {:si_unique_call 196} {:cexpr "pmt_cmd_id"} boogie_si_record_i32($i98);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i42);
    call {:si_unique_call 198} {:cexpr "__len"} boogie_si_record_i64($i104);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64(24);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p106, $mul.ref($i107, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i94);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p1, $mul.ref($i109, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.1;
    cmdloc_dummy_var_6 := $M.1;
    call {:si_unique_call 199} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p108, $p110, $i104, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_7;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i94, $i42);
    call {:si_unique_call 200} {:cexpr "read_pos"} boogie_si_record_i32($i111);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i112 := $add.i32(24, $i42);
    call {:si_unique_call 201} {:cexpr "write_pos"} boogie_si_record_i32($i112);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i113, $i114 := $i111, $i112;
    goto $bb18;

  $bb12:
    assume $i99 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i98, 4);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb14;

  $bb15:
    assume $i100 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.1, $p101);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_34 := dev_err.ref.ref.i32($p102, .str.8, $i98);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i39, 1);
    call {:si_unique_call 194} {:cexpr "program_info_length"} boogie_si_record_i32($i41);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb9;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_33 := _dev_info.ref.ref($p27, .str.7);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, 3);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} debug_pmt($p1, $i2);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;
}



const debug_pmt: ref;

axiom debug_pmt == $sub.ref(0, 192999);

procedure debug_pmt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation debug_pmt($p0: ref, $i1: i32)
{
  var $i3: i64;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} {:cexpr "debug_pmt:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_37 := printk.ref.i32(.str.56, $i1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} print_hex_dump(.str.29, .str.57, 0, 16, 1, $p0, $i3, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_28: ref;

axiom ldv_mutex_lock_28 == $sub.ref(0, 194031);

procedure ldv_mutex_lock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} mutex_lock($p0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const crc32_be: ref;

axiom crc32_be == $sub.ref(0, 195063);

procedure crc32_be($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_be($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} {:cexpr "crc32_be:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 234} {:cexpr "crc32_be:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 235} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 236} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pad_operands: ref;

axiom pad_operands == $sub.ref(0, 196095);

procedure pad_operands($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation pad_operands($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "pad_operands:arg:from"} boogie_si_record_i32($i1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 4));
    call {:si_unique_call 238} {:cexpr "to"} boogie_si_record_i32($i3);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i1, $i3);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i3, 508);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} clear_operands($p0, $i1, $i3);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 197127);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} mutex_unlock($p0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const fdtv_ca_app_info: ref;

axiom fdtv_ca_app_info == $sub.ref(0, 198159);

procedure fdtv_ca_app_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation fdtv_ca_app_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(8, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i6 := avc_ca_app_info($p0, $p4, $p5);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 243} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const fdtv_ca_info: ref;

axiom fdtv_ca_info == $sub.ref(0, 199191);

procedure fdtv_ca_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation fdtv_ca_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(8, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i6 := avc_ca_info($p0, $p4, $p5);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 245} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const fdtv_ca_get_mmi: ref;

axiom fdtv_ca_get_mmi == $sub.ref(0, 200223);

procedure fdtv_ca_get_mmi($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation fdtv_ca_get_mmi($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(12, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 268)), $mul.ref(8, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i6 := avc_ca_get_mmi($p0, $p4, $p5);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 247} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const avc_ca_get_mmi: ref;

axiom avc_ca_get_mmi == $sub.ref(0, 201255);

procedure avc_ca_get_mmi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_ca_get_mmi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} ldv_mutex_lock_34($p7);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 1);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 40);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, $i13);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 18);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $sub.i8(0, 121));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 87);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 5);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} clear_operands($p4, 6, 508);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 12);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i29 := avc_write($p0);
    call {:si_unique_call 251} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i31 := get_ca_object_length($p6);
    call {:si_unique_call 254} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i31);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p2);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    call {:si_unique_call 255} {:cexpr "__len"} boogie_si_record_i64($i33);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i34 := get_ca_object_pos($p6);
    call {:si_unique_call 257} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i34);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref($i37, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.1;
    cmdloc_dummy_var_12 := $M.1;
    call {:si_unique_call 258} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p1, $p38, $i33, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_13;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} ldv_mutex_unlock_35($p39);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_34: ref;

axiom ldv_mutex_lock_34 == $sub.ref(0, 202287);

procedure ldv_mutex_lock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} mutex_lock($p0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const get_ca_object_length: ref;

axiom get_ca_object_length == $sub.ref(0, 203319);

procedure get_ca_object_length($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_ca_object_length($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(7, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const get_ca_object_pos: ref;

axiom get_ca_object_pos == $sub.ref(0, 204351);

procedure get_ca_object_pos($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_ca_object_pos($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(7, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 7);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(7, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 127);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    call {:si_unique_call 261} {:cexpr "length"} boogie_si_record_i32($i11);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 205383);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} mutex_unlock($p0);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const avc_ca_info: ref;

axiom avc_ca_info == $sub.ref(0, 206415);

procedure avc_ca_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_ca_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var $i46: i8;
  var $p47: ref;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i56: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} ldv_mutex_lock_24($p7);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 40);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, $i13);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 18);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $sub.i8(0, 121));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 87);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} clear_operands($p4, 6, 508);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 12);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i29 := avc_write($p0);
    call {:si_unique_call 267} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i31 := get_ca_object_pos($p6);
    call {:si_unique_call 270} {:cexpr "pos"} boogie_si_record_i32($i31);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, $sub.i8(0, 97));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, $sub.i8(0, 128));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, 49);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i34 := $M.25;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i48 := $M.25;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i50, 2);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p53, $i52);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i54 := $M.25;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32(0, $i54);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.1, $p77);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i79 := $sext.i8.i32($i78);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, 4);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i80);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} ldv_mutex_unlock_25($p81);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i55 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb11;

  $bb11:
    call $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $p65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $i56 := avc_ca_info_loop_$bb11($p1, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $p65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $i56);
    goto $bb11_last;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref(fake_ca_system_ids, $mul.ref(0, 16)), $mul.ref($i57, 4));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.26, $p58);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i60 := $ashr.i32($i59, 8);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i56, 2);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i62, 2);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p1, $mul.ref($i64, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p65, $i61);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i56);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref(fake_ca_system_ids, $mul.ref(0, 16)), $mul.ref($i66, 4));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.26, $p67);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i56, 2);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 5);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p1, $mul.ref($i72, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p73, $i69);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i56, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i75 := $M.25;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i76 := $ult.i32($i74, $i75);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i76 == 1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i56 := $i74;
    goto $bb13_dummy;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, 2);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i31);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i37, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, $i40);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i31, 1);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i43, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p47, $i46);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1778;
}



const ldv_mutex_lock_24: ref;

axiom ldv_mutex_lock_24 == $sub.ref(0, 207447);

procedure ldv_mutex_lock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} mutex_lock($p0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 208479);

procedure ldv_mutex_unlock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} mutex_unlock($p0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const avc_ca_app_info: ref;

axiom avc_ca_app_info == $sub.ref(0, 209511);

procedure avc_ca_app_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_ca_app_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} ldv_mutex_lock_22($p7);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 40);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, $i13);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 18);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $sub.i8(0, 121));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 87);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 1);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} clear_operands($p4, 6, 508);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 12);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i29 := avc_write($p0);
    call {:si_unique_call 279} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i31 := get_ca_object_pos($p6);
    call {:si_unique_call 282} {:cexpr "pos"} boogie_si_record_i32($i31);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, $sub.i8(0, 97));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, $sub.i8(0, 128));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, 33);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i31, 4);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i35, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 6);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p42, $i41);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p43, 1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i31, 4);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i45, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 5);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    call {:si_unique_call 283} {:cexpr "__len"} boogie_si_record_i64($i51);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i31);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p54, $mul.ref($i55, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.1;
    cmdloc_dummy_var_15 := $M.1;
    call {:si_unique_call 284} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p52, $p56, $i51, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_16;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i59 := $sext.i8.i32($i58);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, 4);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i60);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} ldv_mutex_unlock_23($p61);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 210543);

procedure ldv_mutex_lock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} mutex_lock($p0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 211575);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} mutex_unlock($p0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const fdtv_get_ca_flags: ref;

axiom fdtv_get_ca_flags == $sub.ref(0, 212607);

procedure fdtv_get_ca_flags($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_get_ca_flags($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(19, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.5, $p2);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.5, $p9);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i24 := $i7;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(19, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.5, $p14);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(19, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.5, $p19);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i7, 2);
    call {:si_unique_call 290} {:cexpr "flags"} boogie_si_record_i32($i23);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i6 := $or.i32(0, 1);
    call {:si_unique_call 289} {:cexpr "flags"} boogie_si_record_i32($i6);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 213639);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} mutex_lock($p0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 214671);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} mutex_unlock($p0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 215703);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 295} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 296} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 297} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 298} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fdtv_ca_io_poll: ref;

axiom fdtv_ca_io_poll == $sub.ref(0, 216735);

procedure fdtv_ca_io_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_ca_io_poll($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const dvb_generic_ioctl: ref;

axiom dvb_generic_ioctl == $sub.ref(0, 217767);

procedure dvb_generic_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation dvb_generic_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} {:cexpr "dvb_generic_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 300} {:cexpr "dvb_generic_ioctl:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 1} true;
    call {:si_unique_call 301} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 302} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dvb_generic_open: ref;

axiom dvb_generic_open == $sub.ref(0, 218799);

procedure dvb_generic_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_generic_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 1} true;
    call {:si_unique_call 303} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dvb_generic_release: ref;

axiom dvb_generic_release == $sub.ref(0, 219831);

procedure dvb_generic_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_generic_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 305} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 306} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const node_probe: ref;

axiom node_probe == $sub.ref(0, 220863);

procedure node_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.28, assertsPassed, $M.38, $M.37, $M.30, $M.33, $M.34, $M.35;



implementation node_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i54: i32;
  var $p63: ref;
  var $i50: i32;
  var $p64: ref;
  var $i11: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $i71: i1;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $i78: i1;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i85: i1;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p1 := $alloc($mul.ref(13, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p7 := kzalloc(4016, 208);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p8);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_38 := dev_set_drvdata($p0, $p12);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $p0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3269, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, $sub.i8(0, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3280, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, 255);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3284, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, 255);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __mutex_init($p18, .str.66, $p2);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3080, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __init_waitqueue_head($p19, .str.67, $p3);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3288, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} __mutex_init($p20, .str.68, $p4);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3176, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} __init_work($p21, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p22, 4195328);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3176, 1)), $mul.ref(0, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p6);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.1;
    cmdloc_dummy_var_18 := $M.1;
    call {:si_unique_call 319} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p25, $p26, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_19;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3176, 1)), $mul.ref(32, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} lockdep_init_map($p28, .str.69, $p5, 0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3176, 1)), $mul.ref(8, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} INIT_LIST_HEAD($p30);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3176, 1)), $mul.ref(24, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p32, avc_remote_ctrl_work);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p33 := fw_unit($p0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1296)), $mul.ref(1144, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i37 := fw_csr_string($p35, 23, $p36, 13);
    call {:si_unique_call 324} {:cexpr "name_len"} boogie_si_record_i32($i37);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i38 := strlen(.str.74);
    call {:si_unique_call 326} {:cexpr "tmp___1"} boogie_si_record_i64($i38);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i37);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i40 := $ule.i64($i38, $i39);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i65 := strlen(.str.73);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i37);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i67 := $ule.i64($i65, $i66);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i72 := strlen(.str.72);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i37);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i74 := $ule.i64($i72, $i73);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i79 := strlen(.str.71);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i37);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i81 := $ule.i64($i79, $i80);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, $i46);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i48 := fdtv_register_rc($p8, $p0);
    call {:si_unique_call 330} {:cexpr "err"} boogie_si_record_i32($i48);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} spin_lock_irq(node_list_lock);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} list_add_tail($p51, node_list);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} spin_unlock_irq(node_list_lock);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i52 := avc_identify_subunit($p8);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 337} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref(model_names, $mul.ref(0, 40)), $mul.ref($i57, 8));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.27, $p58);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i60 := fdtv_dvb_register($p8, $p59);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 343} {:cexpr "err"} boogie_si_record_i32($i60);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_39 := avc_register_remote_control($p8);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i61 == 1;
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i54 := $i60;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} spin_lock_irq(node_list_lock);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 4016)), $mul.ref(8, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} list_del($p63);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} spin_unlock_irq(node_list_lock);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} fdtv_unregister_rc($p8);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i50 := $i54;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p8);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} kfree($p64);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i11 := $i50;
    goto $bb3;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i53 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb22;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    goto $bb18;

  $bb41:
    assume $i81 == 1;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i37);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i84 := strncmp($p82, .str.71, $i83);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i45 := 1;
    assume {:branchcond $i85} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb12;

  $bb34:
    assume $i74 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p1);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i37);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i77 := strncmp($p75, .str.72, $i76);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i45 := 2;
    assume {:branchcond $i78} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb10;

  $bb27:
    assume $i67 == 1;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i37);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i70 := strncmp($p68, .str.73, $i69);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i45 := 3;
    assume {:branchcond $i71} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb10;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i37);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i43 := strncmp($p41, .str.74, $i42);
    call {:si_unique_call 328} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i45 := 4;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb10;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const node_remove: ref;

axiom node_remove == $sub.ref(0, 221895);

procedure node_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $M.38, $M.37, $M.30, $CurrAddr, $M.24, $M.4, assertsPassed, $M.33, $M.34, $M.35;



implementation node_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} fdtv_dvb_unregister($p2);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} spin_lock_irq(node_list_lock);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4016)), $mul.ref(8, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} list_del($p3);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} spin_unlock_irq(node_list_lock);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} fdtv_unregister_rc($p2);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} kfree($p4);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const node_update: ref;

axiom node_update == $sub.ref(0, 222927);

procedure node_update($p0: ref);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation node_update($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1296)), $mul.ref(0, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3269, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i6, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3269, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_40 := cmp_establish_pp_connection($p3, $i10, $i13);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 223959);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p1 := external_alloc();
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const cmp_establish_pp_connection: ref;

axiom cmp_establish_pp_connection == $sub.ref(0, 224991);

procedure cmp_establish_pp_connection($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation cmp_establish_pp_connection($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i15: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i10: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 361} {:cexpr "cmp_establish_pp_connection:arg:plug"} boogie_si_record_i32($i1);
    call {:si_unique_call 362} {:cexpr "cmp_establish_pp_connection:arg:channel"} boogie_si_record_i32($i2);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 2);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 281474708277508);
    call {:si_unique_call 363} {:cexpr "opcr_address"} boogie_si_record_i64($i6);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i8 := cmp_read($p0, $i6, $p7);
    call {:si_unique_call 365} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.28, $p11);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i13 := get_opcr($i12, 1, 31);
    call {:si_unique_call 367} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    call $i16, $i17, $i18, $i19, $i15, $p23, $i24, $p25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $p36, $p37, $p39, $p40, $p41, $p42, $i43, $i44, $p45, $i46, $p47, $i48, $p49, $p50, $p51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, vslice_dummy_var_43 := cmp_establish_pp_connection_loop_$bb8($p0, $i2, $p3, $i6, $p11, $i16, $i17, $i18, $i19, $i15, $p23, $i24, $p25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $p36, $p37, $p39, $p40, $p41, $p42, $i43, $i44, $p45, $i46, $p47, $i48, $p49, $p50, $p51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, vslice_dummy_var_43);
    goto $bb8_last;

  $bb12:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.28, $p23);
    call {:si_unique_call 371} {:cexpr "old_opcr"} boogie_si_record_i32($i24);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p3);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.28, $p25);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i27 := get_opcr($i26, 63, 24);
    call {:si_unique_call 373} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p3);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} set_opcr($p39, $i2, 63, 16);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p3);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} set_opcr($p40, 2, 3, 14);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} set_opcr($p41, 0, 15, 10);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.28, $p42);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i44 := get_opcr($i43, 63, 24);
    call {:si_unique_call 382} {:cexpr "tmp___2"} boogie_si_record_i32($i44);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p3);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i44, 1);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} set_opcr($p45, $i46, 63, 24);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p3);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.28, $p47);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p49, $i48);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p50, $i24);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p3);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i52 := cmp_lock($p0, $i6, $p51);
    call {:si_unique_call 385} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p3);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.28, $p55);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, $i24);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb22:
    assume $i57 == 1;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i15, 1);
    call {:si_unique_call 386} {:cexpr "attempts"} boogie_si_record_i32($i58);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i59 := $sle.i32($i58, 5);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i16 := $i58;
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb9:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.28, $p11);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i18 := get_opcr($i17, 1, 31);
    call {:si_unique_call 370} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb11_dummy;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_41 := dev_err.ref.ref($p21, .str.11);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb19:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i10 := $i54;
    goto $bb3;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.28, $p29);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i31 := get_opcr($i30, 63, 16);
    call {:si_unique_call 375} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, $i2);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_43 := _dev_info.ref.ref($p37, .str.13);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_42 := dev_err.ref.ref($p34, .str.12);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;
}



const cmp_read: ref;

axiom cmp_read == $sub.ref(0, 226023);

procedure cmp_read($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cmp_read($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "cmp_read:arg:addr"} boogie_si_record_i64($i1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i4 := fdtv_read($p0, $i1, $p3);
    call {:si_unique_call 389} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_44 := dev_err.ref.ref($p7, .str.58);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_opcr: ref;

axiom get_opcr == $sub.ref(0, 227055);

procedure get_opcr($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation get_opcr($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} {:cexpr "get_opcr:arg:opcr"} boogie_si_record_i32($i0);
    call {:si_unique_call 392} {:cexpr "get_opcr:arg:mask"} boogie_si_record_i32($i1);
    call {:si_unique_call 393} {:cexpr "get_opcr:arg:shift"} boogie_si_record_i32($i2);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i3 := __fswab32($i0);
    call {:si_unique_call 395} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i3, $i2);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $i1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const set_opcr: ref;

axiom set_opcr == $sub.ref(0, 228087);

procedure set_opcr($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.28;



implementation set_opcr($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} {:cexpr "set_opcr:arg:value"} boogie_si_record_i32($i1);
    call {:si_unique_call 397} {:cexpr "set_opcr:arg:mask"} boogie_si_record_i32($i2);
    call {:si_unique_call 398} {:cexpr "set_opcr:arg:shift"} boogie_si_record_i32($i3);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i2, $i3);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i5 := __fswab32($i4);
    call {:si_unique_call 400} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.28, $p0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i7 := $xor.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i6, $i7);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p0, $i8);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i1, $i2);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, $i3);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i11 := __fswab32($i10);
    call {:si_unique_call 402} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.28, $p0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $i11);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p0, $i13);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    return;
}



const cmp_lock: ref;

axiom cmp_lock == $sub.ref(0, 229119);

procedure cmp_lock($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cmp_lock($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "cmp_lock:arg:addr"} boogie_si_record_i64($i1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i4 := fdtv_lock($p0, $i1, $p3);
    call {:si_unique_call 405} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vslice_dummy_var_45 := dev_err.ref.ref($p7, .str.59);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fdtv_lock: ref;

axiom fdtv_lock == $sub.ref(0, 230151);

procedure fdtv_lock($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_lock($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "fdtv_lock:arg:addr"} boogie_si_record_i64($i1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i3 := node_req($p0, $i1, $p2, 8, 18);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 231183);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i1 := __arch_swab32($i0);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 232215);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 414} $i1 := devirtbounce.2(0, $i0);
    call {:si_unique_call 415} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fdtv_read: ref;

axiom fdtv_read == $sub.ref(0, 233247);

procedure fdtv_read($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_read($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} {:cexpr "fdtv_read:arg:addr"} boogie_si_record_i64($i1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i3 := node_req($p0, $i1, $p2, 4, 4);
    call {:si_unique_call 418} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 234279);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 419} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 420} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fdtv_dvb_unregister: ref;

axiom fdtv_dvb_unregister == $sub.ref(0, 235311);

procedure fdtv_dvb_unregister($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $M.38, $M.37, $M.30, $CurrAddr, $M.24, $M.4, assertsPassed, $M.33, $M.34, $M.35;



implementation fdtv_dvb_unregister($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} fdtv_ca_release($p0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_46 := dvb_unregister_frontend($p1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1760, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} dvb_net_release($p3);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    call {:si_unique_call 424} vslice_dummy_var_47 := devirtbounce.3($p7, $p9);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1736, 1));
    call {:si_unique_call 425} vslice_dummy_var_48 := devirtbounce.4($p14, $p16, $p17);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(288, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} dvb_dmxdev_release($p19);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} dvb_dmx_release($p20);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(24, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_49 := dvb_unregister_adapter($p21);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 236343);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} _raw_spin_lock_irq($p2);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 237375);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 238407);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    return;
}



const fdtv_unregister_rc: ref;

axiom fdtv_unregister_rc == $sub.ref(0, 239439);

procedure fdtv_unregister_rc($p0: ref);
  free requires assertsPassed;



implementation fdtv_unregister_rc($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_50: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3176, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_50 := cancel_work_sync($p1);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3256, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2024)), $mul.ref(224, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} kfree($p6);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3256, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} input_unregister_device($p8);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 240471);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} free_($p0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 241503);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 435} $free($p0);
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 242535);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 1} true;
    call {:si_unique_call 436} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 437} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const input_unregister_device: ref;

axiom input_unregister_device == $sub.ref(0, 243567);

procedure input_unregister_device($p0: ref);
  free requires assertsPassed;



implementation input_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 244599);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 245631);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    return;
}



const fdtv_ca_release: ref;

axiom fdtv_ca_release == $sub.ref(0, 246663);

procedure fdtv_ca_release($p0: ref);
  free requires assertsPassed;



implementation fdtv_ca_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2896, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2896, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} dvb_unregister_device($p6);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dvb_unregister_frontend: ref;

axiom dvb_unregister_frontend == $sub.ref(0, 247695);

procedure dvb_unregister_frontend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_unregister_frontend($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 439} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 440} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_net_release: ref;

axiom dvb_net_release == $sub.ref(0, 248727);

procedure dvb_net_release($p0: ref);
  free requires assertsPassed;



implementation dvb_net_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    return;
}



const dvb_dmxdev_release: ref;

axiom dvb_dmxdev_release == $sub.ref(0, 249759);

procedure dvb_dmxdev_release($p0: ref);
  free requires assertsPassed;



implementation dvb_dmxdev_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    return;
}



const dvb_dmx_release: ref;

axiom dvb_dmx_release == $sub.ref(0, 250791);

procedure dvb_dmx_release($p0: ref);
  free requires assertsPassed;



implementation dvb_dmx_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    return;
}



const dvb_unregister_adapter: ref;

axiom dvb_unregister_adapter == $sub.ref(0, 251823);

procedure dvb_unregister_adapter($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_unregister_adapter($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 441} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 442} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_unregister_device: ref;

axiom dvb_unregister_device == $sub.ref(0, 252855);

procedure dvb_unregister_device($p0: ref);
  free requires assertsPassed;



implementation dvb_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 253887);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 444} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 254919);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 446} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 447} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 255951);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 256983);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 258015);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 259047);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 260079);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    return;
}



const avc_remote_ctrl_work: ref;

axiom avc_remote_ctrl_work == $sub.ref(0, 261111);

procedure avc_remote_ctrl_work($p0: ref);



const fw_unit: ref;

axiom fw_unit == $sub.ref(0, 262143);

procedure fw_unit($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fw_unit($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const fw_csr_string: ref;

axiom fw_csr_string == $sub.ref(0, 263175);

procedure fw_csr_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fw_csr_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 450} {:cexpr "fw_csr_string:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 451} {:cexpr "fw_csr_string:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 452} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 453} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 264207);

procedure strlen($p0: ref) returns ($r: i64);



const strncmp: ref;

axiom strncmp == $sub.ref(0, 265239);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const fdtv_register_rc: ref;

axiom fdtv_register_rc == $sub.ref(0, 266271);

procedure fdtv_register_rc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation fdtv_register_rc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i21: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i18: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p2 := input_allocate_device();
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3256, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $p2);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(0, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str.24);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(824, 1)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p1);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(40, 1)), $mul.ref(0, 8));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p11, 2);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $p12 := kmemdup(keytable, 106, 208);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(224, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p12);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(224, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(216, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 2);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(212, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, 53);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb9;

  $bb9:
    call $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $i21 := fdtv_register_rc_loop_$bb9($p2, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $i21);
    goto $bb9_last;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref($i22, 2));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.29, $p23);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(48, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} set_bit($i25, $p27);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i21, 1);
    call {:si_unique_call 458} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i29 := $ule.i32($i28, 52);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i30 := input_register_device($p2);
    call {:si_unique_call 460} {:cexpr "err"} boogie_si_record_i32($i30);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 2024)), $mul.ref(224, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} kfree($p33);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i18 := $i30;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} input_free_device($p2);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb3;

  $bb11:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i28;
    goto $bb11_dummy;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2398;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 267303);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} __list_add($p0, $p3, $p1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    return;
}



const avc_identify_subunit: ref;

axiom avc_identify_subunit == $sub.ref(0, 268335);

procedure avc_identify_subunit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_identify_subunit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i54: i32;
  var $i31: i32;
  var $p55: ref;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} ldv_mutex_lock_14($p5);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 40);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, $i11);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 9);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $sub.i8(0, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 8);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(6, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 13);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} clear_operands($p2, 7, 8);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 12);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i29 := avc_write($p0);
    call {:si_unique_call 466} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 12);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i44 := $shl.i32($i43, 8);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i44, $i48);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 8);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i31 := $i54;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} ldv_mutex_unlock_15($p55);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_51 := dev_err.ref.ref($p52, .str.3);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 22);
    goto $bb13;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 9);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb7;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb9;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb3;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const fdtv_dvb_register: ref;

axiom fdtv_dvb_register == $sub.ref(0, 269367);

procedure fdtv_dvb_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.28, $M.19, $M.20, $M.21, $M.22, $M.23, $M.38, $M.37, $M.30, $CurrAddr, $M.24, $M.4, assertsPassed, $M.33, $M.34, $M.35;



implementation fdtv_dvb_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p10: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $i69: i32;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $i62: i32;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $i52: i32;
  var $p96: ref;
  var $i40: i32;
  var $p97: ref;
  var $i27: i32;
  var $p98: ref;
  var $i7: i32;
  var $p100: ref;
  var $p101: ref;
  var $i79: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(24, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i5 := dvb_register_adapter($p2, $p1, __this_module, $p4, adapter_nr);
    call {:si_unique_call 470} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(152, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p0);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(160, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, 16);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(164, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, 16);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(168, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, fdtv_start_feed);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(176, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, fdtv_stop_feed);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(184, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, $0.ref);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i25 := dvb_dmx_init($p24);
    call {:si_unique_call 473} {:cexpr "err"} boogie_si_record_i32($i25);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(288, 1)), $mul.ref(32, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, 16);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(288, 1)), $mul.ref(24, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $p31);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(288, 1)), $mul.ref(36, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, 0);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(288, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(24, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i38 := dvb_dmxdev_init($p36, $p37);
    call {:si_unique_call 476} {:cexpr "err"} boogie_si_record_i32($i38);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1736, 1)), $mul.ref(16, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p42, 1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1736, 1));
    call {:si_unique_call 478} $i50 := devirtbounce.4($p46, $p48, $p49);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 479} {:cexpr "err"} boogie_si_record_i32($i50);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1736, 1));
    call {:si_unique_call 481} $i60 := devirtbounce.4($p56, $p58, $p59);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 482} {:cexpr "err"} boogie_si_record_i32($i60);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(24, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1760, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i67 := dvb_net_init($p63, $p64, $p66);
    call {:si_unique_call 485} {:cexpr "err"} boogie_si_record_i32($i67);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} fdtv_frontend_init($p0, $p1);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(24, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i72 := dvb_register_frontend($p70, $p71);
    call {:si_unique_call 489} {:cexpr "err"} boogie_si_record_i32($i72);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i74 := fdtv_ca_register($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 492} {:cexpr "err"} boogie_si_record_i32($i74);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $r := $i79;
    return;

  $bb29:
    assume $i75 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_56 := _dev_info.ref.ref($p77, .str.21);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i73 == 1;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1760, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} dvb_net_release($p80);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i69 := $i72;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    call {:si_unique_call 486} vslice_dummy_var_55 := devirtbounce.3($p84, $p86);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i62 := $i69;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1736, 1));
    call {:si_unique_call 483} vslice_dummy_var_54 := devirtbounce.4($p91, $p93, $p94);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i52 := $i62;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(288, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} dvb_dmxdev_release($p96);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i40 := $i52;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(784, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} dvb_dmx_release($p97);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i27 := $i40;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(24, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_53 := dvb_unregister_adapter($p98);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_52 := dev_err.ref.ref($p101, .str.22);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i79 := $i7;
    goto $bb32;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i68 == 1;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb23;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    goto $bb19;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i52 := $i50;
    goto $bb15;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb11;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const avc_register_remote_control: ref;

axiom avc_register_remote_control == $sub.ref(0, 270399);

procedure avc_register_remote_control($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_register_remote_control($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} ldv_mutex_lock_20($p3);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 3);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, $sub.i8(0, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 18);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, $sub.i8(0, 121));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 10);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 0);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, 8);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i18 := avc_write($p0);
    call {:si_unique_call 496} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} ldv_mutex_unlock_21($p19);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 271431);

procedure ldv_mutex_lock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} mutex_lock($p0);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 272463);

procedure ldv_mutex_unlock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} mutex_unlock($p0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const dvb_register_adapter: ref;

axiom dvb_register_adapter == $sub.ref(0, 273495);

procedure dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 502} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 503} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const fdtv_start_feed: ref;

axiom fdtv_start_feed == $sub.ref(0, 274527);

procedure fdtv_start_feed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.38, $M.37, $M.30, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, assertsPassed, $M.24, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5;



implementation fdtv_start_feed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i43: i32;
  var $i42: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i66: i32;
  var $i41: i32;
  var $p77: ref;
  var $i18: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4384, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 952)), $mul.ref(152, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4400, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4400, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vslice_dummy_var_57 := dev_err.ref.ref.i32($p14, .str.16, $i16);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(3288, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i20 := ldv_mutex_lock_interruptible_92($p19);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 507} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4400, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i43 := alloc_channel($p7);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 510} {:cexpr "c"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    $i42 := $i43;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i42, 15);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i42);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4392, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, $p49);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4408, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.1, $p51);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i42);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref($i53, 2));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p55, $i52);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} collect_channels($p7, $p1, $p56);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4408, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.1, $p57);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 8192);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i60 == 1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.30, $p1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p2);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i72 := avc_tuner_set_pids($p7, $i70, $p71);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 520} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i66 := $i72;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i41 := $i66;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(3288, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} ldv_mutex_unlock_93($p77);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i18 := $i41;
    goto $bb12;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i73 == 1;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} dealloc_channel($p7, $i42);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_61 := dev_err.ref.ref($p75, .str.20);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i41 := $i72;
    goto $bb42;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i60 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i61 := avc_tuner_get_ts($p7);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 518} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i66 := $i61;
    goto $bb52;

  $bb49:
    assume $i62 == 1;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} dealloc_channel($p7, $i42);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_60 := dev_err.ref.ref($p64, .str.19);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i41 := $i61;
    goto $bb42;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i44 == 1;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_59 := dev_err.ref.ref($p46, .str.18);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 16);
    goto $bb42;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4460, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i26, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb25, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4460, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_58 := dev_err.ref.ref.i32($p37, .str.17, $i39);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 22);
    goto $bb42;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i35 := alloc_channel($p7);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 512} {:cexpr "c"} boogie_si_record_i32($i35);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i42 := $i35;
    goto $bb43;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb28;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i26, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i33 == 1);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb35:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb37, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb28;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb38;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 4);
    goto $bb12;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fdtv_stop_feed: ref;

axiom fdtv_stop_feed == $sub.ref(0, 275559);

procedure fdtv_stop_feed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.37, $M.30, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.38, $M.24, $M.4, assertsPassed;



implementation fdtv_stop_feed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4384, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 952)), $mul.ref(152, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4400, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(3288, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i64 := ldv_mutex_lock_interruptible_94($p63);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 528} {:cexpr "tmp"} boogie_si_record_i32($i64);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4392, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i64.i32($i68);
    call {:si_unique_call 529} {:cexpr "c"} boogie_si_record_i32($i69);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} dealloc_channel($p7, $i69);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p2);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} collect_channels($p7, $p1, $p70);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.30, $p1);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p2);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i76 := avc_tuner_set_pids($p7, $i74, $p75);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 533} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 4016)), $mul.ref(3288, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ldv_mutex_unlock_95($p77);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i36 := $i76;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 4);
    goto $bb16;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4456, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 952)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4456, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4456, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 4);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i59 == 1);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4460, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i32($i61, 19);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb16;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb20;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4460, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, 19);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4460, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 952)), $mul.ref(248, 1)), $mul.ref($i30, 8));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4460, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 952)), $mul.ref(408, 1)), $mul.ref($i39, 2));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.1, $p41);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 32768);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4460, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 952)), $mul.ref(408, 1)), $mul.ref($i48, 2));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p50, $i45);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4460, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 952)), $mul.ref(248, 1)), $mul.ref($i53, 8));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, $0.ref);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb5;
}



const dvb_dmx_init: ref;

axiom dvb_dmx_init == $sub.ref(0, 276591);

procedure dvb_dmx_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_dmx_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 535} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 536} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_dmxdev_init: ref;

axiom dvb_dmxdev_init == $sub.ref(0, 277623);

procedure dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 537} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 538} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dvb_net_init: ref;

axiom dvb_net_init == $sub.ref(0, 278655);

procedure dvb_net_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_net_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 539} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 540} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fdtv_frontend_init: ref;

axiom fdtv_frontend_init == $sub.ref(0, 279687);

procedure fdtv_frontend_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation fdtv_frontend_init($p0: ref, $p1: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p69: ref;
  var vslice_dummy_var_62: ref;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, fdtv_dvb_init);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, fdtv_sleep);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(232, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, fdtv_set_frontend);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, fdtv_read_status);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, fdtv_read_ber);
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, fdtv_read_signal_strength);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, fdtv_read_snr);
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, fdtv_read_uncorrected_blocks);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(304, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, fdtv_diseqc_send_master_cmd);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(320, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, fdtv_diseqc_send_burst);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(328, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, fdtv_set_tone);
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(336, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, fdtv_set_voltage);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_63 := dev_err.ref.ref.i32($p57, .str.23, $i59);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p61 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_62 := strcpy($p62, $p1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(24, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(768, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p66, $p64);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(800, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, $p0);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i21 == 1;
    $p33 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, 5);
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(168, 1)), $mul.ref(1, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, 6);
    $p36 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(132, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p36, 950000);
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, 2150000);
    $p38 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(140, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p38, 125);
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(148, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p39, 1000000);
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 40000000);
    $p41 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(164, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p41, 268437167);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i20 == 1;
    $p51 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, 3);
    $p52 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(132, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, 49000000);
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, 861000000);
    $p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(140, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p54, 62500);
    $p55 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(164, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, 1703941);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i18, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    $p43 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p43, 1);
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(132, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 47000000);
    $p45 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, 866000000);
    $p46 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(140, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p46, 62500);
    $p47 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(148, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, 870000);
    $p48 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p48, 6900000);
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(164, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p49, 129025);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb11:
    assume $i23 == 1;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 5);
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(132, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, 950000);
    $p27 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, 2150000);
    $p28 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(140, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 125);
    $p29 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(148, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, 1000000);
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, 40000000);
    $p31 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(164, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, 1711);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const dvb_register_frontend: ref;

axiom dvb_register_frontend == $sub.ref(0, 280719);

procedure dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 1} true;
    call {:si_unique_call 543} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 544} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fdtv_ca_register: ref;

axiom fdtv_ca_register == $sub.ref(0, 281751);

procedure fdtv_ca_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.4, assertsPassed;



implementation fdtv_ca_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i4: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p1 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i2 := avc_tuner_status($p0, $p1);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 547} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i5 := fdtv_ca_ready($p1);
    call {:si_unique_call 549} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(24, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2896, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i10 := dvb_register_device($p7, $p8, fdtv_ca, $p9, 6);
    call {:si_unique_call 551} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(19, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(19, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.5, $p20);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i4 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2908, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_65 := avc_ca_get_time_date($p0, $p24);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_64 := dev_err.ref.ref($p17, .str.15);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const fdtv_ca_ready: ref;

axiom fdtv_ca_ready == $sub.ref(0, 282783);

procedure fdtv_ca_ready($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_ca_ready($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i6: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(19, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.5, $p2);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i6);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(19, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.5, $p8);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(19, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.5, $p13);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(19, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.5, $p18);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    assume {:verifier.code 0} true;
    $i6 := $i21;
    goto $bb3;
}



const dvb_register_device: ref;

axiom dvb_register_device == $sub.ref(0, 283815);

procedure dvb_register_device($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_device($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 554} {:cexpr "dvb_register_device:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 1} true;
    call {:si_unique_call 555} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 556} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const avc_ca_get_time_date: ref;

axiom avc_ca_get_time_date == $sub.ref(0, 284847);

procedure avc_ca_get_time_date($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_ca_get_time_date($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} ldv_mutex_lock_30($p6);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, 1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 40);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i12);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, 18);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $sub.i8(0, 121));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, 87);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 0);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, 4);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} clear_operands($p3, 6, 508);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, 12);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i28 := avc_write($p0);
    call {:si_unique_call 560} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i30 := get_ca_object_pos($p5);
    call {:si_unique_call 563} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i31, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, $i35);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} ldv_mutex_unlock_31($p36);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_30: ref;

axiom ldv_mutex_lock_30 == $sub.ref(0, 285879);

procedure ldv_mutex_lock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} mutex_lock($p0);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 286911);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} mutex_unlock($p0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const fdtv_dvb_init: ref;

axiom fdtv_dvb_init == $sub.ref(0, 287943);

procedure fdtv_dvb_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.28, $CurrAddr, $M.33, $M.34, $M.35;



implementation fdtv_dvb_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i21: i32;
  var $i20: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3269, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $i7);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3269, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i15 := cmp_establish_pp_connection($p3, $i11, $i14);
    call {:si_unique_call 569} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i21 := fdtv_start_iso($p3);
    call {:si_unique_call 572} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_66 := dev_err.ref.ref($p18, .str.63);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i20 := $i15;
    goto $bb3;
}



const fdtv_sleep: ref;

axiom fdtv_sleep == $sub.ref(0, 288975);

procedure fdtv_sleep($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.28, $CurrAddr;



implementation fdtv_sleep($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} fdtv_stop_iso($p3);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3269, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} cmp_break_pp_connection($p3, $i6, $i9);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4016)), $mul.ref(3269, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $sub.i8(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fdtv_set_frontend: ref;

axiom fdtv_set_frontend == $sub.ref(0, 290007);

procedure fdtv_set_frontend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation fdtv_set_frontend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(816, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i5 := avc_tuner_dsd($p4, $p1);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 576} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const fdtv_read_status: ref;

axiom fdtv_read_status == $sub.ref(0, 291039);

procedure fdtv_read_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.4, assertsPassed;



implementation fdtv_read_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i6 := avc_tuner_status($p5, $p2);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 579} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(1, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.7, $p10);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, 31);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const fdtv_read_ber: ref;

axiom fdtv_read_ber == $sub.ref(0, 292071);

procedure fdtv_read_ber($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.4, assertsPassed;



implementation fdtv_read_ber($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i6 := avc_tuner_status($p5, $p2);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.9, $p9);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, $i10);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const fdtv_read_signal_strength: ref;

axiom fdtv_read_signal_strength == $sub.ref(0, 293103);

procedure fdtv_read_signal_strength($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.4, assertsPassed;



implementation fdtv_read_signal_strength($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i6 := avc_tuner_status($p5, $p2);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 585} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.10, $p9);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i16($i10);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 8);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, $i14);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const fdtv_read_snr: ref;

axiom fdtv_read_snr == $sub.ref(0, 294135);

procedure fdtv_read_snr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.4, assertsPassed;



implementation fdtv_read_snr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i6 := avc_tuner_status($p5, $p2);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(14, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.14, $p9);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 257);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, $i13);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const fdtv_read_uncorrected_blocks: ref;

axiom fdtv_read_uncorrected_blocks == $sub.ref(0, 295167);

procedure fdtv_read_uncorrected_blocks($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_read_uncorrected_blocks($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const fdtv_diseqc_send_master_cmd: ref;

axiom fdtv_diseqc_send_master_cmd == $sub.ref(0, 296199);

procedure fdtv_diseqc_send_master_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation fdtv_diseqc_send_master_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i5 := avc_lnb_control($p4, $sub.i8(0, 1), $sub.i8(0, 1), $sub.i8(0, 1), 1, $p1);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const fdtv_diseqc_send_burst: ref;

axiom fdtv_diseqc_send_burst == $sub.ref(0, 297231);

procedure fdtv_diseqc_send_burst($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_diseqc_send_burst($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "fdtv_diseqc_send_burst:arg:minicmd"} boogie_si_record_i32($i1);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fdtv_set_tone: ref;

axiom fdtv_set_tone == $sub.ref(0, 298263);

procedure fdtv_set_tone($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation fdtv_set_tone($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "fdtv_set_tone:arg:tone"} boogie_si_record_i32($i1);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4016)), $mul.ref(3284, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, $i1);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fdtv_set_voltage: ref;

axiom fdtv_set_voltage == $sub.ref(0, 299295);

procedure fdtv_set_voltage($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation fdtv_set_voltage($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} {:cexpr "fdtv_set_voltage:arg:voltage"} boogie_si_record_i32($i1);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(800, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4016)), $mul.ref(3280, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, $i1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 300327);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const avc_lnb_control: ref;

axiom avc_lnb_control == $sub.ref(0, 301359);

procedure avc_lnb_control($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_lnb_control($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i51: i32;
  var $i52: i32;
  var $i67: i32;
  var $i50: i32;
  var $i68: i32;
  var $i69: i1;
  var $i34: i32;
  var $i35: i32;
  var $i70: i32;
  var $i33: i32;
  var $i71: i32;
  var $i72: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i84: i32;
  var $p93: ref;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "avc_lnb_control:arg:voltage"} boogie_si_record_i8($i1);
    call {:si_unique_call 595} {:cexpr "avc_lnb_control:arg:burst"} boogie_si_record_i8($i2);
    call {:si_unique_call 596} {:cexpr "avc_lnb_control:arg:conttone"} boogie_si_record_i8($i3);
    call {:si_unique_call 597} {:cexpr "avc_lnb_control:arg:nrdiseq"} boogie_si_record_i8($i4);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} ldv_mutex_lock_18($p10);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 40);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $i16);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, 18);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, $sub.i8(0, 121));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, 82);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, $i1);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, $i4);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i4);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i33 := 6;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i33, 1);
    call {:si_unique_call 603} {:cexpr "pos"} boogie_si_record_i32($i71);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i33);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i72, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p74, $i2);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i71, 1);
    call {:si_unique_call 604} {:cexpr "pos"} boogie_si_record_i32($i75);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i71);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i76, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p78, $i3);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} pad_operands($p7, $i75);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i75, 6);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, $sub.i32(0, 4));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p81, $i80);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i82 := avc_write($p0);
    call {:si_unique_call 607} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 0);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.1, $p85);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 9);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i92 := $i82;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i84 := $i92;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} ldv_mutex_unlock_19($p93);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i88 == 1;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_67 := dev_err.ref.ref($p90, .str.6);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 22);
    goto $bb23;

  $bb17:
    assume $i83 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    goto $bb19;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i34, $i35 := 0, 6;
    goto $bb4;

  $bb4:
    call $i36, $i37, $p39, $i40, $i41, $p43, $i44, $p46, $i47, $i48, $i49, $i53, $i54, $i55, $p58, $i59, $i60, $p62, $i63, $i64, $i65, $i66, $i51, $i52, $i67, $i50, $i68, $i69, $i34, $i35, $i70 := avc_lnb_control_loop_$bb4($p5, $p7, $i31, $i36, $i37, $p39, $i40, $i41, $p43, $i44, $p46, $i47, $i48, $i49, $i53, $i54, $i55, $p58, $i59, $i60, $p62, $i63, $i64, $i65, $i66, $i51, $i52, $i67, $i50, $i68, $i69, $i34, $i35, $i70);
    goto $bb4_last;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    call {:si_unique_call 599} {:cexpr "pos"} boogie_si_record_i32($i36);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i34);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref($i37, 7)), $mul.ref(6, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i35);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i41, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p43, $i40);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i34);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref($i44, 7)), $mul.ref(6, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i50 := $i36;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i34, 1);
    call {:si_unique_call 602} {:cexpr "j"} boogie_si_record_i32($i68);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i31, $i68);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i70 := $i50;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i33 := $i70;
    goto $bb3;

  $bb14:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i34, $i35 := $i68, $i50;
    goto $bb14_dummy;

  $bb6:
    assume $i49 == 1;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i51, $i52 := 0, $i36;
    goto $bb9;

  $bb9:
    call $i53, $i54, $i55, $p58, $i59, $i60, $p62, $i63, $i64, $i65, $i66, $i51, $i52, $i67 := avc_lnb_control_loop_$bb9($p5, $p7, $p46, $i53, $i54, $i55, $p58, $i59, $i60, $p62, $i63, $i64, $i65, $i66, $i51, $i52, $i67, $i34);
    goto $bb9_last;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    call {:si_unique_call 600} {:cexpr "pos"} boogie_si_record_i32($i53);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i51);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i34);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p5, $mul.ref($i55, 7)), $mul.ref(0, 1)), $mul.ref($i54, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i52);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i60, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p62, $i59);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i51, 1);
    call {:si_unique_call 601} {:cexpr "k"} boogie_si_record_i32($i63);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p46);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i65, $i63);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i67 := $i53;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i50 := $i67;
    goto $bb8;

  $bb11:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i51, $i52 := $i63, $i53;
    goto $bb11_dummy;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3258;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;
}



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 302391);

procedure ldv_mutex_lock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} mutex_lock($p0);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 303423);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} mutex_unlock($p0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const avc_tuner_dsd: ref;

axiom avc_tuner_dsd == $sub.ref(0, 304455);

procedure avc_tuner_dsd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_tuner_dsd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $i22: i32;
  var $i20: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} ldv_mutex_lock_8($p4);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, 0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 40);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, $i10);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call {:si_unique_call 625} devirtbounce.5(0, .str.2, 659, 12);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call avc_tuner_dsd_loop_$bb16();
    goto $bb16_last;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i19 := avc_tuner_tuneqpsk($p0, $p1);
    call {:si_unique_call 618} {:cexpr "pos"} boogie_si_record_i32($i19);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} pad_operands($p3, $i20);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i20, 6);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 4));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, $i24);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i26 := avc_write($p0);
    call {:si_unique_call 623} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} ldv_mutex_unlock_9($p27);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, 0);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} msleep(500);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i22 := avc_tuner_dsd_dvb_t($p0, $p1);
    call {:si_unique_call 616} {:cexpr "pos"} boogie_si_record_i32($i22);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb14;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i21 := avc_tuner_dsd_dvb_c($p0, $p1);
    call {:si_unique_call 620} {:cexpr "pos"} boogie_si_record_i32($i21);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb14;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb16_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;
}



const ldv_mutex_lock_8: ref;

axiom ldv_mutex_lock_8 == $sub.ref(0, 305487);

procedure ldv_mutex_lock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} mutex_lock($p0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const avc_tuner_tuneqpsk: ref;

axiom avc_tuner_tuneqpsk == $sub.ref(0, 306519);

procedure avc_tuner_tuneqpsk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation avc_tuner_tuneqpsk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i8;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $i164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 18);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $sub.i8(0, 121));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 4);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 88);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i32($i19, 24);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, $i21);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i26 := $lshr.i32($i25, 16);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i27);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i31, 8);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(6, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, $i33);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(7, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p40, $i38);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(44, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i32($i42, 1000);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i44 := $lshr.i32($i43, 8);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(8, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p47, $i45);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(44, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i50 := $udiv.i32($i49, 1000);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(9, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p53, $i51);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i55, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i55, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i55, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p77, 0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3280, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.1, $p78);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 255);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i80 == 1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3280, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i85 == 1);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p89, 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3284, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 255);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i92 == 1);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3284, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.1, $p95);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i97 == 1);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p101, 0);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.1, $p102);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 4);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i104 == 1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i164 := 13;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $r := $i164;
    return;

  $bb43:
    assume $i104 == 1;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(816, 1)), $mul.ref(64, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.1, $p107);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 6);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i109 == 1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p159, 1);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p161, $sub.i8(0, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(15, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p163, $sub.i8(0, 1));
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i164 := 16;
    goto $bb88;

  $bb45:
    assume $i109 == 1;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(816, 1)), $mul.ref(8, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i113, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i113, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i113, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p126, 2);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(816, 1)), $mul.ref(60, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.1, $p129);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i130, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i130, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i130, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p143, 2);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(1904, 1)), $mul.ref(816, 1)), $mul.ref(56, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.1, $p146);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i147, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i147, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i147, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb80:
    assume $i150 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(15, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p153, 0);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb78:
    assume $i149 == 1;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(15, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p155, 0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb76:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i147, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb82;

  $bb83:
    assume $i151 == 1;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(15, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p157, 1);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb66:
    assume $i133 == 1;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb64:
    assume $i132 == 1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p141, 1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb62:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i130, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i134 == 1);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p139, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb69:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i130, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb68;

  $bb71:
    assume $i135 == 1;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p137, 2);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb52:
    assume $i116 == 1;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p124, 3);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb50:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i113, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb54;

  $bb55:
    assume $i117 == 1;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p120, 1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb48:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i113, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb54;

  $bb57:
    assume $i118 == 1;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p122, 2);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb40:
    assume $i97 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p99, 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i92 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p94, $sub.i8(0, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i85 == 1;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p87, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i80 == 1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p82, $sub.i8(0, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i55, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p75, 5);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb16:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i55, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb15;

  $bb18:
    assume $i61 == 1;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p73, 4);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb5:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i55, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i55, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb22:
    assume $i63 == 1;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p71, 3);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i55, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i64 == 1);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, 2);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i55, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb15;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p67, 1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 96);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const avc_tuner_dsd_dvb_c: ref;

axiom avc_tuner_dsd_dvb_c == $sub.ref(0, 307551);

procedure avc_tuner_dsd_dvb_c($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation avc_tuner_dsd_dvb_c($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, $sub.i8(0, 53));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $sub.i8(0, 46));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 32);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 17);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 9);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 6);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i18, $i22);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, $i24);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(6, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(7, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(8, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, 0);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(9, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p34, 0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i39 := $udiv.i32($i38, 4000);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i40 := $lshr.i32($i39, 16);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, 128);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, $i44);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i49 := $udiv.i32($i48, 4000);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i32($i49, 8);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p53, $i51);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i56 := $udiv.i32($i55, 4000);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p59, $i57);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(44, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i62 := $udiv.i32($i61, 1000);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i63 := $lshr.i32($i62, 12);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p66, $i64);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(44, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i69 := $udiv.i32($i68, 1000);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i70 := $lshr.i32($i69, 4);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(15, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p73, $i71);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(44, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i76 := $udiv.i32($i75, 1000);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i79 := $shl.i32($i78, 4);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(16, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p82, $i80);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(17, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p84, 0);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.1, $p85);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i86, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i86, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i86, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p112, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.1, $p113);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i114, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i114, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i114, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(19, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p133, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(20, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p135, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(21, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p137, 0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p139, $mul.ref(22, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i141 := add_pid_filter($p0, $p140);
    call {:si_unique_call 630} {:cexpr "tmp___0"} boogie_si_record_i32($i141);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i141, 22);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $r := $i142;
    return;

  $bb36:
    assume $i118 == 1;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb34:
    assume $i117 == 1;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(19, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p131, 40);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb32:
    assume $i116 == 1;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(19, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p129, 32);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb30:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i114, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i114, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i120 == 1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(19, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p127, 24);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb41:
    assume $i120 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(19, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p125, 16);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i114, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb38;

  $bb43:
    assume $i121 == 1;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(19, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p123, 8);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb11:
    assume $i90 == 1;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb9:
    assume $i89 == 1;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p108, 6);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb7:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i86, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i91 == 1);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p106, 5);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb14:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i86, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb13;

  $bb16:
    assume $i92 == 1;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p104, 4);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb5:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i86, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i86, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i94 == 1);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p110, 8);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i94 == 1;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p102, 3);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i86, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i95 == 1);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p100, 2);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb22:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i86, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb13;

  $bb24:
    assume $i96 == 1;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(18, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p98, 1);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i18 := 26;
    goto $bb3;
}



const avc_tuner_dsd_dvb_t: ref;

axiom avc_tuner_dsd_dvb_t == $sub.ref(0, 308583);

procedure avc_tuner_dsd_dvb_t($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation avc_tuner_dsd_dvb_t($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i32;
  var $i122: i8;
  var $p124: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i8;
  var $p132: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i8;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i32;
  var $i156: i8;
  var $p158: ref;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i8;
  var $p166: ref;
  var $p168: ref;
  var $i169: i8;
  var $i170: i32;
  var $i171: i32;
  var $i172: i8;
  var $p174: ref;
  var $p176: ref;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i8;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i1;
  var $i192: i1;
  var $p194: ref;
  var $p196: ref;
  var $p198: ref;
  var $p200: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $i206: i1;
  var $i207: i1;
  var $i208: i1;
  var $i209: i1;
  var $i210: i1;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i8;
  var $p218: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i8;
  var $p226: ref;
  var $p228: ref;
  var $i229: i8;
  var $i230: i32;
  var $i231: i32;
  var $i232: i8;
  var $p234: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $i238: i1;
  var $i239: i1;
  var $i240: i1;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i32;
  var $i246: i8;
  var $p248: ref;
  var $p250: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, $sub.i8(0, 53));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $sub.i8(0, 46));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 32);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 0);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 12);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 64;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 6);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 4);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 9);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(52, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 9);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i18, $i22);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, $i26);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, $i30);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, $i34);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(36, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 4);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i38, $i42);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, $i44);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(28, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 2);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(6, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p53, 0);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(7, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p55, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i58 := $udiv.i32($i57, 10);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i59 := $lshr.i32($i58, 24);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(8, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p62, $i60);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p63);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i65 := $udiv.i32($i64, 10);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i66 := $lshr.i32($i65, 16);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(9, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, $i67);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i72 := $udiv.i32($i71, 10);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i32($i72, 8);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(10, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p76, $i74);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i79 := $udiv.i32($i78, 10);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(11, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p82, $i80);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i84, 7000000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i84, 8000000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i84, 8000000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p95, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i97, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i97, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p108, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.1, $p109);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i110, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i110, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i110, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i110, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.1, $p141);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i142, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i142, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i142, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i142, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(52, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.1, $p183);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i184, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $i186 := $slt.i32($i184, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i184, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i184, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p202, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(36, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.1, $p203);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i205 := $slt.i32($i204, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i204, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207 := $slt.i32($i204, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i204, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb119, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(28, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.1, $p235);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i237 := $slt.i32($i236, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    $i238 := $slt.i32($i236, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i236, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb134, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(15, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p250, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(16, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p252, 0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($p254, $mul.ref(17, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i256 := add_pid_filter($p0, $p255);
    call {:si_unique_call 632} {:cexpr "tmp___4"} boogie_si_record_i32($i256);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i257 := $add.i32($i256, 17);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $r := $i257;
    return;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb132:
    assume $i238 == 1;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.1, $p242);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i245 := $or.i32($i244, 2);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i32.i8($i245);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p248, $i246);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb130:
    assume $i237 == 1;
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i236, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i240 == 1);
    goto $bb137;

  $bb138:
    assume $i240 == 1;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb117:
    assume $i207 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.1, $p228);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i231 := $or.i32($i230, 24);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i232 := $trunc.i32.i8($i231);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p234, $i232);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb115:
    assume $i206 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.1, $p220);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i223 := $or.i32($i222, 16);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i8($i223);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p226, $i224);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb113:
    assume $i205 == 1;
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i204, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i209 == 1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.1, $p212);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i215 := $or.i32($i214, 8);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i32.i8($i215);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p218, $i216);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb123:
    assume $i209 == 1;
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i204, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb122;

  $bb125:
    assume $i210 == 1;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb99:
    assume $i188 == 1;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p200, $sub.i8(0, 128));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb97:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i184, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb101;

  $bb102:
    assume $i189 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p198, 96);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb95:
    assume $i186 == 1;
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i184, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb101;

  $bb104:
    assume $i190 == 1;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p196, 64);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb93:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i184, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i191 == 1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(14, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p194, 32);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb106:
    assume $i191 == 1;
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i184, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb101;

  $bb108:
    assume $i192 == 1;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb79:
    assume $i146 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.1, $p176);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i179 := $or.i32($i178, 4);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i8($i179);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p182, $i180);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb77:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i142, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb81;

  $bb82:
    assume $i147 == 1;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.1, $p168);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i169);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i170, 3);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i8($i171);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p174, $i172);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb75:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i142, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb81;

  $bb84:
    assume $i148 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.1, $p160);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i162, 2);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i8($i163);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p166, $i164);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb73:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i142, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i149 == 1);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.1, $p152);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i155 := $or.i32($i154, 1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i155);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p158, $i156);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb86:
    assume $i149 == 1;
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i142, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb81;

  $bb88:
    assume $i150 == 1;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb62:
    assume $i114 == 1;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb60:
    assume $i113 == 1;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.1, $p134);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i137 := $or.i32($i136, 24);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i8($i137);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p140, $i138);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb58:
    assume $i112 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.1, $p126);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i129 := $or.i32($i128, 16);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p132, $i130);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb56:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i110, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i115 == 1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.1, $p118);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, 8);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p124, $i122);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i110, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb67, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb64;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb68;

  $bb45:
    assume $i100 == 1;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p106, $sub.i8(0, 128));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb43:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i97, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb47;

  $bb48:
    assume $i101 == 1;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(13, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p104, 64);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb41:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i97, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb47;

  $bb50:
    assume $i102 == 1;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb24:
    assume $i87 == 1;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb22:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i84, 7000000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb26;

  $bb27:
    assume $i88 == 1;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(12, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p93, 32);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb20:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i84, 6000000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i84, 6000000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb31, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb26;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb32;

  $bb29:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i84, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb34, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb26;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb35;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(6, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, 64);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i34 := 2;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i30 := 4;
    goto $bb12;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i26 := 8;
    goto $bb9;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i22 := 16;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i18 := 96;
    goto $bb3;
}



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 309615);

procedure ldv_mutex_unlock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} mutex_unlock($p0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 310647);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    return;
}



const add_pid_filter: ref;

axiom add_pid_filter == $sub.ref(0, 311679);

procedure add_pid_filter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation add_pid_filter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $p54: ref;
  var $i55: i16;
  var $i56: i8;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i32: i32;
  var $i33: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p76: ref;
  var $i77: i32;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $i92: i16;
  var $i93: i8;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i69: i32;
  var $i70: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i108: i32;
  var $i109: i64;
  var $p110: ref;
  var $i111: i32;
  var $i112: i64;
  var $p113: ref;
  var $i114: i32;
  var $p116: ref;
  var $i117: i16;
  var $i118: i32;
  var $i119: i32;
  var $i120: i8;
  var $i121: i32;
  var $i122: i32;
  var $i123: i8;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $p128: ref;
  var $i129: i16;
  var $i130: i8;
  var $i131: i64;
  var $p132: ref;
  var $i133: i32;
  var $i134: i64;
  var $p135: ref;
  var $i136: i32;
  var $i137: i64;
  var $p138: ref;
  var $i139: i32;
  var $i106: i32;
  var $i107: i32;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $i145: i32;
  var $i146: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i64;
  var $p150: ref;
  var $i151: i32;
  var $p153: ref;
  var $i154: i16;
  var $i155: i32;
  var $i156: i32;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i8;
  var $i161: i64;
  var $p162: ref;
  var $i163: i32;
  var $p165: ref;
  var $i166: i16;
  var $i167: i8;
  var $i168: i64;
  var $p169: ref;
  var $i170: i32;
  var $i171: i64;
  var $p172: ref;
  var $i173: i32;
  var $i174: i64;
  var $p175: ref;
  var $i176: i32;
  var $i143: i32;
  var $i144: i32;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $i182: i32;
  var $i183: i64;
  var $p184: ref;
  var $i185: i32;
  var $i186: i64;
  var $p187: ref;
  var $i188: i32;
  var $p190: ref;
  var $i191: i16;
  var $i192: i32;
  var $i193: i32;
  var $i194: i8;
  var $i195: i32;
  var $i196: i32;
  var $i197: i8;
  var $i198: i64;
  var $p199: ref;
  var $i200: i32;
  var $p202: ref;
  var $i203: i16;
  var $i204: i8;
  var $i205: i64;
  var $p206: ref;
  var $i207: i32;
  var $i208: i64;
  var $p209: ref;
  var $i210: i32;
  var $i211: i64;
  var $p212: ref;
  var $i213: i32;
  var $i180: i32;
  var $i181: i32;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $i219: i32;
  var $i220: i64;
  var $p221: ref;
  var $i222: i32;
  var $i223: i64;
  var $p224: ref;
  var $i225: i32;
  var $p227: ref;
  var $i228: i16;
  var $i229: i32;
  var $i230: i32;
  var $i231: i8;
  var $i232: i32;
  var $i233: i32;
  var $i234: i8;
  var $i235: i64;
  var $p236: ref;
  var $i237: i32;
  var $p239: ref;
  var $i240: i16;
  var $i241: i8;
  var $i242: i64;
  var $p243: ref;
  var $i244: i32;
  var $i245: i64;
  var $p246: ref;
  var $i247: i32;
  var $i248: i64;
  var $p249: ref;
  var $i250: i32;
  var $i217: i32;
  var $i218: i32;
  var $p251: ref;
  var $i252: i32;
  var $i253: i1;
  var $i256: i32;
  var $i257: i64;
  var $p258: ref;
  var $i259: i32;
  var $i260: i64;
  var $p261: ref;
  var $i262: i32;
  var $p264: ref;
  var $i265: i16;
  var $i266: i32;
  var $i267: i32;
  var $i268: i8;
  var $i269: i32;
  var $i270: i32;
  var $i271: i8;
  var $i272: i64;
  var $p273: ref;
  var $i274: i32;
  var $p276: ref;
  var $i277: i16;
  var $i278: i8;
  var $i279: i64;
  var $p280: ref;
  var $i281: i32;
  var $i282: i64;
  var $p283: ref;
  var $i284: i32;
  var $i285: i64;
  var $p286: ref;
  var $i287: i32;
  var $i254: i32;
  var $i255: i32;
  var $p288: ref;
  var $i289: i32;
  var $i290: i1;
  var $i293: i32;
  var $i294: i64;
  var $p295: ref;
  var $i296: i32;
  var $i297: i64;
  var $p298: ref;
  var $i299: i32;
  var $p301: ref;
  var $i302: i16;
  var $i303: i32;
  var $i304: i32;
  var $i305: i8;
  var $i306: i32;
  var $i307: i32;
  var $i308: i8;
  var $i309: i64;
  var $p310: ref;
  var $i311: i32;
  var $p313: ref;
  var $i314: i16;
  var $i315: i8;
  var $i316: i64;
  var $p317: ref;
  var $i318: i32;
  var $i319: i64;
  var $p320: ref;
  var $i321: i32;
  var $i322: i64;
  var $p323: ref;
  var $i324: i32;
  var $i291: i32;
  var $i292: i32;
  var $p325: ref;
  var $i326: i32;
  var $i327: i1;
  var $i330: i32;
  var $i331: i64;
  var $p332: ref;
  var $i333: i32;
  var $i334: i64;
  var $p335: ref;
  var $i336: i32;
  var $p338: ref;
  var $i339: i16;
  var $i340: i32;
  var $i341: i32;
  var $i342: i8;
  var $i343: i32;
  var $i344: i32;
  var $i345: i8;
  var $i346: i64;
  var $p347: ref;
  var $i348: i32;
  var $p350: ref;
  var $i351: i16;
  var $i352: i8;
  var $i353: i64;
  var $p354: ref;
  var $i355: i32;
  var $i356: i64;
  var $p357: ref;
  var $i358: i32;
  var $i359: i64;
  var $p360: ref;
  var $i361: i32;
  var $i328: i32;
  var $i329: i32;
  var $p362: ref;
  var $i363: i32;
  var $i364: i1;
  var $i367: i32;
  var $i368: i64;
  var $p369: ref;
  var $i370: i32;
  var $i371: i64;
  var $p372: ref;
  var $i373: i32;
  var $p375: ref;
  var $i376: i16;
  var $i377: i32;
  var $i378: i32;
  var $i379: i8;
  var $i380: i32;
  var $i381: i32;
  var $i382: i8;
  var $i383: i64;
  var $p384: ref;
  var $i385: i32;
  var $p387: ref;
  var $i388: i16;
  var $i389: i8;
  var $i390: i64;
  var $p391: ref;
  var $i392: i32;
  var $i393: i64;
  var $p394: ref;
  var $i395: i32;
  var $i396: i64;
  var $p397: ref;
  var $i398: i32;
  var $i365: i32;
  var $i366: i32;
  var $p399: ref;
  var $i400: i32;
  var $i401: i1;
  var $i404: i32;
  var $i405: i64;
  var $p406: ref;
  var $i407: i32;
  var $i408: i64;
  var $p409: ref;
  var $i410: i32;
  var $p412: ref;
  var $i413: i16;
  var $i414: i32;
  var $i415: i32;
  var $i416: i8;
  var $i417: i32;
  var $i418: i32;
  var $i419: i8;
  var $i420: i64;
  var $p421: ref;
  var $i422: i32;
  var $p424: ref;
  var $i425: i16;
  var $i426: i8;
  var $i427: i64;
  var $p428: ref;
  var $i429: i32;
  var $i430: i64;
  var $p431: ref;
  var $i432: i32;
  var $i433: i64;
  var $p434: ref;
  var $i435: i32;
  var $i402: i32;
  var $i403: i32;
  var $p436: ref;
  var $i437: i32;
  var $i438: i1;
  var $i441: i32;
  var $i442: i64;
  var $p443: ref;
  var $i444: i32;
  var $i445: i64;
  var $p446: ref;
  var $i447: i32;
  var $p449: ref;
  var $i450: i16;
  var $i451: i32;
  var $i452: i32;
  var $i453: i8;
  var $i454: i32;
  var $i455: i32;
  var $i456: i8;
  var $i457: i64;
  var $p458: ref;
  var $i459: i32;
  var $p461: ref;
  var $i462: i16;
  var $i463: i8;
  var $i464: i64;
  var $p465: ref;
  var $i466: i32;
  var $i467: i64;
  var $p468: ref;
  var $i469: i32;
  var $i470: i64;
  var $p471: ref;
  var $i472: i32;
  var $i439: i32;
  var $i440: i32;
  var $p473: ref;
  var $i474: i32;
  var $i475: i1;
  var $i478: i32;
  var $i479: i64;
  var $p480: ref;
  var $i481: i32;
  var $i482: i64;
  var $p483: ref;
  var $i484: i32;
  var $p486: ref;
  var $i487: i16;
  var $i488: i32;
  var $i489: i32;
  var $i490: i8;
  var $i491: i32;
  var $i492: i32;
  var $i493: i8;
  var $i494: i64;
  var $p495: ref;
  var $i496: i32;
  var $p498: ref;
  var $i499: i16;
  var $i500: i8;
  var $i501: i64;
  var $p502: ref;
  var $i503: i32;
  var $i504: i64;
  var $p505: ref;
  var $i506: i32;
  var $i507: i64;
  var $p508: ref;
  var $i509: i32;
  var $i476: i32;
  var $i477: i32;
  var $p510: ref;
  var $i511: i32;
  var $i512: i1;
  var $i515: i32;
  var $i516: i64;
  var $p517: ref;
  var $i518: i32;
  var $i519: i64;
  var $p520: ref;
  var $i521: i32;
  var $p523: ref;
  var $i524: i16;
  var $i525: i32;
  var $i526: i32;
  var $i527: i8;
  var $i528: i32;
  var $i529: i32;
  var $i530: i8;
  var $i531: i64;
  var $p532: ref;
  var $i533: i32;
  var $p535: ref;
  var $i536: i16;
  var $i537: i8;
  var $i538: i64;
  var $p539: ref;
  var $i540: i32;
  var $i541: i64;
  var $p542: ref;
  var $i543: i32;
  var $i544: i64;
  var $p545: ref;
  var $i546: i32;
  var $i513: i32;
  var $i514: i32;
  var $p547: ref;
  var $i548: i32;
  var $i549: i1;
  var $i550: i32;
  var $i551: i64;
  var $p552: ref;
  var $i553: i32;
  var $i554: i64;
  var $p555: ref;
  var $i556: i32;
  var $p558: ref;
  var $i559: i16;
  var $i560: i32;
  var $i561: i32;
  var $i562: i8;
  var $i563: i32;
  var $i564: i32;
  var $i565: i8;
  var $i566: i64;
  var $p567: ref;
  var $i568: i32;
  var $p570: ref;
  var $i571: i16;
  var $i572: i8;
  var $i573: i64;
  var $p574: ref;
  var $i575: i32;
  var $i576: i64;
  var $p577: ref;
  var $i578: i32;
  var $i579: i64;
  var $p580: ref;
  var $i581: i32;
  var $i27: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i3 := variable_test_bit(0, $p2);
    call {:si_unique_call 637} {:cexpr "tmp___5"} boogie_si_record_i32($i3);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i24, $i25 := 0, 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i30 := variable_test_bit(1, $p29);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32, $i33 := $i24, $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i67 := variable_test_bit(2, $p66);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69, $i70 := $i32, $i33;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i104 := variable_test_bit(3, $p103);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106, $i107 := $i69, $i70;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i141 := variable_test_bit(4, $p140);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    $i143, $i144 := $i106, $i107;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i178 := variable_test_bit(5, $p177);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    $i180, $i181 := $i143, $i144;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i215 := variable_test_bit(6, $p214);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    $i217, $i218 := $i180, $i181;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i252 := variable_test_bit(7, $p251);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    $i254, $i255 := $i217, $i218;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i289 := variable_test_bit(8, $p288);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    $i291, $i292 := $i254, $i255;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i326 := variable_test_bit(9, $p325);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    $i328, $i329 := $i291, $i292;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i363 := variable_test_bit(10, $p362);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i364 := $ne.i32($i363, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    $i365, $i366 := $i328, $i329;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i400 := variable_test_bit(11, $p399);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i401 := $ne.i32($i400, 0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    $i402, $i403 := $i365, $i366;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i437 := variable_test_bit(12, $p436);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i438 := $ne.i32($i437, 0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i438} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    $i439, $i440 := $i402, $i403;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i474 := variable_test_bit(13, $p473);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i475 := $ne.i32($i474, 0);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    $i476, $i477 := $i439, $i440;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i511 := variable_test_bit(14, $p510);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i512 := $ne.i32($i511, 0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    $i513, $i514 := $i476, $i477;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i548 := variable_test_bit(15, $p547);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i549 := $ne.i32($i548, 0);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i549} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i549 == 1);
    assume {:verifier.code 0} true;
    $i27, $i28 := $i513, $i514;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i27);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, $i26);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb64:
    assume $i549 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i550 := $add.i32($i514, 1);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i551 := $sext.i32.i64($i514);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($p1, $mul.ref($i551, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p552, 19);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i553 := $add.i32($i550, 1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i554 := $sext.i32.i64($i550);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($p1, $mul.ref($i554, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p555, $sub.i8(0, 128));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i556 := $add.i32($i553, 1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(15, 2));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i559 := $load.i16($M.1, $p558);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i560 := $zext.i16.i32($i559);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i561 := $ashr.i32($i560, 8);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i562 := $trunc.i32.i8($i561);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i563 := $zext.i8.i32($i562);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i564 := $and.i32($i563, 31);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i565 := $trunc.i32.i8($i564);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i566 := $sext.i32.i64($i553);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($p1, $mul.ref($i566, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p567, $i565);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i568 := $add.i32($i556, 1);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(15, 2));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i571 := $load.i16($M.1, $p570);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i572 := $trunc.i16.i8($i571);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i573 := $sext.i32.i64($i556);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($p1, $mul.ref($i573, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p574, $i572);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i575 := $add.i32($i568, 1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i576 := $sext.i32.i64($i568);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($p1, $mul.ref($i576, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p577, 0);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i578 := $add.i32($i575, 1);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i579 := $sext.i32.i64($i575);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($p1, $mul.ref($i579, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p580, 0);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i581 := $add.i32($i513, 1);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i581, $i578;
    goto $bb66;

  $bb60:
    assume $i512 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i515 := $add.i32($i477, 1);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i516 := $sext.i32.i64($i477);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($p1, $mul.ref($i516, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p517, 19);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i518 := $add.i32($i515, 1);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i519 := $sext.i32.i64($i515);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($p1, $mul.ref($i519, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p520, $sub.i8(0, 128));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i521 := $add.i32($i518, 1);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(14, 2));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i524 := $load.i16($M.1, $p523);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i525 := $zext.i16.i32($i524);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i526 := $ashr.i32($i525, 8);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i527 := $trunc.i32.i8($i526);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i528 := $zext.i8.i32($i527);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i529 := $and.i32($i528, 31);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i530 := $trunc.i32.i8($i529);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i531 := $sext.i32.i64($i518);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($p1, $mul.ref($i531, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p532, $i530);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i533 := $add.i32($i521, 1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(14, 2));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i536 := $load.i16($M.1, $p535);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i537 := $trunc.i16.i8($i536);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i538 := $sext.i32.i64($i521);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($p1, $mul.ref($i538, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p539, $i537);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i540 := $add.i32($i533, 1);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i541 := $sext.i32.i64($i533);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($p1, $mul.ref($i541, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p542, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i543 := $add.i32($i540, 1);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i544 := $sext.i32.i64($i540);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($p1, $mul.ref($i544, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p545, 0);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i546 := $add.i32($i476, 1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i513, $i514 := $i546, $i543;
    goto $bb62;

  $bb56:
    assume $i475 == 1;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i478 := $add.i32($i440, 1);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i479 := $sext.i32.i64($i440);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($p1, $mul.ref($i479, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p480, 19);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i481 := $add.i32($i478, 1);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i482 := $sext.i32.i64($i478);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($p1, $mul.ref($i482, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p483, $sub.i8(0, 128));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i484 := $add.i32($i481, 1);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(13, 2));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i487 := $load.i16($M.1, $p486);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i488 := $zext.i16.i32($i487);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i489 := $ashr.i32($i488, 8);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i490 := $trunc.i32.i8($i489);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i491 := $zext.i8.i32($i490);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i492 := $and.i32($i491, 31);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i493 := $trunc.i32.i8($i492);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i494 := $sext.i32.i64($i481);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($p1, $mul.ref($i494, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p495, $i493);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i496 := $add.i32($i484, 1);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(13, 2));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i499 := $load.i16($M.1, $p498);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i500 := $trunc.i16.i8($i499);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i501 := $sext.i32.i64($i484);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($p1, $mul.ref($i501, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p502, $i500);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i503 := $add.i32($i496, 1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i504 := $sext.i32.i64($i496);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($p1, $mul.ref($i504, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p505, 0);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i506 := $add.i32($i503, 1);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i507 := $sext.i32.i64($i503);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($p1, $mul.ref($i507, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p508, 0);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i509 := $add.i32($i439, 1);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i476, $i477 := $i509, $i506;
    goto $bb58;

  $bb52:
    assume $i438 == 1;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i441 := $add.i32($i403, 1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i442 := $sext.i32.i64($i403);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($p1, $mul.ref($i442, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p443, 19);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i444 := $add.i32($i441, 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i445 := $sext.i32.i64($i441);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($p1, $mul.ref($i445, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p446, $sub.i8(0, 128));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i447 := $add.i32($i444, 1);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(12, 2));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i450 := $load.i16($M.1, $p449);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i451 := $zext.i16.i32($i450);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i452 := $ashr.i32($i451, 8);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i453 := $trunc.i32.i8($i452);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i454 := $zext.i8.i32($i453);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i455 := $and.i32($i454, 31);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i456 := $trunc.i32.i8($i455);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i457 := $sext.i32.i64($i444);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($p1, $mul.ref($i457, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p458, $i456);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i459 := $add.i32($i447, 1);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(12, 2));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i462 := $load.i16($M.1, $p461);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i463 := $trunc.i16.i8($i462);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i464 := $sext.i32.i64($i447);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($p1, $mul.ref($i464, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p465, $i463);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i466 := $add.i32($i459, 1);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i467 := $sext.i32.i64($i459);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($p1, $mul.ref($i467, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p468, 0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i469 := $add.i32($i466, 1);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i470 := $sext.i32.i64($i466);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($p1, $mul.ref($i470, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p471, 0);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i472 := $add.i32($i402, 1);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i439, $i440 := $i472, $i469;
    goto $bb54;

  $bb48:
    assume $i401 == 1;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i404 := $add.i32($i366, 1);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i405 := $sext.i32.i64($i366);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($p1, $mul.ref($i405, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p406, 19);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i407 := $add.i32($i404, 1);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i408 := $sext.i32.i64($i404);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($p1, $mul.ref($i408, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p409, $sub.i8(0, 128));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i410 := $add.i32($i407, 1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(11, 2));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i413 := $load.i16($M.1, $p412);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i414 := $zext.i16.i32($i413);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i415 := $ashr.i32($i414, 8);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i416 := $trunc.i32.i8($i415);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i417 := $zext.i8.i32($i416);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i418 := $and.i32($i417, 31);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i419 := $trunc.i32.i8($i418);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i420 := $sext.i32.i64($i407);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($p1, $mul.ref($i420, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p421, $i419);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i422 := $add.i32($i410, 1);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(11, 2));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i425 := $load.i16($M.1, $p424);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i426 := $trunc.i16.i8($i425);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i427 := $sext.i32.i64($i410);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($p1, $mul.ref($i427, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p428, $i426);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i429 := $add.i32($i422, 1);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i430 := $sext.i32.i64($i422);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($p1, $mul.ref($i430, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p431, 0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i432 := $add.i32($i429, 1);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i433 := $sext.i32.i64($i429);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($p1, $mul.ref($i433, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p434, 0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i435 := $add.i32($i365, 1);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i402, $i403 := $i435, $i432;
    goto $bb50;

  $bb44:
    assume $i364 == 1;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i367 := $add.i32($i329, 1);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i368 := $sext.i32.i64($i329);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p1, $mul.ref($i368, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p369, 19);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i370 := $add.i32($i367, 1);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i371 := $sext.i32.i64($i367);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($p1, $mul.ref($i371, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p372, $sub.i8(0, 128));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i373 := $add.i32($i370, 1);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(10, 2));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i376 := $load.i16($M.1, $p375);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i376);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i378 := $ashr.i32($i377, 8);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i32.i8($i378);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i380 := $zext.i8.i32($i379);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i381 := $and.i32($i380, 31);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i382 := $trunc.i32.i8($i381);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i383 := $sext.i32.i64($i370);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($p1, $mul.ref($i383, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p384, $i382);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i385 := $add.i32($i373, 1);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(10, 2));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i388 := $load.i16($M.1, $p387);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i389 := $trunc.i16.i8($i388);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i390 := $sext.i32.i64($i373);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($p1, $mul.ref($i390, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p391, $i389);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i392 := $add.i32($i385, 1);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i393 := $sext.i32.i64($i385);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($p1, $mul.ref($i393, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p394, 0);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i395 := $add.i32($i392, 1);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i396 := $sext.i32.i64($i392);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($p1, $mul.ref($i396, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p397, 0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i398 := $add.i32($i328, 1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i365, $i366 := $i398, $i395;
    goto $bb46;

  $bb40:
    assume $i327 == 1;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i330 := $add.i32($i292, 1);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i331 := $sext.i32.i64($i292);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($p1, $mul.ref($i331, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p332, 19);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i333 := $add.i32($i330, 1);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i334 := $sext.i32.i64($i330);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($p1, $mul.ref($i334, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p335, $sub.i8(0, 128));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i336 := $add.i32($i333, 1);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(9, 2));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i339 := $load.i16($M.1, $p338);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i340 := $zext.i16.i32($i339);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i341 := $ashr.i32($i340, 8);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i342 := $trunc.i32.i8($i341);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i343 := $zext.i8.i32($i342);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i344 := $and.i32($i343, 31);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i32.i8($i344);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i346 := $sext.i32.i64($i333);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($p1, $mul.ref($i346, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p347, $i345);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i348 := $add.i32($i336, 1);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(9, 2));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i351 := $load.i16($M.1, $p350);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i16.i8($i351);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i353 := $sext.i32.i64($i336);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($p1, $mul.ref($i353, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p354, $i352);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i355 := $add.i32($i348, 1);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i356 := $sext.i32.i64($i348);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($p1, $mul.ref($i356, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p357, 0);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i358 := $add.i32($i355, 1);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i359 := $sext.i32.i64($i355);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($p1, $mul.ref($i359, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p360, 0);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i361 := $add.i32($i291, 1);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i328, $i329 := $i361, $i358;
    goto $bb42;

  $bb36:
    assume $i290 == 1;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i293 := $add.i32($i255, 1);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i294 := $sext.i32.i64($i255);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($p1, $mul.ref($i294, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p295, 19);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i296 := $add.i32($i293, 1);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i297 := $sext.i32.i64($i293);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($p1, $mul.ref($i297, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p298, $sub.i8(0, 128));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i299 := $add.i32($i296, 1);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(8, 2));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i302 := $load.i16($M.1, $p301);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i303 := $zext.i16.i32($i302);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i304 := $ashr.i32($i303, 8);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i305 := $trunc.i32.i8($i304);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i307 := $and.i32($i306, 31);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i8($i307);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i309 := $sext.i32.i64($i296);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($p1, $mul.ref($i309, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p310, $i308);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i311 := $add.i32($i299, 1);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(8, 2));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i314 := $load.i16($M.1, $p313);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i16.i8($i314);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i316 := $sext.i32.i64($i299);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($p1, $mul.ref($i316, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p317, $i315);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i318 := $add.i32($i311, 1);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i319 := $sext.i32.i64($i311);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p1, $mul.ref($i319, 1));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p320, 0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i321 := $add.i32($i318, 1);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i322 := $sext.i32.i64($i318);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($p1, $mul.ref($i322, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p323, 0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i324 := $add.i32($i254, 1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i291, $i292 := $i324, $i321;
    goto $bb38;

  $bb32:
    assume $i253 == 1;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i256 := $add.i32($i218, 1);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i257 := $sext.i32.i64($i218);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p1, $mul.ref($i257, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p258, 19);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i259 := $add.i32($i256, 1);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i260 := $sext.i32.i64($i256);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($p1, $mul.ref($i260, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p261, $sub.i8(0, 128));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i262 := $add.i32($i259, 1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(7, 2));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i265 := $load.i16($M.1, $p264);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i266 := $zext.i16.i32($i265);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i267 := $ashr.i32($i266, 8);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i32.i8($i267);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i269 := $zext.i8.i32($i268);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i270 := $and.i32($i269, 31);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i32.i8($i270);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i272 := $sext.i32.i64($i259);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p1, $mul.ref($i272, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p273, $i271);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i274 := $add.i32($i262, 1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(7, 2));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i277 := $load.i16($M.1, $p276);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i278 := $trunc.i16.i8($i277);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i279 := $sext.i32.i64($i262);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($p1, $mul.ref($i279, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p280, $i278);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i281 := $add.i32($i274, 1);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i282 := $sext.i32.i64($i274);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($p1, $mul.ref($i282, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p283, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i284 := $add.i32($i281, 1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i285 := $sext.i32.i64($i281);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($p1, $mul.ref($i285, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p286, 0);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i287 := $add.i32($i217, 1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i254, $i255 := $i287, $i284;
    goto $bb34;

  $bb28:
    assume $i216 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i219 := $add.i32($i181, 1);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i220 := $sext.i32.i64($i181);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p1, $mul.ref($i220, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p221, 19);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i219, 1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i223 := $sext.i32.i64($i219);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p1, $mul.ref($i223, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p224, $sub.i8(0, 128));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i222, 1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(6, 2));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i228 := $load.i16($M.1, $p227);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i228);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i230 := $ashr.i32($i229, 8);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i32.i8($i230);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i233 := $and.i32($i232, 31);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i234 := $trunc.i32.i8($i233);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i222);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p1, $mul.ref($i235, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p236, $i234);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i237 := $add.i32($i225, 1);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(6, 2));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i240 := $load.i16($M.1, $p239);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i241 := $trunc.i16.i8($i240);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i225);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($p1, $mul.ref($i242, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p243, $i241);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i237, 1);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i245 := $sext.i32.i64($i237);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p1, $mul.ref($i245, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p246, 0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i247 := $add.i32($i244, 1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i248 := $sext.i32.i64($i244);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p1, $mul.ref($i248, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p249, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i250 := $add.i32($i180, 1);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i217, $i218 := $i250, $i247;
    goto $bb30;

  $bb24:
    assume $i179 == 1;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i182 := $add.i32($i144, 1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i144);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p1, $mul.ref($i183, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p184, 19);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i185 := $add.i32($i182, 1);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i186 := $sext.i32.i64($i182);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p1, $mul.ref($i186, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p187, $sub.i8(0, 128));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i185, 1);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(5, 2));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i191 := $load.i16($M.1, $p190);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i191);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i193 := $ashr.i32($i192, 8);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i8($i193);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 31);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i8($i196);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i198 := $sext.i32.i64($i185);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($p1, $mul.ref($i198, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p199, $i197);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i200 := $add.i32($i188, 1);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(5, 2));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i203 := $load.i16($M.1, $p202);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i16.i8($i203);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i205 := $sext.i32.i64($i188);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p1, $mul.ref($i205, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p206, $i204);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i207 := $add.i32($i200, 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i208 := $sext.i32.i64($i200);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p1, $mul.ref($i208, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p209, 0);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i207, 1);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i211 := $sext.i32.i64($i207);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p1, $mul.ref($i211, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p212, 0);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i143, 1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i180, $i181 := $i213, $i210;
    goto $bb26;

  $bb20:
    assume $i142 == 1;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i107, 1);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i107);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p1, $mul.ref($i146, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p147, 19);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i145, 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i145);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p1, $mul.ref($i149, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p150, $sub.i8(0, 128));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i151 := $add.i32($i148, 1);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(4, 2));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i154 := $load.i16($M.1, $p153);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i154);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i156 := $ashr.i32($i155, 8);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i8($i156);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 31);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i161 := $sext.i32.i64($i148);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p1, $mul.ref($i161, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p162, $i160);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i151, 1);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(4, 2));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.1, $p165);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i16.i8($i166);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i151);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p1, $mul.ref($i168, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p169, $i167);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i163, 1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i163);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p1, $mul.ref($i171, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p172, 0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i170, 1);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i170);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p1, $mul.ref($i174, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p175, 0);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i106, 1);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i143, $i144 := $i176, $i173;
    goto $bb22;

  $bb16:
    assume $i105 == 1;
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i70, 1);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i70);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p1, $mul.ref($i109, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p110, 19);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i108, 1);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i108);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p1, $mul.ref($i112, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p113, $sub.i8(0, 128));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i111, 1);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(3, 2));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i117 := $load.i16($M.1, $p116);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i117);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i119 := $ashr.i32($i118, 8);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 31);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i111);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p1, $mul.ref($i124, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p125, $i123);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i114, 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(3, 2));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.1, $p128);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i16.i8($i129);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i114);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p1, $mul.ref($i131, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p132, $i130);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i126, 1);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i126);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p1, $mul.ref($i134, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p135, 0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i133, 1);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i133);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p1, $mul.ref($i137, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p138, 0);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i69, 1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i106, $i107 := $i139, $i136;
    goto $bb18;

  $bb12:
    assume $i68 == 1;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i33, 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i33);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p1, $mul.ref($i72, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p73, 19);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i71, 1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i71);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p1, $mul.ref($i75, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p76, $sub.i8(0, 128));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i74, 1);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(2, 2));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.1, $p79);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i82 := $ashr.i32($i81, 8);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 31);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i74);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p1, $mul.ref($i87, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p88, $i86);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i77, 1);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(2, 2));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.1, $p91);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i16.i8($i92);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i77);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p1, $mul.ref($i94, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p95, $i93);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i89, 1);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i89);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p1, $mul.ref($i97, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p98, 0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i96, 1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i96);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p1, $mul.ref($i100, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p101, 0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i32, 1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i69, $i70 := $i102, $i99;
    goto $bb14;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i25, 1);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i25);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref($i35, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, 19);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i34, 1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i34);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p1, $mul.ref($i38, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p39, $sub.i8(0, 128));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i37, 1);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(1, 2));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, $p42);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i45 := $ashr.i32($i44, 8);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 31);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i37);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p1, $mul.ref($i50, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, $i49);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i40, 1);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(1, 2));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.1, $p54);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i16.i8($i55);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i40);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p1, $mul.ref($i57, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p58, $i56);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i52, 1);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i52);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p1, $mul.ref($i60, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i59, 1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i59);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p1, $mul.ref($i63, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p64, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i24, 1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i65, $i62;
    goto $bb10;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, 19);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $sub.i8(0, 128));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(0, 2));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, 8);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 31);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, $i15);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(0, 2));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p18);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i16.i8($i19);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $i20);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, 0);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref(6, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 0);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i24, $i25 := 1, 7;
    goto $bb5;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 312711);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation variable_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 654} $i2 := devirtbounce.6(0, $p1, $i0);
    call {:si_unique_call 655} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fdtv_stop_iso: ref;

axiom fdtv_stop_iso == $sub.ref(0, 313743);

procedure fdtv_stop_iso($p0: ref);
  free requires assertsPassed;



implementation fdtv_stop_iso($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3272, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_68 := fw_iso_context_stop($p4);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p6 := device_of($p0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} fw_iso_buffer_destroy($p7, $p9);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} fw_iso_context_destroy($p11);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} kfree($p12);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    return;
}



const cmp_break_pp_connection: ref;

axiom cmp_break_pp_connection == $sub.ref(0, 314775);

procedure cmp_break_pp_connection($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation cmp_break_pp_connection($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i14: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 662} {:cexpr "cmp_break_pp_connection:arg:plug"} boogie_si_record_i32($i1);
    call {:si_unique_call 663} {:cexpr "cmp_break_pp_connection:arg:channel"} boogie_si_record_i32($i2);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 2);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 281474708277508);
    call {:si_unique_call 664} {:cexpr "opcr_address"} boogie_si_record_i64($i6);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i8 := cmp_read($p0, $i6, $p7);
    call {:si_unique_call 666} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.28, $p10);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i12 := get_opcr($i11, 1, 31);
    call {:si_unique_call 668} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    call $i15, $i16, $i17, $i18, $i14, $p22, $i23, $i24, $i25, $p29, $i30, $i31, $i32, $p36, $i37, $p38, $i39, $i40, $p41, $i42, $p43, $i44, $p45, $p46, $p47, $i48, $i49, $p50, $i51, $i52, $i53, $i54 := cmp_break_pp_connection_loop_$bb8($p0, $i2, $p3, $i6, $p10, $i15, $i16, $i17, $i18, $i14, $p22, $i23, $i24, $i25, $p29, $i30, $i31, $i32, $p36, $i37, $p38, $i39, $i40, $p41, $i42, $p43, $i44, $p45, $p46, $p47, $i48, $i49, $p50, $i51, $i52, $i53, $i54);
    goto $bb8_last;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.28, $p22);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i24 := get_opcr($i23, 63, 24);
    call {:si_unique_call 671} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.28, $p29);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i31 := get_opcr($i30, 63, 16);
    call {:si_unique_call 676} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, $i2);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p3);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.28, $p36);
    call {:si_unique_call 678} {:cexpr "old_opcr"} boogie_si_record_i32($i37);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.28, $p38);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i40 := get_opcr($i39, 63, 24);
    call {:si_unique_call 680} {:cexpr "tmp___3"} boogie_si_record_i32($i40);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i40, 1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} set_opcr($p41, $i42, 63, 24);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p3);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.28, $p43);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p45, $i44);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p46, $i37);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p3);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i48 := cmp_lock($p0, $i6, $p47);
    call {:si_unique_call 683} {:cexpr "tmp___4"} boogie_si_record_i32($i48);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.28, $p50);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, $i37);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i14, 1);
    call {:si_unique_call 684} {:cexpr "attempts"} boogie_si_record_i32($i53);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i54 := $sle.i32($i53, 5);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i15 := $i53;
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb9:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.28, $p10);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i17 := get_opcr($i16, 1, 31);
    call {:si_unique_call 673} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb11_dummy;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_69 := dev_err.ref.ref($p20, .str.14);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_71 := dev_err.ref.ref($p34, .str.14);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_70 := dev_err.ref.ref($p27, .str.14);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4743;
}



const fw_iso_context_stop: ref;

axiom fw_iso_context_stop == $sub.ref(0, 315807);

procedure fw_iso_context_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_iso_context_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 1} true;
    call {:si_unique_call 685} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 686} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fw_iso_buffer_destroy: ref;

axiom fw_iso_buffer_destroy == $sub.ref(0, 316839);

procedure fw_iso_buffer_destroy($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fw_iso_buffer_destroy($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    return;
}



const fw_iso_context_destroy: ref;

axiom fw_iso_context_destroy == $sub.ref(0, 317871);

procedure fw_iso_context_destroy($p0: ref);
  free requires assertsPassed;



implementation fw_iso_context_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    return;
}



const fdtv_start_iso: ref;

axiom fdtv_start_iso == $sub.ref(0, 318903);

procedure fdtv_start_iso($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.33, $M.34, $M.35, $CurrAddr;



implementation fdtv_start_iso($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i36: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i52: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i33: i32;
  var $p61: ref;
  var $p62: ref;
  var $i27: i32;
  var $p63: ref;
  var $i6: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i189: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p1 := device_of($p0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p2 := kmalloc(168, 208);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3269, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 1752)), $mul.ref(24, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p15 := fw_iso_context_create($p8, 1, $i11, $i13, 4, handle_iso, $p14);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $p15);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i20 := IS_ERR($p19);
    call {:si_unique_call 691} {:cexpr "tmp___2"} boogie_si_record_i64($i20);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i31 := fw_iso_buffer_init($p28, $p30, 16, 2);
    call {:si_unique_call 697} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, 0);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, 0);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb13;

  $bb13:
    call $p38, $p39, $i40, $p41, $p42, $p43, $i44, $p46, $i47, $i48, $i36 := fdtv_start_iso_loop_$bb13($p3, $p38, $p39, $i40, $p41, $p42, $p43, $i44, $p46, $i47, $i48, $i36);
    goto $bb13_last;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i36);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 8));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p43 := lowmem_page_address($p42);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i36);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(40, 1)), $mul.ref($i44, 8));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, $p43);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i36, 1);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i48 := $ule.i32($i47, 15);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i49 := queue_iso($p3, 0);
    call {:si_unique_call 702} {:cexpr "err"} boogie_si_record_i32($i49);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i64 := queue_iso($p3, 1);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i51 := $i64;
    assume {:branchcond $i65} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i66 := queue_iso($p3, 2);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i51 := $i66;
    assume {:branchcond $i67} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i68 := queue_iso($p3, 3);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i51 := $i68;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i70 := queue_iso($p3, 4);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i51 := $i70;
    assume {:branchcond $i71} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i72 := queue_iso($p3, 5);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i51 := $i72;
    assume {:branchcond $i73} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i74 := queue_iso($p3, 6);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i51 := $i74;
    assume {:branchcond $i75} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i76 := queue_iso($p3, 7);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i51 := $i76;
    assume {:branchcond $i77} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i78 := queue_iso($p3, 8);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i51 := $i78;
    assume {:branchcond $i79} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i80 := queue_iso($p3, 9);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i51 := $i80;
    assume {:branchcond $i81} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i82 := queue_iso($p3, 10);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i51 := $i82;
    assume {:branchcond $i83} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i84 := queue_iso($p3, 11);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i51 := $i84;
    assume {:branchcond $i85} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i86 := queue_iso($p3, 12);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i51 := $i86;
    assume {:branchcond $i87} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i88 := queue_iso($p3, 13);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i51 := $i88;
    assume {:branchcond $i89} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i90 := queue_iso($p3, 14);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i51 := $i90;
    assume {:branchcond $i91} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i92 := queue_iso($p3, 15);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i51 := $i92;
    assume {:branchcond $i93} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i94 := queue_iso($p3, 16);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i51 := $i94;
    assume {:branchcond $i95} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i96 := queue_iso($p3, 17);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i51 := $i96;
    assume {:branchcond $i97} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i98 := queue_iso($p3, 18);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i51 := $i98;
    assume {:branchcond $i99} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i100 := queue_iso($p3, 19);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i51 := $i100;
    assume {:branchcond $i101} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i102 := queue_iso($p3, 20);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i51 := $i102;
    assume {:branchcond $i103} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i104 := queue_iso($p3, 21);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i51 := $i104;
    assume {:branchcond $i105} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i106 := queue_iso($p3, 22);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i51 := $i106;
    assume {:branchcond $i107} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i108 := queue_iso($p3, 23);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i51 := $i108;
    assume {:branchcond $i109} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i110 := queue_iso($p3, 24);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i51 := $i110;
    assume {:branchcond $i111} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i112 := queue_iso($p3, 25);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i51 := $i112;
    assume {:branchcond $i113} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i114 := queue_iso($p3, 26);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i51 := $i114;
    assume {:branchcond $i115} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i116 := queue_iso($p3, 27);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i51 := $i116;
    assume {:branchcond $i117} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i118 := queue_iso($p3, 28);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i51 := $i118;
    assume {:branchcond $i119} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i120 := queue_iso($p3, 29);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i51 := $i120;
    assume {:branchcond $i121} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i122 := queue_iso($p3, 30);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i51 := $i122;
    assume {:branchcond $i123} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i124 := queue_iso($p3, 31);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i51 := $i124;
    assume {:branchcond $i125} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i126 := queue_iso($p3, 32);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i51 := $i126;
    assume {:branchcond $i127} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i128 := queue_iso($p3, 33);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i51 := $i128;
    assume {:branchcond $i129} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i130 := queue_iso($p3, 34);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i51 := $i130;
    assume {:branchcond $i131} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i132 := queue_iso($p3, 35);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i51 := $i132;
    assume {:branchcond $i133} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i134 := queue_iso($p3, 36);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i51 := $i134;
    assume {:branchcond $i135} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i136 := queue_iso($p3, 37);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i51 := $i136;
    assume {:branchcond $i137} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i138 := queue_iso($p3, 38);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i51 := $i138;
    assume {:branchcond $i139} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i140 := queue_iso($p3, 39);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i51 := $i140;
    assume {:branchcond $i141} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i142 := queue_iso($p3, 40);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i51 := $i142;
    assume {:branchcond $i143} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i144 := queue_iso($p3, 41);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i51 := $i144;
    assume {:branchcond $i145} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i146 := queue_iso($p3, 42);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i51 := $i146;
    assume {:branchcond $i147} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i148 := queue_iso($p3, 43);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i51 := $i148;
    assume {:branchcond $i149} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i150 := queue_iso($p3, 44);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i51 := $i150;
    assume {:branchcond $i151} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i152 := queue_iso($p3, 45);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i51 := $i152;
    assume {:branchcond $i153} true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i154 := queue_iso($p3, 46);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i51 := $i154;
    assume {:branchcond $i155} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i156 := queue_iso($p3, 47);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i51 := $i156;
    assume {:branchcond $i157} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i158 := queue_iso($p3, 48);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i51 := $i158;
    assume {:branchcond $i159} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i160 := queue_iso($p3, 49);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i51 := $i160;
    assume {:branchcond $i161} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i162 := queue_iso($p3, 50);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i51 := $i162;
    assume {:branchcond $i163} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i164 := queue_iso($p3, 51);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i51 := $i164;
    assume {:branchcond $i165} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i166 := queue_iso($p3, 52);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i51 := $i166;
    assume {:branchcond $i167} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i168 := queue_iso($p3, 53);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i51 := $i168;
    assume {:branchcond $i169} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i170 := queue_iso($p3, 54);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i51 := $i170;
    assume {:branchcond $i171} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i172 := queue_iso($p3, 55);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i51 := $i172;
    assume {:branchcond $i173} true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i174 := queue_iso($p3, 56);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i51 := $i174;
    assume {:branchcond $i175} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i176 := queue_iso($p3, 57);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i51 := $i176;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i178 := queue_iso($p3, 58);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i51 := $i178;
    assume {:branchcond $i179} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i180 := queue_iso($p3, 59);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i51 := $i180;
    assume {:branchcond $i181} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i182 := queue_iso($p3, 60);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i51 := $i182;
    assume {:branchcond $i183} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i184 := queue_iso($p3, 61);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i51 := $i184;
    assume {:branchcond $i185} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i186 := queue_iso($p3, 62);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i187 := $ne.i32($i186, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i51 := $i186;
    assume {:branchcond $i187} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i188 := queue_iso($p3, 63);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i51 := $i188;
    assume {:branchcond $i189} true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i55 := fw_iso_context_start($p54, $sub.i32(0, 1), 0, 15);
    call {:si_unique_call 706} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3272, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, $p2);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb27:
    assume $i56 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i52 := $i55;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} fw_iso_buffer_destroy($p58, $p60);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i33 := $i52;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} fw_iso_context_destroy($p62);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i27 := $i33;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p3);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} kfree($p63);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i6 := $i27;
    goto $bb3;

  $bb278:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb23;

  $bb274:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb21;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb21;

  $bb266:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb21;

  $bb262:
    assume {:verifier.code 0} true;
    assume $i181 == 1;
    goto $bb21;

  $bb258:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb21;

  $bb254:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb21;

  $bb250:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb21;

  $bb246:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb21;

  $bb242:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb21;

  $bb238:
    assume {:verifier.code 0} true;
    assume $i169 == 1;
    goto $bb21;

  $bb234:
    assume {:verifier.code 0} true;
    assume $i167 == 1;
    goto $bb21;

  $bb230:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb21;

  $bb226:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb21;

  $bb222:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb21;

  $bb218:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb21;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb21;

  $bb210:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb21;

  $bb206:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb21;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i151 == 1;
    goto $bb21;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb21;

  $bb194:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb21;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb21;

  $bb186:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb21;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb21;

  $bb178:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb21;

  $bb174:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb21;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb21;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb21;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb21;

  $bb158:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb21;

  $bb154:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb21;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb21;

  $bb146:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb21;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb21;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb21;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb21;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb21;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb21;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb21;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb21;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb21;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb21;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb21;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb21;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb21;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb21;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb21;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb21;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb21;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb21;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb21;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb21;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb21;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb21;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb21;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb21;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb21;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb21;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb21;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb21;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb21;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb21;

  $bb15:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i47;
    goto $bb15_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb11;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i25 := PTR_ERR($p24);
    call {:si_unique_call 693} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    call {:si_unique_call 694} {:cexpr "err"} boogie_si_record_i32($i26);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4864;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 319935);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 770} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const handle_iso: ref;

axiom handle_iso == $sub.ref(0, 320967);

procedure handle_iso($p0: ref, $i1: i32, $i2: i64, $p3: ref, $p4: ref);



const fw_iso_context_create: ref;

axiom fw_iso_context_create == $sub.ref(0, 321999);

procedure fw_iso_context_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $p5: ref, $p6: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fw_iso_context_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $p5: ref, $p6: ref) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "fw_iso_context_create:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 773} {:cexpr "fw_iso_context_create:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 774} {:cexpr "fw_iso_context_create:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 775} {:cexpr "fw_iso_context_create:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p7 := external_alloc();
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 323031);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 778} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 324063);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fw_iso_buffer_init: ref;

axiom fw_iso_buffer_init == $sub.ref(0, 325095);

procedure fw_iso_buffer_init($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fw_iso_buffer_init($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 779} {:cexpr "fw_iso_buffer_init:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 780} {:cexpr "fw_iso_buffer_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 781} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 782} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 326127);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 80);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const queue_iso: ref;

axiom queue_iso == $sub.ref(0, 327159);

procedure queue_iso($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.1, $M.34, $M.35, $CurrAddr;



implementation queue_iso($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 784} {:cexpr "queue_iso:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.33 := $store.i16($M.33, $p3, 1024);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 15);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.34, $p14);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i13, 1);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i15, $sub.i8(0, 2));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i18 := $or.i8($i17, $i16);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p14, $i18);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.34, $p19);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i20, $sub.i8(0, 3));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p19, $i21);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $M.35 := $store.i8($M.35, $p22, 4);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i1, 1024);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i28 := fw_iso_context_queue($p24, $p2, $p25, $i27);
    call {:si_unique_call 786} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;
}



const fw_iso_context_start: ref;

axiom fw_iso_context_start == $sub.ref(0, 328191);

procedure fw_iso_context_start($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fw_iso_context_start($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 787} {:cexpr "fw_iso_context_start:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 788} {:cexpr "fw_iso_context_start:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 789} {:cexpr "fw_iso_context_start:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 790} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 791} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fw_iso_context_queue: ref;

axiom fw_iso_context_queue == $sub.ref(0, 329223);

procedure fw_iso_context_queue($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fw_iso_context_queue($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 792} {:cexpr "fw_iso_context_queue:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 793} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 794} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __be32_to_cpup: ref;

axiom __be32_to_cpup == $sub.ref(0, 330255);

procedure __be32_to_cpup($p0: ref) returns ($r: i32);



const dvb_dmx_swfilter_packets: ref;

axiom dvb_dmx_swfilter_packets == $sub.ref(0, 331287);

procedure dvb_dmx_swfilter_packets($p0: ref, $p1: ref, $i2: i64);



const fw_iso_context_queue_flush: ref;

axiom fw_iso_context_queue_flush == $sub.ref(0, 332319);

procedure fw_iso_context_queue_flush($p0: ref);



const __swab32p: ref;

axiom __swab32p == $sub.ref(0, 333351);

procedure __swab32p($p0: ref) returns ($r: i32);



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 334383);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 796} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p2 := ldv_malloc($i0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 335415);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 798} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 799} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 800} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p3 := malloc($i0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i4 := ldv_is_err($p3);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} __VERIFIER_assume($i7);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 336447);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 804} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 337479);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_mutex_lock_interruptible_94: ref;

axiom ldv_mutex_lock_interruptible_94 == $sub.ref(0, 338511);

procedure ldv_mutex_lock_interruptible_94($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_lock_interruptible_94($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 806} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i2 := ldv_mutex_lock_interruptible_demux_mutex_of_firedtv($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 808} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const dealloc_channel: ref;

axiom dealloc_channel == $sub.ref(0, 339543);

procedure dealloc_channel($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation dealloc_channel($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} {:cexpr "dealloc_channel:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __clear_bit($i1, $p2);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    return;
}



const collect_channels: ref;

axiom collect_channels == $sub.ref(0, 340575);

procedure collect_channels($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.37, $M.30, $M.1;



implementation collect_channels($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $p17: ref;
  var $i18: i16;
  var $i19: i64;
  var $p20: ref;
  var $i14: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i64;
  var $p30: ref;
  var $i24: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i64;
  var $p40: ref;
  var $i34: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i45: i32;
  var $p47: ref;
  var $i48: i16;
  var $i49: i64;
  var $p50: ref;
  var $i44: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i55: i32;
  var $p57: ref;
  var $i58: i16;
  var $i59: i64;
  var $p60: ref;
  var $i54: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i65: i32;
  var $p67: ref;
  var $i68: i16;
  var $i69: i64;
  var $p70: ref;
  var $i64: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i75: i32;
  var $p77: ref;
  var $i78: i16;
  var $i79: i64;
  var $p80: ref;
  var $i74: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i85: i32;
  var $p87: ref;
  var $i88: i16;
  var $i89: i64;
  var $p90: ref;
  var $i84: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i95: i32;
  var $p97: ref;
  var $i98: i16;
  var $i99: i64;
  var $p100: ref;
  var $i94: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i105: i32;
  var $p107: ref;
  var $i108: i16;
  var $i109: i64;
  var $p110: ref;
  var $i104: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $i115: i32;
  var $p117: ref;
  var $i118: i16;
  var $i119: i64;
  var $p120: ref;
  var $i114: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $p127: ref;
  var $i128: i16;
  var $i129: i64;
  var $p130: ref;
  var $i124: i32;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $i135: i32;
  var $p137: ref;
  var $i138: i16;
  var $i139: i64;
  var $p140: ref;
  var $i134: i32;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $i145: i32;
  var $p147: ref;
  var $i148: i16;
  var $i149: i64;
  var $p150: ref;
  var $i144: i32;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $p156: ref;
  var $i157: i16;
  var $i158: i64;
  var $p159: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i4 := variable_test_bit(0, $p3);
    call {:si_unique_call 812} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i12 := variable_test_bit(1, $p11);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i9;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i22 := variable_test_bit(2, $p21);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i14;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i32 := variable_test_bit(3, $p31);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i24;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i42 := variable_test_bit(4, $p41);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i34;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i52 := variable_test_bit(5, $p51);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i44;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i62 := variable_test_bit(6, $p61);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i54;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i72 := variable_test_bit(7, $p71);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i64;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i82 := variable_test_bit(8, $p81);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $i74;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i92 := variable_test_bit(9, $p91);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $i84;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i102 := variable_test_bit(10, $p101);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $i94;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i112 := variable_test_bit(11, $p111);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $i104;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i122 := variable_test_bit(12, $p121);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $i114;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i132 := variable_test_bit(13, $p131);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $i124;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i142 := variable_test_bit(14, $p141);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i144 := $i134;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i152 := variable_test_bit(15, $p151);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i144;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p1, $i10);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    return;

  $bb64:
    assume $i153 == 1;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i144, 1);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(15, 2));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.1, $p156);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i144);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p2, $mul.ref($i158, 2));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p159, $i157);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i10 := $i154;
    goto $bb66;

  $bb60:
    assume $i143 == 1;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i134, 1);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(14, 2));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i148 := $load.i16($M.1, $p147);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i134);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p2, $mul.ref($i149, 2));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p150, $i148);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i144 := $i145;
    goto $bb62;

  $bb56:
    assume $i133 == 1;
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i124, 1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(13, 2));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.1, $p137);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i124);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p2, $mul.ref($i139, 2));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p140, $i138);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i134 := $i135;
    goto $bb58;

  $bb52:
    assume $i123 == 1;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i114, 1);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(12, 2));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.1, $p127);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i114);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p2, $mul.ref($i129, 2));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p130, $i128);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i124 := $i125;
    goto $bb54;

  $bb48:
    assume $i113 == 1;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i104, 1);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(11, 2));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.1, $p117);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i104);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p2, $mul.ref($i119, 2));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p120, $i118);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i114 := $i115;
    goto $bb50;

  $bb44:
    assume $i103 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i94, 1);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(10, 2));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.1, $p107);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i94);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p2, $mul.ref($i109, 2));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p110, $i108);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i104 := $i105;
    goto $bb46;

  $bb40:
    assume $i93 == 1;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i84, 1);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(9, 2));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i98 := $load.i16($M.1, $p97);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i84);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p2, $mul.ref($i99, 2));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p100, $i98);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i94 := $i95;
    goto $bb42;

  $bb36:
    assume $i83 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i74, 1);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(8, 2));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.1, $p87);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i74);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p2, $mul.ref($i89, 2));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p90, $i88);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i84 := $i85;
    goto $bb38;

  $bb32:
    assume $i73 == 1;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i64, 1);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(7, 2));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.1, $p77);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i64);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p2, $mul.ref($i79, 2));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p80, $i78);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i74 := $i75;
    goto $bb34;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i54, 1);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(6, 2));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.1, $p67);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i54);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p2, $mul.ref($i69, 2));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p70, $i68);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb30;

  $bb24:
    assume $i53 == 1;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i44, 1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(5, 2));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.1, $p57);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i44);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p2, $mul.ref($i59, 2));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p60, $i58);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i54 := $i55;
    goto $bb26;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i34, 1);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(4, 2));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.1, $p47);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i34);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p2, $mul.ref($i49, 2));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p50, $i48);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb22;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i24, 1);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(3, 2));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i24);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p2, $mul.ref($i39, 2));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p40, $i38);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i34 := $i35;
    goto $bb18;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i14, 1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(2, 2));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i14);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p2, $mul.ref($i29, 2));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p30, $i28);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb14;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i9, 1);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(1, 2));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i9);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p2, $mul.ref($i19, 2));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p20, $i18);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb10;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3464, 1)), $mul.ref(0, 2));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.1, $p7);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p2, $i8);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb5;
}



const avc_tuner_set_pids: ref;

axiom avc_tuner_set_pids == $sub.ref(0, 341607);

procedure avc_tuner_set_pids($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_tuner_set_pids($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i38: i32;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i16;
  var $i63: i8;
  var $i64: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i36: i32;
  var $i37: i32;
  var $i77: i32;
  var $i35: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} {:cexpr "avc_tuner_set_pids:arg:pidc"} boogie_si_record_i8($i1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 16);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_mutex_lock_10($p10);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 0);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 40);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $i16);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $sub.i8(0, 53));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, $sub.i8(0, 46));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 32);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, 0);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, 0);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, $i1);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i1);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 255);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i78 := 6;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} pad_operands($p4, $i78);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 6);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, $sub.i32(0, 4));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p81, $i80);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i82 := avc_write($p0);
    call {:si_unique_call 839} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_mutex_unlock_11($p83);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i82, 0);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i9 := $i82;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb19:
    assume $i84 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} msleep(50);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i1);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, 0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i35 := 6;
    assume {:branchcond $i34} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i78 := $i35;
    goto $bb18;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i36, $i37 := 0, 6;
    goto $bb13;

  $bb13:
    call $i38, $i39, $p41, $i42, $i43, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $p66, $i67, $i68, $p70, $i71, $i72, $p74, $i75, $i76, $i36, $i37, $i77 := avc_tuner_set_pids_loop_$bb13($p2, $p4, $i33, $i38, $i39, $p41, $i42, $i43, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $p66, $i67, $i68, $p70, $i71, $i72, $p74, $i75, $i76, $i36, $i37, $i77);
    goto $bb13_last;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    call {:si_unique_call 830} {:cexpr "pos"} boogie_si_record_i32($i38);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i37);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i39, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, 19);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i38, 1);
    call {:si_unique_call 831} {:cexpr "pos"} boogie_si_record_i32($i42);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i38);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i43, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p45, $sub.i8(0, 128));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i42, 1);
    call {:si_unique_call 832} {:cexpr "pos"} boogie_si_record_i32($i46);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i36);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p2, $mul.ref($i47, 2));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.37, $p48);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i51 := $ashr.i32($i50, 8);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 31);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i42);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i56, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p58, $i55);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i46, 1);
    call {:si_unique_call 833} {:cexpr "pos"} boogie_si_record_i32($i59);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i36);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p2, $mul.ref($i60, 2));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.37, $p61);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i16.i8($i62);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i46);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i64, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p66, $i63);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i59, 1);
    call {:si_unique_call 834} {:cexpr "pos"} boogie_si_record_i32($i67);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i59);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i68, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p70, 0);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i67, 1);
    call {:si_unique_call 835} {:cexpr "pos"} boogie_si_record_i32($i71);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i67);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref($i72, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p74, 0);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i36, 1);
    call {:si_unique_call 836} {:cexpr "k"} boogie_si_record_i32($i75);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i33, $i75);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i77 := $i71;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i35 := $i77;
    goto $bb12;

  $bb15:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i36, $i37 := $i75, $i71;
    goto $bb15_dummy;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 255);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5465;
}



const ldv_mutex_unlock_95: ref;

axiom ldv_mutex_unlock_95 == $sub.ref(0, 342639);

procedure ldv_mutex_unlock_95($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_unlock_95($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_mutex_unlock_demux_mutex_of_firedtv($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} mutex_unlock($p0);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_demux_mutex_of_firedtv: ref;

axiom ldv_mutex_unlock_demux_mutex_of_firedtv == $sub.ref(0, 343671);

procedure ldv_mutex_unlock_demux_mutex_of_firedtv($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_unlock_demux_mutex_of_firedtv($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i1 := $M.38;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ldv_error();
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_mutex_demux_mutex_of_firedtv"} boogie_si_record_i32(1);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_10: ref;

axiom ldv_mutex_lock_10 == $sub.ref(0, 344703);

procedure ldv_mutex_lock_10($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} mutex_lock($p0);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 345735);

procedure ldv_mutex_unlock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} mutex_unlock($p0);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const __clear_bit: ref;

axiom __clear_bit == $sub.ref(0, 346767);

procedure __clear_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation __clear_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} {:cexpr "__clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 851} devirtbounce.7(0, $p1, $i0, $p1);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 347799);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 852} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_demux_mutex_of_firedtv: ref;

axiom ldv_mutex_lock_interruptible_demux_mutex_of_firedtv == $sub.ref(0, 348831);

procedure ldv_mutex_lock_interruptible_demux_mutex_of_firedtv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_lock_interruptible_demux_mutex_of_firedtv($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i1 := $M.38;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ldv_error();
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 855} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 856} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 857} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 858} {:cexpr "ldv_mutex_demux_mutex_of_firedtv"} boogie_si_record_i32(2);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_interruptible_92: ref;

axiom ldv_mutex_lock_interruptible_92 == $sub.ref(0, 349863);

procedure ldv_mutex_lock_interruptible_92($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_lock_interruptible_92($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 860} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i2 := ldv_mutex_lock_interruptible_demux_mutex_of_firedtv($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 862} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const alloc_channel: ref;

axiom alloc_channel == $sub.ref(0, 350895);

procedure alloc_channel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed;



implementation alloc_channel($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i7: i32;
  var $i8: i1;
  var $i1: i32;
  var $i9: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $p2, $i3, $i4, $i5, $i7, $i8, $i1, $i9 := alloc_channel_loop_$bb1($p0, $p2, $i3, $i4, $i5, $i7, $i8, $i1, $i9);
    goto $bb1_last;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i3 := __test_and_set_bit($i1, $p2);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    call {:si_unique_call 864} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i1, 1);
    call {:si_unique_call 865} {:cexpr "i"} boogie_si_record_i32($i7);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i8 := $sle.i32($i7, 15);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb7:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i7;
    goto $bb7_dummy;

  $bb3:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb5;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5574;
}



const avc_tuner_get_ts: ref;

axiom avc_tuner_get_ts == $sub.ref(0, 351927);

procedure avc_tuner_get_ts($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed, $CurrAddr;



implementation avc_tuner_get_ts($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i8;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} ldv_mutex_lock_12($p3);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 0);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 40);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(1, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $i9);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(2, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, $sub.i8(0, 56));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 0);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(1, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, $sub.i8(0, 46));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(2, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $sub.i8(0, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(3, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 32);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(4, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 0);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(5, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i15);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(6, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, $i28);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} clear_operands($p2, 7, 24);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3264, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, 28);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i36 := avc_write($p0);
    call {:si_unique_call 869} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(2912, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_mutex_unlock_13($p37);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i36, 0);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} msleep(250);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, 24);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i15 := 12;
    goto $bb3;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_93: ref;

axiom ldv_mutex_unlock_93 == $sub.ref(0, 352959);

procedure ldv_mutex_unlock_93($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_unlock_93($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_mutex_unlock_demux_mutex_of_firedtv($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} mutex_unlock($p0);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 353991);

procedure ldv_mutex_lock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} mutex_lock($p0);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 355023);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} mutex_unlock($p0);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const __test_and_set_bit: ref;

axiom __test_and_set_bit == $sub.ref(0, 356055);

procedure __test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed;



implementation __test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} {:cexpr "__test_and_set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 879} $i2 := devirtbounce.8(0, $p1, $i0, $p1);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 880} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_14: ref;

axiom ldv_mutex_lock_14 == $sub.ref(0, 357087);

procedure ldv_mutex_lock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_mutex_lock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} mutex_lock($p0);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 358119);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_mutex_unlock_avc_mutex_of_firedtv($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} mutex_unlock($p0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 359151);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    return;
}



const input_allocate_device: ref;

axiom input_allocate_device == $sub.ref(0, 360183);

procedure input_allocate_device() returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation input_allocate_device() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $p0 := kzalloc(2024, 208);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 361215);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 887} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p3 := external_alloc();
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 362247);

procedure set_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} {:cexpr "set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 890} devirtbounce.7(0, $p1, $i0, $p1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    return;
}



const input_register_device: ref;

axiom input_register_device == $sub.ref(0, 363279);

procedure input_register_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation input_register_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 891} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 892} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const input_free_device: ref;

axiom input_free_device == $sub.ref(0, 364311);

procedure input_free_device($p0: ref);
  free requires assertsPassed;



implementation input_free_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    return;
}



const handle_fcp: ref;

axiom handle_fcp == $sub.ref(0, 365343);

procedure handle_fcp($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4, $CurrAddr;



implementation handle_fcp($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref)
{
  var $i10: i1;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $p44: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p27: ref;
  var $p50: ref;
  var $i59: i64;
  var $i60: i1;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} {:cexpr "handle_fcp:arg:tcode"} boogie_si_record_i32($i2);
    call {:si_unique_call 894} {:cexpr "handle_fcp:arg:destination"} boogie_si_record_i32($i3);
    call {:si_unique_call 895} {:cexpr "handle_fcp:arg:source"} boogie_si_record_i32($i4);
    call {:si_unique_call 896} {:cexpr "handle_fcp:arg:generation"} boogie_si_record_i32($i5);
    call {:si_unique_call 897} {:cexpr "handle_fcp:arg:offset"} boogie_si_record_i64($i6);
    call {:si_unique_call 898} {:cexpr "handle_fcp:arg:length"} boogie_si_record_i64($i8);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i10 := $ule.i64($i8, 1);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p7);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 240);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p7, $mul.ref(1, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 7);
    call {:si_unique_call 899} {:cexpr "su"} boogie_si_record_i32($i18);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p19 := spinlock_check(node_list_lock);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i20 := _raw_spin_lock_irqsave($p19);
    call {:si_unique_call 902} {:cexpr "flags"} boogie_si_record_i64($i20);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, node_list);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 8), 4016));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 8), 4016)), $mul.ref(8, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $p2i.ref.i64(node_list));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p50 := $0.ref;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} spin_unlock_irqrestore(node_list_lock, $i20);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p50);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i60 == 1;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_72 := avc_recv($p50, $p7, $i8);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p27 := $p23;
    goto $bb11;

  $bb11:
    call $p28, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $p40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49, $p44, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $p27 := handle_fcp_loop_$bb11($p0, $i4, $i5, $i18, $p28, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $p40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49, $p44, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $p27);
    goto $bb11_last;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p28 := device_of($p27);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1752)), $mul.ref(20, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, $i5);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call {:si_unique_call 904} devirtbounce.1(0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p28, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p0);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i34, $i35);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 4016)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref($sub.ref(0, 8), 4016));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p54, $mul.ref($sub.ref(0, 8), 4016)), $mul.ref(8, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, $p2i.ref.i64(node_list));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i58 == 1);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb31:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $p27 := $p55;
    goto $bb31_dummy;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p28, $mul.ref(0, 1752)), $mul.ref(16, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, $i4);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb19;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p27, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, $i18);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p44 := $p27;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i43 == 1);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p27, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i46);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb19;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i18, 7);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p44 := $p27;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb19;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p50 := $p44;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb23;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb31_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5709;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 366375);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 367407);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 907} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 908} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 368439);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 369471);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 370503);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.40, $M.43, $M.48;



implementation ldv_main_exported_4()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i64;
  var vslice_dummy_var_77: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 912} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 913} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 914} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i39 := $M.40;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb34:
    assume $i40 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p41 := $M.42;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i42 := $M.49;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i43 := $M.50;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_77 := dvb_generic_ioctl($p41, $i42, $i43);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i30 := $M.40;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume $i31 == 1;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p32 := $M.41;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p33 := $M.42;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i34 := dvb_generic_open($p32, $p33);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.48 := $i34;
    call {:si_unique_call 925} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i34);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i35 := $M.48;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i36 == 1;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i37 := $M.43;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $M.43 := $i38;
    call {:si_unique_call 927} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i24 := $M.40;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i25 == 1;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p26 := $M.42;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i27 := $M.46;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i28 := $M.47;
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_76 := noop_llseek($p26, $i27, $i28);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i14 := $M.40;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i19 := $M.40;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume $i20 == 1;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p21 := $M.44;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p22 := $M.45;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_75 := fdtv_ca_io_poll($p21, $p22);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i15 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p16 := $M.44;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p17 := $M.45;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_74 := fdtv_ca_io_poll($p16, $p17);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i7 := $M.40;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p9 := $M.41;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p10 := $M.42;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_73 := dvb_generic_release($p9, $p10);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i12 := $M.43;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i12, 1);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $M.43 := $i13;
    call {:si_unique_call 917} {:cexpr "ref_cnt"} boogie_si_record_i32($i13);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 371535);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.51, $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed;



implementation ldv_main_exported_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 930} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 931} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 932} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i1 == 1;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i2 := $M.51;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p4 := $M.52;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i5 := $M.53;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p6 := $M.54;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_78 := fdtv_ca_ioctl($p4, $i5, $p6);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 934} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 372567);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.55, $M.43, $M.56, $M.51, $M.57, $M.48, $M.1, $M.60, $M.61, $M.41, $M.42, $M.44, $M.45, $M.46, $M.47, $M.49, $M.50, $M.52, $M.53, $M.54, $M.58, $M.59, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.3, $M.29, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.39, $M.27, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.26, $M.74, $M.73, $M.38, $M.72, $M.24, $M.25, $M.0, $CurrAddr, $M.28, $M.19, $M.20, $M.21, $M.22, $M.23, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.4, assertsPassed, $M.37, $M.30, $M.33, $M.34, $M.35;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var vslice_dummy_var_79: i32;

  $bb0:
    call {:si_unique_call 935} $initialize();
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_initialize();
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 938} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 940} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 942} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $p70, vslice_dummy_var_79 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $p70, vslice_dummy_var_79);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i55 := $M.57;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb82:
    assume $i56 == 1;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 977} $i57 := __VERIFIER_nondet_int();
    call {:si_unique_call 978} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i57);
    call {:si_unique_call 979} {:cexpr "tmp___2"} boogie_si_record_i32($i57);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb85:
    assume $i58 == 1;
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i59 := $M.57;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i60 == 1;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p61 := $M.62;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p62 := $M.63;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i63 := $M.64;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i64 := $M.65;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i65 := $M.66;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i66 := $M.67;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i67 := $M.68;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p68 := $M.69;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i69 := $M.70;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p70 := $M.71;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} handle_fcp($p61, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $p70);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i53 := $M.51;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb79:
    assume $i54 == 1;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ldv_main_exported_3();
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i36 := $M.56;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb50:
    assume $i37 == 1;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 1} true;
    call {:si_unique_call 962} $i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 963} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i38);
    call {:si_unique_call 964} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb55:
    assume $i40 == 1;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i46 := $M.56;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb68:
    assume $i47 == 1;
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i48 := fdtv_init();
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $M.61 := $i48;
    call {:si_unique_call 969} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i48);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i49 := $M.61;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i51 := $M.61;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i52 == 1;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i50 == 1;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} ldv_check_final_state();
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb57;

  $bb58:
    assume $i41 == 1;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i42 := $M.56;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb60:
    assume $i43 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i44 := $M.43;
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb62;

  $bb63:
    assume $i45 == 1;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} fdtv_exit();
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 966} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i9 := $M.55;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i10 == 1;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 948} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 949} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 950} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i30 := $M.55;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume $i31 == 1;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p32 := $M.59;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} vslice_dummy_var_79 := node_remove($p32);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i34 := $M.43;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i34, 1);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $M.43 := $i35;
    call {:si_unique_call 961} {:cexpr "ref_cnt"} boogie_si_record_i32($i35);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i13 == 1;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i22 := $M.55;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i23 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p24 := $M.59;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i25 := node_probe($p24);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.60 := $i25;
    call {:si_unique_call 956} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i25);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i26 := $M.60;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i27 == 1;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i28 := $M.43;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.43 := $i29;
    call {:si_unique_call 958} {:cexpr "ref_cnt"} boogie_si_record_i32($i29);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb29;

  $bb30:
    assume $i15 == 1;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i16 := $M.55;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i19 := $M.55;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i20 == 1;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p21 := $M.58;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} node_update($p21);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i17 == 1;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p18 := $M.58;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} node_update($p18);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb12:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb11;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i7 := $M.40;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i8 == 1;
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} ldv_main_exported_4();
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 945} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 946} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 373599);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.24, $M.72, $M.38, $M.73, $M.74;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 982} {:cexpr "ldv_mutex_avc_mutex_of_firedtv"} boogie_si_record_i32(1);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 984} {:cexpr "ldv_mutex_demux_mutex_of_firedtv"} boogie_si_record_i32(1);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 986} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    return;
}



const fdtv_exit: ref;

axiom fdtv_exit == $sub.ref(0, 374631);

procedure fdtv_exit();
  free requires assertsPassed;



implementation fdtv_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} driver_unregister(fdtv_driver);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} fw_core_remove_address_handler(fcp_handler);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    return;
}



const fdtv_init: ref;

axiom fdtv_init == $sub.ref(0, 375663);

procedure fdtv_init() returns ($r: i32);
  free requires assertsPassed;



implementation fdtv_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i0 := fw_core_add_address_handler(fcp_handler, fcp_region);
    call {:si_unique_call 990} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i3 := driver_register(fdtv_driver);
    call {:si_unique_call 992} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} fw_core_remove_address_handler(fcp_handler);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 376695);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i0 := $M.24;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ldv_error();
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.72;
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_error();
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.38;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ldv_error();
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.73;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ldv_error();
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.74;
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_error();
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fw_core_add_address_handler: ref;

axiom fw_core_add_address_handler == $sub.ref(0, 377727);

procedure fw_core_add_address_handler($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_core_add_address_handler($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 999} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1000} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const driver_register: ref;

axiom driver_register == $sub.ref(0, 378759);

procedure driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1001} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1002} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fw_core_remove_address_handler: ref;

axiom fw_core_remove_address_handler == $sub.ref(0, 379791);

procedure fw_core_remove_address_handler($p0: ref);
  free requires assertsPassed;



implementation fw_core_remove_address_handler($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    return;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 380823);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 381855);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1003} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 1} true;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 382887);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 383919);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 384951);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 385983);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 387015);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 388047);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 389079);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 390111);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 391143);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 392175);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 393207);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 394239);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 395271);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1004} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1005} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1006} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1007} __VERIFIER_assume($i4);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 396303);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 397335);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 398367);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 399399);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1008} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1009} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1010} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1011} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1012} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1013} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1014} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1015} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1016} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1017} __VERIFIER_assume($i7);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1018} __VERIFIER_assume($i11);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 400431);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 401463);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1020} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1021} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1022} __VERIFIER_assume($i4);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 402495);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 403527);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 404559);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 405591);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 406623);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1023} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1024} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1025} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1026} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1027} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1028} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1029} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1030} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1031} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1032} __VERIFIER_assume($i7);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1033} __VERIFIER_assume($i11);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 407655);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 408687);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 409719);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 410751);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 411783);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 412815);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 413847);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 414879);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 415911);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1034} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1035} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1036} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} __VERIFIER_assume($i10);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 416943);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1039} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1040} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 417975);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1041} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1042} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1043} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 419007);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1044} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1045} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 420039);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 421071);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1046} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1047} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 422103);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 423135);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 424167);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 425199);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.3, $M.29, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.1, $M.39, $M.27, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.26, $M.74, $M.73, $M.38, $M.72, $M.24, $M.25, $M.0;



implementation __SMACK_static_init()
{

  $bb0:
    $M.40 := 0;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := 0;
    call {:si_unique_call 1049} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.44 := $0.ref;
    $M.45 := $0.ref;
    $M.46 := 0;
    call {:si_unique_call 1050} {:cexpr "ldvarg3"} boogie_si_record_i64(0);
    $M.47 := 0;
    call {:si_unique_call 1051} {:cexpr "ldvarg2"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1052} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1053} {:cexpr "ldvarg1"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1054} {:cexpr "ldvarg0"} boogie_si_record_i64(0);
    $M.51 := 0;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.52 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1056} {:cexpr "ldvarg9"} boogie_si_record_i32(0);
    $M.54 := $0.ref;
    $M.55 := 0;
    call {:si_unique_call 1057} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1059} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.58 := $0.ref;
    $M.59 := $0.ref;
    $M.60 := 0;
    call {:si_unique_call 1060} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1061} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.63 := $0.ref;
    $M.64 := 0;
    call {:si_unique_call 1062} {:cexpr "ldvarg11"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1063} {:cexpr "ldvarg17"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1064} {:cexpr "ldvarg19"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1065} {:cexpr "ldvarg10"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1066} {:cexpr "ldvarg12"} boogie_si_record_i64(0);
    $M.69 := $0.ref;
    $M.70 := 0;
    call {:si_unique_call 1067} {:cexpr "ldvarg13"} boogie_si_record_i64(0);
    $M.71 := $0.ref;
    $M.3 := $store.i16($M.3, oldtable, 1);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(1, 2)), 67);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(2, 2)), 2);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(3, 2)), 3);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(4, 2)), 4);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(5, 2)), 5);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(6, 2)), 6);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(7, 2)), 7);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(8, 2)), 8);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(9, 2)), 9);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(10, 2)), 10);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(11, 2)), 23);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(12, 2)), 11);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(13, 2)), 28);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(14, 2)), 398);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(15, 2)), 103);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(16, 2)), 399);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(17, 2)), 68);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(18, 2)), 57);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(19, 2)), 87);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(20, 2)), 400);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(21, 2)), 108);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(22, 2)), 401);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(23, 2)), 44);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(24, 2)), 25);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(25, 2)), 109);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(26, 2)), 105);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(27, 2)), 17);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(28, 2)), 106);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(29, 2)), 25);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(30, 2)), 50);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(31, 2)), 19);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(32, 2)), 47);
    $M.3 := $store.i16($M.3, $add.ref($add.ref(oldtable, $mul.ref(0, 68)), $mul.ref(33, 2)), 46);
    $M.29 := $store.i16($M.29, keytable, 116);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(1, 2)), 142);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(2, 2)), 128);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(3, 2)), 352);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(4, 2)), 106);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(5, 2)), 2);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(6, 2)), 3);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(7, 2)), 4);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(8, 2)), 105);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(9, 2)), 5);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(10, 2)), 6);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(11, 2)), 7);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(12, 2)), 103);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(13, 2)), 8);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(14, 2)), 9);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(15, 2)), 10);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(16, 2)), 108);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(17, 2)), 369);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(18, 2)), 11);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(19, 2)), 190);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(20, 2)), 375);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(21, 2)), 113);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(22, 2)), 370);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(23, 2)), 167);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(24, 2)), 388);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(25, 2)), 392);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(26, 2)), 398);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(27, 2)), 412);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(28, 2)), 168);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(29, 2)), 164);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(30, 2)), 407);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(31, 2)), 115);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(32, 2)), 402);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(33, 2)), 191);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(34, 2)), 377);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(35, 2)), 389);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(36, 2)), 379);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(37, 2)), 390);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(38, 2)), 399);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(39, 2)), 400);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(40, 2)), 401);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(41, 2)), 363);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(42, 2)), 360);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(43, 2)), 114);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(44, 2)), 403);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(45, 2)), 405);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(46, 2)), 358);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(47, 2)), 159);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(48, 2)), 395);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(49, 2)), 364);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(50, 2)), 139);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(51, 2)), 365);
    $M.29 := $store.i16($M.29, $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(52, 2)), 174);
    $M.89 := $store.i32($M.89, fdtv_id_table, 15);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(4, 1)), 4743);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(8, 1)), 36);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(12, 1)), 41005);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(16, 1)), 65537);
    $M.94 := $store.i64($M.94, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(0, 1)), 15);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(4, 1)), 4743);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(8, 1)), 37);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(12, 1)), 41005);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(16, 1)), 65537);
    $M.94 := $store.i64($M.94, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(0, 1)), 15);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(4, 1)), 4743);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(8, 1)), 38);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(12, 1)), 41005);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(16, 1)), 65537);
    $M.94 := $store.i64($M.94, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(0, 1)), 15);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(4, 1)), 4743);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(8, 1)), 52);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(12, 1)), 41005);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(16, 1)), 65537);
    $M.94 := $store.i64($M.94, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(0, 1)), 15);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(4, 1)), 4743);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(8, 1)), 53);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(12, 1)), 41005);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(16, 1)), 65537);
    $M.94 := $store.i64($M.94, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(0, 1)), 15);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(4, 1)), 4743);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(8, 1)), 54);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(12, 1)), 41005);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(16, 1)), 65537);
    $M.94 := $store.i64($M.94, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.94 := $store.i64($M.94, $add.ref($add.ref($add.ref(fdtv_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.ref($M.1, node_list, node_list);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(node_list, $mul.ref(0, 16)), $mul.ref(8, 1)), node_list);
    $M.39 := $store.i32($M.39, node_list_lock, 0);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.75);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(node_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.27 := $store.ref($M.27, model_names, .str.70);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(model_names, $mul.ref(0, 40)), $mul.ref(1, 8)), .str.71);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(model_names, $mul.ref(0, 40)), $mul.ref(2, 8)), .str.72);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(model_names, $mul.ref(0, 40)), $mul.ref(3, 8)), .str.73);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(model_names, $mul.ref(0, 40)), $mul.ref(4, 8)), .str.74);
    $M.112 := $store.i16($M.112, adapter_nr, $sub.i16(0, 1));
    $M.112 := $store.i16($M.112, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(1, 2)), $sub.i16(0, 1));
    $M.112 := $store.i16($M.112, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(2, 2)), $sub.i16(0, 1));
    $M.112 := $store.i16($M.112, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.112 := $store.i16($M.112, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(4, 2)), $sub.i16(0, 1));
    $M.112 := $store.i16($M.112, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 1));
    $M.112 := $store.i16($M.112, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(6, 2)), $sub.i16(0, 1));
    $M.112 := $store.i16($M.112, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 1));
    $M.113 := $store.ref($M.113, fdtv_ca_fops, __this_module);
    $M.114 := $store.ref($M.114, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(8, 1)), noop_llseek);
    $M.115 := $store.ref($M.115, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(16, 1)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(24, 1)), $0.ref);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(32, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(40, 1)), $0.ref);
    $M.119 := $store.ref($M.119, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(48, 1)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(56, 1)), fdtv_ca_io_poll);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(64, 1)), dvb_generic_ioctl);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(72, 1)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(80, 1)), $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(88, 1)), dvb_generic_open);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(96, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(104, 1)), dvb_generic_release);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(112, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(120, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(128, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(136, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(144, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(152, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(160, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(168, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(176, 1)), $0.ref);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(184, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(192, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(200, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(fdtv_ca_fops, $mul.ref(0, 216)), $mul.ref(208, 1)), $0.ref);
    $M.140 := $store.ref($M.140, fdtv_ca, $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(16, 1)), fdtv_ca_fops);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(24, 1)), $0.ref);
    $M.140 := $store.i32($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(32, 1)), 0);
    $M.140 := $store.i32($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(36, 1)), 0);
    $M.140 := $store.i32($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(40, 1)), 0);
    $M.140 := $store.i32($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(44, 1)), 1);
    $M.140 := $store.i32($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(48, 1)), 1);
    $M.140 := $store.i32($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(52, 1)), 1);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.140 := $store.i64($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(144, 1)), fdtv_ca_ioctl);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(fdtv_ca, $mul.ref(0, 160)), $mul.ref(152, 1)), $0.ref);
    $M.26 := $store.i32($M.26, fake_ca_system_ids, $sub.i32(0, 1));
    $M.26 := $store.i32($M.26, $add.ref($add.ref(fake_ca_system_ids, $mul.ref(0, 16)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.26 := $store.i32($M.26, $add.ref($add.ref(fake_ca_system_ids, $mul.ref(0, 16)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.26 := $store.i32($M.26, $add.ref($add.ref(fake_ca_system_ids, $mul.ref(0, 16)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.74 := 0;
    call {:si_unique_call 1068} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1069} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1070} {:cexpr "ldv_mutex_demux_mutex_of_firedtv"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1071} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1072} {:cexpr "ldv_mutex_avc_mutex_of_firedtv"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1073} {:cexpr "num_fake_ca_system_ids"} boogie_si_record_i32(0);
    $M.0 := 0;
    call {:si_unique_call 1074} {:cexpr "avc_debug"} boogie_si_record_i32(0);
    $M.1 := $store.i8($M.1, .str.70, 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(1, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(2, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(3, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(5, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(9, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(10, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.70, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.71, 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(4, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(5, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(6, 1)), 86);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(8, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(9, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(10, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(11, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.72, 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(4, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(5, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(6, 1)), 86);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(8, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(9, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(10, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(11, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.73, 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(4, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(5, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(6, 1)), 86);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(8, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(9, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(10, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(11, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.74, 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(4, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(5, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(6, 1)), 86);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(8, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(9, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(11, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.24, 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(4, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(5, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(6, 1)), 86);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(10, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(11, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(16, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(17, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(19, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(20, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(21, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    call {:si_unique_call 1075} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 426231);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 427263);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 428295);

procedure devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 429327);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.19, $M.20, $M.21, $M.22, $M.23, $M.38, $M.37, $M.30, $CurrAddr, $M.24, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, assertsPassed, $M.33, $M.34, $M.35;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(fdtv_set_frontend, $p0);
    assume {:branchcond $i21} true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i21 == 1);
    $i20 := $eq.ref(fdtv_sleep, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i20 == 1);
    $i19 := $eq.ref(fdtv_dvb_init, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(fdtv_stop_feed, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i18 == 1);
    $i17 := $eq.ref(fdtv_start_feed, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i17 == 1);
    $i16 := $eq.ref(node_remove, $p0);
    assume {:branchcond $i16} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i16 == 1);
    $i15 := $eq.ref(node_probe, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1076} $i2 := node_probe($p1);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    $r := $i2;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1077} $i4 := node_remove($p3);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    $r := $i4;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1078} $i6 := fdtv_start_feed($p5);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    $r := $i6;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1079} $i8 := fdtv_stop_feed($p7);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    $r := $i8;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1080} $i10 := fdtv_dvb_init($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i20 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1081} $i12 := fdtv_sleep($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i21 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1082} $i14 := fdtv_set_frontend($p13);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    $r := $i14;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 430359);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.4, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i36 := $eq.ref(fdtv_diseqc_send_master_cmd, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i36 == 1);
    $i35 := $eq.ref(fdtv_read_uncorrected_blocks, $p0);
    assume {:branchcond $i35} true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i35 == 1);
    $i34 := $eq.ref(fdtv_read_snr, $p0);
    assume {:branchcond $i34} true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i34 == 1);
    $i33 := $eq.ref(fdtv_read_signal_strength, $p0);
    assume {:branchcond $i33} true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i33 == 1);
    $i32 := $eq.ref(fdtv_read_ber, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i32 == 1);
    $i31 := $eq.ref(fdtv_read_status, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i31 == 1);
    $i30 := $eq.ref(dvb_generic_release, $p0);
    assume {:branchcond $i30} true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i30 == 1);
    $i29 := $eq.ref(dvb_generic_open, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i29 == 1);
    $i28 := $eq.ref(fdtv_ca_io_poll, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume false;
    return;

  $bb2:
    assume $i28 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1083} $i3 := fdtv_ca_io_poll($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i29 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1084} $i6 := dvb_generic_open($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i30 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1085} $i9 := dvb_generic_release($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i31 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1086} $i12 := fdtv_read_status($p10, $p11);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    $r := $i12;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i32 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1087} $i15 := fdtv_read_ber($p13, $p14);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    $r := $i15;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i33 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1088} $i18 := fdtv_read_signal_strength($p16, $p17);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    $r := $i18;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i34 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1089} $i21 := fdtv_read_snr($p19, $p20);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    $r := $i21;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i35 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1090} $i24 := fdtv_read_uncorrected_blocks($p22, $p23);
    $r := $i24;
    return;

  $bb10:
    assume $i36 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1091} $i27 := fdtv_diseqc_send_master_cmd($p25, $p26);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    $r := $i27;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 431391);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 432423);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(fdtv_set_voltage, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(fdtv_set_tone, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(fdtv_diseqc_send_burst, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1092} $i2 := fdtv_diseqc_send_burst($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1093} $i4 := fdtv_set_tone($p3, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1094} $i6 := fdtv_set_voltage($p5, arg1);
    $r := $i6;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 433455);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 434487);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(fdtv_ca_ioctl, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1095} $i3 := fdtv_ca_ioctl($p1, arg1, $p2);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    $r := $i3;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.3, $M.29, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.1, $M.39, $M.27, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.26, $M.74, $M.73, $M.38, $M.72, $M.24, $M.25, $M.0, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1096} __SMACK_static_init();
    call {:si_unique_call 1097} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.40, $M.55, $M.43, $M.56, $M.51, $M.57, $M.48, $M.1, $M.60, $M.61, $M.41, $M.42, $M.44, $M.45, $M.46, $M.47, $M.49, $M.50, $M.52, $M.53, $M.54, $M.58, $M.59, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.3, $M.29, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.39, $M.27, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.26, $M.74, $M.73, $M.38, $M.72, $M.24, $M.25, $M.0, $CurrAddr, $M.28, $M.19, $M.20, $M.21, $M.22, $M.23, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.4, $M.37, $M.30, $M.33, $M.34, $M.35;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation avc_write_loop_$bb15(in_$p1: ref, in_$p41: ref, in_$p42: ref, in_$i47: i64, in_$i46: i64, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$i52: i8, in_$i53: i1) returns (out_$i47: i64, out_$i46: i64, out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$i52: i8, out_$i53: i1)
{

  entry:
    out_$i47, out_$i46, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53 := in_$i47, in_$i46, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := out_$i49;
    goto $bb22_dummy;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i49;
    assume true;
    goto $bb22;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i8.i1(out_$i52);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.1, in_$p42);
    goto corral_source_split_1068;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} prepare_to_wait(in_$p41, in_$p1, 2);
    goto corral_source_split_1067;

  $bb20:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    assume true;
    goto $bb20;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i64(out_$i49, 0);
    goto corral_source_split_1063;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} out_$i49 := schedule_timeout(out_$i46);
    call {:si_unique_call 131} {:cexpr "__ret"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_1062;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i47, out_$i46, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53 := avc_write_loop_$bb15(in_$p1, in_$p41, in_$p42, out_$i47, out_$i46, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53);
    return;

  exit:
    return;
}



procedure avc_write_loop_$bb15(in_$p1: ref, in_$p41: ref, in_$p42: ref, in_$i47: i64, in_$i46: i64, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$i52: i8, in_$i53: i1) returns (out_$i47: i64, out_$i46: i64, out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$i52: i8, out_$i53: i1);



implementation avc_write_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$i5: i1, in_$i6: i32, in_$i7: i64, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i26: i64, in_$p27: ref, in_$i28: i8, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i1, in_$i47: i64, in_$i45: i64, in_$i46: i64, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$i52: i8, in_$i53: i1, in_$i48: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i3: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i32, out_$i7: i64, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i26: i64, out_$p27: ref, out_$i28: i8, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i1, out_$i47: i64, out_$i45: i64, out_$i46: i64, out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$i52: i8, out_$i53: i1, out_$i48: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i47, out_$i45, out_$i46, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i48, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i3 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p10, in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$p37, in_$p38, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i47, in_$i45, in_$i46, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i48, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i3;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_995;

  $bb27:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i57;
    goto $bb27_dummy;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$i58 := $sle.i32(out_$i57, 5);
    goto corral_source_split_1077;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i3, 1);
    call {:si_unique_call 133} {:cexpr "retry"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_1076;

  $bb25:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_1072;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i48;
    goto $bb23;

  $bb10:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i26;
    goto $bb23;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i8.i1(out_$i28);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.1, out_$p27);
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3168, 1));
    goto corral_source_split_1027;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} out_$i26 := msecs_to_jiffies(200);
    call {:si_unique_call 126} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_1026;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    assume true;
    goto $bb7;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} out_$i19 := fdtv_write(in_$p0, 281474708278016, out_$p15, out_$i18);
    call {:si_unique_call 123} {:cexpr "err"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i17);
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.1, out_$p16);
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_1012;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1011;

  $bb4:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} debug_fcp(out_$p11, out_$i13);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.1, out_$p12);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3496, 1));
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3500, 1));
    goto corral_source_split_1005;

  $bb3:
    assume out_$i9 == 1;
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} out_$i8 := ldv__builtin_expect(out_$i7, 0);
    call {:si_unique_call 120} {:cexpr "tmp"} boogie_si_record_i64(out_$i8);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$i6 := $zext.i1.i32(out_$i5);
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_998;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i4 := $M.0;
    goto corral_source_split_997;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} finish_wait(out_$p54, in_$p1);
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3080, 1));
    goto corral_source_split_1059;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i45;
    goto $bb17;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i51;
    goto $bb17;

  $bb19:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i64(out_$i49, 0);
    goto corral_source_split_1063;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} out_$i49 := schedule_timeout(out_$i46);
    call {:si_unique_call 131} {:cexpr "__ret"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_1062;

  $bb15:
    call out_$i47, out_$i46, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53 := avc_write_loop_$bb15(in_$p1, out_$p41, out_$p42, out_$i47, out_$i46, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i26;
    goto $bb15;

  $bb22:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := out_$i49;
    assume false;
    return;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i49;
    assume true;
    goto $bb16, $bb22;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i8.i1(out_$i52);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.1, out_$p42);
    goto corral_source_split_1068;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} prepare_to_wait(out_$p41, in_$p1, 2);
    goto corral_source_split_1067;

  $bb20:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume !(out_$i44 == 1);
    goto corral_source_split_1054;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i26;
    assume true;
    goto $bb12, $bb14;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i8.i1(out_$i43);
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.1, out_$p42);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3168, 1));
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} prepare_to_wait(out_$p41, in_$p1, 2);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3080, 1));
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, out_$p40, out_$p38);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, out_$p37, out_$p35);
    goto corral_source_split_1042;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1040;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, out_$p34, autoremove_wake_function);
    goto corral_source_split_1039;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, out_$p33, out_$p30);
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, out_$p31, 0);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} out_$p30 := get_current();
    goto corral_source_split_1032;

  $bb11:
    assume !(out_$i29 == 1);
    goto corral_source_split_1031;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1052;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i47;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb13;

  $bb16:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1056;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i47, out_$i45, out_$i46, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i48, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i3 := avc_write_loop_$bb1(in_$p0, in_$p1, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i47, out_$i45, out_$i46, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i48, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i3);
    return;

  exit:
    return;
}



procedure avc_write_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$i5: i1, in_$i6: i32, in_$i7: i64, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i26: i64, in_$p27: ref, in_$i28: i8, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i1, in_$i47: i64, in_$i45: i64, in_$i46: i64, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$i52: i8, in_$i53: i1, in_$i48: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i3: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i32, out_$i7: i64, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i26: i64, out_$p27: ref, out_$i28: i8, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i1, out_$i47: i64, out_$i45: i64, out_$i46: i64, out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$i52: i8, out_$i53: i1, out_$i48: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i3: i32);
  modifies $M.4, $CurrAddr, $M.23, $M.22, $M.21, $M.20, $M.19;



implementation fdtv_ca_pmt_loop_$bb6(in_$p2: ref, in_$p9: ref, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i32: i32, in_$i33: i32) returns (out_$i19: i32, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i32: i32, out_$i33: i32)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i16, out_$i17, out_$i18, out_$i32, out_$i33 := in_$i19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i16, in_$i17, in_$i18, in_$i32, in_$i33;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  $bb8:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17, out_$i18 := out_$i27, out_$i26, out_$i19;
    goto $bb8_dummy;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i19, out_$i26;
    assume true;
    goto $bb8;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, out_$i27);
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 127);
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_1196;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.1, in_$p9);
    goto corral_source_split_1195;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i16, 1);
    call {:si_unique_call 174} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1194;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i20, out_$i25);
    call {:si_unique_call 173} {:cexpr "data_length"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_1192;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.1, out_$p23);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 268)), $mul.ref(12, 1)), $mul.ref(out_$i21, 1));
    goto corral_source_split_1190;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i18);
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$i20 := $shl.i32(out_$i17, 8);
    goto corral_source_split_1188;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i18, 1);
    call {:si_unique_call 172} {:cexpr "data_pos"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1187;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i16, out_$i17, out_$i18, out_$i32, out_$i33 := fdtv_ca_pmt_loop_$bb6(in_$p2, in_$p9, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i16, out_$i17, out_$i18, out_$i32, out_$i33);
    return;

  exit:
    return;
}



procedure fdtv_ca_pmt_loop_$bb6(in_$p2: ref, in_$p9: ref, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i32: i32, in_$i33: i32) returns (out_$i19: i32, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i32: i32, out_$i33: i32);



implementation avc_ca_pmt_loop_$bb22(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$i119: i32, in_$i120: i32, in_$i121: i64, in_$p122: ref, in_$i123: i8, in_$i124: i64, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i64, in_$p130: ref, in_$i131: i8, in_$i132: i64, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i64, in_$p138: ref, in_$i139: i8, in_$i140: i64, in_$p142: ref, in_$i143: i64, in_$p144: ref, in_$i145: i8, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i64, in_$i150: i64, in_$p151: ref, in_$i152: i8, in_$i153: i32, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i157: i32, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i8, in_$i162: i64, in_$p164: ref, in_$i165: i32, in_$i166: i8, in_$i167: i64, in_$p169: ref, in_$i170: i1, in_$i171: i32, in_$i172: i64, in_$p173: ref, in_$i174: i8, in_$i175: i32, in_$i176: i1, in_$i177: i1, in_$p178: ref, in_$p179: ref, in_$i181: i64, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p185: ref, in_$i186: i64, in_$p187: ref, in_$i188: i32, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i117: i32, in_$i118: i32, in_$i193: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_35: i32) returns (out_$i119: i32, out_$i120: i32, out_$i121: i64, out_$p122: ref, out_$i123: i8, out_$i124: i64, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i64, out_$p130: ref, out_$i131: i8, out_$i132: i64, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i64, out_$p138: ref, out_$i139: i8, out_$i140: i64, out_$p142: ref, out_$i143: i64, out_$p144: ref, out_$i145: i8, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i64, out_$i150: i64, out_$p151: ref, out_$i152: i8, out_$i153: i32, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i157: i32, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i8, out_$i162: i64, out_$p164: ref, out_$i165: i32, out_$i166: i8, out_$i167: i64, out_$p169: ref, out_$i170: i1, out_$i171: i32, out_$i172: i64, out_$p173: ref, out_$i174: i8, out_$i175: i32, out_$i176: i1, out_$i177: i1, out_$p178: ref, out_$p179: ref, out_$i181: i64, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p185: ref, out_$i186: i64, out_$p187: ref, out_$i188: i32, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i117: i32, out_$i118: i32, out_$i193: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_35: i32)
{

  entry:
    out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$p169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i117, out_$i118, out_$i193, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_35 := in_$i119, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p134, in_$i135, in_$i136, in_$i137, in_$p138, in_$i139, in_$i140, in_$p142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p164, in_$i165, in_$i166, in_$i167, in_$p169, in_$i170, in_$i171, in_$i172, in_$p173, in_$i174, in_$i175, in_$i176, in_$i177, in_$p178, in_$p179, in_$i181, in_$p182, in_$p183, in_$i184, in_$p185, in_$i186, in_$p187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i117, in_$i118, in_$i193, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_vslice_dummy_var_35;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;

  $bb36:
    assume out_$i192 == 1;
    assume {:verifier.code 0} true;
    out_$i117, out_$i118 := out_$i191, out_$i190;
    goto $bb36_dummy;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$i193 := out_$i191;
    assume true;
    goto $bb36;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$i192 := $slt.i32(out_$i190, in_$i2);
    goto corral_source_split_1480;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  $bb28:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    out_$i190, out_$i191 := out_$i155, out_$i165;
    goto $bb35;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$i190, out_$i191 := out_$i188, out_$i189;
    goto $bb35;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$i189 := $add.i32(out_$i165, out_$i158);
    call {:si_unique_call 219} {:cexpr "write_pos"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$i188 := $add.i32(out_$i171, out_$i158);
    call {:si_unique_call 218} {:cexpr "read_pos"} boogie_si_record_i32(out_$i188);
    goto corral_source_split_1476;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.1;
    out_cmdloc_dummy_var_9 := $M.1;
    call {:si_unique_call 217} out_cmdloc_dummy_var_10 := $memcpy.i8(out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_$p185, out_$p187, out_$i181, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_10;
    goto corral_source_split_1475;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref(in_$p1, $mul.ref(out_$i186, 1));
    goto corral_source_split_1474;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i186 := $sext.i32.i64(out_$i171);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref(out_$p183, $mul.ref(out_$i184, 1));
    goto corral_source_split_1472;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$i184 := $sext.i32.i64(out_$i165);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$p183 := $bitcast.ref.ref(out_$p182);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1));
    goto corral_source_split_1469;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i181 := $sext.i32.i64(out_$i158);
    call {:si_unique_call 216} {:cexpr "__len___0"} boogie_si_record_i64(out_$i181);
    goto corral_source_split_1468;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} out_vslice_dummy_var_35 := dev_err.ref.ref.i32(out_$p179, .str.9, out_$i175);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$p179 := $load.ref($M.1, out_$p178);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_1464;

  $bb32:
    assume out_$i177 == 1;
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i32(out_$i175, 4);
    goto corral_source_split_1461;

  $bb29:
    assume out_$i176 == 1;
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$i176 := $ne.i32(out_$i175, 1);
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i175 := $sext.i8.i32(out_$i174);
    call {:si_unique_call 214} {:cexpr "pmt_cmd_id"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$i174 := $load.i8($M.1, out_$p173);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref(in_$p1, $mul.ref(out_$i172, 1));
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i155);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i171 := $add.i32(out_$i155, 1);
    call {:si_unique_call 213} {:cexpr "read_pos"} boogie_si_record_i32(out_$i171);
    goto corral_source_split_1453;

  $bb27:
    assume out_$i170 == 1;
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$i170 := $sgt.i32(out_$i158, 0);
    goto corral_source_split_1450;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p169, out_$i166);
    goto corral_source_split_1449;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i167, 1));
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i167 := $sext.i32.i64(out_$i159);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i8(out_$i158);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$i165 := $add.i32(out_$i159, 1);
    call {:si_unique_call 212} {:cexpr "write_pos"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p164, out_$i161);
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i162, 1));
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i162 := $sext.i32.i64(out_$i135);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$i161 := $trunc.i32.i8(out_$i160);
    goto corral_source_split_1441;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    out_$i160 := $ashr.i32(out_$i158, 8);
    goto corral_source_split_1440;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$i159 := $add.i32(out_$i135, 1);
    call {:si_unique_call 211} {:cexpr "write_pos"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_1439;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  $bb25:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i158 := out_$i154;
    goto $bb26;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    out_$i158 := out_$i157;
    goto $bb26;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i157 := $sub.i32(out_$i154, 1);
    call {:si_unique_call 210} {:cexpr "es_info_length"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_1436;

  $bb24:
    assume out_$i156 == 1;
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i156 := $sgt.i32(out_$i154, 0);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i155 := $add.i32(out_$i136, 2);
    call {:si_unique_call 209} {:cexpr "read_pos"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$i154 := $add.i32(out_$i148, out_$i153);
    call {:si_unique_call 208} {:cexpr "es_info_length"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    out_$i153 := $sext.i8.i32(out_$i152);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i8($M.1, out_$p151);
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref(in_$p1, $mul.ref(out_$i150, 1));
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$i150 := $add.i64(out_$i149, 1);
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$i149 := $sext.i32.i64(out_$i136);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$i148 := $shl.i32(out_$i147, 8);
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$i147 := $and.i32(out_$i146, 15);
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$i146 := $sext.i8.i32(out_$i145);
    goto corral_source_split_1423;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i8($M.1, out_$p144);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref(in_$p1, $mul.ref(out_$i143, 1));
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i136);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p142, out_$i139);
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i140, 1));
    goto corral_source_split_1418;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i140 := $sext.i32.i64(out_$i127);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i8($M.1, out_$p138);
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref(in_$p1, $mul.ref(out_$i137, 1));
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$i137 := $sext.i32.i64(out_$i128);
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i136 := $add.i32(out_$i128, 1);
    call {:si_unique_call 207} {:cexpr "read_pos"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$i135 := $add.i32(out_$i127, 1);
    call {:si_unique_call 206} {:cexpr "write_pos"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p134, out_$i131);
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i132, 1));
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i119);
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i8($M.1, out_$p130);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref(in_$p1, $mul.ref(out_$i129, 1));
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i120);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(out_$i120, 1);
    call {:si_unique_call 205} {:cexpr "read_pos"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$i127 := $add.i32(out_$i119, 1);
    call {:si_unique_call 204} {:cexpr "write_pos"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p126, out_$i123);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i124, 1));
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(out_$i117);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i8($M.1, out_$p122);
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(in_$p1, $mul.ref(out_$i121, 1));
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$i121 := $sext.i32.i64(out_$i118);
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i118, 1);
    call {:si_unique_call 203} {:cexpr "read_pos"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_1397;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i117, 1);
    call {:si_unique_call 202} {:cexpr "write_pos"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_1396;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i176 == 1);
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i177 == 1);
    goto $bb31;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$p169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i117, out_$i118, out_$i193, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_35 := avc_ca_pmt_loop_$bb22(in_$p0, in_$p1, in_$i2, in_$p4, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$p169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i117, out_$i118, out_$i193, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_35);
    return;

  exit:
    return;
}



procedure avc_ca_pmt_loop_$bb22(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$i119: i32, in_$i120: i32, in_$i121: i64, in_$p122: ref, in_$i123: i8, in_$i124: i64, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i64, in_$p130: ref, in_$i131: i8, in_$i132: i64, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i64, in_$p138: ref, in_$i139: i8, in_$i140: i64, in_$p142: ref, in_$i143: i64, in_$p144: ref, in_$i145: i8, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i64, in_$i150: i64, in_$p151: ref, in_$i152: i8, in_$i153: i32, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i157: i32, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i8, in_$i162: i64, in_$p164: ref, in_$i165: i32, in_$i166: i8, in_$i167: i64, in_$p169: ref, in_$i170: i1, in_$i171: i32, in_$i172: i64, in_$p173: ref, in_$i174: i8, in_$i175: i32, in_$i176: i1, in_$i177: i1, in_$p178: ref, in_$p179: ref, in_$i181: i64, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p185: ref, in_$i186: i64, in_$p187: ref, in_$i188: i32, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i117: i32, in_$i118: i32, in_$i193: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_35: i32) returns (out_$i119: i32, out_$i120: i32, out_$i121: i64, out_$p122: ref, out_$i123: i8, out_$i124: i64, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i64, out_$p130: ref, out_$i131: i8, out_$i132: i64, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i64, out_$p138: ref, out_$i139: i8, out_$i140: i64, out_$p142: ref, out_$i143: i64, out_$p144: ref, out_$i145: i8, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i64, out_$i150: i64, out_$p151: ref, out_$i152: i8, out_$i153: i32, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i157: i32, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i8, out_$i162: i64, out_$p164: ref, out_$i165: i32, out_$i166: i8, out_$i167: i64, out_$p169: ref, out_$i170: i1, out_$i171: i32, out_$i172: i64, out_$p173: ref, out_$i174: i8, out_$i175: i32, out_$i176: i1, out_$i177: i1, out_$p178: ref, out_$p179: ref, out_$i181: i64, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p185: ref, out_$i186: i64, out_$p187: ref, out_$i188: i32, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i117: i32, out_$i118: i32, out_$i193: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_35: i32);
  modifies $M.1;



implementation avc_ca_info_loop_$bb11(in_$p1: ref, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i8, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i56: i32) returns (out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i8, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i56: i32)
{

  entry:
    out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i56 := in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i56;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1778;

  $bb13:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := out_$i74;
    goto $bb13_dummy;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i76 := $ult.i32(out_$i74, out_$i75);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i75 := $M.25;
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i56, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p73, out_$i69);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(in_$p1, $mul.ref(out_$i72, 1));
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i70, 5);
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i70 := $mul.i32(out_$i56, 2);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i32.i8(out_$i68);
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.26, out_$p67);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(fake_ca_system_ids, $mul.ref(0, 16)), $mul.ref(out_$i66, 4));
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i56);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p65, out_$i61);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(in_$p1, $mul.ref(out_$i64, 1));
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i63);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i63 := $mul.i32(out_$i62, 2);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i56, 2);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i32.i8(out_$i60);
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i60 := $ashr.i32(out_$i59, 8);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.26, out_$p58);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(fake_ca_system_ids, $mul.ref(0, 16)), $mul.ref(out_$i57, 4));
    goto corral_source_split_1781;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i56 := avc_ca_info_loop_$bb11(in_$p1, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i56);
    return;

  exit:
    return;
}



procedure avc_ca_info_loop_$bb11(in_$p1: ref, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i8, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i56: i32) returns (out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i8, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i56: i32);
  modifies $M.1;



implementation cmp_establish_pp_connection_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i6: i64, in_$p11: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i15: i32, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_vslice_dummy_var_43: i32) returns (out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i15: i32, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p36: ref, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_vslice_dummy_var_43: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i19, out_$i15, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p36, out_$p37, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_43 := in_$i16, in_$i17, in_$i18, in_$i19, in_$i15, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p36, in_$p37, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$p47, in_$i48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_vslice_dummy_var_43;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := out_$i16;
    goto $bb11_dummy;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 0);
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} out_$i18 := get_opcr(out_$i17, 1, 31);
    call {:si_unique_call 370} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.28, in_$p11);
    goto corral_source_split_2141;

  $bb9:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2140;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i58;
    assume true;
    goto $bb9;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$i59 := $sle.i32(out_$i58, 5);
    goto corral_source_split_2200;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i15, 1);
    call {:si_unique_call 386} {:cexpr "attempts"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2199;

  $bb22:
    assume out_$i57 == 1;
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, out_$i24);
    goto corral_source_split_2196;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.28, out_$p55);
    goto corral_source_split_2195;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2194;

  $bb20:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i52;
    assume true;
    goto $bb20;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i52, 0);
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_$i52 := cmp_lock(in_$p0, in_$i6, out_$p51);
    call {:si_unique_call 385} {:cexpr "ret"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2189;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, out_$p50, out_$i24);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, out_$p49, out_$i48);
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.28, out_$p47);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} set_opcr(out_$p45, out_$i46, 63, 24);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i44, 1);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} out_$i44 := get_opcr(out_$i43, 63, 24);
    call {:si_unique_call 382} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.28, out_$p42);
    goto corral_source_split_2177;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2176;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} set_opcr(out_$p41, 0, 15, 10);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} out_vslice_dummy_var_43 := _dev_info.ref.ref(out_$p37, .str.13);
    goto corral_source_split_2174;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.1, out_$p36);
    goto corral_source_split_2173;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(0, 1));
    goto corral_source_split_2172;

  $bb16:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, in_$i2);
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} out_$i31 := get_opcr(out_$i30, 63, 16);
    call {:si_unique_call 375} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.28, out_$p29);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2155;

  $bb13:
    assume out_$i28 == 1;
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} out_$i27 := get_opcr(out_$i26, 63, 24);
    call {:si_unique_call 373} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.28, out_$p25);
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.28, out_$p23);
    call {:si_unique_call 371} {:cexpr "old_opcr"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2148;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2147;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} set_opcr(out_$p40, 2, 3, 14);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} set_opcr(out_$p39, in_$i2, 63, 16);
    goto corral_source_split_2162;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2161;

  $bb14:
    assume !(out_$i28 == 1);
    goto corral_source_split_2160;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i19, out_$i15, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p36, out_$p37, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_43 := cmp_establish_pp_connection_loop_$bb8(in_$p0, in_$i2, in_$p3, in_$i6, in_$p11, out_$i16, out_$i17, out_$i18, out_$i19, out_$i15, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p36, out_$p37, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_43);
    return;

  exit:
    return;
}



procedure cmp_establish_pp_connection_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i6: i64, in_$p11: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i15: i32, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_vslice_dummy_var_43: i32) returns (out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i15: i32, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p36: ref, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_vslice_dummy_var_43: i32);
  modifies $M.28;



implementation {:SIextraRecBound 53} fdtv_register_rc_loop_$bb9(in_$p2: ref, in_$i22: i64, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i21: i32) returns (out_$i22: i64, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i21: i32)
{

  entry:
    out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i21 := in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i21;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2398;

  $bb11:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i28;
    goto $bb11_dummy;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$i29 := $ule.i32(out_$i28, 52);
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i21, 1);
    call {:si_unique_call 458} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} set_bit(out_$i25, out_$p27);
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_2405;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2024)), $mul.ref(48, 1));
    goto corral_source_split_2404;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_2403;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.29, out_$p23);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(keytable, $mul.ref(0, 106)), $mul.ref(out_$i22, 2));
    goto corral_source_split_2401;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_2400;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i21 := fdtv_register_rc_loop_$bb9(in_$p2, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i21);
    return;

  exit:
    return;
}



procedure fdtv_register_rc_loop_$bb9(in_$p2: ref, in_$i22: i64, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i21: i32) returns (out_$i22: i64, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i21: i32);



implementation avc_lnb_control_loop_$bb9(in_$p5: ref, in_$p7: ref, in_$p46: ref, in_$i53: i32, in_$i54: i64, in_$i55: i64, in_$p58: ref, in_$i59: i8, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i51: i32, in_$i52: i32, in_$i67: i32, in_$i34: i32) returns (out_$i53: i32, out_$i54: i64, out_$i55: i64, out_$p58: ref, out_$i59: i8, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i51: i32, out_$i52: i32, out_$i67: i32)
{

  entry:
    out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i51, out_$i52, out_$i67 := in_$i53, in_$i54, in_$i55, in_$p58, in_$i59, in_$i60, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i51, in_$i52, in_$i67;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3258;

  $bb11:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i51, out_$i52 := out_$i63, out_$i53;
    goto $bb11_dummy;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i53;
    assume true;
    goto $bb11;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i66 := $sgt.i32(out_$i65, out_$i63);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i64);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.1, in_$p46);
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i51, 1);
    call {:si_unique_call 601} {:cexpr "k"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p62, out_$i59);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i60, 1));
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i52);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.1, out_$p58);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(out_$i55, 7)), $mul.ref(0, 1)), $mul.ref(out_$i54, 1));
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(in_$i34);
    goto corral_source_split_3262;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i51);
    goto corral_source_split_3261;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, 1);
    call {:si_unique_call 600} {:cexpr "pos"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3260;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i51, out_$i52, out_$i67 := avc_lnb_control_loop_$bb9(in_$p5, in_$p7, in_$p46, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i51, out_$i52, out_$i67, in_$i34);
    return;

  exit:
    return;
}



procedure avc_lnb_control_loop_$bb9(in_$p5: ref, in_$p7: ref, in_$p46: ref, in_$i53: i32, in_$i54: i64, in_$i55: i64, in_$p58: ref, in_$i59: i8, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i51: i32, in_$i52: i32, in_$i67: i32, in_$i34: i32) returns (out_$i53: i32, out_$i54: i64, out_$i55: i64, out_$p58: ref, out_$i59: i8, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i51: i32, out_$i52: i32, out_$i67: i32);
  modifies $M.1;



implementation avc_lnb_control_loop_$bb4(in_$p5: ref, in_$p7: ref, in_$i31: i32, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i1, in_$i53: i32, in_$i54: i64, in_$i55: i64, in_$p58: ref, in_$i59: i8, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i51: i32, in_$i52: i32, in_$i67: i32, in_$i50: i32, in_$i68: i32, in_$i69: i1, in_$i34: i32, in_$i35: i32, in_$i70: i32) returns (out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i1, out_$i53: i32, out_$i54: i64, out_$i55: i64, out_$p58: ref, out_$i59: i8, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i51: i32, out_$i52: i32, out_$i67: i32, out_$i50: i32, out_$i68: i32, out_$i69: i1, out_$i34: i32, out_$i35: i32, out_$i70: i32)
{

  entry:
    out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i51, out_$i52, out_$i67, out_$i50, out_$i68, out_$i69, out_$i34, out_$i35, out_$i70 := in_$i36, in_$i37, in_$p39, in_$i40, in_$i41, in_$p43, in_$i44, in_$p46, in_$i47, in_$i48, in_$i49, in_$i53, in_$i54, in_$i55, in_$p58, in_$i59, in_$i60, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i51, in_$i52, in_$i67, in_$i50, in_$i68, in_$i69, in_$i34, in_$i35, in_$i70;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;

  $bb14:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i68, out_$i50;
    goto $bb14_dummy;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i50;
    assume true;
    goto $bb14;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i69 := $sgt.i32(in_$i31, out_$i68);
    goto corral_source_split_3277;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i34, 1);
    call {:si_unique_call 602} {:cexpr "j"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_3276;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3256;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb8;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i67;
    goto $bb8;

  $bb12:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i53;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i66 := $sgt.i32(out_$i65, out_$i63);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i64);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.1, out_$p46);
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i51, 1);
    call {:si_unique_call 601} {:cexpr "k"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p62, out_$i59);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i60, 1));
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i52);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.1, out_$p58);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(out_$i55, 7)), $mul.ref(0, 1)), $mul.ref(out_$i54, 1));
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i34);
    goto corral_source_split_3262;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i51);
    goto corral_source_split_3261;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, 1);
    call {:si_unique_call 600} {:cexpr "pos"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3260;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i51, out_$i52, out_$i67 := avc_lnb_control_loop_$bb9(in_$p5, in_$p7, out_$p46, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i51, out_$i52, out_$i67, out_$i34);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3258;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    out_$i51, out_$i52 := 0, out_$i36;
    goto $bb9;

  $bb11:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i51, out_$i52 := out_$i63, out_$i53;
    assume false;
    return;

  $bb6:
    assume out_$i49 == 1;
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i36;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i48, 0);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.1, out_$p46);
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p5, $mul.ref(out_$i44, 7)), $mul.ref(6, 1));
    goto corral_source_split_3249;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    goto corral_source_split_3248;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i34);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p43, out_$i40);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i41, 1));
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i35);
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.1, out_$p39);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p5, $mul.ref(out_$i37, 7)), $mul.ref(6, 1));
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i34);
    goto corral_source_split_3240;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i35, 1);
    call {:si_unique_call 599} {:cexpr "pos"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i51, out_$i52, out_$i67, out_$i50, out_$i68, out_$i69, out_$i34, out_$i35, out_$i70 := avc_lnb_control_loop_$bb4(in_$p5, in_$p7, in_$i31, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i51, out_$i52, out_$i67, out_$i50, out_$i68, out_$i69, out_$i34, out_$i35, out_$i70);
    return;

  exit:
    return;
}



procedure avc_lnb_control_loop_$bb4(in_$p5: ref, in_$p7: ref, in_$i31: i32, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i1, in_$i53: i32, in_$i54: i64, in_$i55: i64, in_$p58: ref, in_$i59: i8, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i51: i32, in_$i52: i32, in_$i67: i32, in_$i50: i32, in_$i68: i32, in_$i69: i1, in_$i34: i32, in_$i35: i32, in_$i70: i32) returns (out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i1, out_$i53: i32, out_$i54: i64, out_$i55: i64, out_$p58: ref, out_$i59: i8, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i51: i32, out_$i52: i32, out_$i67: i32, out_$i50: i32, out_$i68: i32, out_$i69: i1, out_$i34: i32, out_$i35: i32, out_$i70: i32);
  modifies $M.1;



implementation avc_tuner_dsd_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb16_dummy:
    call {:si_unique_call 1} avc_tuner_dsd_loop_$bb16();
    return;

  exit:
    return;
}



procedure avc_tuner_dsd_loop_$bb16();



implementation cmp_break_pp_connection_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i6: i64, in_$p10: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i14: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p36: ref, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1) returns (out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i14: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p36: ref, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i14, out_$p22, out_$i23, out_$i24, out_$i25, out_$p29, out_$i30, out_$i31, out_$i32, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i14, in_$p22, in_$i23, in_$i24, in_$i25, in_$p29, in_$i30, in_$i31, in_$i32, in_$p36, in_$i37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$p43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4743;

  $bb11:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := out_$i15;
    goto $bb11_dummy;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} out_$i17 := get_opcr(out_$i16, 1, 31);
    call {:si_unique_call 673} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.28, in_$p10);
    goto corral_source_split_4750;

  $bb9:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4749;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i53;
    assume true;
    goto $bb9;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i54 := $sle.i32(out_$i53, 5);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i14, 1);
    call {:si_unique_call 684} {:cexpr "attempts"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_4797;

  $bb22:
    assume out_$i52 == 1;
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, out_$i37);
    goto corral_source_split_4794;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.28, out_$p50);
    goto corral_source_split_4793;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4792;

  $bb20:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, 0);
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} out_$i48 := cmp_lock(in_$p0, in_$i6, out_$p47);
    call {:si_unique_call 683} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4786;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, out_$p46, out_$i37);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, out_$p45, out_$i44);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p3, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.28, out_$p43);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} set_opcr(out_$p41, out_$i42, 63, 24);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i42 := $sub.i32(out_$i40, 1);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} out_$i40 := get_opcr(out_$i39, 63, 24);
    call {:si_unique_call 680} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.28, out_$p38);
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.28, out_$p36);
    call {:si_unique_call 678} {:cexpr "old_opcr"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_4773;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4772;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, in_$i2);
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} out_$i31 := get_opcr(out_$i30, 63, 16);
    call {:si_unique_call 676} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_4764;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.28, out_$p29);
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4762;

  $bb13:
    assume !(out_$i25 == 1);
    goto corral_source_split_4761;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} out_$i24 := get_opcr(out_$i23, 63, 24);
    call {:si_unique_call 671} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.28, out_$p22);
    goto corral_source_split_4745;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4744;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i14, out_$p22, out_$i23, out_$i24, out_$i25, out_$p29, out_$i30, out_$i31, out_$i32, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54 := cmp_break_pp_connection_loop_$bb8(in_$p0, in_$i2, in_$p3, in_$i6, in_$p10, out_$i15, out_$i16, out_$i17, out_$i18, out_$i14, out_$p22, out_$i23, out_$i24, out_$i25, out_$p29, out_$i30, out_$i31, out_$i32, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54);
    return;

  exit:
    return;
}



procedure cmp_break_pp_connection_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i6: i64, in_$p10: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i14: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p36: ref, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1) returns (out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i14: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p36: ref, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1);
  modifies $M.28;



implementation {:SIextraRecBound 16} fdtv_start_iso_loop_$bb13(in_$p3: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i36: i32) returns (out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i36: i32)
{

  entry:
    out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i36 := in_$p38, in_$p39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p46, in_$i47, in_$i48, in_$i36;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4864;

  $bb15:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i47;
    goto $bb15_dummy;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    out_$i48 := $ule.i32(out_$i47, 15);
    goto corral_source_split_4876;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i36, 1);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p46, out_$p43);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 168)), $mul.ref(40, 1)), $mul.ref(out_$i44, 8));
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i36);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} out_$p43 := lowmem_page_address(out_$p42);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_4870;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p39, $mul.ref(out_$i40, 8));
    goto corral_source_split_4869;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i36);
    goto corral_source_split_4868;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_4867;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i36 := fdtv_start_iso_loop_$bb13(in_$p3, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i36);
    return;

  exit:
    return;
}



procedure fdtv_start_iso_loop_$bb13(in_$p3: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i36: i32) returns (out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i36: i32);
  modifies $M.1;



implementation avc_tuner_set_pids_loop_$bb13(in_$p2: ref, in_$p4: ref, in_$i33: i32, in_$i38: i32, in_$i39: i64, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$i49: i16, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$i53: i32, in_$i54: i32, in_$i55: i8, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i16, in_$i63: i8, in_$i64: i64, in_$p66: ref, in_$i67: i32, in_$i68: i64, in_$p70: ref, in_$i71: i32, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i36: i32, in_$i37: i32, in_$i77: i32) returns (out_$i38: i32, out_$i39: i64, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$i49: i16, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$i53: i32, out_$i54: i32, out_$i55: i8, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i16, out_$i63: i8, out_$i64: i64, out_$p66: ref, out_$i67: i32, out_$i68: i64, out_$p70: ref, out_$i71: i32, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i36: i32, out_$i37: i32, out_$i77: i32)
{

  entry:
    out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i36, out_$i37, out_$i77 := in_$i38, in_$i39, in_$p41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p66, in_$i67, in_$i68, in_$p70, in_$i71, in_$i72, in_$p74, in_$i75, in_$i76, in_$i36, in_$i37, in_$i77;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5465;

  $bb15:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i75, out_$i71;
    goto $bb15_dummy;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i71;
    assume true;
    goto $bb15;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    out_$i76 := $sgt.i32(in_$i33, out_$i75);
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i36, 1);
    call {:si_unique_call 836} {:cexpr "k"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p74, 0);
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i72, 1));
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i67);
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i67, 1);
    call {:si_unique_call 835} {:cexpr "pos"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p70, 0);
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i68, 1));
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i59);
    goto corral_source_split_5497;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i59, 1);
    call {:si_unique_call 834} {:cexpr "pos"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_5496;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p66, out_$i63);
    goto corral_source_split_5495;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i64, 1));
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i46);
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i16.i8(out_$i62);
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i16($M.37, out_$p61);
    goto corral_source_split_5491;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(in_$p2, $mul.ref(out_$i60, 2));
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i36);
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i46, 1);
    call {:si_unique_call 833} {:cexpr "pos"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p58, out_$i55);
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i56, 1));
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i42);
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i32.i8(out_$i54);
    goto corral_source_split_5484;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    out_$i54 := $and.i32(out_$i53, 31);
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i8(out_$i51);
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$i51 := $ashr.i32(out_$i50, 8);
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i32(out_$i49);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i16($M.37, out_$p48);
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(in_$p2, $mul.ref(out_$i47, 2));
    goto corral_source_split_5477;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i36);
    goto corral_source_split_5476;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i42, 1);
    call {:si_unique_call 832} {:cexpr "pos"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_5475;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p45, $sub.i8(0, 128));
    goto corral_source_split_5474;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i43, 1));
    goto corral_source_split_5473;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i38);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i38, 1);
    call {:si_unique_call 831} {:cexpr "pos"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p41, 19);
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 512)), $mul.ref(3, 1)), $mul.ref(out_$i39, 1));
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i37);
    goto corral_source_split_5468;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i37, 1);
    call {:si_unique_call 830} {:cexpr "pos"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_5467;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i36, out_$i37, out_$i77 := avc_tuner_set_pids_loop_$bb13(in_$p2, in_$p4, in_$i33, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i36, out_$i37, out_$i77);
    return;

  exit:
    return;
}



procedure avc_tuner_set_pids_loop_$bb13(in_$p2: ref, in_$p4: ref, in_$i33: i32, in_$i38: i32, in_$i39: i64, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$i49: i16, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$i53: i32, in_$i54: i32, in_$i55: i8, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i16, in_$i63: i8, in_$i64: i64, in_$p66: ref, in_$i67: i32, in_$i68: i64, in_$p70: ref, in_$i71: i32, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i36: i32, in_$i37: i32, in_$i77: i32) returns (out_$i38: i32, out_$i39: i64, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$i49: i16, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$i53: i32, out_$i54: i32, out_$i55: i8, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i16, out_$i63: i8, out_$i64: i64, out_$p66: ref, out_$i67: i32, out_$i68: i64, out_$p70: ref, out_$i71: i32, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i36: i32, out_$i37: i32, out_$i77: i32);
  modifies $M.1;



implementation alloc_channel_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$i4: i1, in_$i5: i32, in_$i7: i32, in_$i8: i1, in_$i1: i32, in_$i9: i32) returns (out_$p2: ref, out_$i3: i32, out_$i4: i1, out_$i5: i32, out_$i7: i32, out_$i8: i1, out_$i1: i32, out_$i9: i32)
{

  entry:
    out_$p2, out_$i3, out_$i4, out_$i5, out_$i7, out_$i8, out_$i1, out_$i9 := in_$p2, in_$i3, in_$i4, in_$i5, in_$i7, in_$i8, in_$i1, in_$i9;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5574;

  $bb7:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i7;
    goto $bb7_dummy;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i7;
    assume true;
    goto $bb7;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i8 := $sle.i32(out_$i7, 15);
    goto corral_source_split_5585;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i7 := $add.i32(out_$i1, 1);
    call {:si_unique_call 865} {:cexpr "i"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_5584;

  $bb4:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb4;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i3, 0);
    goto corral_source_split_5578;

  SeqInstr_309:
    call {:si_unique_call 864} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_5577;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} out_$i3 := __test_and_set_bit(out_$i1, out_$p2);
    goto SeqInstr_308;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p2 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4016)), $mul.ref(3456, 1));
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p2, out_$i3, out_$i4, out_$i5, out_$i7, out_$i8, out_$i1, out_$i9 := alloc_channel_loop_$bb1(in_$p0, out_$p2, out_$i3, out_$i4, out_$i5, out_$i7, out_$i8, out_$i1, out_$i9);
    return;

  exit:
    return;
}



procedure alloc_channel_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$i4: i1, in_$i5: i32, in_$i7: i32, in_$i8: i1, in_$i1: i32, in_$i9: i32) returns (out_$p2: ref, out_$i3: i32, out_$i4: i1, out_$i5: i32, out_$i7: i32, out_$i8: i1, out_$i1: i32, out_$i9: i32);
  modifies $M.1, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, assertsPassed;



implementation handle_fcp_loop_$bb11(in_$p0: ref, in_$i4: i32, in_$i5: i32, in_$i18: i32, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i1, in_$p44: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p27: ref) returns (out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i1, out_$p44: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p27: ref)
{

  entry:
    out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p44, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p27 := in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p44, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p27;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5709;

  $bb31:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p27 := out_$p55;
    goto $bb31_dummy;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, $p2i.ref.i64(node_list));
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p54, $mul.ref($sub.ref(0, 8), 4016)), $mul.ref(8, 1));
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p54, $mul.ref($sub.ref(0, 8), 4016));
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.1, out_$p52);
    goto corral_source_split_5719;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(out_$p27, $mul.ref(0, 4016)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5718;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i31 == 1;
    goto corral_source_split_5716;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, in_$i5);
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.1, out_$p29);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 1752)), $mul.ref(20, 1));
    goto corral_source_split_5712;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} out_$p28 := device_of(out_$p27);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb19;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb19;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb19;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p27;
    assume true;
    goto $bb28;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(in_$i18, 7);
    goto corral_source_split_5753;

  $bb25:
    assume out_$i48 == 1;
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 0);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i8.i32(out_$i46);
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.1, out_$p45);
    goto corral_source_split_5748;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p27, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_5747;

  $bb24:
    assume !(out_$i43 == 1);
    goto corral_source_split_5746;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p27;
    assume true;
    goto $bb24;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, in_$i18);
    goto corral_source_split_5742;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i8.i32(out_$i41);
    goto corral_source_split_5741;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.1, out_$p40);
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p27, $mul.ref(0, 4016)), $mul.ref(3268, 1));
    goto corral_source_split_5739;

  $bb20:
    assume out_$i39 == 1;
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, in_$i4);
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.1, out_$p37);
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p28, $mul.ref(0, 1752)), $mul.ref(16, 1));
    goto corral_source_split_5734;

  $bb17:
    assume out_$i36 == 1;
    goto corral_source_split_5733;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i64(out_$i34, out_$i35);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.1, out_$p32);
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p28, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_5727;

  $bb16:
    call {:si_unique_call 904} devirtbounce.1(0);
    goto corral_source_split_5726;

  $bb14:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p44, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p27 := handle_fcp_loop_$bb11(in_$p0, in_$i4, in_$i5, in_$i18, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p44, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p27);
    return;

  exit:
    return;
}



procedure handle_fcp_loop_$bb11(in_$p0: ref, in_$i4: i32, in_$i5: i32, in_$i18: i32, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i1, in_$p44: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p27: ref) returns (out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i1, out_$p44: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p27: ref);



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_vslice_dummy_var_79: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_vslice_dummy_var_79: i32)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_vslice_dummy_var_79 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$p70, in_vslice_dummy_var_79;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 945} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 946} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} ldv_main_exported_4();
    goto corral_source_split_5897;

  $bb16:
    assume out_$i8 == 1;
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_5894;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    out_$i7 := $M.40;
    goto corral_source_split_5893;

  $bb14:
    assume out_$i6 == 1;
    goto corral_source_split_5892;

  $bb12:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb21:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} node_update(out_$p21);
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$p21 := $M.58;
    goto corral_source_split_5922;

  $bb35:
    assume out_$i20 == 1;
    goto corral_source_split_5921;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 2);
    goto corral_source_split_5919;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i19 := $M.55;
    goto corral_source_split_5918;

  $bb33:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} node_update(out_$p18);
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    out_$p18 := $M.58;
    goto corral_source_split_5914;

  $bb32:
    assume out_$i17 == 1;
    goto corral_source_split_5913;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 1);
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    out_$i16 := $M.55;
    goto corral_source_split_5910;

  $bb30:
    assume out_$i15 == 1;
    goto corral_source_split_5909;

  $bb23:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 948} out_$i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 949} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i11);
    call {:si_unique_call 950} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i11);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i10 == 1;
    goto corral_source_split_5899;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_5890;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    out_$i9 := $M.55;
    goto corral_source_split_5889;

  $bb13:
    assume !(out_$i5 == 1);
    goto corral_source_split_5888;

  $bb40:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.43 := out_$i29;
    call {:si_unique_call 958} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, 1);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$i28 := $M.43;
    goto corral_source_split_5935;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5934;

  $bb41:
    assume out_$i27 == 1;
    goto corral_source_split_5933;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$i26 := $M.60;
    goto corral_source_split_5930;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.60 := out_$i25;
    call {:si_unique_call 956} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_5929;

  SeqInstr_339:
    goto corral_source_split_5928;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} out_$i25 := node_probe(out_$p24);
    goto SeqInstr_338;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$p24 := $M.59;
    goto corral_source_split_5927;

  $bb39:
    assume out_$i23 == 1;
    goto corral_source_split_5926;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 1);
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    out_$i22 := $M.55;
    goto corral_source_split_5902;

  $bb25:
    assume out_$i13 == 1;
    goto corral_source_split_5901;

  $bb24:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb46:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $M.43 := out_$i35;
    call {:si_unique_call 961} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_5945;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$i35 := $sub.i32(out_$i34, 1);
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    out_$i34 := $M.43;
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5942;

  SeqInstr_342:
    goto corral_source_split_5941;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} out_vslice_dummy_var_79 := node_remove(out_$p32);
    goto SeqInstr_341;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$p32 := $M.59;
    goto corral_source_split_5940;

  $bb45:
    assume out_$i31 == 1;
    goto corral_source_split_5939;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 2);
    goto corral_source_split_5907;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    out_$i30 := $M.55;
    goto corral_source_split_5906;

  $bb27:
    assume out_$i14 == 1;
    goto corral_source_split_5905;

  $bb26:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb29;

  $bb51:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb62;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb62;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i44 := $M.43;
    goto corral_source_split_5958;

  $bb60:
    assume out_$i43 == 1;
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 2);
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    out_$i42 := $M.56;
    goto corral_source_split_5954;

  $bb58:
    assume out_$i41 == 1;
    goto corral_source_split_5953;

  $bb53:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_5947:
    assume {:verifier.code 1} true;
    call {:si_unique_call 962} out_$i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 963} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i38);
    call {:si_unique_call 964} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i38);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i37 == 1;
    goto corral_source_split_5947;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    out_$i36 := $M.56;
    goto corral_source_split_5877;

  $bb5:
    assume out_$i2 == 1;
    goto corral_source_split_5876;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb69:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5980;

  $bb73:
    assume out_$i52 == 1;
    goto corral_source_split_5979;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    goto corral_source_split_5977;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i51 := $M.61;
    goto corral_source_split_5976;

  $bb71:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_5971;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$i49 := $M.61;
    goto corral_source_split_5970;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $M.61 := out_$i48;
    call {:si_unique_call 969} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_5969;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} out_$i48 := fdtv_init();
    goto corral_source_split_5968;

  $bb68:
    assume out_$i47 == 1;
    goto corral_source_split_5967;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 1);
    goto corral_source_split_5951;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    out_$i46 := $M.56;
    goto corral_source_split_5950;

  $bb55:
    assume out_$i40 == 1;
    goto corral_source_split_5949;

  $bb54:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb57;

  $bb80:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_348:
    goto corral_source_split_5987;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ldv_main_exported_3();
    goto SeqInstr_347;

  $bb79:
    assume out_$i54 == 1;
    goto corral_source_split_5986;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_5882;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$i53 := $M.51;
    goto corral_source_split_5881;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_5880;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb83:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6007;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} handle_fcp(out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70);
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$p70 := $M.71;
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i69 := $M.70;
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$p68 := $M.69;
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i67 := $M.68;
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$i66 := $M.67;
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$i65 := $M.66;
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    out_$i64 := $M.65;
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$i63 := $M.64;
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$p62 := $M.63;
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$p61 := $M.62;
    goto corral_source_split_5996;

  $bb87:
    assume out_$i60 == 1;
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 1);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$i59 := $M.57;
    goto corral_source_split_5992;

  $bb85:
    assume out_$i58 == 1;
    goto corral_source_split_5991;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_5989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 977} out_$i57 := __VERIFIER_nondet_int();
    call {:si_unique_call 978} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i57);
    call {:si_unique_call 979} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i57);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume out_$i56 == 1;
    goto corral_source_split_5989;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_5886;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    out_$i55 := $M.57;
    goto corral_source_split_5885;

  $bb9:
    assume out_$i4 == 1;
    goto corral_source_split_5884;

  $bb8:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb86:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i6 == 1);
    goto $bb11;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_vslice_dummy_var_79 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_vslice_dummy_var_79);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_vslice_dummy_var_79: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_vslice_dummy_var_79: i32);
  modifies $M.40, $M.43, $M.48, $M.55, $M.28, $CurrAddr, $M.60, $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, assertsPassed, $M.38, $M.37, $M.30, $M.33, $M.34, $M.35, $M.51, $M.57, $M.56, $M.61;


