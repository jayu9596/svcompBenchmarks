var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i8;

var $M.8: i32;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: [ref]i8;

var $M.12: i32;

var $M.13: [ref]i8;

var $M.14: [ref]ref;

var $M.15: [ref]i64;

var $M.16: [ref]ref;

var $M.17: [ref]i32;

var $M.18: [ref]i8;

var $M.19: ref;

var $M.20: ref;

var $M.21: ref;

var $M.22: ref;

var $M.23: ref;

var $M.24: ref;

var $M.25: ref;

var $M.26: ref;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.40: [ref]i16;

var $M.41: [ref]i16;

var $M.42: [ref]i16;

var $M.43: [ref]i16;

var $M.44: [ref]i16;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.51: [ref]i8;

var $M.52: [ref]i64;

var $M.53: [ref]i16;

var $M.54: [ref]i16;

var $M.55: [ref]i16;

var $M.56: [ref]i16;

var $M.57: [ref]i16;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: [ref]i64;

var $M.66: [ref]i8;

var $M.67: [ref]ref;

var $M.68: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 332194);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ti_2port_device_group0: ref;

axiom ti_2port_device_group0 == $sub.ref(0, 2060);

const ti_2port_device_group1: ref;

axiom ti_2port_device_group1 == $sub.ref(0, 3092);

const ti_2port_device_group2: ref;

axiom ti_2port_device_group2 == $sub.ref(0, 4124);

const ti_2port_device_group3: ref;

axiom ti_2port_device_group3 == $sub.ref(0, 5156);

const ti_1port_device_group0: ref;

axiom ti_1port_device_group0 == $sub.ref(0, 6188);

const ti_1port_device_group1: ref;

axiom ti_1port_device_group1 == $sub.ref(0, 7220);

const ti_1port_device_group2: ref;

axiom ti_1port_device_group2 == $sub.ref(0, 8252);

const ti_1port_device_group3: ref;

axiom ti_1port_device_group3 == $sub.ref(0, 9284);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 10312);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 11340);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 12368);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 13396);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 14424);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 15452);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 16480);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 17508);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 18536);

const {:count 21} __mod_usb__ti_id_table_combined_device_table: ref;

axiom __mod_usb__ti_id_table_combined_device_table == $sub.ref(0, 20232);

const ldv_mutex_td_open_close_lock_of_ti_device: ref;

axiom ldv_mutex_td_open_close_lock_of_ti_device == $sub.ref(0, 21260);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 22288);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 23316);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 24344);

const {:count 21} ti_id_table_combined: ref;

axiom ti_id_table_combined == $sub.ref(0, 26040);

const {:count 5} ti_id_table_5052: ref;

axiom ti_id_table_5052 == $sub.ref(0, 27224);

const ti_2port_device: ref;

axiom ti_2port_device == $sub.ref(0, 28800);

const {:count 3} serial_drivers: ref;

axiom serial_drivers == $sub.ref(0, 29848);

const {:count 17} ti_id_table_3410: ref;

axiom ti_id_table_3410 == $sub.ref(0, 31416);

const ti_1port_device: ref;

axiom ti_1port_device == $sub.ref(0, 32992);

const closing_wait: ref;

axiom closing_wait == $sub.ref(0, 34020);

const {:count 27} .str.53: ref;

axiom .str.53 == $sub.ref(0, 35071);

const {:count 19} .str.54: ref;

axiom .str.54 == $sub.ref(0, 36114);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 17} .str.1: ref;

axiom .str.1 == $sub.ref(0, 37155);

const {:count 21} .str.33: ref;

axiom .str.33 == $sub.ref(0, 38200);

const {:count 216} .str.3: ref;

axiom .str.3 == $sub.ref(0, 39440);

const {:count 28} .str.34: ref;

axiom .str.34 == $sub.ref(0, 40492);

const {:count 29} .str.35: ref;

axiom .str.35 == $sub.ref(0, 41545);

const {:count 8} .str.36: ref;

axiom .str.36 == $sub.ref(0, 42577);

const {:count 34} .str.37: ref;

axiom .str.37 == $sub.ref(0, 43635);

const {:count 22} .str.38: ref;

axiom .str.38 == $sub.ref(0, 44681);

const {:count 27} .str.39: ref;

axiom .str.39 == $sub.ref(0, 45732);

const {:count 31} .str.40: ref;

axiom .str.40 == $sub.ref(0, 46787);

const {:count 20} .str.95: ref;

axiom .str.95 == $sub.ref(0, 47831);

const {:count 21} .str.96: ref;

axiom .str.96 == $sub.ref(0, 48876);

const {:count 33} .str.97: ref;

axiom .str.97 == $sub.ref(0, 49933);

const {:count 35} .str.98: ref;

axiom .str.98 == $sub.ref(0, 50992);

const {:count 35} .str.99: ref;

axiom .str.99 == $sub.ref(0, 52051);

const {:count 8} .str.100: ref;

axiom .str.100 == $sub.ref(0, 53083);

const {:count 22} .str.70: ref;

axiom .str.70 == $sub.ref(0, 54129);

const {:count 26} .str.71: ref;

axiom .str.71 == $sub.ref(0, 55179);

const {:count 25} .str.72: ref;

axiom .str.72 == $sub.ref(0, 56228);

const {:count 47} .str.73: ref;

axiom .str.73 == $sub.ref(0, 57299);

const {:count 26} .str.74: ref;

axiom .str.74 == $sub.ref(0, 58349);

const {:count 43} .str.75: ref;

axiom .str.75 == $sub.ref(0, 59416);

const {:count 26} .str.76: ref;

axiom .str.76 == $sub.ref(0, 60466);

const {:count 37} .str.77: ref;

axiom .str.77 == $sub.ref(0, 61527);

const {:count 40} .str.78: ref;

axiom .str.78 == $sub.ref(0, 62591);

const {:count 18} .str.79: ref;

axiom .str.79 == $sub.ref(0, 63633);

const {:count 17} .str.80: ref;

axiom .str.80 == $sub.ref(0, 64674);

const {:count 14} .str.30: ref;

axiom .str.30 == $sub.ref(0, 65712);

const {:count 45} .str.31: ref;

axiom .str.31 == $sub.ref(0, 66781);

const {:count 17} .str.32: ref;

axiom .str.32 == $sub.ref(0, 67822);

const {:count 12} .str.93: ref;

axiom .str.93 == $sub.ref(0, 68858);

const {:count 13} .str.94: ref;

axiom .str.94 == $sub.ref(0, 69895);

const {:count 30} .str.22: ref;

axiom .str.22 == $sub.ref(0, 70949);

const {:count 14} .str.23: ref;

axiom .str.23 == $sub.ref(0, 71987);

const {:count 41} .str.81: ref;

axiom .str.81 == $sub.ref(0, 73052);

const {:count 11} .str.82: ref;

axiom .str.82 == $sub.ref(0, 74087);

const {:count 17} .str.83: ref;

axiom .str.83 == $sub.ref(0, 75128);

const {:count 19} .str.92: ref;

axiom .str.92 == $sub.ref(0, 76171);

const {:count 17} .str.88: ref;

axiom .str.88 == $sub.ref(0, 77212);

const {:count 9} .str.89: ref;

axiom .str.89 == $sub.ref(0, 78245);

const {:count 17} .str.90: ref;

axiom .str.90 == $sub.ref(0, 79286);

const {:count 30} .str.91: ref;

axiom .str.91 == $sub.ref(0, 80340);

const {:count 15} .str.24: ref;

axiom .str.24 == $sub.ref(0, 81379);

const {:count 29} .str.25: ref;

axiom .str.25 == $sub.ref(0, 82432);

const {:count 37} .str.26: ref;

axiom .str.26 == $sub.ref(0, 83493);

const {:count 120} .str.27: ref;

axiom .str.27 == $sub.ref(0, 84637);

const {:count 39} .str.28: ref;

axiom .str.28 == $sub.ref(0, 85700);

const {:count 46} .str.29: ref;

axiom .str.29 == $sub.ref(0, 86770);

const {:count 9} .str.41: ref;

axiom .str.41 == $sub.ref(0, 87803);

const {:count 18} .str.42: ref;

axiom .str.42 == $sub.ref(0, 88845);

const {:count 18} .str.43: ref;

axiom .str.43 == $sub.ref(0, 89887);

const {:count 33} .str.44: ref;

axiom .str.44 == $sub.ref(0, 90944);

const {:count 14} .str.87: ref;

axiom .str.87 == $sub.ref(0, 91982);

const {:count 9} .str.45: ref;

axiom .str.45 == $sub.ref(0, 93015);

const {:count 31} .str.46: ref;

axiom .str.46 == $sub.ref(0, 94070);

const {:count 9} .str.84: ref;

axiom .str.84 == $sub.ref(0, 95103);

const {:count 28} .str.85: ref;

axiom .str.85 == $sub.ref(0, 96155);

const {:count 41} .str.86: ref;

axiom .str.86 == $sub.ref(0, 97220);

const {:count 8} .str.2: ref;

axiom .str.2 == $sub.ref(0, 98252);

const {:count 29} .str.4: ref;

axiom .str.4 == $sub.ref(0, 99305);

const {:count 23} .str.5: ref;

axiom .str.5 == $sub.ref(0, 100352);

const {:count 38} .str.6: ref;

axiom .str.6 == $sub.ref(0, 101414);

const {:count 27} .str.7: ref;

axiom .str.7 == $sub.ref(0, 102465);

const {:count 35} .str.8: ref;

axiom .str.8 == $sub.ref(0, 103524);

const {:count 28} .str.9: ref;

axiom .str.9 == $sub.ref(0, 104576);

const {:count 36} .str.10: ref;

axiom .str.10 == $sub.ref(0, 105636);

const {:count 28} .str.11: ref;

axiom .str.11 == $sub.ref(0, 106688);

const {:count 37} .str.12: ref;

axiom .str.12 == $sub.ref(0, 107749);

const {:count 38} .str.13: ref;

axiom .str.13 == $sub.ref(0, 108811);

const {:count 31} .str.14: ref;

axiom .str.14 == $sub.ref(0, 109866);

const {:count 39} .str.15: ref;

axiom .str.15 == $sub.ref(0, 110929);

const {:count 32} .str.16: ref;

axiom .str.16 == $sub.ref(0, 111985);

const {:count 40} .str.17: ref;

axiom .str.17 == $sub.ref(0, 113049);

const {:count 21} .str.18: ref;

axiom .str.18 == $sub.ref(0, 114094);

const {:count 18} .str.19: ref;

axiom .str.19 == $sub.ref(0, 115136);

const {:count 33} .str.20: ref;

axiom .str.20 == $sub.ref(0, 116193);

const {:count 14} .str.21: ref;

axiom .str.21 == $sub.ref(0, 117231);

const .str: ref;

axiom .str == $sub.ref(0, 118281);

const {:count 11} .str.47: ref;

axiom .str.47 == $sub.ref(0, 119316);

const {:count 67} .str.48: ref;

axiom .str.48 == $sub.ref(0, 120407);

const {:count 26} .str.49: ref;

axiom .str.49 == $sub.ref(0, 121457);

const {:count 24} .str.50: ref;

axiom .str.50 == $sub.ref(0, 122505);

const {:count 5} .str.51: ref;

axiom .str.51 == $sub.ref(0, 123534);

const {:count 5} .str.52: ref;

axiom .str.52 == $sub.ref(0, 124563);

const {:count 22} .str.55: ref;

axiom .str.55 == $sub.ref(0, 125609);

const {:count 12} .str.56: ref;

axiom .str.56 == $sub.ref(0, 126645);

const {:count 11} .str.57: ref;

axiom .str.57 == $sub.ref(0, 127680);

const {:count 12} .str.58: ref;

axiom .str.58 == $sub.ref(0, 128716);

const {:count 16} .str.59: ref;

axiom .str.59 == $sub.ref(0, 129756);

const {:count 17} .str.60: ref;

axiom .str.60 == $sub.ref(0, 130797);

const {:count 11} .str.61: ref;

axiom .str.61 == $sub.ref(0, 131832);

const {:count 11} .str.62: ref;

axiom .str.62 == $sub.ref(0, 132867);

const {:count 25} .str.63: ref;

axiom .str.63 == $sub.ref(0, 133916);

const {:count 21} .str.64: ref;

axiom .str.64 == $sub.ref(0, 134961);

const {:count 29} .str.65: ref;

axiom .str.65 == $sub.ref(0, 136014);

const {:count 37} .str.66: ref;

axiom .str.66 == $sub.ref(0, 137075);

const {:count 26} .str.67: ref;

axiom .str.67 == $sub.ref(0, 138125);

const {:count 15} .str.68: ref;

axiom .str.68 == $sub.ref(0, 139164);

const {:count 27} .str.69: ref;

axiom .str.69 == $sub.ref(0, 140215);

const {:count 27} .str.101: ref;

axiom .str.101 == $sub.ref(0, 141266);

const {:count 19} .str.102: ref;

axiom .str.102 == $sub.ref(0, 142309);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 143341);

const {:count 3} .str.1.216: ref;

axiom .str.1.216 == $sub.ref(0, 144368);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 145406);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 146434);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 147466);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 148498);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 149530);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const ti_startup: ref;

axiom ti_startup == $sub.ref(0, 150562);

procedure ti_startup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.13, $CurrAddr;



implementation ti_startup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i78: i32;
  var $p94: ref;
  var $i41: i32;
  var vslice_dummy_var_11: i64;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.1);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.47);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.3);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.48);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 299);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 11} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p37 := kzalloc(184, 208);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p38, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} __mutex_init($p42, .str.49, $p2);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p38, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p38);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} usb_set_serial_data($p0, $p44);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, $p2i.ref.i64(ti_1port_device));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, .str.1);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p51, .str.47);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p52, .str.3);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p53, .str.50);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.5, $p55);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 314);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p55, $i58);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p59, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.6, $p60);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 17} {:cexpr "tmp___1"} boogie_si_record_i64($i64);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(17, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(1608, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p85, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.7, $p87);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb24:
    assume $i90 == 1;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i91 := usb_driver_set_configuration($p5, 2);
    call {:si_unique_call 26} {:cexpr "status"} boogie_si_record_i32($i91);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i92 == 1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 19);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i78 := $i93;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p38);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} kfree($p94);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} usb_set_serial_data($p0, $0.ref);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i41 := $i78;
    goto $bb6;

  $bb26:
    assume $i92 == 1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i93 := $i91;
    goto $bb28;

  $bb14:
    assume $i75 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i76 := ti_download_firmware($p38);
    call {:si_unique_call 20} {:cexpr "status"} boogie_si_record_i32($i76);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p38, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32(0, 19);
    goto $bb18;

  $bb20:
    assume $i81 == 1;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_11 := msleep_interruptible(100);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_12 := usb_reset_device($p5);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i77 == 1;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i78 := $i76;
    goto $bb18;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p38, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p70 := (if $i69 == 1 then .str.51 else .str.52);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} __dynamic_dev_dbg.ref.ref.ref.ref.ref($p3, $p66, .str.50, .str.47, $p70);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p38, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i40 == 1;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(17, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(1608, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.7, $p34);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p1, $p22, .str.48, .str.47, $i26, $i30, $i36);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ti_release: ref;

axiom ti_release == $sub.ref(0, 151594);

procedure ti_release($p0: ref);
  free requires assertsPassed;



implementation ti_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p1 := usb_get_serial_data($p0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} kfree($p3);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    return;
}



const ti_port_probe: ref;

axiom ti_port_probe == $sub.ref(0, 152626);

procedure ti_port_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ti_port_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i6: i32;
  var vslice_dummy_var_13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p2 := kzalloc(112, 208);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_13 := spinlock_check($p7);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} __raw_spin_lock_init($p11, .str, $p1);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i17, $i18);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 65456);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $M.8;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i22, 10);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i24 := msecs_to_jiffies($i23);
    call {:si_unique_call 34} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(1028, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p31 := usb_get_serial_data($p30);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p31);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} usb_set_serial_port_data($p0, $p35);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(1032, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 3);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 65440);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const ti_port_remove: ref;

axiom ti_port_remove == $sub.ref(0, 153658);

procedure ti_port_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ti_port_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p1 := usb_get_serial_port_data($p0);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} kfree($p3);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ti_open: ref;

axiom ti_open == $sub.ref(0, 154690);

procedure ti_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.12, $CurrAddr, assertsPassed;



implementation ti_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i24;
  var $i80: i24;
  var $i81: i24;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i16;
  var $i94: i32;
  var $i95: i16;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i24;
  var $i107: i24;
  var $i108: i24;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i16;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i24;
  var $i131: i24;
  var $i132: i24;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i16;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $i151: i16;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i165: i64;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i24;
  var $i175: i24;
  var $i176: i24;
  var $p177: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i64;
  var $i181: i64;
  var $i182: i64;
  var $i183: i1;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i16;
  var $i189: i32;
  var $i190: i16;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i24;
  var $i201: i24;
  var $i202: i24;
  var $p203: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i64;
  var $i207: i64;
  var $i208: i64;
  var $i209: i1;
  var $p210: ref;
  var $i211: i8;
  var $i212: i32;
  var $i213: i32;
  var $i214: i16;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i24;
  var $i225: i24;
  var $i226: i24;
  var $p227: ref;
  var $p228: ref;
  var $i229: i8;
  var $i230: i64;
  var $i231: i64;
  var $i232: i64;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $i249: i32;
  var $p250: ref;
  var $i99: i32;
  var $p251: ref;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $p255: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i64: i32;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i24;
  var $i269: i24;
  var $i270: i24;
  var $p271: ref;
  var $p272: ref;
  var $i273: i8;
  var $i274: i64;
  var $i275: i64;
  var $i276: i64;
  var $i277: i1;
  var $p278: ref;
  var $i14: i32;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p10 := usb_get_serial_port_data($p1);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i22 := ldv_mutex_lock_interruptible_12($p21);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 49} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    call {:si_unique_call 50} {:cexpr "port_number"} boogie_si_record_i32($i26);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p11, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 48);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i32);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p20, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, .str.1);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p74, .str.2);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p75, .str.3);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p76, .str.7);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i79 := $load.i24($M.5, $p78);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i80 := $and.i24($i79, $sub.i24(0, 262144));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i81 := $or.i24($i80, 438);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p78, $i81);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p82, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.6, $p83);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 63} {:cexpr "tmp___2"} boogie_si_record_i64($i87);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i26);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 3);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32(137);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i96 := ti_command_out_sync($p20, 6, $i93, $i95, $0.ref, 0);
    call {:si_unique_call 66} {:cexpr "status"} boogie_si_record_i32($i96);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p100, .str.1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p101, .str.2);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p102, .str.3);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p103, .str.9);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i106 := $load.i24($M.5, $p105);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i107 := $and.i24($i106, $sub.i24(0, 262144));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i108 := $or.i24($i107, 447);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p105, $i108);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p109, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.6, $p110);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i64($i111);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i113 := $and.i64($i112, 1);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i114 := ldv__builtin_expect($i113, 0);
    call {:si_unique_call 69} {:cexpr "tmp___3"} boogie_si_record_i64($i114);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i8($i26);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 3);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i16($i119);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i121 := ti_command_out_sync($p20, 8, $i120, 0, $0.ref, 0);
    call {:si_unique_call 72} {:cexpr "status"} boogie_si_record_i32($i121);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p124, .str.1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p125, .str.2);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p126, .str.3);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p127, .str.11);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i130 := $load.i24($M.5, $p129);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i131 := $and.i24($i130, $sub.i24(0, 262144));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i132 := $or.i24($i131, 456);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p129, $i132);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p133, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.6, $p134);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i64($i135);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i137 := $and.i64($i136, 1);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i138 := ldv__builtin_expect($i137, 0);
    call {:si_unique_call 75} {:cexpr "tmp___4"} boogie_si_record_i64($i138);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i26);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, 3);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i16($i143);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i145 := ti_command_out_sync($p20, 11, $i144, 128, $0.ref, 0);
    call {:si_unique_call 78} {:cexpr "status"} boogie_si_record_i32($i145);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i8($i26);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i149, 3);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i16($i150);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i152 := ti_command_out_sync($p20, 11, $i151, 0, $0.ref, 0);
    call {:si_unique_call 81} {:cexpr "status"} boogie_si_record_i32($i152);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vslice_dummy_var_14 := usb_clear_halt($p18, $i158);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_15 := usb_clear_halt($p18, $i163);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p168, .str.1);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p169, .str.2);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p170, .str.3);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p171, .str.14);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i174 := $load.i24($M.5, $p173);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i175 := $and.i24($i174, $sub.i24(0, 262144));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i176 := $or.i24($i175, 480);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p173, $i176);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p177, 0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.6, $p178);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i64($i179);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i181 := $and.i64($i180, 1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i182 := ldv__builtin_expect($i181, 0);
    call {:si_unique_call 87} {:cexpr "tmp___5"} boogie_si_record_i64($i182);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i183 := $ne.i64($i182, 0);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i8($i26);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i186, 3);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i16($i187);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32(137);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i32.i16($i189);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i191 := ti_command_out_sync($p20, 6, $i188, $i190, $0.ref, 0);
    call {:si_unique_call 90} {:cexpr "status"} boogie_si_record_i32($i191);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p194, .str.1);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p195, .str.2);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p196, .str.3);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p197, .str.16);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i200 := $load.i24($M.5, $p199);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i201 := $and.i24($i200, $sub.i24(0, 262144));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i202 := $or.i24($i201, 489);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p199, $i202);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p203, 0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.6, $p204);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i64($i205);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i207 := $and.i64($i206, 1);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i208 := ldv__builtin_expect($i207, 0);
    call {:si_unique_call 93} {:cexpr "tmp___6"} boogie_si_record_i64($i208);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i209 := $ne.i64($i208, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i26);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i32($i211);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i212, 3);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i32.i16($i213);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i215 := ti_command_out_sync($p20, 8, $i214, 0, $0.ref, 0);
    call {:si_unique_call 96} {:cexpr "status"} boogie_si_record_i32($i215);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p218, .str.1);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p219, .str.2);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p220, .str.3);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p221, .str.18);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i224 := $load.i24($M.5, $p223);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i225 := $and.i24($i224, $sub.i24(0, 262144));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i226 := $or.i24($i225, 499);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p223, $i226);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p227, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.6, $p228);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i64($i229);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i231 := $and.i64($i230, 1);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i232 := ldv__builtin_expect($i231, 0);
    call {:si_unique_call 99} {:cexpr "tmp___7"} boogie_si_record_i64($i232);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i233 := $ne.i64($i232, 0);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p236);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i238 := $eq.i64($i237, 0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p11, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p236, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p242, $p10);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i243 := usb_submit_urb($p236, 208);
    call {:si_unique_call 103} {:cexpr "status"} boogie_si_record_i32($i243);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p11, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p246, 1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p20, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i249 := $add.i32($i248, 1);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p20, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, $i249);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i64 := $i243;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p20, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} ldv_mutex_unlock_13($p261);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p262, .str.1);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p263, .str.2);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p264, .str.3);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p265, .str.21);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p267 := $bitcast.ref.ref($p266);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i268 := $load.i24($M.5, $p267);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i269 := $and.i24($i268, $sub.i24(0, 262144));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i270 := $or.i24($i269, 525);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p267, $i270);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p271, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.6, $p272);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i64($i273);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i275 := $and.i64($i274, 1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i276 := ldv__builtin_expect($i275, 0);
    call {:si_unique_call 57} {:cexpr "tmp___8"} boogie_si_record_i64($i276);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i277 := $ne.i64($i276, 0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i14 := $i64;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb73:
    assume $i277 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p9, $p278, .str.21, .str.2, $i64);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i244 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} dev_err.ref.ref.ref.i32($p245, .str.20, .str.2, $i243);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i99 := $i243;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p20, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 0);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i64 := $i99;
    goto $bb15;

  $bb70:
    assume $i253 == 1;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p255, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p258, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.0, $p259);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} usb_kill_urb($p260);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb64:
    assume $i238 == 1;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} dev_err.ref.ref.ref($p239, .str.19, .str.2);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32(0, 22);
    goto $bb29;

  $bb61:
    assume $i233 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} __dynamic_dev_dbg.ref.ref.ref.ref($p8, $p234, .str.18, .str.2);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume $i216 == 1;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} dev_err.ref.ref.ref.i32($p217, .str.17, .str.2, $i215);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i99 := $i215;
    goto $bb29;

  $bb55:
    assume $i209 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} __dynamic_dev_dbg.ref.ref.ref.ref($p7, $p210, .str.16, .str.2);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i192 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} dev_err.ref.ref.ref.i32($p193, .str.15, .str.2, $i191);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i99 := $i191;
    goto $bb29;

  $bb49:
    assume $i183 == 1;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} __dynamic_dev_dbg.ref.ref.ref.ref($p6, $p184, .str.14, .str.2);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i166 == 1;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} ti_set_termios($p0, $p1, $p167);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i153 == 1;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} dev_err.ref.ref.ref.i32($p154, .str.13, .str.2, $i152);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i99 := $i152;
    goto $bb29;

  $bb40:
    assume $i146 == 1;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} dev_err.ref.ref.ref.i32($p147, .str.12, .str.2, $i145);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i99 := $i145;
    goto $bb29;

  $bb37:
    assume $i139 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p140, .str.11, .str.2);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i122 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} dev_err.ref.ref.ref.i32($p123, .str.10, .str.2, $i121);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i99 := $i121;
    goto $bb29;

  $bb31:
    assume $i115 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p116, .str.9, .str.2);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i97 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} dev_err.ref.ref.ref.i32($p98, .str.8, .str.2, $i96);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i99 := $i96;
    goto $bb29;

  $bb24:
    assume $i88 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p89, .str.7, .str.2);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i71 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} ti_set_termios($p0, $p1, $p72);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str.1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.2);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.3);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.4);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.5, $p42);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 420);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p42, $i45);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 52} {:cexpr "tmp___1"} boogie_si_record_i64($i51);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p20, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p60, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p20);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i67 := usb_submit_urb($p60, 208);
    call {:si_unique_call 59} {:cexpr "status"} boogie_si_record_i32($i67);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} dev_err.ref.ref.ref.i32($p69, .str.6, .str.2, $i67);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i64 := $i67;
    goto $bb15;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} dev_err.ref.ref.ref($p63, .str.5, .str.2);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 22);
    goto $bb15;

  $bb10:
    assume $i52 == 1;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p53, .str.4, .str.2);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;
}



const ti_close: ref;

axiom ti_close == $sub.ref(0, 155722);

procedure ti_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.12, assertsPassed;



implementation ti_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i1;
  var $p85: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p4 := usb_get_serial_data($p3);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $p6 := usb_get_serial_port_data($p0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p5);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} usb_kill_urb($p14);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} usb_kill_urb($p16);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(108, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p19 := spinlock_check($p18);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i20 := _raw_spin_lock_irqsave($p19);
    call {:si_unique_call 114} {:cexpr "flags"} boogie_si_record_i64($i20);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i25);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} spin_unlock_irqrestore($p29, $i20);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    call {:si_unique_call 116} {:cexpr "port_number"} boogie_si_record_i32($i32);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, .str.1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p34, .str.84);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p35, .str.3);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p36, .str.85);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.5, $p38);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 555);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p38, $i41);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p42, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.6, $p43);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 118} {:cexpr "tmp___2"} boogie_si_record_i64($i47);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i32);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 3);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i54 := ti_command_out_sync($p5, 7, $i53, 0, $0.ref, 0);
    call {:si_unique_call 121} {:cexpr "status"} boogie_si_record_i32($i54);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i58 := ldv_mutex_lock_interruptible_14($p57);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 124} {:cexpr "tmp___3"} boogie_si_record_i32($i58);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    call {:si_unique_call 125} {:cexpr "do_unlock"} boogie_si_record_i32($i60);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i64, 1);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i65);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i73 := $sle.i32($i72, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i60, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i84 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} ldv_mutex_unlock_15($p85);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} usb_kill_urb($p80);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} dev_err.ref.ref.ref.i32($p56, .str.86, .str.84, $i54);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p49, .str.85, .str.84);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const ti_write: ref;

axiom ti_write == $sub.ref(0, 156754);

procedure ti_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation ti_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i42: i32;
  var $i43: i32;
  var $i41: i32;
  var $p44: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 129} {:cexpr "ti_write:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p5 := usb_get_serial_port_data($p1);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 0);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p6);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p32 := spinlock_check($p31);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i33 := _raw_spin_lock_irqsave($p32);
    call {:si_unique_call 136} {:cexpr "__flags"} boogie_si_record_i64($i33);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i3);
    call {:si_unique_call 137} {:cexpr "__n"} boogie_si_record_i64($i35);
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64(0, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i35);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i43 := __kfifo_in($p37, $p2, $i42);
    call {:si_unique_call 141} {:cexpr "tmp___3"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    $i41 := $i43;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} spin_unlock_irqrestore($p44, $i33);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} ti_send($p6);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i25 := $i41;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i35);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i40 := __kfifo_in_r($p37, $p2, $i39, 0);
    call {:si_unique_call 139} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 19);
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.45);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.3);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.46);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 582);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 132} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p24, .str.46, .str.45);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ti_write_room: ref;

axiom ti_write_room == $sub.ref(0, 157786);

procedure ti_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p5 := usb_get_serial_port_data($p4);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p11 := spinlock_check($p10);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i12 := _raw_spin_lock_irqsave($p11);
    call {:si_unique_call 148} {:cexpr "flags"} boogie_si_record_i64($i12);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i21, $i25);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i17, $i26);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    call {:si_unique_call 149} {:cexpr "__avail"} boogie_si_record_i32($i28);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64(0, 0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i28;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i37 := __kfifo_uint_must_check_helper($i36);
    call {:si_unique_call 153} {:cexpr "tmp___4"} boogie_si_record_i32($i37);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} spin_unlock_irqrestore($p38, $i12);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p39, .str.1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p40, .str.87);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p41, .str.3);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p42, .str.88);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.5, $p44);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 611);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p44, $i47);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.6, $p49);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 156} {:cexpr "tmp___5"} boogie_si_record_i64($i53);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i9 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p55, .str.88, .str.87, $i37);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i28);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i64($i30, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb10;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32(0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i28, $i32);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i34 := __kfifo_max_r($i33, 0);
    call {:si_unique_call 151} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const ti_ioctl: ref;

axiom ti_ioctl == $sub.ref(0, 158818);

procedure ti_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.0, $CurrAddr;



implementation ti_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 160} {:cexpr "ti_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 161} {:cexpr "ti_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p8 := usb_get_serial_port_data($p7);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 515);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, .str.1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p36, .str.41);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p37, .str.3);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p38, .str.43);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.5, $p40);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 693);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p40, $i43);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p44, 0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.6, $p45);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 164} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i2);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i53 := ti_set_serial_info($p0, $p9, $p52);
    call {:si_unique_call 172} {:cexpr "tmp___3"} boogie_si_record_i32($i53);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i12 := $i53;
    goto $bb3;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p51, .str.43, .str.41);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 21534);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.1);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, .str.41);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p18, .str.3);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.42);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.5, $p21);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 689);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p21, $i24);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, 0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 166} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i2);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i34 := ti_get_serial_info($p9, $p33);
    call {:si_unique_call 169} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i12 := $i34;
    goto $bb3;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p32, .str.42, .str.41);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;
}



const ti_set_termios: ref;

axiom ti_set_termios == $sub.ref(0, 159850);

procedure ti_set_termios($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation ti_set_termios($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i16;
  var $i129: i32;
  var $i130: i32;
  var $i131: i16;
  var $p132: ref;
  var $p133: ref;
  var $i134: i16;
  var $i135: i32;
  var $i136: i32;
  var $i137: i16;
  var $p138: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p152: ref;
  var $i153: i8;
  var $p154: ref;
  var $p157: ref;
  var $i158: i8;
  var $p159: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i16;
  var $i167: i32;
  var $i168: i32;
  var $i169: i16;
  var $p170: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i16;
  var $i179: i32;
  var $i180: i32;
  var $i181: i16;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i16;
  var $p195: ref;
  var $i196: i32;
  var $i197: i32;
  var $i198: i32;
  var $i199: i16;
  var $p200: ref;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i24;
  var $i210: i24;
  var $i211: i24;
  var $p212: ref;
  var $p213: ref;
  var $i214: i8;
  var $i215: i64;
  var $i216: i64;
  var $i217: i64;
  var $i218: i1;
  var $p219: ref;
  var $p220: ref;
  var $i221: i16;
  var $i222: i32;
  var $p223: ref;
  var $i224: i16;
  var $i225: i32;
  var $p226: ref;
  var $i227: i8;
  var $i228: i32;
  var $p229: ref;
  var $i230: i8;
  var $i231: i32;
  var $p232: ref;
  var $i233: i8;
  var $i234: i32;
  var $p235: ref;
  var $i236: i8;
  var $i237: i32;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $p241: ref;
  var $i242: i8;
  var $i243: i32;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i8;
  var $i249: i32;
  var $i250: i32;
  var $i251: i16;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $p256: ref;
  var $i257: i8;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $p266: ref;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $p6 := usb_get_serial_port_data($p1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 177} {:cexpr "port_number"} boogie_si_record_i32($i10);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 178} {:cexpr "cflag"} boogie_si_record_i32($i13);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 179} {:cexpr "iflag"} boogie_si_record_i32($i16);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str.1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.24);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.3);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.25);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 715);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 181} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.1);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.24);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.3);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.26);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 717);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 184} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p7);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p57 := kmalloc(10, 208);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, 0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 8192);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, $i66);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p68);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 16384);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $i72);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(9, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i75);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i13, 48);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i77, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i77, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 3);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, $sub.i32(0, 1073741825));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i92);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i13, 256);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i96 == 1);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 65527);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, $i117);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 0);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i13, 64);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i121 == 1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 0);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i13, 0);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i124 == 1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_16 := ti_restart_read($p7, $p0);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 4096);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i144 == 1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 1024);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i183 := tty_get_baud_rate($p0);
    call {:si_unique_call 190} {:cexpr "tmp___3"} boogie_si_record_i32($i183);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    $i185 := $i183;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i190 == 1);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i196 := $sdiv.i32($i185, 2);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i196, 461538);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i198 := $sdiv.i32($i197, $i185);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i16($i198);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p200, $i199);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i201 := $and.i32($i13, 4111);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 0);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p203, .str.1);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p204, .str.24);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p205, .str.3);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p206, .str.27);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i209 := $load.i24($M.5, $p208);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i210 := $and.i24($i209, $sub.i24(0, 262144));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i211 := $or.i24($i210, 808);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p208, $i211);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p212, 0);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.6, $p213);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i64($i214);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i216 := $and.i64($i215, 1);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i217 := ldv__builtin_expect($i216, 0);
    call {:si_unique_call 193} {:cexpr "tmp___4"} boogie_si_record_i64($i217);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i218 := $ne.i64($i217, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} __swab16s($p244);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} __swab16s($p245);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i8($i10);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i32($i248);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i250 := $add.i32($i249, 3);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i32.i16($i250);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p58);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i253 := ti_command_out_sync($p247, 5, $i251, 0, $p252, 10);
    call {:si_unique_call 198} {:cexpr "status"} boogie_si_record_i32($i253);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.0, $p256);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    call {:si_unique_call 200} {:cexpr "mcr"} boogie_si_record_i32($i258);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i13, 4111);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i262 := $i258;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i263 := ti_set_mcr($p7, $i262);
    call {:si_unique_call 203} {:cexpr "status"} boogie_si_record_i32($i263);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p266 := $bitcast.ref.ref($p58);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} kfree($p266);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb78:
    assume $i264 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} dev_err.ref.ref.ref.i32.i32($p265, .str.29, .str.24, $i10, $i263);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i260 == 1;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i261 := $and.i32($i258, $sub.i32(0, 49));
    call {:si_unique_call 201} {:cexpr "mcr"} boogie_si_record_i32($i261);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i262 := $i261;
    goto $bb77;

  $bb72:
    assume $i254 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} dev_err.ref.ref.ref.i32.i32($p255, .str.28, .str.24, $i10, $i253);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i218 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i221 := $load.i16($M.0, $p220);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i222 := $zext.i16.i32($i221);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i224 := $load.i16($M.0, $p223);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i225 := $zext.i16.i32($i224);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.0, $p226);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.0, $p229);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i230);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.0, $p232);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(7, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.0, $p235);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i237 := $sext.i8.i32($i236);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.0, $p238);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i240 := $sext.i8.i32($i239);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(9, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i242 := $load.i8($M.0, $p241);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i32($i242);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32($p5, $p219, .str.27, .str.24, $i185, $i222, $i225, $i228, $i231, $i234, $i237, $i240, $i243);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i202 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} tty_encode_baud_rate($p0, $i185, $i185);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i190 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i191 := $sdiv.i32($i185, 2);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i191, 923077);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i193 := $sdiv.i32($i192, $i185);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i16($i193);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, $i194);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i184 == 1;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i185 := 9600;
    goto $bb62;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.0, $p152);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(7, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p154, $i153);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.0, $p157);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p159, $i158);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 4096);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i164 == 1);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_17 := ti_restart_read($p7, $p0);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 1024);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i176 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i178 := $load.i16($M.0, $p177);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i179 := $zext.i16.i32($i178);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i180 := $or.i32($i179, 64);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p182, $i181);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i164 == 1;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.0, $p165);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i166);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i167, 256);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i168);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p170, $i169);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb49;

  $bb42:
    assume $i124 == 1;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i13, 4111);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.0, $p133);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i136 := $or.i32($i135, 32);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i16($i136);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p138, $i137);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i126 == 1;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.0, $p127);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i128);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i129, 1);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i130);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p132, $i131);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb39:
    assume $i121 == 1;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, 2);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i96 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i13, 512);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i98 == 1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.0, $p106);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i108, 8);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p111, $i110);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 2);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i98 == 1;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i102 := $or.i32($i101, 8);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p104, $i103);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 1);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb20;

  $bb17:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i77, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb22;

  $bb23:
    assume $i81 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 2);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb15:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i77, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i77, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb22;

  $bb27:
    assume $i83 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 1);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i77, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb22;

  $bb29:
    assume $i84 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume $i56 == 1;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i49 == 1;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p4, $p50, .str.26, .str.24, $i52, $i54);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p33, .str.25, .str.24, $i13, $i16);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ti_break: ref;

axiom ti_break == $sub.ref(0, 160882);

procedure ti_break($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation ti_break($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 208} {:cexpr "ti_break:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p7 := usb_get_serial_port_data($p6);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.1);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.89);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.3);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.90);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 905);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 211} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p8);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 2);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i35 := (if $i34 == 1 then 64 else 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i37 := ti_write_byte($p6, $p29, $i33, 64, $i36);
    call {:si_unique_call 214} {:cexpr "status"} boogie_si_record_i32($i37);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p39, .str.1);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p40, .str.89);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p41, .str.3);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p42, .str.91);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.5, $p44);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 915);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p44, $i47);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 0);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.6, $p49);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 216} {:cexpr "tmp___1"} boogie_si_record_i64($i53);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p55, .str.91, .str.89, $i37);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p25, .str.90, .str.89, $i1);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ti_chars_in_buffer: ref;

axiom ti_chars_in_buffer == $sub.ref(0, 161914);

procedure ti_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p5 := usb_get_serial_port_data($p4);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p11 := spinlock_check($p10);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i12 := _raw_spin_lock_irqsave($p11);
    call {:si_unique_call 222} {:cexpr "flags"} boogie_si_record_i64($i12);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i17, $i21);
    call {:si_unique_call 223} {:cexpr "chars"} boogie_si_record_i32($i22);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} spin_unlock_irqrestore($p23, $i12);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, .str.1);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p25, .str.92);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.3);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.88);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.5, $p29);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 630);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p29, $i32);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p33, 0);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 226} {:cexpr "tmp___1"} boogie_si_record_i64($i38);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p40, .str.88, .str.92, $i22);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const ti_tx_empty: ref;

axiom ti_tx_empty == $sub.ref(0, 162946);

procedure ti_tx_empty($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $CurrAddr;



implementation ti_tx_empty($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p2 := usb_get_serial_port_data($p0);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i4 := ti_get_lsr($p3, $p1);
    call {:si_unique_call 231} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.9, $p1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 32);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;
}



const ti_throttle: ref;

axiom ti_throttle == $sub.ref(0, 163978);

procedure ti_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ti_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4096);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ti_stop_read($p5, $p0);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ti_unthrottle: ref;

axiom ti_unthrottle == $sub.ref(0, 165010);

procedure ti_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ti_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4096);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i17 := ti_restart_read($p5, $p0);
    call {:si_unique_call 236} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} dev_err.ref.ref.ref.i32($p19, .str.22, .str.23, $i17);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ti_tiocmget: ref;

axiom ti_tiocmget == $sub.ref(0, 166042);

procedure ti_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p5 := usb_get_serial_port_data($p4);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p11 := spinlock_check($p10);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i12 := _raw_spin_lock_irqsave($p11);
    call {:si_unique_call 242} {:cexpr "flags"} boogie_si_record_i64($i12);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    call {:si_unique_call 243} {:cexpr "msr"} boogie_si_record_i32($i15);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 244} {:cexpr "mcr"} boogie_si_record_i32($i18);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} spin_unlock_irqrestore($p19, $i12);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i18, 16);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i22 := (if $i21 == 1 then 2 else 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i18, 32);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 4 else 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i22, $i25);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i18, 4);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 32768 else 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i26, $i29);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i15, 16);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i33 := (if $i32 == 1 then 32 else 0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i30, $i33);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i15, 128);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 64 else 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i34, $i37);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i15, 64);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i41 := (if $i40 == 1 then 128 else 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i38, $i41);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i15, 32);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i45 := (if $i44 == 1 then 256 else 0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i42, $i45);
    call {:si_unique_call 246} {:cexpr "result"} boogie_si_record_i32($i46);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p47, .str.1);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, .str.93);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str.3);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.94);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.5, $p52);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 860);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p52, $i55);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p56, 0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.6, $p57);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 248} {:cexpr "tmp___1"} boogie_si_record_i64($i61);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $i46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i62 == 1;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p63, .str.94, .str.93, $i46);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const ti_tiocmset: ref;

axiom ti_tiocmset == $sub.ref(0, 167074);

procedure ti_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "ti_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 251} {:cexpr "ti_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p12 := spinlock_check($p11);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i13 := _raw_spin_lock_irqsave($p12);
    call {:si_unique_call 255} {:cexpr "flags"} boogie_si_record_i64($i13);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 256} {:cexpr "mcr"} boogie_si_record_i32($i16);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i1, 4);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i16;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i1, 2);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i20;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i1, 32768);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i24;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i2, 4);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i28;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i2, 2);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i32;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i2, 32768);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i36;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} spin_unlock_irqrestore($p41, $i13);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i42 := ti_set_mcr($p7, $i40);
    call {:si_unique_call 265} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i10 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i36, $sub.i32(0, 5));
    call {:si_unique_call 262} {:cexpr "mcr"} boogie_si_record_i32($i39);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb22;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i32, $sub.i32(0, 17));
    call {:si_unique_call 261} {:cexpr "mcr"} boogie_si_record_i32($i35);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb19;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i28, $sub.i32(0, 33));
    call {:si_unique_call 260} {:cexpr "mcr"} boogie_si_record_i32($i31);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb16;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i24, 4);
    call {:si_unique_call 259} {:cexpr "mcr"} boogie_si_record_i32($i27);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i20, 16);
    call {:si_unique_call 258} {:cexpr "mcr"} boogie_si_record_i32($i23);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb10;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i16, 32);
    call {:si_unique_call 257} {:cexpr "mcr"} boogie_si_record_i32($i19);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_serial_generic_tiocmiwait: ref;

axiom usb_serial_generic_tiocmiwait == $sub.ref(0, 168106);

procedure usb_serial_generic_tiocmiwait($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_generic_tiocmiwait($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 266} {:cexpr "usb_serial_generic_tiocmiwait:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_serial_generic_get_icount: ref;

axiom usb_serial_generic_get_icount == $sub.ref(0, 169138);

procedure usb_serial_generic_get_icount($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_generic_get_icount($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 269} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ti_interrupt_callback: ref;

axiom ti_interrupt_callback == $sub.ref(0, 170170);

procedure ti_interrupt_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation ti_interrupt_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i24;
  var $i81: i24;
  var $i82: i24;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $i97: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $p111: ref;
  var $i112: i8;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i24;
  var $i120: i24;
  var $i121: i24;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $i129: i32;
  var $i130: i32;
  var $i131: i8;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 275} {:cexpr "length"} boogie_si_record_i32($i16);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 276} {:cexpr "status"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} dev_err.ref.ref.ref.i32($p12, .str.35, .str.70, $i18);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(180, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i135 := usb_submit_urb($p0, 32);
    call {:si_unique_call 282} {:cexpr "retval"} boogie_si_record_i32($i135);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb57:
    assume $i136 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} dev_err.ref.ref.ref.i32($p12, .str.78, .str.70, $i135);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i16, 2);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p14);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 255);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p14);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i69 := $ashr.i32($i68, 4);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, $sub.i32(0, 3));
    call {:si_unique_call 287} {:cexpr "port_number"} boogie_si_record_i32($i70);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p14);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 15);
    call {:si_unique_call 288} {:cexpr "function"} boogie_si_record_i32($i73);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p74, .str.1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p75, .str.70);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p76, .str.3);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p77, .str.73);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i80 := $load.i24($M.5, $p79);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i81 := $and.i24($i80, $sub.i24(0, 262144));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i82 := $or.i24($i81, 963);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p79, $i82);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p83, 0);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.6, $p84);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i64($i85);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i86, 1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 290} {:cexpr "tmp___1"} boogie_si_record_i64($i88);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.10, $p93);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i96 := $sle.i32($i95, $i70);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i70);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i97, 8));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.10, $p99);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p101 := usb_get_serial_port_data($p100);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i104 := $eq.i64($i103, 0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i73, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i73, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p14, $mul.ref(1, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.0, $p132);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} dev_err.ref.ref.ref.i32($p12, .str.77, .str.70, $i134);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb47:
    assume $i106 == 1;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p14, $mul.ref(1, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    call {:si_unique_call 294} {:cexpr "msr"} boogie_si_record_i8($i112);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p113, .str.1);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p114, .str.70);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p115, .str.3);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p116, .str.76);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i119 := $load.i24($M.5, $p118);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i120 := $and.i24($i119, $sub.i24(0, 262144));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i121 := $or.i24($i120, 985);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p118, $i121);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p122, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.6, $p123);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i64($i124);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i126 := $and.i64($i125, 1);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i127 := ldv__builtin_expect($i126, 0);
    call {:si_unique_call 296} {:cexpr "tmp___3"} boogie_si_record_i64($i127);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i112);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} ti_handle_new_msr($p102, $i131);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53:
    assume $i128 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i112);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p4, $p12, .str.76, .str.70, $i70, $i129);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i73, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb49;

  $bb50:
    assume $i107 == 1;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p14, $mul.ref(1, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} dev_err.ref.ref.ref.i32.i32($p12, .str.75, .str.70, $i70, $i110);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb41:
    assume $i104 == 1;
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb38:
    assume $i96 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} dev_err.ref.ref.ref.i32($p12, .str.74, .str.70, $i70);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35:
    assume $i89 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p14, $mul.ref(1, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p3, $p12, .str.73, .str.70, $i70, $i73, $i92);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i63 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p14, $mul.ref(1, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} dev_err.ref.ref.ref.i32($p12, .str.72, .str.70, $i66);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i44 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str.1);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.70);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.3);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.71);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.5, $p50);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 950);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p50, $i53);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, 0);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 284} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i60 == 1;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p12, .str.71, .str.70, $i16);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb4:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i18, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, .str.1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p27, .str.70);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, .str.3);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.34);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.5, $p31);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 940);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p31, $i34);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, 0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.6, $p36);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 278} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(180, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p12, .str.34, .str.70, $i18);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i18, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i18, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb8;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i18, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb17;
}



const ti_bulk_in_callback: ref;

axiom ti_bulk_in_callback == $sub.ref(0, 171202);

procedure ti_bulk_in_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation ti_bulk_in_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i89: i32;
  var $p94: ref;
  var $i95: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 304} {:cexpr "status"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} dev_err.ref.ref.ref.i32($p10, .str.35, .str.95, $i12);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 184)), $mul.ref(180, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i12, $sub.i32(0, 32));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i12, 0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} spin_lock($p84);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i87 == 1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i89 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} spin_unlock($p94);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i89, 0);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb48:
    assume $i95 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} dev_err.ref.ref.ref.i32($p10, .str.98, .str.95, $i89);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i92 == 1;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 2);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i87 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i88 := usb_submit_urb($p0, 32);
    call {:si_unique_call 319} {:cexpr "retval"} boogie_si_record_i32($i88);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i89 := $i88;
    goto $bb44;

  $bb33:
    assume $i46 == 1;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} usb_serial_debug_data($p10, .str.95, $i48, $p50);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i53 == 1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ti_recv($p7, $p71, $i73);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} spin_lock($p74);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i77, $i79);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i80);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} spin_unlock($p83);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i53 == 1;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p54, .str.1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p55, .str.95);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p56, .str.3);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str.97);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.5, $p59);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 1040);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p59, $i62);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p63, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.6, $p64);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 313} {:cexpr "tmp___0"} boogie_si_record_i64($i68);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i69 == 1;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p10, .str.97, .str.95);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb30:
    assume $i43 == 1;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} dev_err.ref.ref.ref($p10, .str.96, .str.95);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i42 == 1;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, .str.1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, .str.95);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p22, .str.3);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str.34);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.5, $p25);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 1017);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p25, $i28);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p29, 0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.6, $p30);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 184)), $mul.ref(180, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 1);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p10, .str.34, .str.95, $i12);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i12, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i12, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i12, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb17;
}



const ti_bulk_out_callback: ref;

axiom ti_bulk_out_callback == $sub.ref(0, 172234);

procedure ti_bulk_out_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_bulk_out_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 323} {:cexpr "status"} boogie_si_record_i32($i8);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(108, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p6);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(696, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i41 == 1);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1(1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} dev_err.ref.ref.ref.i32($p43, .str.35, .str.33, $i8);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 184)), $mul.ref(180, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} ti_send($p4);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb26;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str.1);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.33);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.3);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.34);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 1077);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 325} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 184)), $mul.ref(180, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 1);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p33, .str.34, .str.33, $i8);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i8, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb14:
    assume $i15 == 1;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i8, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb17;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 173266);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 330} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 174298);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i64.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i64.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64, p.5: i32, p.6: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 175330);

procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    return;
}



const ti_send: ref;

axiom ti_send == $sub.ref(0, 176362);

procedure ti_send($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_send($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i23: i32;
  var $i24: i32;
  var $i22: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p4 := spinlock_check($p3);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 333} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(108, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 335} {:cexpr "__n"} boogie_si_record_i64($i16);
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64(0, 0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i16);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i24 := __kfifo_out($p18, $p13, $i23);
    call {:si_unique_call 339} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i25 := __kfifo_uint_must_check_helper($i22);
    call {:si_unique_call 341} {:cexpr "tmp___3"} boogie_si_record_i32($i25);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(108, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} spin_unlock_irqrestore($p28, $i5);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} usb_serial_debug_data($p29, .str.36, $i25, $p33);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i41 := __create_pipe($p37, $i40);
    call {:si_unique_call 345} {:cexpr "tmp___4"} boogie_si_record_i32($i41);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i41, $sub.i32(0, 1073741824));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} usb_fill_bulk_urb($p43, $p47, $i48, $p52, $i25, ti_bulk_out_callback, $p53);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i56 := usb_submit_urb($p55, 32);
    call {:si_unique_call 348} {:cexpr "result"} boogie_si_record_i32($i56);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i57 == 1);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p67 := spinlock_check($p66);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i68 := _raw_spin_lock_irqsave($p67);
    call {:si_unique_call 351} {:cexpr "flags"} boogie_si_record_i64($i68);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, $i25);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i72);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} spin_unlock_irqrestore($p75, $i68);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} tty_port_tty_wakeup($p76);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i57 == 1;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(696, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i62 == 1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1(1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} dev_err.ref.ref.ref.i32($p64, .str.37, .str.36, $i56);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(108, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb14;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} spin_unlock_irqrestore($p77, $i5);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i16);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i21 := __kfifo_out_r($p18, $p13, $i20, 0);
    call {:si_unique_call 337} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 177394);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 178426);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 1} true;
    call {:si_unique_call 355} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 356} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __kfifo_out_r: ref;

axiom __kfifo_out_r == $sub.ref(0, 179458);

procedure __kfifo_out_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_out_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 357} {:cexpr "__kfifo_out_r:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 358} {:cexpr "__kfifo_out_r:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 1} true;
    call {:si_unique_call 359} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 360} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_out: ref;

axiom __kfifo_out == $sub.ref(0, 180490);

procedure __kfifo_out($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_out($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} {:cexpr "__kfifo_out:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 362} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 363} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __kfifo_uint_must_check_helper: ref;

axiom __kfifo_uint_must_check_helper == $sub.ref(0, 181522);

procedure __kfifo_uint_must_check_helper($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_uint_must_check_helper($i0: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "__kfifo_uint_must_check_helper:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 182554);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_debug_data: ref;

axiom usb_serial_debug_data == $sub.ref(0, 183586);

procedure usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 368} {:cexpr "usb_serial_debug_data:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.38);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.39);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.40);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 368);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 370} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p4, $p0, .str.40, $p1, $i2, $i2, $p3);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 184618);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 185650);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 374} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    return;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 186682);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 375} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 376} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 377} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 187714);

procedure tty_port_tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_port_tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 188746);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    return;
}



const ti_recv: ref;

axiom ti_recv == $sub.ref(0, 189778);

procedure ti_recv($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ti_recv($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "ti_recv:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p3, $i4 := $p1, $i2;
    goto $bb1;

  $bb1:
    call $p3, $i4, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $p12, $i13, $p14, $i15, $i16 := ti_recv_loop_$bb1($p0, $p3, $i4, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $p12, $i13, $p14, $i15, $i16);
    goto $bb1_last;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i7 := tty_insert_flip_string($p5, $p3, $i6);
    call {:si_unique_call 381} {:cexpr "cnt"} boogie_si_record_i32($i7);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, $i4);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} tty_flip_buffer_push($p12);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i7);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p3, $mul.ref($i13, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i4, $i7);
    call {:si_unique_call 384} {:cexpr "length"} boogie_si_record_i32($i15);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $p3, $i4 := $p14, $i15;
    goto $bb9_dummy;

  $bb2:
    assume $i8 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i4, $i7);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} dev_err.ref.ref.ref.i32($p9, .str.99, .str.100, $i10);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 0);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2287;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 190810);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} _raw_spin_lock($p2);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 191842);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} _raw_spin_unlock($p2);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 192874);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 193906);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 194938);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 389} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 195970);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 197002);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 391} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 392} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 393} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_get_serial_port_data: ref;

axiom usb_get_serial_port_data == $sub.ref(0, 198034);

procedure usb_get_serial_port_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_port_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ti_handle_new_msr: ref;

axiom ti_handle_new_msr == $sub.ref(0, 199066);

procedure ti_handle_new_msr($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation ti_handle_new_msr($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 396} {:cexpr "ti_handle_new_msr:arg:msr"} boogie_si_record_i8($i1);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.1);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.79);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.3);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.80);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1271);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 15);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i1);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 240);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $i67);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p72 := tty_port_tty_get($p71);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} tty_kref_put($p72);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i74 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.11, $p76);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb21;

  $bb22:
    assume $i78 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 16);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i81 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} tty_wakeup($p72);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p27 := spinlock_check($p26);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i28 := _raw_spin_lock_irqsave($p27);
    call {:si_unique_call 402} {:cexpr "flags"} boogie_si_record_i64($i28);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i1);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 2);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i1);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 8);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 4);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p61, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(592, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} __wake_up($p63, 1, 1, $0.ref);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} spin_unlock_irqrestore($p64, $i28);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i55 == 1;
    $p56 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(8, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 1);
    $p59 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(8, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i48 == 1;
    $p49 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(12, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 1);
    $p52 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(12, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i41 == 1;
    $p42 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(4, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    $p45 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(4, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i34 == 1;
    $p35 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(0, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    $p38 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p21, .str.80, .str.79, $i22);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 200098);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 409} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 201130);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p1 := external_alloc();
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_wakeup: ref;

axiom tty_wakeup == $sub.ref(0, 202162);

procedure tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 203194);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 204226);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 411} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 412} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 205258);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ti_set_mcr: ref;

axiom ti_set_mcr == $sub.ref(0, 206290);

procedure ti_set_mcr($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_set_mcr($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "ti_set_mcr:arg:mcr"} boogie_si_record_i32($i1);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 4);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i1);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i13 := ti_write_byte($p3, $p5, $i9, 52, $i12);
    call {:si_unique_call 415} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p15 := spinlock_check($p14);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i16 := _raw_spin_lock_irqsave($p15);
    call {:si_unique_call 418} {:cexpr "flags"} boogie_si_record_i64($i16);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 0);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} spin_unlock_irqrestore($p20, $i16);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(5, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ti_write_byte: ref;

axiom ti_write_byte == $sub.ref(0, 207322);

procedure ti_write_byte($p0: ref, $p1: ref, $i2: i64, $i3: i8, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation ti_write_byte($p0: ref, $p1: ref, $i2: i64, $i3: i8, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i16;
  var $i36: i32;
  var $i37: i16;
  var $i38: i16;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i16;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 421} {:cexpr "ti_write_byte:arg:addr"} boogie_si_record_i64($i2);
    call {:si_unique_call 422} {:cexpr "ti_write_byte:arg:mask"} boogie_si_record_i8($i3);
    call {:si_unique_call 423} {:cexpr "ti_write_byte:arg:byte"} boogie_si_record_i8($i4);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.1);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.30);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.3);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.31);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 1385);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 425} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64(9);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p26 := kmalloc($i25, 208);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 48);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 1);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i64($i2, 16);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i16($i34);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i38 := __fswab16($i37);
    call {:si_unique_call 429} {:cexpr "tmp___1"} boogie_si_record_i16($i38);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i64.i16($i2);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i43 := __fswab16($i42);
    call {:si_unique_call 431} {:cexpr "tmp___2"} boogie_si_record_i16($i43);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i43);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i3);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(1, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i4);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p27);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i50 := ti_command_out_sync($p1, $sub.i8(0, 128), 5, 0, $p49, 9);
    call {:si_unique_call 433} {:cexpr "status"} boogie_si_record_i32($i50);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p27);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} kfree($p53);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i30 := $i50;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb8:
    assume $i51 == 1;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} dev_err.ref.ref.ref.i32($p52, .str.32, .str.30, $i50);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i3);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i4);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} __dynamic_dev_dbg.ref.ref.ref.ref.i64.i32.i32($p5, $p22, .str.31, .str.30, $i2, $i23, $i24);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 208354);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 437} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 209386);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ti_command_out_sync: ref;

axiom ti_command_out_sync == $sub.ref(0, 210418);

procedure ti_command_out_sync($p0: ref, $i1: i8, $i2: i16, $i3: i16, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ti_command_out_sync($p0: ref, $i1: i8, $i2: i16, $i3: i16, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} {:cexpr "ti_command_out_sync:arg:command"} boogie_si_record_i8($i1);
    call {:si_unique_call 441} {:cexpr "ti_command_out_sync:arg:moduleid"} boogie_si_record_i16($i2);
    call {:si_unique_call 442} {:cexpr "ti_command_out_sync:arg:value"} boogie_si_record_i16($i3);
    call {:si_unique_call 443} {:cexpr "ti_command_out_sync:arg:size"} boogie_si_record_i32($i5);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i10 := __create_pipe($p9, 0);
    call {:si_unique_call 445} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i10, $sub.i32(0, 2147483648));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i3);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i2);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i5);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i25 := usb_control_msg($p14, $i15, $i17, 64, $i19, $i21, $p4, $i24, 1000);
    call {:si_unique_call 447} {:cexpr "status"} boogie_si_record_i32($i25);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, $i5);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 0);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 70);
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 211450);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} free_($p0);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 212482);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 449} $free($p0);
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 213514);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 450} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 451} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 452} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 453} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 454} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 455} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 456} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 214546);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 460} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $p2 := ldv_malloc($i0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ti_restart_read: ref;

axiom ti_restart_read == $sub.ref(0, 215578);

procedure ti_restart_read($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ti_restart_read($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p3 := spinlock_check($p2);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 464} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} spin_unlock_irqrestore($p19, $i4);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} spin_unlock_irqrestore($p13, $i4);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i16 := usb_submit_urb($p12, 208);
    call {:si_unique_call 467} {:cexpr "status"} boogie_si_record_i32($i16);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const ti_stop_read: ref;

axiom ti_stop_read == $sub.ref(0, 216610);

procedure ti_stop_read($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ti_stop_read($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p3 := spinlock_check($p2);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 471} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} spin_unlock_irqrestore($p9, $i4);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ti_get_lsr: ref;

axiom ti_get_lsr == $sub.ref(0, 217642);

procedure ti_get_lsr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $CurrAddr;



implementation ti_get_lsr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 474} {:cexpr "port_number"} boogie_si_record_i32($i9);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64(5);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p11 := kmalloc($i10, 208);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i9);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 3);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p12);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i21 := ti_command_in_sync($p4, 2, $i19, 0, $p20, 5);
    call {:si_unique_call 477} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, .str.1);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p25, .str.82);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.3);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.83);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.5, $p29);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 1204);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p29, $i32);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p33, 0);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 481} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p12, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p1, $i45);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p12);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} kfree($p46);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p12, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p40, .str.83, .str.82, $i43);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} dev_err.ref.ref.ref.i32($p23, .str.81, .str.82, $i21);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb3;
}



const ti_command_in_sync: ref;

axiom ti_command_in_sync == $sub.ref(0, 218674);

procedure ti_command_in_sync($p0: ref, $i1: i8, $i2: i16, $i3: i16, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ti_command_in_sync($p0: ref, $i1: i8, $i2: i16, $i3: i16, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "ti_command_in_sync:arg:command"} boogie_si_record_i8($i1);
    call {:si_unique_call 484} {:cexpr "ti_command_in_sync:arg:moduleid"} boogie_si_record_i16($i2);
    call {:si_unique_call 485} {:cexpr "ti_command_in_sync:arg:value"} boogie_si_record_i16($i3);
    call {:si_unique_call 486} {:cexpr "ti_command_in_sync:arg:size"} boogie_si_record_i32($i5);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i10 := __create_pipe($p9, 0);
    call {:si_unique_call 488} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i10, $sub.i32(0, 2147483520));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i3);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i2);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i5);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i25 := usb_control_msg($p14, $i15, $i17, $sub.i8(0, 64), $i19, $i21, $p4, $i24, 1000);
    call {:si_unique_call 490} {:cexpr "status"} boogie_si_record_i32($i25);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, $i5);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 70);
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb3;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 219706);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 492} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_encode_baud_rate: ref;

axiom tty_encode_baud_rate == $sub.ref(0, 220738);

procedure tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} {:cexpr "tty_encode_baud_rate:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 494} {:cexpr "tty_encode_baud_rate:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    return;
}



const __swab16s: ref;

axiom __swab16s == $sub.ref(0, 221770);

procedure __swab16s($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __swab16s($p0: ref)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i1 := __swab16p($p0);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p0, $i1);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    return;
}



const __swab16p: ref;

axiom __swab16p == $sub.ref(0, 222802);

procedure __swab16p($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __swab16p($p0: ref) returns ($r: i16)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i4 := __fswab16($i3);
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 223834);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 498} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 499} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ti_get_serial_info: ref;

axiom ti_get_serial_info == $sub.ref(0, 224866);

procedure ti_get_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $CurrAddr;



implementation ti_get_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i7: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(1028, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 501} {:cexpr "cwait"} boogie_si_record_i32($i10);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 65535);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.11;
    call {:si_unique_call 505} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p16, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_1;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p17, 4);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p20, $i19);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p24, $i23);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(12, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p27, $i26);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 1);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p34, $i33);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i40 := (if $i39 == 1 then 921600 else 460800);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p41, $i40);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i15);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p43, $i42);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i46 := copy_to_user($p44, $p45, 72);
    call {:si_unique_call 507} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i10);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i13 := jiffies_to_msecs($i12);
    call {:si_unique_call 503} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 10);
    call {:si_unique_call 504} {:cexpr "cwait"} boogie_si_record_i32($i14);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;
}



const ti_set_serial_info: ref;

axiom ti_set_serial_info == $sub.ref(0, 225898);

procedure ti_set_serial_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ti_set_serial_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p3 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i6 := copy_from_user($p4, $p5, 72);
    call {:si_unique_call 510} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.11, $p9);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 511} {:cexpr "cwait"} boogie_si_record_i32($i11);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 65535);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i11;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(12, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(1028, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i19);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.11, $p13);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 10);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i17 := msecs_to_jiffies($i16);
    call {:si_unique_call 513} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    call {:si_unique_call 514} {:cexpr "cwait"} boogie_si_record_i32($i18);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 226930);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 517} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 518} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} __might_fault(.str.44, 697);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 521} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 523} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 227962);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 527} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 228994);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 528} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 529} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 530} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 230026);

procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 231058);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 232090);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 532} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 533} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 534} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 233122);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    return;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 234154);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 535} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 536} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 537} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 235186);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 236218);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 540} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 541} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __might_fault(.str.44, 732);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 544} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 546} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 237250);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 548} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 549} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 550} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 238282);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    return;
}



const __kfifo_max_r: ref;

axiom __kfifo_max_r == $sub.ref(0, 239314);

procedure __kfifo_max_r($i0: i32, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_max_r($i0: i32, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 551} {:cexpr "__kfifo_max_r:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 552} {:cexpr "__kfifo_max_r:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 553} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 554} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __kfifo_in_r: ref;

axiom __kfifo_in_r == $sub.ref(0, 240346);

procedure __kfifo_in_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_in_r($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 555} {:cexpr "__kfifo_in_r:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 556} {:cexpr "__kfifo_in_r:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kfifo_in: ref;

axiom __kfifo_in == $sub.ref(0, 241378);

procedure __kfifo_in($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __kfifo_in($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 559} {:cexpr "__kfifo_in:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 560} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 561} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_get_serial_data: ref;

axiom usb_get_serial_data == $sub.ref(0, 242410);

procedure usb_get_serial_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 243442);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_14: ref;

axiom ldv_mutex_lock_interruptible_14 == $sub.ref(0, 244474);

procedure ldv_mutex_lock_interruptible_14($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_mutex_lock_interruptible_14($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 563} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i2 := ldv_mutex_lock_interruptible_td_open_close_lock_of_ti_device($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 565} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 245506);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_mutex_unlock_td_open_close_lock_of_ti_device($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} mutex_unlock($p0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_td_open_close_lock_of_ti_device: ref;

axiom ldv_mutex_unlock_td_open_close_lock_of_ti_device == $sub.ref(0, 246538);

procedure ldv_mutex_unlock_td_open_close_lock_of_ti_device($p0: ref);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_mutex_unlock_td_open_close_lock_of_ti_device($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i1 := $M.12;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 569} {:cexpr "ldv_mutex_td_open_close_lock_of_ti_device"} boogie_si_record_i32(1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 247570);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 248602);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 570} __VERIFIER_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 249634);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 1} true;
    call {:si_unique_call 571} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 572} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_td_open_close_lock_of_ti_device: ref;

axiom ldv_mutex_lock_interruptible_td_open_close_lock_of_ti_device == $sub.ref(0, 250666);

procedure ldv_mutex_lock_interruptible_td_open_close_lock_of_ti_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_mutex_lock_interruptible_td_open_close_lock_of_ti_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i1 := $M.12;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i3 := ldv_undef_int();
    call {:si_unique_call 575} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.12 := 2;
    call {:si_unique_call 576} {:cexpr "ldv_mutex_td_open_close_lock_of_ti_device"} boogie_si_record_i32(2);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 251698);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 579} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mutex_lock_interruptible_12: ref;

axiom ldv_mutex_lock_interruptible_12 == $sub.ref(0, 252730);

procedure ldv_mutex_lock_interruptible_12($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_mutex_lock_interruptible_12($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 581} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i2 := ldv_mutex_lock_interruptible_td_open_close_lock_of_ti_device($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 583} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const usb_clear_halt: ref;

axiom usb_clear_halt == $sub.ref(0, 253762);

procedure usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} {:cexpr "usb_clear_halt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 585} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 586} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 254794);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} ldv_mutex_unlock_td_open_close_lock_of_ti_device($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} mutex_unlock($p0);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 255826);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 590} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 256858);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_serial_port_data: ref;

axiom usb_set_serial_port_data == $sub.ref(0, 257890);

procedure usb_set_serial_port_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_port_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} dev_set_drvdata($p2, $p1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 258922);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 259954);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_serial_data: ref;

axiom usb_set_serial_data == $sub.ref(0, 260986);

procedure usb_set_serial_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    return;
}



const ti_download_firmware: ref;

axiom ti_download_firmware == $sub.ref(0, 262018);

procedure ti_download_firmware($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_download_firmware($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i24;
  var $i124: i24;
  var $i125: i24;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $i79: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: ref;
  var vslice_dummy_var_20: ref;
  var vslice_dummy_var_21: ref;
  var vslice_dummy_var_22: ref;
  var vslice_dummy_var_23: ref;
  var vslice_dummy_var_24: ref;
  var vslice_dummy_var_25: ref;
  var vslice_dummy_var_26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i16 := __create_pipe($p7, $i15);
    call {:si_unique_call 597} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, $sub.i32(0, 1073741824));
    call {:si_unique_call 598} {:cexpr "pipe"} boogie_si_record_i32($i17);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_18 := sprintf.ref.ref.i32.i32($p18, .str.55, $i22, $i26);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i30 := request_firmware($p1, $p28, $p29);
    call {:si_unique_call 601} {:cexpr "status"} boogie_si_record_i32($i30);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i76 := $i30;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.14, $p1);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.15, $p81);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i83 := $ugt.i64($i82, 16284);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64(16287);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p90 := kmalloc($i89, 208);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i113 := $sub.i32(0, 12);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.14, $p1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} release_firmware($p114);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i113, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p117, .str.1);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p118, .str.64);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p119, .str.3);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p120, .str.67);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i123 := $load.i24($M.5, $p122);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i124 := $and.i24($i123, $sub.i24(0, 262144));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i125 := $or.i24($i124, 1515);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p122, $i125);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p126, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.6, $p127);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i128);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 624} {:cexpr "tmp___1"} boogie_si_record_i64($i131);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $r := $i79;
    return;

  $bb46:
    assume $i132 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p133, .str.67, .str.64);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i115 == 1;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} dev_err.ref.ref.ref.i32($p116, .str.66, .str.64, $i113);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i79 := $i113;
    goto $bb35;

  $bb40:
    assume $i92 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.14, $p1);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.16, $p94);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.14, $p1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.15, $p97);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 616} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p90, $p95, $i98, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.14, $p1);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.15, $p100);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p90, $mul.ref($i101, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64(16287);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.14, $p1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.15, $p105);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i107 := $sub.i64($i103, $i106);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 617} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p102, $sub.i8(0, 1), $i107, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.14, $p1);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.15, $p109);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i64.i32($i110);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i112 := ti_do_download($p7, $i17, $p90, $i111);
    call {:si_unique_call 619} {:cexpr "status"} boogie_si_record_i32($i112);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} kfree($p90);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i113 := $i112;
    goto $bb42;

  $bb37:
    assume $i83 == 1;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.14, $p1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.15, $p86);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} dev_err.ref.ref.ref.i64($p84, .str.65, .str.64, $i87);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.14, $p1);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} release_firmware($p88);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 2);
    goto $bb35;

  $bb33:
    assume $i77 == 1;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} dev_err.ref.ref.ref($p78, .str.63, .str.64);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 2);
    goto $bb35;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p32, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1760);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.13, $p62);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i64 := $sext.i8.i32($i63);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p2);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i75 := request_firmware($p1, $p73, $p74);
    call {:si_unique_call 611} {:cexpr "status"} boogie_si_record_i32($i75);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb32;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p2);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_26 := strcpy($p71, .str.62);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_25 := strcpy($p69, .str.61);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb3:
    assume $i37 == 1;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 61714);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 61716);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i41, 61717);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i41, 61717);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb12:
    assume $i45 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_20 := strcpy($p58, .str.60);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} vslice_dummy_var_19 := strcpy($p56, .str.59);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i41, 61714);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb14;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p2);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_21 := strcpy($p54, .str.58);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i41, 61712);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i41, 61713);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_23 := strcpy($p52, .str.57);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_22 := strcpy($p50, .str.56);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i41, 793);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb14;

  $bb21:
    assume $i49 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_24 := strcpy($p60, .str.60);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 263050);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 626} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 627} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 628} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 264082);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 629} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 630} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_driver_set_configuration: ref;

axiom usb_driver_set_configuration == $sub.ref(0, 265114);

procedure usb_driver_set_configuration($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_driver_set_configuration($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 631} {:cexpr "usb_driver_set_configuration:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 632} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 633} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 266146);

procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 267178);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 634} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 635} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 268210);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 269242);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 270274);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ti_do_download: ref;

axiom ti_do_download == $sub.ref(0, 271306);

procedure ti_do_download($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ti_do_download($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i10: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i8: i8;
  var $i9: i32;
  var $i19: i8;
  var $i7: i8;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i46: i32;
  var $i59: i32;
  var $i45: i32;
  var $i55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 638} {:cexpr "ti_do_download:arg:pipe"} boogie_si_record_i32($i1);
    call {:si_unique_call 639} {:cexpr "ti_do_download:arg:size"} boogie_si_record_i32($i3);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(3, $i3);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i3);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, 3);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i7);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str.1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.68);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.3);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.69);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.5, $p32);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 1429);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p32, $i35);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 643} {:cexpr "tmp"} boogie_si_record_i64($i41);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32(0, $i3);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i45 := 0;
    assume {:branchcond $i44} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i55 := $i45;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb15;

  $bb15:
    call $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $i56, $i57, $i58, $i46, $i59 := ti_do_download_loop_$bb15($p0, $i1, $p2, $i3, $p4, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $i56, $i57, $i58, $i46, $i59);
    goto $bb15_last;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i3, $i46);
    call {:si_unique_call 645} {:cexpr "_min1"} boogie_si_record_i32($i47);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 64);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i49 := 64;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i46);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p2, $mul.ref($i50, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i52 := usb_bulk_msg($p0, $i1, $p51, $i49, $p4, 1000);
    call {:si_unique_call 647} {:cexpr "status"} boogie_si_record_i32($i52);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.17, $p4);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i46, $i56);
    call {:si_unique_call 648} {:cexpr "pos"} boogie_si_record_i32($i57);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, $i3);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i59 := $i52;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i45 := $i59;
    goto $bb14;

  $bb24:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i57;
    goto $bb24_dummy;

  $bb20:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb22;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    goto $bb19;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p43, .str.69, .str.68);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 3;
    goto $bb4;

  $bb4:
    call $i10, $p11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i8, $i9, $i19 := ti_do_download_loop_$bb4($p2, $i3, $i10, $p11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i8, $i9, $i19);
    goto $bb4_last;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p2, $mul.ref($i10, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i8);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i13, $i14);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 640} {:cexpr "cs"} boogie_si_record_i8($i16);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i9, 1);
    call {:si_unique_call 641} {:cexpr "pos"} boogie_si_record_i32($i17);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, $i3);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i16, $i17;
    goto $bb6_dummy;

  $bb24_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3229;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 272338);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 650} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 651} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 652} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 653} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 273370);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p1 := calloc(1, $i0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 656} __VERIFIER_assume($i4);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 274402);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 658} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.18;
    call {:si_unique_call 659} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.18 := cmdloc_dummy_var_8;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_usb_serial_driver_1: ref;

axiom ldv_initialize_usb_serial_driver_1 == $sub.ref(0, 275434);

procedure ldv_initialize_usb_serial_driver_1();
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_1()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $M.20 := $p2;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.21 := $p4;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.22 := $p6;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_serial_driver_2: ref;

axiom ldv_initialize_usb_serial_driver_2 == $sub.ref(0, 276466);

procedure ldv_initialize_usb_serial_driver_2();
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_2()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.24 := $p2;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.25 := $p4;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.26 := $p6;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 277498);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.27, $M.28, $M.29, $M.30, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.31, $M.32, $M.33, $M.23, $M.24, $M.25, $M.26, $M.19, $M.20, $M.21, $M.22, $M.34, $M.35, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.12, $M.38, $M.37, $M.36, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.8, $M.68, $M.13, $CurrAddr, $M.11, $M.9, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i191: i32;
  var $i192: i64;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i197: i32;
  var $i198: i64;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i32;
  var $i204: i64;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i64;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $i246: i32;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $i258: i32;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i64;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i64;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i64;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i278: i64;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i32;
  var $i285: i1;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $i327: i32;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $i339: i32;
  var $i340: i32;
  var $i341: i1;
  var $p342: ref;
  var $i344: i32;
  var $i345: i1;
  var $p346: ref;
  var $i348: i32;
  var $i349: i1;
  var $p350: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $i375: i32;
  var $i376: i1;
  var $p377: ref;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $i384: i32;
  var $i385: i1;
  var $i387: i32;
  var $i388: i1;
  var $i390: i32;
  var $i391: i1;
  var $i393: i32;
  var $i394: i32;
  var $i395: i32;
  var $i396: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i1;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i1;
  var $i407: i32;
  var $i408: i32;
  var $i409: i1;
  var $i410: i32;
  var $i411: i1;
  var $i412: i32;
  var $i413: i1;
  var $i414: i32;
  var $i415: i1;
  var $i416: i1;
  var $i417: i1;
  var $i418: i1;
  var $i419: i1;
  var $i420: i1;
  var $i421: i1;
  var $i422: i1;
  var $i423: i1;
  var $i424: i1;
  var $i425: i1;
  var $i426: i1;
  var $i427: i1;
  var $i428: i1;
  var $i429: i1;
  var $i430: i1;
  var $i431: i1;
  var $i432: i1;
  var $i433: i1;
  var $i434: i1;
  var $i435: i1;
  var $i436: i1;
  var $i437: i1;
  var $i438: i1;
  var $i439: i1;
  var $i440: i32;
  var $i441: i1;
  var $p442: ref;
  var $i443: i32;
  var $i444: i1;
  var $p445: ref;
  var $i446: i32;
  var $i447: i1;
  var $p448: ref;
  var $i449: i32;
  var $i450: i1;
  var $p451: ref;
  var $i452: i32;
  var $i453: i1;
  var $p454: ref;
  var $i456: i32;
  var $i457: i1;
  var $p458: ref;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $i464: i32;
  var $i465: i1;
  var $p466: ref;
  var $i468: i32;
  var $i469: i1;
  var $p470: ref;
  var $i472: i32;
  var $i473: i1;
  var $p474: ref;
  var $i476: i32;
  var $i477: i1;
  var $p478: ref;
  var $i480: i32;
  var $i481: i1;
  var $p482: ref;
  var $i484: i32;
  var $i485: i1;
  var $p486: ref;
  var $p487: ref;
  var $i488: i32;
  var $i489: i32;
  var $i490: i1;
  var $i491: i32;
  var $i492: i1;
  var $p493: ref;
  var $i494: i32;
  var $i495: i1;
  var $p496: ref;
  var $i497: i32;
  var $i498: i1;
  var $p499: ref;
  var $i500: i32;
  var $i501: i1;
  var $p502: ref;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $p506: ref;
  var $i507: i32;
  var $i508: i1;
  var $p509: ref;
  var $p510: ref;
  var $i511: i32;
  var $i512: i1;
  var $p513: ref;
  var $p514: ref;
  var $i515: i32;
  var $i516: i1;
  var $p517: ref;
  var $p518: ref;
  var $i519: i32;
  var $i520: i1;
  var $p521: ref;
  var $i523: i32;
  var $i524: i1;
  var $p525: ref;
  var $i527: i32;
  var $i528: i1;
  var $p529: ref;
  var $i531: i32;
  var $i532: i1;
  var $p533: ref;
  var $i535: i32;
  var $i536: i1;
  var $p537: ref;
  var $i538: i32;
  var $i539: i1;
  var $p540: ref;
  var $i541: i32;
  var $i542: i32;
  var $i543: i32;
  var $i544: i1;
  var $p545: ref;
  var $i546: i32;
  var $i547: i64;
  var $i549: i32;
  var $i550: i1;
  var $p551: ref;
  var $i552: i32;
  var $i553: i64;
  var $i555: i32;
  var $i556: i1;
  var $p557: ref;
  var $i558: i32;
  var $i559: i64;
  var $i561: i32;
  var $i562: i1;
  var $p563: ref;
  var $i564: i32;
  var $i565: i64;
  var $i567: i32;
  var $i568: i1;
  var $p569: ref;
  var $i570: i32;
  var $i571: i32;
  var $i573: i32;
  var $i574: i1;
  var $p575: ref;
  var $i576: i32;
  var $i577: i32;
  var $i579: i32;
  var $i580: i1;
  var $p581: ref;
  var $i582: i32;
  var $i583: i32;
  var $i585: i32;
  var $i586: i1;
  var $p587: ref;
  var $i588: i32;
  var $i589: i32;
  var $i591: i32;
  var $i592: i1;
  var $p593: ref;
  var $p594: ref;
  var $i595: i32;
  var $i597: i32;
  var $i598: i1;
  var $p599: ref;
  var $p600: ref;
  var $i601: i32;
  var $i603: i32;
  var $i604: i1;
  var $p605: ref;
  var $p606: ref;
  var $i607: i32;
  var $i609: i32;
  var $i610: i1;
  var $p611: ref;
  var $p612: ref;
  var $i613: i32;
  var $i615: i32;
  var $i616: i1;
  var $p617: ref;
  var $i618: i64;
  var $i620: i32;
  var $i621: i1;
  var $p622: ref;
  var $i623: i64;
  var $i625: i32;
  var $i626: i1;
  var $p627: ref;
  var $i628: i64;
  var $i630: i32;
  var $i631: i1;
  var $p632: ref;
  var $i633: i64;
  var $i635: i32;
  var $i636: i1;
  var $p637: ref;
  var $i638: i32;
  var $i639: i32;
  var $i640: i1;
  var $i641: i32;
  var $i642: i1;
  var $p643: ref;
  var $i645: i32;
  var $i646: i1;
  var $p647: ref;
  var $i649: i32;
  var $i650: i1;
  var $p651: ref;
  var $i653: i32;
  var $i654: i1;
  var $p655: ref;
  var $i657: i32;
  var $i658: i1;
  var $p659: ref;
  var $i660: i32;
  var $i661: i1;
  var $p662: ref;
  var $i663: i32;
  var $i664: i1;
  var $p665: ref;
  var $i667: i32;
  var $i668: i1;
  var $p669: ref;
  var $i671: i32;
  var $i672: i1;
  var $p673: ref;
  var $i675: i32;
  var $i676: i1;
  var $p677: ref;
  var $i679: i32;
  var $i680: i1;
  var $p681: ref;
  var $i682: i32;
  var $i683: i32;
  var $i684: i1;
  var $p685: ref;
  var $i686: i32;
  var $i687: i32;
  var $i688: i1;
  var $p689: ref;
  var $i690: i32;
  var $i691: i32;
  var $i692: i1;
  var $p693: ref;
  var $i694: i32;
  var $i695: i32;
  var $i696: i1;
  var $p697: ref;
  var $i699: i32;
  var $i700: i1;
  var $p701: ref;
  var $i703: i32;
  var $i704: i1;
  var $p705: ref;
  var $i707: i32;
  var $i708: i1;
  var $p709: ref;
  var $i711: i32;
  var $i712: i1;
  var $p713: ref;
  var $i715: i32;
  var $i716: i1;
  var $p717: ref;
  var $i719: i32;
  var $i720: i1;
  var $p721: ref;
  var $i723: i32;
  var $i724: i1;
  var $p725: ref;
  var $i727: i32;
  var $i728: i1;
  var $p729: ref;
  var $i730: i32;
  var $i731: i1;
  var $p732: ref;
  var $i733: i32;
  var $i734: i1;
  var $p735: ref;
  var $i736: i32;
  var $i737: i1;
  var $p738: ref;
  var $i739: i32;
  var $i740: i1;
  var $i742: i32;
  var $i743: i1;
  var $i745: i32;
  var $i746: i1;
  var $i748: i32;
  var $i749: i32;
  var vslice_dummy_var_27: ref;
  var vslice_dummy_var_28: ref;
  var vslice_dummy_var_29: ref;
  var vslice_dummy_var_30: ref;
  var vslice_dummy_var_31: ref;
  var vslice_dummy_var_32: ref;
  var vslice_dummy_var_33: ref;
  var vslice_dummy_var_34: ref;
  var vslice_dummy_var_35: ref;
  var vslice_dummy_var_36: ref;
  var vslice_dummy_var_37: ref;
  var vslice_dummy_var_38: ref;
  var vslice_dummy_var_39: ref;
  var vslice_dummy_var_40: ref;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i1;
  var vslice_dummy_var_70: i1;
  var vslice_dummy_var_71: i1;
  var vslice_dummy_var_72: i1;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i1;
  var vslice_dummy_var_117: i1;
  var vslice_dummy_var_118: i1;
  var vslice_dummy_var_119: i1;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;

  $bb0:
    call {:si_unique_call 668} $initialize();
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p15 := ldv_init_zalloc(44);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p17 := ldv_init_zalloc(80);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p19 := ldv_init_zalloc(44);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p21 := ldv_init_zalloc(1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p22 := ldv_init_zalloc(80);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} ldv_initialize();
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_27 := ldv_memset($p24, 0, 4);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_28 := ldv_memset($p26, 0, 4);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_29 := ldv_memset($p28, 0, 4);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_30 := ldv_memset($p30, 0, 8);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_31 := ldv_memset($p32, 0, 8);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p5);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_32 := ldv_memset($p34, 0, 4);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p6);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_33 := ldv_memset($p36, 0, 4);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p7);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_34 := ldv_memset($p38, 0, 8);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p8);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_35 := ldv_memset($p40, 0, 4);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p9);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_36 := ldv_memset($p42, 0, 8);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p10);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_37 := ldv_memset($p44, 0, 4);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p11);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_38 := ldv_memset($p46, 0, 4);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p12);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_39 := ldv_memset($p48, 0, 4);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p13);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_40 := ldv_memset($p50, 0, 4);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 705} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 706} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 708} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $p99, $i101, $i102, $p103, $i105, $i106, $p107, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $p127, $i129, $i130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $p147, $i148, $i149, $p150, $p151, $i152, $i153, $p154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $p162, $p163, $i164, $i165, $p166, $i167, $i168, $p169, $i171, $i172, $p173, $i175, $i176, $p177, $i179, $i180, $p181, $i183, $i184, $p185, $i186, $i187, $i188, $i189, $p190, $i191, $i192, $i194, $i195, $p196, $i197, $i198, $i200, $i201, $p202, $i203, $i204, $i206, $i207, $p208, $i209, $i210, $i212, $i213, $p214, $i215, $i216, $i218, $i219, $p220, $i221, $i222, $i224, $i225, $p226, $i227, $i228, $i230, $i231, $p232, $i233, $i234, $i236, $i237, $p238, $p239, $i240, $i242, $i243, $p244, $p245, $i246, $i248, $i249, $p250, $p251, $i252, $i254, $i255, $p256, $p257, $i258, $i260, $i261, $p262, $i263, $i265, $i266, $p267, $i268, $i270, $i271, $p272, $i273, $i275, $i276, $p277, $i278, $i280, $i281, $p282, $i283, $i284, $i285, $i286, $i287, $p288, $i289, $i290, $p291, $i293, $i294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i308, $i309, $p310, $i312, $i313, $p314, $i316, $i317, $p318, $i320, $i321, $p322, $i324, $i325, $p326, $i327, $i328, $i329, $p330, $i331, $i332, $i333, $p334, $i335, $i336, $i337, $p338, $i339, $i340, $i341, $p342, $i344, $i345, $p346, $i348, $i349, $p350, $i352, $i353, $p354, $i356, $i357, $p358, $i360, $i361, $p362, $i364, $i365, $p366, $i368, $i369, $p370, $i372, $i373, $p374, $i375, $i376, $p377, $i378, $i379, $p380, $i381, $i382, $p383, $i384, $i385, $i387, $i388, $i390, $i391, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $p442, $i443, $i444, $p445, $i446, $i447, $p448, $i449, $i450, $p451, $i452, $i453, $p454, $i456, $i457, $p458, $i460, $i461, $p462, $i464, $i465, $p466, $i468, $i469, $p470, $i472, $i473, $p474, $i476, $i477, $p478, $i480, $i481, $p482, $i484, $i485, $p486, $p487, $i488, $i489, $i490, $i491, $i492, $p493, $i494, $i495, $p496, $i497, $i498, $p499, $i500, $i501, $p502, $i503, $i504, $p505, $p506, $i507, $i508, $p509, $p510, $i511, $i512, $p513, $p514, $i515, $i516, $p517, $p518, $i519, $i520, $p521, $i523, $i524, $p525, $i527, $i528, $p529, $i531, $i532, $p533, $i535, $i536, $p537, $i538, $i539, $p540, $i541, $i542, $i543, $i544, $p545, $i546, $i547, $i549, $i550, $p551, $i552, $i553, $i555, $i556, $p557, $i558, $i559, $i561, $i562, $p563, $i564, $i565, $i567, $i568, $p569, $i570, $i571, $i573, $i574, $p575, $i576, $i577, $i579, $i580, $p581, $i582, $i583, $i585, $i586, $p587, $i588, $i589, $i591, $i592, $p593, $p594, $i595, $i597, $i598, $p599, $p600, $i601, $i603, $i604, $p605, $p606, $i607, $i609, $i610, $p611, $p612, $i613, $i615, $i616, $p617, $i618, $i620, $i621, $p622, $i623, $i625, $i626, $p627, $i628, $i630, $i631, $p632, $i633, $i635, $i636, $p637, $i638, $i639, $i640, $i641, $i642, $p643, $i645, $i646, $p647, $i649, $i650, $p651, $i653, $i654, $p655, $i657, $i658, $p659, $i660, $i661, $p662, $i663, $i664, $p665, $i667, $i668, $p669, $i671, $i672, $p673, $i675, $i676, $p677, $i679, $i680, $p681, $i682, $i683, $i684, $p685, $i686, $i687, $i688, $p689, $i690, $i691, $i692, $p693, $i694, $i695, $i696, $p697, $i699, $i700, $p701, $i703, $i704, $p705, $i707, $i708, $p709, $i711, $i712, $p713, $i715, $i716, $p717, $i719, $i720, $p721, $i723, $i724, $p725, $i727, $i728, $p729, $i730, $i731, $p732, $i733, $i734, $p735, $i736, $i737, $p738, $i739, $i740, $i742, $i743, $i745, $i746, $i748, $i749, vslice_dummy_var_41, vslice_dummy_var_42, vslice_dummy_var_43, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p16, $p18, $p20, $p21, $p23, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $p99, $i101, $i102, $p103, $i105, $i106, $p107, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $p127, $i129, $i130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $p147, $i148, $i149, $p150, $p151, $i152, $i153, $p154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $p162, $p163, $i164, $i165, $p166, $i167, $i168, $p169, $i171, $i172, $p173, $i175, $i176, $p177, $i179, $i180, $p181, $i183, $i184, $p185, $i186, $i187, $i188, $i189, $p190, $i191, $i192, $i194, $i195, $p196, $i197, $i198, $i200, $i201, $p202, $i203, $i204, $i206, $i207, $p208, $i209, $i210, $i212, $i213, $p214, $i215, $i216, $i218, $i219, $p220, $i221, $i222, $i224, $i225, $p226, $i227, $i228, $i230, $i231, $p232, $i233, $i234, $i236, $i237, $p238, $p239, $i240, $i242, $i243, $p244, $p245, $i246, $i248, $i249, $p250, $p251, $i252, $i254, $i255, $p256, $p257, $i258, $i260, $i261, $p262, $i263, $i265, $i266, $p267, $i268, $i270, $i271, $p272, $i273, $i275, $i276, $p277, $i278, $i280, $i281, $p282, $i283, $i284, $i285, $i286, $i287, $p288, $i289, $i290, $p291, $i293, $i294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i308, $i309, $p310, $i312, $i313, $p314, $i316, $i317, $p318, $i320, $i321, $p322, $i324, $i325, $p326, $i327, $i328, $i329, $p330, $i331, $i332, $i333, $p334, $i335, $i336, $i337, $p338, $i339, $i340, $i341, $p342, $i344, $i345, $p346, $i348, $i349, $p350, $i352, $i353, $p354, $i356, $i357, $p358, $i360, $i361, $p362, $i364, $i365, $p366, $i368, $i369, $p370, $i372, $i373, $p374, $i375, $i376, $p377, $i378, $i379, $p380, $i381, $i382, $p383, $i384, $i385, $i387, $i388, $i390, $i391, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $p442, $i443, $i444, $p445, $i446, $i447, $p448, $i449, $i450, $p451, $i452, $i453, $p454, $i456, $i457, $p458, $i460, $i461, $p462, $i464, $i465, $p466, $i468, $i469, $p470, $i472, $i473, $p474, $i476, $i477, $p478, $i480, $i481, $p482, $i484, $i485, $p486, $p487, $i488, $i489, $i490, $i491, $i492, $p493, $i494, $i495, $p496, $i497, $i498, $p499, $i500, $i501, $p502, $i503, $i504, $p505, $p506, $i507, $i508, $p509, $p510, $i511, $i512, $p513, $p514, $i515, $i516, $p517, $p518, $i519, $i520, $p521, $i523, $i524, $p525, $i527, $i528, $p529, $i531, $i532, $p533, $i535, $i536, $p537, $i538, $i539, $p540, $i541, $i542, $i543, $i544, $p545, $i546, $i547, $i549, $i550, $p551, $i552, $i553, $i555, $i556, $p557, $i558, $i559, $i561, $i562, $p563, $i564, $i565, $i567, $i568, $p569, $i570, $i571, $i573, $i574, $p575, $i576, $i577, $i579, $i580, $p581, $i582, $i583, $i585, $i586, $p587, $i588, $i589, $i591, $i592, $p593, $p594, $i595, $i597, $i598, $p599, $p600, $i601, $i603, $i604, $p605, $p606, $i607, $i609, $i610, $p611, $p612, $i613, $i615, $i616, $p617, $i618, $i620, $i621, $p622, $i623, $i625, $i626, $p627, $i628, $i630, $i631, $p632, $i633, $i635, $i636, $p637, $i638, $i639, $i640, $i641, $i642, $p643, $i645, $i646, $p647, $i649, $i650, $p651, $i653, $i654, $p655, $i657, $i658, $p659, $i660, $i661, $p662, $i663, $i664, $p665, $i667, $i668, $p669, $i671, $i672, $p673, $i675, $i676, $p677, $i679, $i680, $p681, $i682, $i683, $i684, $p685, $i686, $i687, $i688, $p689, $i690, $i691, $i692, $p693, $i694, $i695, $i696, $p697, $i699, $i700, $p701, $i703, $i704, $p705, $i707, $i708, $p709, $i711, $i712, $p713, $i715, $i716, $p717, $i719, $i720, $p721, $i723, $i724, $p725, $i727, $i728, $p729, $i730, $i731, $p732, $i733, $i734, $p735, $i736, $i737, $p738, $i739, $i740, $i742, $i743, $i745, $i746, $i748, $i749, vslice_dummy_var_41, vslice_dummy_var_42, vslice_dummy_var_43, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i52, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i52, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_stop();
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb295_dummy;

  $bb7:
    assume $i55 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i412 := $M.30;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i413 := $ne.i32($i412, 0);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb326:
    assume $i413 == 1;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 881} $i414 := __VERIFIER_nondet_int();
    call {:si_unique_call 882} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i414);
    call {:si_unique_call 883} {:cexpr "tmp___8"} boogie_si_record_i32($i414);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $i415 := $slt.i32($i414, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    $i416 := $slt.i32($i414, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    $i417 := $slt.i32($i414, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    $i418 := $slt.i32($i414, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    $i419 := $slt.i32($i414, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i414, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    assume !($i420 == 1);
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_stop();
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb339:
    assume $i420 == 1;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i745 := $M.30;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i746 := $eq.i32($i745, 1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  $bb604:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb603:
    assume $i746 == 1;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_134 := ldv_probe_2();
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i748 := $M.28;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i749 := $add.i32($i748, 1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.28 := $i749;
    call {:si_unique_call 1033} {:cexpr "ref_cnt"} boogie_si_record_i32($i749);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb337:
    assume $i419 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i739 := $M.30;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i740 := $eq.i32($i739, 4);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  $bb598:
    assume !($i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    $i742 := $M.30;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i743 := $eq.i32($i742, 3);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  $bb601:
    assume !($i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb600:
    assume $i743 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_133 := ldv_detach_2();
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb597:
    assume $i740 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vslice_dummy_var_132 := ldv_detach_2();
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1028} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb335:
    assume $i418 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i727 := $M.30;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i728 := $eq.i32($i727, 4);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb585, $bb586;

  $bb586:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $i730 := $M.30;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i731 := $eq.i32($i730, 1);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    $i733 := $M.30;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i734 := $eq.i32($i733, 3);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i734 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    $i736 := $M.30;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i737 := $eq.i32($i736, 2);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  $bb595:
    assume !($i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb594:
    assume $i737 == 1;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p738 := $M.23;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ti_bulk_in_callback($p738);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb591:
    assume $i734 == 1;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p735 := $M.23;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} ti_bulk_in_callback($p735);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb588:
    assume $i731 == 1;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p732 := $M.23;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ti_bulk_in_callback($p732);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb585:
    assume $i728 == 1;
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p729 := $M.23;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ti_bulk_in_callback($p729);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb333:
    assume $i417 == 1;
    assume {:verifier.code 0} true;
    $i421 := $slt.i32($i414, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    $i422 := $slt.i32($i414, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i422 == 1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i711 := $M.30;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i712 := $eq.i32($i711, 4);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    $i715 := $M.30;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i716 := $eq.i32($i715, 1);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  $bb577:
    assume !($i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    $i719 := $M.30;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i720 := $eq.i32($i719, 3);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    $i723 := $M.30;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i724 := $eq.i32($i723, 2);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  $bb583:
    assume !($i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb582:
    assume $i724 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p725 := $M.26;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_131 := ti_tiocmget($p725);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb579:
    assume $i720 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p721 := $M.26;
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_130 := ti_tiocmget($p721);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb576:
    assume $i716 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p717 := $M.26;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_129 := ti_tiocmget($p717);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb573:
    assume $i712 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p713 := $M.26;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_128 := ti_tiocmget($p713);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb344:
    assume $i422 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i695 := $M.30;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i696 := $eq.i32($i695, 4);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb561, $bb562;

  $bb562:
    assume !($i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    $i699 := $M.30;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i700 := $eq.i32($i699, 1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb565:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    $i703 := $M.30;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i704 := $eq.i32($i703, 3);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    $i707 := $M.30;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i708 := $eq.i32($i707, 2);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb570, $bb571;

  $bb571:
    assume !($i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb570:
    assume $i708 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p709 := $M.26;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_127 := ti_chars_in_buffer($p709);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb567:
    assume $i704 == 1;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p705 := $M.26;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} vslice_dummy_var_126 := ti_chars_in_buffer($p705);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb564:
    assume $i700 == 1;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p701 := $M.26;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} vslice_dummy_var_125 := ti_chars_in_buffer($p701);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb561:
    assume $i696 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p697 := $M.26;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_124 := ti_chars_in_buffer($p697);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb342:
    assume $i421 == 1;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i679 := $M.30;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i679, 4);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    $i683 := $M.30;
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i684 := $eq.i32($i683, 1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i684 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    $i687 := $M.30;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i688 := $eq.i32($i687, 3);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    $i691 := $M.30;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i692 := $eq.i32($i691, 2);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  $bb559:
    assume !($i692 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb558:
    assume $i692 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p693 := $M.26;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i694 := $load.i32($M.18, $p13);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} ti_break($p693, $i694);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb555:
    assume $i688 == 1;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p689 := $M.26;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i690 := $load.i32($M.18, $p13);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ti_break($p689, $i690);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb552:
    assume $i684 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p685 := $M.26;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i686 := $load.i32($M.18, $p13);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ti_break($p685, $i686);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 998} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb549:
    assume $i680 == 1;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p681 := $M.26;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i682 := $load.i32($M.18, $p13);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ti_break($p681, $i682);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 996} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb331:
    assume $i416 == 1;
    assume {:verifier.code 0} true;
    $i423 := $slt.i32($i414, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    $i424 := $slt.i32($i414, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i424 == 1);
    assume {:verifier.code 0} true;
    $i425 := $slt.i32($i414, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i425 == 1);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i663 := $M.30;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i664 := $eq.i32($i663, 4);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  $bb538:
    assume !($i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    $i667 := $M.30;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i668 := $eq.i32($i667, 1);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  $bb541:
    assume !($i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $i671 := $M.30;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i672 := $eq.i32($i671, 3);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    $i675 := $M.30;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i676 := $eq.i32($i675, 2);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb546:
    assume $i676 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p677 := $M.26;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_123 := ti_write_room($p677);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb543:
    assume $i672 == 1;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p673 := $M.26;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_122 := ti_write_room($p673);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb540:
    assume $i668 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p669 := $M.26;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} vslice_dummy_var_121 := ti_write_room($p669);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb537:
    assume $i664 == 1;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p665 := $M.26;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} vslice_dummy_var_120 := ti_write_room($p665);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb350:
    assume $i425 == 1;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i660 := $M.30;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i661 := $eq.i32($i660, 4);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  $bb535:
    assume !($i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb534:
    assume $i661 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p662 := $M.24;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} ti_close($p662);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb536;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb348:
    assume $i424 == 1;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i657 := $M.30;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i658 := $eq.i32($i657, 4);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i658 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb531:
    assume $i658 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p659 := $M.23;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} ti_interrupt_callback($p659);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb346:
    assume $i423 == 1;
    assume {:verifier.code 0} true;
    $i426 := $slt.i32($i414, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    $i427 := $slt.i32($i414, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i427 == 1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i641 := $M.30;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i642 := $eq.i32($i641, 4);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i642 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    $i645 := $M.30;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i646 := $eq.i32($i645, 1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  $bb523:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    $i649 := $M.30;
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i649, 3);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  $bb526:
    assume !($i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    $i653 := $M.30;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i654 := $eq.i32($i653, 2);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb528:
    assume $i654 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p655 := $M.24;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_119 := ti_tx_empty($p655);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb525:
    assume $i650 == 1;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p651 := $M.24;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_118 := ti_tx_empty($p651);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb522:
    assume $i646 == 1;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p647 := $M.24;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_117 := ti_tx_empty($p647);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb519:
    assume $i642 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p643 := $M.24;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_116 := ti_tx_empty($p643);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb354:
    assume $i427 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i635 := $M.30;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i636 := $eq.i32($i635, 2);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  $bb514:
    assume !($i636 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb513:
    assume $i636 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p637 := $M.25;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i638 := ti_startup($p637);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.35 := $i638;
    call {:si_unique_call 973} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i638);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i639 := $M.35;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i640 := $eq.i32($i639, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb515:
    assume $i640 == 1;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb352:
    assume $i426 == 1;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i615 := $M.30;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i616 := $eq.i32($i615, 4);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  $bb502:
    assume !($i616 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $i620 := $M.30;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i621 := $eq.i32($i620, 1);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i621 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    $i625 := $M.30;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i626 := $eq.i32($i625, 3);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    $i630 := $M.30;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i631 := $eq.i32($i630, 2);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb511:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb510:
    assume $i631 == 1;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p632 := $M.26;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i633 := $load.i64($M.18, $p7);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_115 := usb_serial_generic_tiocmiwait($p632, $i633);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb507:
    assume $i626 == 1;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p627 := $M.26;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i628 := $load.i64($M.18, $p7);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_114 := usb_serial_generic_tiocmiwait($p627, $i628);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb504:
    assume $i621 == 1;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p622 := $M.26;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i623 := $load.i64($M.18, $p7);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} vslice_dummy_var_113 := usb_serial_generic_tiocmiwait($p622, $i623);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb501:
    assume $i616 == 1;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p617 := $M.26;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i618 := $load.i64($M.18, $p7);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_112 := usb_serial_generic_tiocmiwait($p617, $i618);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb329:
    assume $i415 == 1;
    assume {:verifier.code 0} true;
    $i428 := $slt.i32($i414, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    $i429 := $slt.i32($i414, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    $i430 := $slt.i32($i414, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    $i431 := $slt.i32($i414, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i431 == 1);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i591 := $M.30;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i592 := $eq.i32($i591, 4);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $i597 := $M.30;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i598 := $eq.i32($i597, 1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $i603 := $M.30;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i604 := $eq.i32($i603, 3);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $i609 := $M.30;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i610 := $eq.i32($i609, 2);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb498:
    assume $i610 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p611 := $M.26;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p612 := $M.24;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i613 := $load.i32($M.18, $p8);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_111 := ti_write($p611, $p612, $p21, $i613);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb495:
    assume $i604 == 1;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p605 := $M.26;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p606 := $M.24;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i607 := $load.i32($M.18, $p8);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_110 := ti_write($p605, $p606, $p21, $i607);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb492:
    assume $i598 == 1;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p599 := $M.26;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p600 := $M.24;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i601 := $load.i32($M.18, $p8);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_109 := ti_write($p599, $p600, $p21, $i601);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb489:
    assume $i592 == 1;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p593 := $M.26;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p594 := $M.24;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i595 := $load.i32($M.18, $p8);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_108 := ti_write($p593, $p594, $p21, $i595);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb362:
    assume $i431 == 1;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i567 := $M.30;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i568 := $eq.i32($i567, 4);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    $i573 := $M.30;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i574 := $eq.i32($i573, 1);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    $i579 := $M.30;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i580 := $eq.i32($i579, 3);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i580 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    $i585 := $M.30;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i586 := $eq.i32($i585, 2);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  $bb487:
    assume !($i586 == 1);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb486:
    assume $i586 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p587 := $M.26;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i588 := $load.i32($M.18, $p10);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i589 := $load.i32($M.18, $p11);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_107 := ti_tiocmset($p587, $i588, $i589);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb483:
    assume $i580 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p581 := $M.26;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i582 := $load.i32($M.18, $p10);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i583 := $load.i32($M.18, $p11);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_106 := ti_tiocmset($p581, $i582, $i583);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb480:
    assume $i574 == 1;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p575 := $M.26;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i576 := $load.i32($M.18, $p10);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i577 := $load.i32($M.18, $p11);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_105 := ti_tiocmset($p575, $i576, $i577);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb477:
    assume $i568 == 1;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p569 := $M.26;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i570 := $load.i32($M.18, $p10);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i571 := $load.i32($M.18, $p11);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_104 := ti_tiocmset($p569, $i570, $i571);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb360:
    assume $i430 == 1;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i543 := $M.30;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i544 := $eq.i32($i543, 4);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  $bb466:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $i549 := $M.30;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32($i549, 1);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $i555 := $M.30;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i556 := $eq.i32($i555, 3);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    $i561 := $M.30;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i562 := $eq.i32($i561, 2);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  $bb475:
    assume !($i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb474:
    assume $i562 == 1;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p563 := $M.26;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i564 := $load.i32($M.18, $p12);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i565 := $load.i64($M.18, $p9);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_103 := ti_ioctl($p563, $i564, $i565);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb471:
    assume $i556 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p557 := $M.26;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i558 := $load.i32($M.18, $p12);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i559 := $load.i64($M.18, $p9);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_102 := ti_ioctl($p557, $i558, $i559);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb468:
    assume $i550 == 1;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p551 := $M.26;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i552 := $load.i32($M.18, $p12);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i553 := $load.i64($M.18, $p9);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_101 := ti_ioctl($p551, $i552, $i553);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb465:
    assume $i544 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p545 := $M.26;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i546 := $load.i32($M.18, $p12);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i547 := $load.i64($M.18, $p9);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_100 := ti_ioctl($p545, $i546, $i547);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb358:
    assume $i429 == 1;
    assume {:verifier.code 0} true;
    $i432 := $slt.i32($i414, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    $i433 := $slt.i32($i414, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i433 == 1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i538 := $M.30;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i539 := $eq.i32($i538, 2);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  $bb463:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb462:
    assume $i539 == 1;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p540 := $M.25;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ti_release($p540);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 938} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i541 := $M.28;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i542 := $sub.i32($i541, 1);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.28 := $i542;
    call {:si_unique_call 939} {:cexpr "ref_cnt"} boogie_si_record_i32($i542);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb366:
    assume $i433 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i535 := $M.30;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i535, 4);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i536 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb459:
    assume $i536 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p537 := $M.23;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} ti_bulk_out_callback($p537);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 936} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb364:
    assume $i432 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i519 := $M.30;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 4);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    $i523 := $M.30;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i524 := $eq.i32($i523, 1);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  $bb451:
    assume !($i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $i527 := $M.30;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i528 := $eq.i32($i527, 3);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $i531 := $M.30;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i532 := $eq.i32($i531, 2);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb456:
    assume $i532 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p533 := $M.24;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_99 := ti_port_remove($p533);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 934} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb453:
    assume $i528 == 1;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p529 := $M.24;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} vslice_dummy_var_98 := ti_port_remove($p529);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 932} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb450:
    assume $i524 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p525 := $M.24;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} vslice_dummy_var_97 := ti_port_remove($p525);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 930} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb447:
    assume $i520 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p521 := $M.24;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_96 := ti_port_remove($p521);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 928} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb356:
    assume $i428 == 1;
    assume {:verifier.code 0} true;
    $i434 := $slt.i32($i414, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    $i435 := $slt.i32($i414, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    $i436 := $slt.i32($i414, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i436 == 1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i503 := $M.30;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i503, 4);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    $i507 := $M.30;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i507, 1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  $bb439:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $i511 := $M.30;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i511, 3);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb441, $bb442;

  $bb442:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $i515 := $M.30;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i516 := $eq.i32($i515, 2);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb444:
    assume $i516 == 1;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p517 := $M.26;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p518 := $M.24;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} ti_set_termios($p517, $p518, $p20);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb441:
    assume $i512 == 1;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p513 := $M.26;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p514 := $M.24;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ti_set_termios($p513, $p514, $p20);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb438:
    assume $i508 == 1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p509 := $M.26;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p510 := $M.24;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} ti_set_termios($p509, $p510, $p20);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb435:
    assume $i504 == 1;
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p505 := $M.26;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p506 := $M.24;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ti_set_termios($p505, $p506, $p20);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb372:
    assume $i436 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i491 := $M.30;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i492 := $eq.i32($i491, 4);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $i494 := $M.30;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i495 := $eq.i32($i494, 1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $i497 := $M.30;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i498 := $eq.i32($i497, 3);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $i500 := $M.30;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i500, 2);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb432:
    assume $i501 == 1;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p502 := $M.26;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ti_unthrottle($p502);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb429:
    assume $i498 == 1;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p499 := $M.26;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} ti_unthrottle($p499);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb426:
    assume $i495 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p496 := $M.26;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ti_unthrottle($p496);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 914} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb423:
    assume $i492 == 1;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p493 := $M.26;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ti_unthrottle($p493);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb370:
    assume $i435 == 1;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i484 := $M.30;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i484, 3);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb417:
    assume $i485 == 1;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p486 := $M.26;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p487 := $M.24;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i488 := ti_open($p486, $p487);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $M.34 := $i488;
    call {:si_unique_call 909} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i488);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i489 := $M.34;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i489, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb419:
    assume $i490 == 1;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb421;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb368:
    assume $i434 == 1;
    assume {:verifier.code 0} true;
    $i437 := $slt.i32($i414, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    $i438 := $slt.i32($i414, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i438 == 1);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i468 := $M.30;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i468, 4);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $i472 := $M.30;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i472, 1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $i476 := $M.30;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i477 := $eq.i32($i476, 3);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $i480 := $M.30;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i481 := $eq.i32($i480, 2);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  $bb415:
    assume !($i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb414:
    assume $i481 == 1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p482 := $M.24;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_95 := ti_port_probe($p482);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb411:
    assume $i477 == 1;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p478 := $M.24;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} vslice_dummy_var_94 := ti_port_probe($p478);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb408:
    assume $i473 == 1;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p474 := $M.24;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_93 := ti_port_probe($p474);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb405:
    assume $i469 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p470 := $M.24;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_92 := ti_port_probe($p470);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb376:
    assume $i438 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i452 := $M.30;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i453 := $eq.i32($i452, 4);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $i456 := $M.30;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i457 := $eq.i32($i456, 1);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $i460 := $M.30;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 3);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $i464 := $M.30;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i465 := $eq.i32($i464, 2);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb402:
    assume $i465 == 1;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p466 := $M.26;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_91 := usb_serial_generic_get_icount($p466, $p23);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb399:
    assume $i461 == 1;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p462 := $M.26;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_90 := usb_serial_generic_get_icount($p462, $p23);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb396:
    assume $i457 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p458 := $M.26;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_89 := usb_serial_generic_get_icount($p458, $p23);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb393:
    assume $i453 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p454 := $M.26;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_88 := usb_serial_generic_get_icount($p454, $p23);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb374:
    assume $i437 == 1;
    assume {:verifier.code 0} true;
    $i439 := $eq.i32($i414, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    assume !($i439 == 1);
    goto $bb341;

  $bb378:
    assume $i439 == 1;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i440 := $M.30;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i440, 4);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $i443 := $M.30;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i443, 1);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $i446 := $M.30;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i446, 3);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $i449 := $M.30;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i449, 2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb389:
    assume $i450 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p451 := $M.26;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ti_throttle($p451);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb386:
    assume $i447 == 1;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p448 := $M.26;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ti_throttle($p448);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb383:
    assume $i444 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p445 := $M.26;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ti_throttle($p445);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb380:
    assume $i441 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p442 := $M.26;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} ti_throttle($p442);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb5:
    assume $i54 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i395 := $M.29;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb296:
    assume $i396 == 1;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 866} $i397 := __VERIFIER_nondet_int();
    call {:si_unique_call 867} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i397);
    call {:si_unique_call 868} {:cexpr "tmp___7"} boogie_si_record_i32($i397);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i398 := $slt.i32($i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    assume !($i399 == 1);
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_stop();
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb301:
    assume $i399 == 1;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i405 := $M.29;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i405, 1);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb314:
    assume $i406 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i407 := usb_serial_module_init();
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.33 := $i407;
    call {:si_unique_call 873} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i407);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i408 := $M.33;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i409 := $ne.i32($i408, 0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $i410 := $M.33;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i411 := $eq.i32($i410, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb319:
    assume $i411 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_initialize_usb_serial_driver_2();
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 878} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_initialize_usb_serial_driver_1();
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb316:
    assume $i409 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 874} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_check_final_state();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb299:
    assume $i398 == 1;
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i397, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    assume !($i400 == 1);
    goto $bb303;

  $bb304:
    assume $i400 == 1;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i401 := $M.29;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, 2);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !($i402 == 1);
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb306:
    assume $i402 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i403 := $M.28;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i404 == 1);
    goto $bb308;

  $bb309:
    assume $i404 == 1;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} usb_serial_module_exit();
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb3:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i52, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb9;

  $bb10:
    assume $i56 == 1;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i57 := $M.27;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb12:
    assume $i58 == 1;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} $i59 := __VERIFIER_nondet_int();
    call {:si_unique_call 713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i59);
    call {:si_unique_call 714} {:cexpr "tmp___6"} boogie_si_record_i32($i59);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i59, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i59, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i59, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i59, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i59, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} ldv_stop();
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i390 := $M.27;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i390, 1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb289:
    assume $i391 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_87 := ldv_probe_1();
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 863} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i393 := $M.28;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i394 := $add.i32($i393, 1);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.28 := $i394;
    call {:si_unique_call 864} {:cexpr "ref_cnt"} boogie_si_record_i32($i394);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i384 := $M.27;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 4);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $i387 := $M.27;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i387, 3);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb286:
    assume $i388 == 1;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_86 := ldv_detach_1();
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 861} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb283:
    assume $i385 == 1;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} vslice_dummy_var_85 := ldv_detach_1();
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 859} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i372 := $M.27;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i372, 4);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $i375 := $M.27;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 1);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i378 := $M.27;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 3);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $i381 := $M.27;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 2);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb280:
    assume $i382 == 1;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p383 := $M.19;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ti_bulk_in_callback($p383);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 857} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb277:
    assume $i379 == 1;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p380 := $M.19;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ti_bulk_in_callback($p380);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 855} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb274:
    assume $i376 == 1;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p377 := $M.19;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ti_bulk_in_callback($p377);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb271:
    assume $i373 == 1;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p374 := $M.19;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ti_bulk_in_callback($p374);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb19:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i59, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i59, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i67 == 1);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i356 := $M.27;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 4);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $i360 := $M.27;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i364 := $M.27;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 3);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $i368 := $M.27;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 2);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb268:
    assume $i369 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p370 := $M.22;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} vslice_dummy_var_84 := ti_tiocmget($p370);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 849} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb265:
    assume $i365 == 1;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p366 := $M.22;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} vslice_dummy_var_83 := ti_tiocmget($p366);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb262:
    assume $i361 == 1;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p362 := $M.22;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_82 := ti_tiocmget($p362);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb259:
    assume $i357 == 1;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p358 := $M.22;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_81 := ti_tiocmget($p358);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 843} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb30:
    assume $i67 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i340 := $M.27;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 4);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i344 := $M.27;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i348 := $M.27;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i348, 3);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $i352 := $M.27;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 2);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb256:
    assume $i353 == 1;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p354 := $M.22;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} vslice_dummy_var_80 := ti_chars_in_buffer($p354);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 841} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb253:
    assume $i349 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p350 := $M.22;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_79 := ti_chars_in_buffer($p350);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb250:
    assume $i345 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p346 := $M.22;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vslice_dummy_var_78 := ti_chars_in_buffer($p346);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 837} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb247:
    assume $i341 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p342 := $M.22;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_77 := ti_chars_in_buffer($p342);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 835} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb28:
    assume $i66 == 1;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i324 := $M.27;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 4);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i328 := $M.27;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $i332 := $M.27;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 3);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i336 := $M.27;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 2);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb244:
    assume $i337 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p338 := $M.22;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i339 := $load.i32($M.18, $p1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} ti_break($p338, $i339);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb241:
    assume $i333 == 1;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p334 := $M.22;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.18, $p1);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ti_break($p334, $i335);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 831} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb238:
    assume $i329 == 1;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p330 := $M.22;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.18, $p1);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ti_break($p330, $i331);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 829} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb235:
    assume $i325 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p326 := $M.22;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.18, $p1);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} ti_break($p326, $i327);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 827} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb17:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i59, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i59, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i59, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i308 := $M.27;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 4);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i312 := $M.27;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 1);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $i316 := $M.27;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 3);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $i320 := $M.27;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 2);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb232:
    assume $i321 == 1;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p322 := $M.22;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_76 := ti_write_room($p322);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 825} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb229:
    assume $i317 == 1;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p318 := $M.22;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vslice_dummy_var_75 := ti_write_room($p318);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb226:
    assume $i313 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p314 := $M.22;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_74 := ti_write_room($p314);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb223:
    assume $i309 == 1;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p310 := $M.22;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vslice_dummy_var_73 := ti_write_room($p310);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 819} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb36:
    assume $i70 == 1;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i305 := $M.27;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 4);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb220:
    assume $i306 == 1;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p307 := $M.20;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ti_close($p307);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    goto $bb222;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i69 == 1;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i289 := $M.27;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 4);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i293 := $M.27;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i297 := $M.27;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, 3);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i301 := $M.27;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 2);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb217:
    assume $i302 == 1;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p303 := $M.20;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vslice_dummy_var_72 := ti_tx_empty($p303);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb214:
    assume $i298 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p299 := $M.20;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_71 := ti_tx_empty($p299);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb211:
    assume $i294 == 1;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p295 := $M.20;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_70 := ti_tx_empty($p295);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb208:
    assume $i290 == 1;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p291 := $M.20;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_69 := ti_tx_empty($p291);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb32:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i59, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i59, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i72 == 1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i286 := $M.27;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 4);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb205:
    assume $i287 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p288 := $M.19;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ti_interrupt_callback($p288);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb40:
    assume $i72 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i280 := $M.27;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 2);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb199:
    assume $i281 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p282 := $M.21;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i283 := ti_startup($p282);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.32 := $i283;
    call {:si_unique_call 804} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i283);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i284 := $M.32;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb201:
    assume $i285 == 1;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb38:
    assume $i71 == 1;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i260 := $M.27;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 4);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i265 := $M.27;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 1);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i270 := $M.27;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 3);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $i275 := $M.27;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 2);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb196:
    assume $i276 == 1;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p277 := $M.22;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i278 := $load.i64($M.18, $p4);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} vslice_dummy_var_68 := usb_serial_generic_tiocmiwait($p277, $i278);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 802} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume $i271 == 1;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p272 := $M.22;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i273 := $load.i64($M.18, $p4);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_67 := usb_serial_generic_tiocmiwait($p272, $i273);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb190:
    assume $i266 == 1;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p267 := $M.22;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i268 := $load.i64($M.18, $p4);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_66 := usb_serial_generic_tiocmiwait($p267, $i268);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 798} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb187:
    assume $i261 == 1;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p262 := $M.22;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i263 := $load.i64($M.18, $p4);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} vslice_dummy_var_65 := usb_serial_generic_tiocmiwait($p262, $i263);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 796} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb15:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i59, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i59, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i59, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i59, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i76 == 1);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i236 := $M.27;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 4);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i242 := $M.27;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 1);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i248 := $M.27;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 3);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i254 := $M.27;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 2);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb184:
    assume $i255 == 1;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p256 := $M.22;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p257 := $M.20;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.18, $p6);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} vslice_dummy_var_64 := ti_write($p256, $p257, $p14, $i258);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 794} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume $i249 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p250 := $M.22;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p251 := $M.20;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.18, $p6);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_63 := ti_write($p250, $p251, $p14, $i252);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb178:
    assume $i243 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p244 := $M.22;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p245 := $M.20;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.18, $p6);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} vslice_dummy_var_62 := ti_write($p244, $p245, $p14, $i246);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb175:
    assume $i237 == 1;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p238 := $M.22;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p239 := $M.20;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.18, $p6);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_61 := ti_write($p238, $p239, $p14, $i240);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb48:
    assume $i76 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i212 := $M.27;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 4);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i218 := $M.27;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i224 := $M.27;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 3);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i230 := $M.27;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb172:
    assume $i231 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p232 := $M.22;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.18, $p2);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.18, $p5);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_60 := ti_tiocmset($p232, $i233, $i234);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i225 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p226 := $M.22;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.18, $p2);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.18, $p5);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_59 := ti_tiocmset($p226, $i227, $i228);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb166:
    assume $i219 == 1;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p220 := $M.22;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.18, $p2);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.18, $p5);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_58 := ti_tiocmset($p220, $i221, $i222);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb163:
    assume $i213 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p214 := $M.22;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.18, $p2);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.18, $p5);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_57 := ti_tiocmset($p214, $i215, $i216);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb46:
    assume $i75 == 1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i188 := $M.27;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 4);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i194 := $M.27;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i200 := $M.27;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 3);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i206 := $M.27;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 2);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb160:
    assume $i207 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p208 := $M.22;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.18, $p0);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.18, $p3);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_56 := ti_ioctl($p208, $i209, $i210);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 778} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume $i201 == 1;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p202 := $M.22;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.18, $p0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i204 := $load.i64($M.18, $p3);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_55 := ti_ioctl($p202, $i203, $i204);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i195 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p196 := $M.22;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.18, $p0);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i198 := $load.i64($M.18, $p3);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_54 := ti_ioctl($p196, $i197, $i198);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 774} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i189 == 1;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p190 := $M.22;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.18, $p0);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i192 := $load.i64($M.18, $p3);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_53 := ti_ioctl($p190, $i191, $i192);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb44:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i59, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i59, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i78 == 1);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i183 := $M.27;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 2);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb148:
    assume $i184 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p185 := $M.21;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} ti_release($p185);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i186 := $M.28;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i187 := $sub.i32($i186, 1);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.28 := $i187;
    call {:si_unique_call 770} {:cexpr "ref_cnt"} boogie_si_record_i32($i187);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb52:
    assume $i78 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i167 := $M.27;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 4);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i171 := $M.27;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 1);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i175 := $M.27;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 3);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i179 := $M.27;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 2);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb145:
    assume $i180 == 1;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p181 := $M.20;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_52 := ti_port_remove($p181);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 767} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i176 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p177 := $M.20;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_51 := ti_port_remove($p177);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume $i172 == 1;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p173 := $M.20;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_50 := ti_port_remove($p173);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume $i168 == 1;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p169 := $M.20;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_49 := ti_port_remove($p169);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb50:
    assume $i77 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i164 := $M.27;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 4);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb133:
    assume $i165 == 1;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p166 := $M.19;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} ti_bulk_out_callback($p166);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb42:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i59, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i59, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i59, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i81 == 1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i148 := $M.27;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 4);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i152 := $M.27;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i156 := $M.27;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 3);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i160 := $M.27;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb130:
    assume $i161 == 1;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p162 := $M.22;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p163 := $M.20;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ti_set_termios($p162, $p163, $p16);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i157 == 1;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p158 := $M.22;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p159 := $M.20;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} ti_set_termios($p158, $p159, $p16);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 755} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i153 == 1;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p154 := $M.22;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p155 := $M.20;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} ti_set_termios($p154, $p155, $p16);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 753} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb121:
    assume $i149 == 1;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p150 := $M.22;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p151 := $M.20;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} ti_set_termios($p150, $p151, $p16);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb58:
    assume $i81 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i136 := $M.27;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 4);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i139 := $M.27;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 1);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i142 := $M.27;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 3);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i145 := $M.27;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 2);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb118:
    assume $i146 == 1;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p147 := $M.22;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} ti_unthrottle($p147);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume $i143 == 1;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p144 := $M.22;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} ti_unthrottle($p144);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 747} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume $i140 == 1;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p141 := $M.22;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ti_unthrottle($p141);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume $i137 == 1;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p138 := $M.22;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ti_unthrottle($p138);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb56:
    assume $i80 == 1;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i129 := $M.27;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 3);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb103:
    assume $i130 == 1;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p131 := $M.22;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p132 := $M.20;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i133 := ti_open($p131, $p132);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.31 := $i133;
    call {:si_unique_call 740} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i133);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i134 := $M.31;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb105:
    assume $i135 == 1;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb107;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i59, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i83 == 1);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i113 := $M.27;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 4);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i117 := $M.27;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i121 := $M.27;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 3);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i125 := $M.27;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 2);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb100:
    assume $i126 == 1;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p127 := $M.20;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_48 := ti_port_probe($p127);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i122 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p123 := $M.20;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_47 := ti_port_probe($p123);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume $i118 == 1;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p119 := $M.20;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_46 := ti_port_probe($p119);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i114 == 1;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p115 := $M.20;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_45 := ti_port_probe($p115);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb62:
    assume $i83 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i97 := $M.27;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 4);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i101 := $M.27;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i105 := $M.27;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 3);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i109 := $M.27;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 2);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb88:
    assume $i110 == 1;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p111 := $M.22;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_44 := usb_serial_generic_get_icount($p111, $p18);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume $i106 == 1;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p107 := $M.22;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_43 := usb_serial_generic_get_icount($p107, $p18);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i102 == 1;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p103 := $M.22;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_42 := usb_serial_generic_get_icount($p103, $p18);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb79:
    assume $i98 == 1;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p99 := $M.22;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_41 := usb_serial_generic_get_icount($p99, $p18);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 724} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb60:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i59, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb27;

  $bb64:
    assume $i84 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i85 := $M.27;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 4);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i88 := $M.27;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i91 := $M.27;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 3);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i94 := $M.27;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 2);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i95 == 1;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p96 := $M.22;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ti_throttle($p96);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 722} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i92 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p93 := $M.22;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} ti_throttle($p93);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 720} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i89 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p90 := $M.22;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} ti_throttle($p90);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 718} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i86 == 1;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p87 := $M.22;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} ti_throttle($p87);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 716} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb295_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} $i52 := __VERIFIER_nondet_int();
    call {:si_unique_call 710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i52);
    call {:si_unique_call 711} {:cexpr "tmp___5"} boogie_si_record_i32($i52);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 278530);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    return;
}



const ldv_detach_1: ref;

axiom ldv_detach_1 == $sub.ref(0, 279562);

procedure ldv_detach_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_detach_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1036} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1037} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_1: ref;

axiom ldv_probe_1 == $sub.ref(0, 280594);

procedure ldv_probe_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1039} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 281626);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const usb_serial_module_exit: ref;

axiom usb_serial_module_exit == $sub.ref(0, 282658);

procedure usb_serial_module_exit();
  free requires assertsPassed;



implementation usb_serial_module_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} usb_serial_deregister_drivers(serial_drivers);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_module_init: ref;

axiom usb_serial_module_init == $sub.ref(0, 283690);

procedure usb_serial_module_init() returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_module_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i0 := usb_serial_register_drivers(serial_drivers, .str.1, ti_id_table_combined);
    call {:si_unique_call 1042} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_detach_2: ref;

axiom ldv_detach_2 == $sub.ref(0, 284722);

procedure ldv_detach_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_detach_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1043} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1044} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_2: ref;

axiom ldv_probe_2 == $sub.ref(0, 285754);

procedure ldv_probe_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1045} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1046} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 286786);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i0 := $M.36;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.37;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.38;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.12;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} ldv_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} ldv_error();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const usb_serial_register_drivers: ref;

axiom usb_serial_register_drivers == $sub.ref(0, 287818);

procedure usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1051} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1052} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_deregister_drivers: ref;

axiom usb_serial_deregister_drivers == $sub.ref(0, 288850);

procedure usb_serial_deregister_drivers($p0: ref);
  free requires assertsPassed;



implementation usb_serial_deregister_drivers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 289882);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1053} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 1} true;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 290914);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 291946);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 292978);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 294010);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 295042);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 296074);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 297106);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 298138);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 299170);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 300202);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 301234);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 302266);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 303298);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1055} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1056} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} __VERIFIER_assume($i4);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 304330);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 305362);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 306394);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 307426);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1058} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1059} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1060} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1062} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1063} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1064} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1065} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1066} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1067} __VERIFIER_assume($i7);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} __VERIFIER_assume($i11);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 308458);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 309490);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 310522);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 311554);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 312586);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 313618);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1069} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1070} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1071} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1074} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1075} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1076} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1077} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1078} __VERIFIER_assume($i7);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1079} __VERIFIER_assume($i11);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 314650);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 315682);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 316714);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 317746);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 318778);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 319810);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 320842);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 321874);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 322906);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1080} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1081} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1082} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 323938);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1084} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1085} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 324970);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1086} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1087} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 326002);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 327034);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1088} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1089} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 328066);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 329098);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 330130);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1090} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1091} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1092} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1093} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $p6 := malloc($i5);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 1095} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 331162);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 332194);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.12, $M.38, $M.37, $M.36, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.0, $M.66, $M.67, $M.8, $M.68, $M.13;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1096} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.19 := $0.ref;
    $M.20 := $0.ref;
    $M.21 := $0.ref;
    $M.22 := $0.ref;
    $M.23 := $0.ref;
    $M.24 := $0.ref;
    $M.25 := $0.ref;
    $M.26 := $0.ref;
    $M.27 := 0;
    call {:si_unique_call 1097} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1098} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 1099} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1100} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1101} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1102} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1103} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1104} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1105} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.40 := $store.i16($M.40, __mod_usb__ti_id_table_combined_device_table, 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(2, 1)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.52 := $store.i64($M.52, $add.ref($add.ref($add.ref(__mod_usb__ti_id_table_combined_device_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.12 := 1;
    call {:si_unique_call 1106} {:cexpr "ldv_mutex_td_open_close_lock_of_ti_device"} boogie_si_record_i32(1);
    $M.38 := 1;
    call {:si_unique_call 1107} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.37 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.36 := 1;
    call {:si_unique_call 1109} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.53 := $store.i16($M.53, ti_id_table_combined, 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1105);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(4, 1)), 13328);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1105);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(4, 1)), $sub.i16(0, 3024));
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1760);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(4, 1)), $sub.i16(0, 3832));
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1760);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(4, 1)), $sub.i16(0, 3831));
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1760);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(4, 1)), $sub.i16(0, 3824));
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1760);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(4, 1)), $sub.i16(0, 3823));
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1760);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(4, 1)), $sub.i16(0, 3822));
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(2, 1)), 1760);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(4, 1)), $sub.i16(0, 3820));
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(2, 1)), 1760);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(4, 1)), $sub.i16(0, 3819));
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(2, 1)), 1760);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(4, 1)), 793);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(2, 1)), 1105);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(4, 1)), 20562);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1105);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(4, 1)), 20818);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(2, 1)), 1105);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(4, 1)), 20570);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(2, 1)), 1105);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(4, 1)), 20575);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(2, 1)), 1203);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(4, 1)), 17731);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(2, 1)), 1203);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(4, 1)), 17739);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(2, 1)), 1203);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(4, 1)), 17740);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(2, 1)), 6753);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(4, 1)), 13328);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(2, 1)), 6753);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(4, 1)), 13344);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(2, 1)), 1105);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(4, 1)), 20563);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(0, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(2, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(4, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.65 := $store.i64($M.65, $add.ref($add.ref($add.ref(ti_id_table_combined, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, ti_id_table_5052, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 20562);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 20818);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 20570);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 20575);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_5052, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.66 := $store.ref($M.66, ti_2port_device, .str.101);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(8, 1)), ti_id_table_5052);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 2);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.102);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.66 := $store.i64($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.66 := $store.i64($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.66 := $store.i64($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(280, 1)), ti_startup);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(296, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(304, 1)), ti_release);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(312, 1)), ti_port_probe);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(320, 1)), ti_port_remove);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(352, 1)), ti_open);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(360, 1)), ti_close);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(368, 1)), ti_write);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(376, 1)), ti_write_room);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(384, 1)), ti_ioctl);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(392, 1)), ti_set_termios);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(400, 1)), ti_break);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(408, 1)), ti_chars_in_buffer);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(424, 1)), ti_tx_empty);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(432, 1)), ti_throttle);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(440, 1)), ti_unthrottle);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(448, 1)), ti_tiocmget);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(456, 1)), ti_tiocmset);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(464, 1)), usb_serial_generic_tiocmiwait);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(472, 1)), usb_serial_generic_get_icount);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(504, 1)), ti_interrupt_callback);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(520, 1)), ti_bulk_in_callback);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(528, 1)), ti_bulk_out_callback);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_2port_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.67 := $store.ref($M.67, serial_drivers, ti_1port_device);
    $M.67 := $store.ref($M.67, $add.ref($add.ref(serial_drivers, $mul.ref(0, 24)), $mul.ref(1, 8)), ti_2port_device);
    $M.67 := $store.ref($M.67, $add.ref($add.ref(serial_drivers, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.i16($M.0, ti_id_table_3410, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(4, 1)), 13328);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(4, 1)), $sub.i16(0, 3024));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1760);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(4, 1)), $sub.i16(0, 3832));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1760);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(4, 1)), $sub.i16(0, 3831));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1760);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(4, 1)), $sub.i16(0, 3824));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1760);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(4, 1)), $sub.i16(0, 3823));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1760);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(4, 1)), $sub.i16(0, 3822));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(2, 1)), 1760);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(4, 1)), $sub.i16(0, 3820));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(2, 1)), 1760);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(4, 1)), $sub.i16(0, 3819));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(2, 1)), 1760);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(4, 1)), 793);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(2, 1)), 1203);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(4, 1)), 17731);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1203);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(4, 1)), 17739);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(2, 1)), 1203);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(4, 1)), 17740);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(2, 1)), 6753);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(4, 1)), 13328);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(2, 1)), 6753);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(4, 1)), 13344);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(2, 1)), 1105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(4, 1)), 20563);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ti_id_table_3410, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.66 := $store.ref($M.66, ti_1port_device, .str.53);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(8, 1)), ti_id_table_3410);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 1);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.54);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.66 := $store.i64($M.66, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref($add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.66 := $store.i64($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.66 := $store.i64($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(280, 1)), ti_startup);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(296, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(304, 1)), ti_release);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(312, 1)), ti_port_probe);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(320, 1)), ti_port_remove);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(352, 1)), ti_open);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(360, 1)), ti_close);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(368, 1)), ti_write);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(376, 1)), ti_write_room);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(384, 1)), ti_ioctl);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(392, 1)), ti_set_termios);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(400, 1)), ti_break);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(408, 1)), ti_chars_in_buffer);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(424, 1)), ti_tx_empty);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(432, 1)), ti_throttle);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(440, 1)), ti_unthrottle);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(448, 1)), ti_tiocmget);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(456, 1)), ti_tiocmset);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(464, 1)), usb_serial_generic_tiocmiwait);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(472, 1)), usb_serial_generic_get_icount);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(504, 1)), ti_interrupt_callback);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(520, 1)), ti_bulk_in_callback);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(528, 1)), ti_bulk_out_callback);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(ti_1port_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.8 := 4000;
    call {:si_unique_call 1110} {:cexpr "closing_wait"} boogie_si_record_i32(4000);
    $M.0 := $store.i8($M.0, .str.33, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(15, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(18, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(20, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(3, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(12, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(3, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(8, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 9)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 9)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 9)), $mul.ref(7, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.24, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(3, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(3, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 8)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 8)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 8)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 8)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(1, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 5)), $mul.ref(2, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 5)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.68 := $store.i8($M.68, .str.55, 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(3, 1)), 117);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(5, 1)), 98);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(6, 1)), 45);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(7, 1)), 118);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(8, 1)), 37);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(9, 1)), 48);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(10, 1)), 52);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(11, 1)), 120);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(12, 1)), 45);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(13, 1)), 112);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(14, 1)), 37);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(15, 1)), 48);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(16, 1)), 52);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(17, 1)), 120);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(18, 1)), 46);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(19, 1)), 102);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(20, 1)), 119);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.13 := $store.i8($M.13, .str.56, 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(1, 1)), 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(2, 1)), 115);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(4, 1)), 99);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(6, 1)), 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(7, 1)), 97);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(8, 1)), 46);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(9, 1)), 102);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(10, 1)), 119);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.13 := $store.i8($M.13, .str.57, 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(1, 1)), 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(2, 1)), 115);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(4, 1)), 103);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(5, 1)), 115);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(6, 1)), 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(7, 1)), 46);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(8, 1)), 102);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(9, 1)), 119);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.13 := $store.i8($M.13, .str.58, 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(1, 1)), 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(2, 1)), 115);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(4, 1)), 101);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(6, 1)), 103);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(8, 1)), 46);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(9, 1)), 102);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(10, 1)), 119);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.13 := $store.i8($M.13, .str.59, 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(1, 1)), 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(2, 1)), 115);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(4, 1)), 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(5, 1)), 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(6, 1)), 57);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(7, 1)), 50);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(8, 1)), 51);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(9, 1)), 52);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(10, 1)), 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(11, 1)), 117);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(12, 1)), 46);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(13, 1)), 102);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(14, 1)), 119);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.13 := $store.i8($M.13, .str.60, 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(1, 1)), 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(2, 1)), 115);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(4, 1)), 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(5, 1)), 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(6, 1)), 57);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(7, 1)), 50);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(8, 1)), 51);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(9, 1)), 52);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(10, 1)), 122);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(11, 1)), 98);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(12, 1)), 97);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(13, 1)), 46);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(14, 1)), 102);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(15, 1)), 119);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.60, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.13 := $store.i8($M.13, .str.61, 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(1, 1)), 105);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(3, 1)), 51);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(4, 1)), 52);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(5, 1)), 49);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(6, 1)), 48);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(7, 1)), 46);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(8, 1)), 102);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(9, 1)), 119);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.61, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.13 := $store.i8($M.13, .str.62, 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(1, 1)), 105);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(3, 1)), 53);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(4, 1)), 48);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(5, 1)), 53);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(6, 1)), 50);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(7, 1)), 46);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(8, 1)), 102);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(9, 1)), 119);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.62, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(16, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    call {:si_unique_call 1111} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.12, $M.38, $M.37, $M.36, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.0, $M.66, $M.67, $M.8, $M.68, $M.13, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1112} __SMACK_static_init();
    call {:si_unique_call 1113} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.18, $M.27, $M.28, $M.29, $M.30, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.31, $M.32, $M.33, $M.23, $M.24, $M.25, $M.26, $M.19, $M.20, $M.21, $M.22, $M.34, $M.35, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.12, $M.38, $M.37, $M.36, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.8, $M.68, $M.13, $CurrAddr, $M.11, $M.9;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ti_recv_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$p5: ref, in_$i6: i64, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1) returns (out_$p3: ref, out_$i4: i32, out_$p5: ref, out_$i6: i64, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1)
{

  entry:
    out_$p3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16 := in_$p3, in_$i4, in_$p5, in_$i6, in_$i7, in_$i8, in_$p9, in_$i10, in_$i11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2287;

  $bb9:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$p3, out_$i4 := out_$p14, out_$i15;
    goto $bb9_dummy;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    out_$i16 := $sgt.i32(out_$i15, 0);
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i4, out_$i7);
    call {:si_unique_call 384} {:cexpr "length"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2305;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p3, $mul.ref(out_$i13, 1));
    goto corral_source_split_2304;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i7);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} tty_flip_buffer_push(out_$p12);
    goto corral_source_split_2302;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2301;

  $bb3:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i7, 0);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} dev_err.ref.ref.ref.i32(out_$p9, .str.99, .str.100, out_$i10);
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i4, out_$i7);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2294;

  $bb2:
    assume out_$i8 == 1;
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i7, out_$i4);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} out_$i7 := tty_insert_flip_string(out_$p5, out_$p3, out_$i6);
    call {:si_unique_call 381} {:cexpr "cnt"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2288;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16 := ti_recv_loop_$bb1(in_$p0, out_$p3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16);
    return;

  exit:
    return;
}



procedure ti_recv_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$p5: ref, in_$i6: i64, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1) returns (out_$p3: ref, out_$i4: i32, out_$p5: ref, out_$i6: i64, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1);



implementation ti_do_download_loop_$bb15(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i46: i32, in_$i59: i32) returns (out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i46: i32, out_$i59: i32)
{

  entry:
    out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i46, out_$i59 := in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i58, in_$i46, in_$i59;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  $bb24:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i57;
    goto $bb24_dummy;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i52;
    assume true;
    goto $bb24;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i57, in_$i3);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i46, out_$i56);
    call {:si_unique_call 648} {:cexpr "pos"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_3303;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.17, in_$p4);
    goto corral_source_split_3302;

  $bb21:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i52;
    assume true;
    goto $bb21;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_$i52 := usb_bulk_msg(in_$p0, in_$i1, out_$p51, out_$i49, in_$p4, 1000);
    call {:si_unique_call 647} {:cexpr "status"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(in_$p2, $mul.ref(out_$i50, 1));
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i46);
    goto corral_source_split_3293;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i49 := 64;
    goto $bb19;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i47;
    goto $bb19;

  $bb17:
    assume out_$i48 == 1;
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i47, 64);
    goto corral_source_split_3286;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i47 := $sub.i32(in_$i3, out_$i46);
    call {:si_unique_call 645} {:cexpr "_min1"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb18:
    assume !(out_$i48 == 1);
    goto corral_source_split_3290;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i46, out_$i59 := ti_do_download_loop_$bb15(in_$p0, in_$i1, in_$p2, in_$i3, in_$p4, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i46, out_$i59);
    return;

  exit:
    return;
}



procedure ti_do_download_loop_$bb15(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i46: i32, in_$i59: i32) returns (out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i46: i32, out_$i59: i32);



implementation ti_do_download_loop_$bb4(in_$p2: ref, in_$i3: i32, in_$i10: i64, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i8, in_$i17: i32, in_$i18: i1, in_$i8: i8, in_$i9: i32, in_$i19: i8) returns (out_$i10: i64, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i8, out_$i17: i32, out_$i18: i1, out_$i8: i8, out_$i9: i32, out_$i19: i8)
{

  entry:
    out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i8, out_$i9, out_$i19 := in_$i10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i8, in_$i9, in_$i19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3229;

  $bb6:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i16, out_$i17;
    goto $bb6_dummy;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i16;
    assume true;
    goto $bb6;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i17, in_$i3);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i9, 1);
    call {:si_unique_call 641} {:cexpr "pos"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i8(out_$i15);
    call {:si_unique_call 640} {:cexpr "cs"} boogie_si_record_i8(out_$i16);
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i13, out_$i14);
    goto corral_source_split_3236;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i8);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_3234;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(in_$p2, $mul.ref(out_$i10, 1));
    goto corral_source_split_3232;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i9);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i8, out_$i9, out_$i19 := ti_do_download_loop_$bb4(in_$p2, in_$i3, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i8, out_$i9, out_$i19);
    return;

  exit:
    return;
}



procedure ti_do_download_loop_$bb4(in_$p2: ref, in_$i3: i32, in_$i10: i64, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i8, in_$i17: i32, in_$i18: i1, in_$i8: i8, in_$i9: i32, in_$i19: i8) returns (out_$i10: i64, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i8, out_$i17: i32, out_$i18: i1, out_$i8: i8, out_$i9: i32, out_$i19: i8);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i52: i32, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i64, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i32, in_$i198: i64, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i204: i64, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i64, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i234: i32, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$p239: ref, in_$i240: i32, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$p257: ref, in_$i258: i32, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i64, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i64, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i64, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i278: i64, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i320: i32, in_$i321: i1, in_$p322: ref, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i327: i32, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i32, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i335: i32, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$i339: i32, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$i344: i32, in_$i345: i1, in_$p346: ref, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i1, in_$i387: i32, in_$i388: i1, in_$i390: i32, in_$i391: i1, in_$i393: i32, in_$i394: i32, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i1, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i1, in_$i407: i32, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$i411: i1, in_$i412: i32, in_$i413: i1, in_$i414: i32, in_$i415: i1, in_$i416: i1, in_$i417: i1, in_$i418: i1, in_$i419: i1, in_$i420: i1, in_$i421: i1, in_$i422: i1, in_$i423: i1, in_$i424: i1, in_$i425: i1, in_$i426: i1, in_$i427: i1, in_$i428: i1, in_$i429: i1, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i1, in_$i434: i1, in_$i435: i1, in_$i436: i1, in_$i437: i1, in_$i438: i1, in_$i439: i1, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i443: i32, in_$i444: i1, in_$p445: ref, in_$i446: i32, in_$i447: i1, in_$p448: ref, in_$i449: i32, in_$i450: i1, in_$p451: ref, in_$i452: i32, in_$i453: i1, in_$p454: ref, in_$i456: i32, in_$i457: i1, in_$p458: ref, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$i464: i32, in_$i465: i1, in_$p466: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$i476: i32, in_$i477: i1, in_$p478: ref, in_$i480: i32, in_$i481: i1, in_$p482: ref, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$p487: ref, in_$i488: i32, in_$i489: i32, in_$i490: i1, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$i497: i32, in_$i498: i1, in_$p499: ref, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$p506: ref, in_$i507: i32, in_$i508: i1, in_$p509: ref, in_$p510: ref, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$p514: ref, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$p518: ref, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i523: i32, in_$i524: i1, in_$p525: ref, in_$i527: i32, in_$i528: i1, in_$p529: ref, in_$i531: i32, in_$i532: i1, in_$p533: ref, in_$i535: i32, in_$i536: i1, in_$p537: ref, in_$i538: i32, in_$i539: i1, in_$p540: ref, in_$i541: i32, in_$i542: i32, in_$i543: i32, in_$i544: i1, in_$p545: ref, in_$i546: i32, in_$i547: i64, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i552: i32, in_$i553: i64, in_$i555: i32, in_$i556: i1, in_$p557: ref, in_$i558: i32, in_$i559: i64, in_$i561: i32, in_$i562: i1, in_$p563: ref, in_$i564: i32, in_$i565: i64, in_$i567: i32, in_$i568: i1, in_$p569: ref, in_$i570: i32, in_$i571: i32, in_$i573: i32, in_$i574: i1, in_$p575: ref, in_$i576: i32, in_$i577: i32, in_$i579: i32, in_$i580: i1, in_$p581: ref, in_$i582: i32, in_$i583: i32, in_$i585: i32, in_$i586: i1, in_$p587: ref, in_$i588: i32, in_$i589: i32, in_$i591: i32, in_$i592: i1, in_$p593: ref, in_$p594: ref, in_$i595: i32, in_$i597: i32, in_$i598: i1, in_$p599: ref, in_$p600: ref, in_$i601: i32, in_$i603: i32, in_$i604: i1, in_$p605: ref, in_$p606: ref, in_$i607: i32, in_$i609: i32, in_$i610: i1, in_$p611: ref, in_$p612: ref, in_$i613: i32, in_$i615: i32, in_$i616: i1, in_$p617: ref, in_$i618: i64, in_$i620: i32, in_$i621: i1, in_$p622: ref, in_$i623: i64, in_$i625: i32, in_$i626: i1, in_$p627: ref, in_$i628: i64, in_$i630: i32, in_$i631: i1, in_$p632: ref, in_$i633: i64, in_$i635: i32, in_$i636: i1, in_$p637: ref, in_$i638: i32, in_$i639: i32, in_$i640: i1, in_$i641: i32, in_$i642: i1, in_$p643: ref, in_$i645: i32, in_$i646: i1, in_$p647: ref, in_$i649: i32, in_$i650: i1, in_$p651: ref, in_$i653: i32, in_$i654: i1, in_$p655: ref, in_$i657: i32, in_$i658: i1, in_$p659: ref, in_$i660: i32, in_$i661: i1, in_$p662: ref, in_$i663: i32, in_$i664: i1, in_$p665: ref, in_$i667: i32, in_$i668: i1, in_$p669: ref, in_$i671: i32, in_$i672: i1, in_$p673: ref, in_$i675: i32, in_$i676: i1, in_$p677: ref, in_$i679: i32, in_$i680: i1, in_$p681: ref, in_$i682: i32, in_$i683: i32, in_$i684: i1, in_$p685: ref, in_$i686: i32, in_$i687: i32, in_$i688: i1, in_$p689: ref, in_$i690: i32, in_$i691: i32, in_$i692: i1, in_$p693: ref, in_$i694: i32, in_$i695: i32, in_$i696: i1, in_$p697: ref, in_$i699: i32, in_$i700: i1, in_$p701: ref, in_$i703: i32, in_$i704: i1, in_$p705: ref, in_$i707: i32, in_$i708: i1, in_$p709: ref, in_$i711: i32, in_$i712: i1, in_$p713: ref, in_$i715: i32, in_$i716: i1, in_$p717: ref, in_$i719: i32, in_$i720: i1, in_$p721: ref, in_$i723: i32, in_$i724: i1, in_$p725: ref, in_$i727: i32, in_$i728: i1, in_$p729: ref, in_$i730: i32, in_$i731: i1, in_$p732: ref, in_$i733: i32, in_$i734: i1, in_$p735: ref, in_$i736: i32, in_$i737: i1, in_$p738: ref, in_$i739: i32, in_$i740: i1, in_$i742: i32, in_$i743: i1, in_$i745: i32, in_$i746: i1, in_$i748: i32, in_$i749: i32, in_vslice_dummy_var_41: i32, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i32, in_vslice_dummy_var_44: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i1, in_vslice_dummy_var_70: i1, in_vslice_dummy_var_71: i1, in_vslice_dummy_var_72: i1, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i1, in_vslice_dummy_var_117: i1, in_vslice_dummy_var_118: i1, in_vslice_dummy_var_119: i1, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32) returns (out_$i52: i32, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i64, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i32, out_$i198: i64, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i204: i64, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i64, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i234: i32, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$p239: ref, out_$i240: i32, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$p257: ref, out_$i258: i32, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i64, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i64, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i64, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i278: i64, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i320: i32, out_$i321: i1, out_$p322: ref, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i327: i32, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i32, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i335: i32, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$i339: i32, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$i344: i32, out_$i345: i1, out_$p346: ref, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i1, out_$i387: i32, out_$i388: i1, out_$i390: i32, out_$i391: i1, out_$i393: i32, out_$i394: i32, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i1, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i1, out_$i407: i32, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$i411: i1, out_$i412: i32, out_$i413: i1, out_$i414: i32, out_$i415: i1, out_$i416: i1, out_$i417: i1, out_$i418: i1, out_$i419: i1, out_$i420: i1, out_$i421: i1, out_$i422: i1, out_$i423: i1, out_$i424: i1, out_$i425: i1, out_$i426: i1, out_$i427: i1, out_$i428: i1, out_$i429: i1, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i1, out_$i434: i1, out_$i435: i1, out_$i436: i1, out_$i437: i1, out_$i438: i1, out_$i439: i1, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i443: i32, out_$i444: i1, out_$p445: ref, out_$i446: i32, out_$i447: i1, out_$p448: ref, out_$i449: i32, out_$i450: i1, out_$p451: ref, out_$i452: i32, out_$i453: i1, out_$p454: ref, out_$i456: i32, out_$i457: i1, out_$p458: ref, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$i464: i32, out_$i465: i1, out_$p466: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$i476: i32, out_$i477: i1, out_$p478: ref, out_$i480: i32, out_$i481: i1, out_$p482: ref, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$p487: ref, out_$i488: i32, out_$i489: i32, out_$i490: i1, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$i497: i32, out_$i498: i1, out_$p499: ref, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$p506: ref, out_$i507: i32, out_$i508: i1, out_$p509: ref, out_$p510: ref, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$p514: ref, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$p518: ref, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i523: i32, out_$i524: i1, out_$p525: ref, out_$i527: i32, out_$i528: i1, out_$p529: ref, out_$i531: i32, out_$i532: i1, out_$p533: ref, out_$i535: i32, out_$i536: i1, out_$p537: ref, out_$i538: i32, out_$i539: i1, out_$p540: ref, out_$i541: i32, out_$i542: i32, out_$i543: i32, out_$i544: i1, out_$p545: ref, out_$i546: i32, out_$i547: i64, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i552: i32, out_$i553: i64, out_$i555: i32, out_$i556: i1, out_$p557: ref, out_$i558: i32, out_$i559: i64, out_$i561: i32, out_$i562: i1, out_$p563: ref, out_$i564: i32, out_$i565: i64, out_$i567: i32, out_$i568: i1, out_$p569: ref, out_$i570: i32, out_$i571: i32, out_$i573: i32, out_$i574: i1, out_$p575: ref, out_$i576: i32, out_$i577: i32, out_$i579: i32, out_$i580: i1, out_$p581: ref, out_$i582: i32, out_$i583: i32, out_$i585: i32, out_$i586: i1, out_$p587: ref, out_$i588: i32, out_$i589: i32, out_$i591: i32, out_$i592: i1, out_$p593: ref, out_$p594: ref, out_$i595: i32, out_$i597: i32, out_$i598: i1, out_$p599: ref, out_$p600: ref, out_$i601: i32, out_$i603: i32, out_$i604: i1, out_$p605: ref, out_$p606: ref, out_$i607: i32, out_$i609: i32, out_$i610: i1, out_$p611: ref, out_$p612: ref, out_$i613: i32, out_$i615: i32, out_$i616: i1, out_$p617: ref, out_$i618: i64, out_$i620: i32, out_$i621: i1, out_$p622: ref, out_$i623: i64, out_$i625: i32, out_$i626: i1, out_$p627: ref, out_$i628: i64, out_$i630: i32, out_$i631: i1, out_$p632: ref, out_$i633: i64, out_$i635: i32, out_$i636: i1, out_$p637: ref, out_$i638: i32, out_$i639: i32, out_$i640: i1, out_$i641: i32, out_$i642: i1, out_$p643: ref, out_$i645: i32, out_$i646: i1, out_$p647: ref, out_$i649: i32, out_$i650: i1, out_$p651: ref, out_$i653: i32, out_$i654: i1, out_$p655: ref, out_$i657: i32, out_$i658: i1, out_$p659: ref, out_$i660: i32, out_$i661: i1, out_$p662: ref, out_$i663: i32, out_$i664: i1, out_$p665: ref, out_$i667: i32, out_$i668: i1, out_$p669: ref, out_$i671: i32, out_$i672: i1, out_$p673: ref, out_$i675: i32, out_$i676: i1, out_$p677: ref, out_$i679: i32, out_$i680: i1, out_$p681: ref, out_$i682: i32, out_$i683: i32, out_$i684: i1, out_$p685: ref, out_$i686: i32, out_$i687: i32, out_$i688: i1, out_$p689: ref, out_$i690: i32, out_$i691: i32, out_$i692: i1, out_$p693: ref, out_$i694: i32, out_$i695: i32, out_$i696: i1, out_$p697: ref, out_$i699: i32, out_$i700: i1, out_$p701: ref, out_$i703: i32, out_$i704: i1, out_$p705: ref, out_$i707: i32, out_$i708: i1, out_$p709: ref, out_$i711: i32, out_$i712: i1, out_$p713: ref, out_$i715: i32, out_$i716: i1, out_$p717: ref, out_$i719: i32, out_$i720: i1, out_$p721: ref, out_$i723: i32, out_$i724: i1, out_$p725: ref, out_$i727: i32, out_$i728: i1, out_$p729: ref, out_$i730: i32, out_$i731: i1, out_$p732: ref, out_$i733: i32, out_$i734: i1, out_$p735: ref, out_$i736: i32, out_$i737: i1, out_$p738: ref, out_$i739: i32, out_$i740: i1, out_$i742: i32, out_$i743: i1, out_$i745: i32, out_$i746: i1, out_$i748: i32, out_$i749: i32, out_vslice_dummy_var_41: i32, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i32, out_vslice_dummy_var_44: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i1, out_vslice_dummy_var_70: i1, out_vslice_dummy_var_71: i1, out_vslice_dummy_var_72: i1, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i1, out_vslice_dummy_var_117: i1, out_vslice_dummy_var_118: i1, out_vslice_dummy_var_119: i1, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32)
{

  entry:
    out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$i179, out_$i180, out_$p181, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i236, out_$i237, out_$p238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$p257, out_$i258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i270, out_$i271, out_$p272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$i320, out_$i321, out_$p322, out_$i324, out_$i325, out_$p326, out_$i327, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$p338, out_$i339, out_$i340, out_$i341, out_$p342, out_$i344, out_$i345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i387, out_$i388, out_$i390, out_$i391, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$p445, out_$i446, out_$i447, out_$p448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$p454, out_$i456, out_$i457, out_$p458, out_$i460, out_$i461, out_$p462, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$p474, out_$i476, out_$i477, out_$p478, out_$i480, out_$i481, out_$p482, out_$i484, out_$i485, out_$p486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$p493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$p499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i508, out_$p509, out_$p510, out_$i511, out_$i512, out_$p513, out_$p514, out_$i515, out_$i516, out_$p517, out_$p518, out_$i519, out_$i520, out_$p521, out_$i523, out_$i524, out_$p525, out_$i527, out_$i528, out_$p529, out_$i531, out_$i532, out_$p533, out_$i535, out_$i536, out_$p537, out_$i538, out_$i539, out_$p540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i546, out_$i547, out_$i549, out_$i550, out_$p551, out_$i552, out_$i553, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$i561, out_$i562, out_$p563, out_$i564, out_$i565, out_$i567, out_$i568, out_$p569, out_$i570, out_$i571, out_$i573, out_$i574, out_$p575, out_$i576, out_$i577, out_$i579, out_$i580, out_$p581, out_$i582, out_$i583, out_$i585, out_$i586, out_$p587, out_$i588, out_$i589, out_$i591, out_$i592, out_$p593, out_$p594, out_$i595, out_$i597, out_$i598, out_$p599, out_$p600, out_$i601, out_$i603, out_$i604, out_$p605, out_$p606, out_$i607, out_$i609, out_$i610, out_$p611, out_$p612, out_$i613, out_$i615, out_$i616, out_$p617, out_$i618, out_$i620, out_$i621, out_$p622, out_$i623, out_$i625, out_$i626, out_$p627, out_$i628, out_$i630, out_$i631, out_$p632, out_$i633, out_$i635, out_$i636, out_$p637, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$p643, out_$i645, out_$i646, out_$p647, out_$i649, out_$i650, out_$p651, out_$i653, out_$i654, out_$p655, out_$i657, out_$i658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$p665, out_$i667, out_$i668, out_$p669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$i687, out_$i688, out_$p689, out_$i690, out_$i691, out_$i692, out_$p693, out_$i694, out_$i695, out_$i696, out_$p697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$i715, out_$i716, out_$p717, out_$i719, out_$i720, out_$p721, out_$i723, out_$i724, out_$p725, out_$i727, out_$i728, out_$p729, out_$i730, out_$i731, out_$p732, out_$i733, out_$i734, out_$p735, out_$i736, out_$i737, out_$p738, out_$i739, out_$i740, out_$i742, out_$i743, out_$i745, out_$i746, out_$i748, out_$i749, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134 := in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p99, in_$i101, in_$i102, in_$p103, in_$i105, in_$i106, in_$p107, in_$i109, in_$i110, in_$p111, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$i121, in_$i122, in_$p123, in_$i125, in_$i126, in_$p127, in_$i129, in_$i130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p138, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$p150, in_$p151, in_$i152, in_$i153, in_$p154, in_$p155, in_$i156, in_$i157, in_$p158, in_$p159, in_$i160, in_$i161, in_$p162, in_$p163, in_$i164, in_$i165, in_$p166, in_$i167, in_$i168, in_$p169, in_$i171, in_$i172, in_$p173, in_$i175, in_$i176, in_$p177, in_$i179, in_$i180, in_$p181, in_$i183, in_$i184, in_$p185, in_$i186, in_$i187, in_$i188, in_$i189, in_$p190, in_$i191, in_$i192, in_$i194, in_$i195, in_$p196, in_$i197, in_$i198, in_$i200, in_$i201, in_$p202, in_$i203, in_$i204, in_$i206, in_$i207, in_$p208, in_$i209, in_$i210, in_$i212, in_$i213, in_$p214, in_$i215, in_$i216, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$i224, in_$i225, in_$p226, in_$i227, in_$i228, in_$i230, in_$i231, in_$p232, in_$i233, in_$i234, in_$i236, in_$i237, in_$p238, in_$p239, in_$i240, in_$i242, in_$i243, in_$p244, in_$p245, in_$i246, in_$i248, in_$i249, in_$p250, in_$p251, in_$i252, in_$i254, in_$i255, in_$p256, in_$p257, in_$i258, in_$i260, in_$i261, in_$p262, in_$i263, in_$i265, in_$i266, in_$p267, in_$i268, in_$i270, in_$i271, in_$p272, in_$i273, in_$i275, in_$i276, in_$p277, in_$i278, in_$i280, in_$i281, in_$p282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$p288, in_$i289, in_$i290, in_$p291, in_$i293, in_$i294, in_$p295, in_$i297, in_$i298, in_$p299, in_$i301, in_$i302, in_$p303, in_$i305, in_$i306, in_$p307, in_$i308, in_$i309, in_$p310, in_$i312, in_$i313, in_$p314, in_$i316, in_$i317, in_$p318, in_$i320, in_$i321, in_$p322, in_$i324, in_$i325, in_$p326, in_$i327, in_$i328, in_$i329, in_$p330, in_$i331, in_$i332, in_$i333, in_$p334, in_$i335, in_$i336, in_$i337, in_$p338, in_$i339, in_$i340, in_$i341, in_$p342, in_$i344, in_$i345, in_$p346, in_$i348, in_$i349, in_$p350, in_$i352, in_$i353, in_$p354, in_$i356, in_$i357, in_$p358, in_$i360, in_$i361, in_$p362, in_$i364, in_$i365, in_$p366, in_$i368, in_$i369, in_$p370, in_$i372, in_$i373, in_$p374, in_$i375, in_$i376, in_$p377, in_$i378, in_$i379, in_$p380, in_$i381, in_$i382, in_$p383, in_$i384, in_$i385, in_$i387, in_$i388, in_$i390, in_$i391, in_$i393, in_$i394, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i409, in_$i410, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$p442, in_$i443, in_$i444, in_$p445, in_$i446, in_$i447, in_$p448, in_$i449, in_$i450, in_$p451, in_$i452, in_$i453, in_$p454, in_$i456, in_$i457, in_$p458, in_$i460, in_$i461, in_$p462, in_$i464, in_$i465, in_$p466, in_$i468, in_$i469, in_$p470, in_$i472, in_$i473, in_$p474, in_$i476, in_$i477, in_$p478, in_$i480, in_$i481, in_$p482, in_$i484, in_$i485, in_$p486, in_$p487, in_$i488, in_$i489, in_$i490, in_$i491, in_$i492, in_$p493, in_$i494, in_$i495, in_$p496, in_$i497, in_$i498, in_$p499, in_$i500, in_$i501, in_$p502, in_$i503, in_$i504, in_$p505, in_$p506, in_$i507, in_$i508, in_$p509, in_$p510, in_$i511, in_$i512, in_$p513, in_$p514, in_$i515, in_$i516, in_$p517, in_$p518, in_$i519, in_$i520, in_$p521, in_$i523, in_$i524, in_$p525, in_$i527, in_$i528, in_$p529, in_$i531, in_$i532, in_$p533, in_$i535, in_$i536, in_$p537, in_$i538, in_$i539, in_$p540, in_$i541, in_$i542, in_$i543, in_$i544, in_$p545, in_$i546, in_$i547, in_$i549, in_$i550, in_$p551, in_$i552, in_$i553, in_$i555, in_$i556, in_$p557, in_$i558, in_$i559, in_$i561, in_$i562, in_$p563, in_$i564, in_$i565, in_$i567, in_$i568, in_$p569, in_$i570, in_$i571, in_$i573, in_$i574, in_$p575, in_$i576, in_$i577, in_$i579, in_$i580, in_$p581, in_$i582, in_$i583, in_$i585, in_$i586, in_$p587, in_$i588, in_$i589, in_$i591, in_$i592, in_$p593, in_$p594, in_$i595, in_$i597, in_$i598, in_$p599, in_$p600, in_$i601, in_$i603, in_$i604, in_$p605, in_$p606, in_$i607, in_$i609, in_$i610, in_$p611, in_$p612, in_$i613, in_$i615, in_$i616, in_$p617, in_$i618, in_$i620, in_$i621, in_$p622, in_$i623, in_$i625, in_$i626, in_$p627, in_$i628, in_$i630, in_$i631, in_$p632, in_$i633, in_$i635, in_$i636, in_$p637, in_$i638, in_$i639, in_$i640, in_$i641, in_$i642, in_$p643, in_$i645, in_$i646, in_$p647, in_$i649, in_$i650, in_$p651, in_$i653, in_$i654, in_$p655, in_$i657, in_$i658, in_$p659, in_$i660, in_$i661, in_$p662, in_$i663, in_$i664, in_$p665, in_$i667, in_$i668, in_$p669, in_$i671, in_$i672, in_$p673, in_$i675, in_$i676, in_$p677, in_$i679, in_$i680, in_$p681, in_$i682, in_$i683, in_$i684, in_$p685, in_$i686, in_$i687, in_$i688, in_$p689, in_$i690, in_$i691, in_$i692, in_$p693, in_$i694, in_$i695, in_$i696, in_$p697, in_$i699, in_$i700, in_$p701, in_$i703, in_$i704, in_$p705, in_$i707, in_$i708, in_$p709, in_$i711, in_$i712, in_$p713, in_$i715, in_$i716, in_$p717, in_$i719, in_$i720, in_$p721, in_$i723, in_$i724, in_$p725, in_$i727, in_$i728, in_$p729, in_$i730, in_$i731, in_$p732, in_$i733, in_$i734, in_$p735, in_$i736, in_$i737, in_$p738, in_$i739, in_$i740, in_$i742, in_$i743, in_$i745, in_$i746, in_$i748, in_$i749, in_vslice_dummy_var_41, in_vslice_dummy_var_42, in_vslice_dummy_var_43, in_vslice_dummy_var_44, in_vslice_dummy_var_45, in_vslice_dummy_var_46, in_vslice_dummy_var_47, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53, in_vslice_dummy_var_54, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} out_$i52 := __VERIFIER_nondet_int();
    call {:si_unique_call 710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i52);
    call {:si_unique_call 711} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i52);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb295_dummy;

  $bb610:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb608:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb13:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 722} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3533;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ti_throttle(out_$p96);
    goto corral_source_split_3532;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    out_$p96 := $M.22;
    goto corral_source_split_3531;

  $bb75:
    assume out_$i95 == 1;
    goto corral_source_split_3530;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 2);
    goto corral_source_split_3528;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i94 := $M.27;
    goto corral_source_split_3527;

  $bb73:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 720} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3525;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} ti_throttle(out_$p93);
    goto corral_source_split_3524;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$p93 := $M.22;
    goto corral_source_split_3523;

  $bb72:
    assume out_$i92 == 1;
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 3);
    goto corral_source_split_3520;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i91 := $M.27;
    goto corral_source_split_3519;

  $bb70:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 718} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} ti_throttle(out_$p90);
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    out_$p90 := $M.22;
    goto corral_source_split_3515;

  $bb69:
    assume out_$i89 == 1;
    goto corral_source_split_3514;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 1);
    goto corral_source_split_3512;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i88 := $M.27;
    goto corral_source_split_3511;

  $bb67:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 716} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} ti_throttle(out_$p87);
    goto corral_source_split_3508;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$p87 := $M.22;
    goto corral_source_split_3507;

  $bb66:
    assume out_$i86 == 1;
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 4);
    goto corral_source_split_3504;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i85 := $M.27;
    goto corral_source_split_3503;

  $bb64:
    assume out_$i84 == 1;
    goto corral_source_split_3502;

  $bb60:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i59, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb54:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb42:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i59, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb15:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i59, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} out_$i59 := __VERIFIER_nondet_int();
    call {:si_unique_call 713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i59);
    call {:si_unique_call 714} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i59);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i58 == 1;
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i57 := $M.27;
    goto corral_source_split_3405;

  $bb10:
    assume out_$i56 == 1;
    goto corral_source_split_3404;

  $bb3:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i52, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb89:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} out_vslice_dummy_var_44 := usb_serial_generic_get_icount(out_$p111, in_$p18);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$p111 := $M.22;
    goto corral_source_split_3560;

  $bb88:
    assume out_$i110 == 1;
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 2);
    goto corral_source_split_3557;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i109 := $M.27;
    goto corral_source_split_3556;

  $bb86:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3554;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} out_vslice_dummy_var_43 := usb_serial_generic_get_icount(out_$p107, in_$p18);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$p107 := $M.22;
    goto corral_source_split_3552;

  $bb85:
    assume out_$i106 == 1;
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 3);
    goto corral_source_split_3549;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i105 := $M.27;
    goto corral_source_split_3548;

  $bb83:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3546;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} out_vslice_dummy_var_42 := usb_serial_generic_get_icount(out_$p103, in_$p18);
    goto corral_source_split_3545;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$p103 := $M.22;
    goto corral_source_split_3544;

  $bb82:
    assume out_$i102 == 1;
    goto corral_source_split_3543;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 1);
    goto corral_source_split_3541;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i101 := $M.27;
    goto corral_source_split_3540;

  $bb80:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 724} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3538;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} out_vslice_dummy_var_41 := usb_serial_generic_get_icount(out_$p99, in_$p18);
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$p99 := $M.22;
    goto corral_source_split_3536;

  $bb79:
    assume out_$i98 == 1;
    goto corral_source_split_3535;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 4);
    goto corral_source_split_3496;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    out_$i97 := $M.27;
    goto corral_source_split_3495;

  $bb62:
    assume out_$i83 == 1;
    goto corral_source_split_3494;

  $bb61:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i59, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb101:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} out_vslice_dummy_var_48 := ti_port_probe(out_$p127);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p127 := $M.20;
    goto corral_source_split_3589;

  $bb100:
    assume out_$i126 == 1;
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 2);
    goto corral_source_split_3586;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i125 := $M.27;
    goto corral_source_split_3585;

  $bb98:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_vslice_dummy_var_47 := ti_port_probe(out_$p123);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$p123 := $M.20;
    goto corral_source_split_3581;

  $bb97:
    assume out_$i122 == 1;
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 3);
    goto corral_source_split_3578;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i121 := $M.27;
    goto corral_source_split_3577;

  $bb95:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_vslice_dummy_var_46 := ti_port_probe(out_$p119);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$p119 := $M.20;
    goto corral_source_split_3573;

  $bb94:
    assume out_$i118 == 1;
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_3570;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i117 := $M.27;
    goto corral_source_split_3569;

  $bb92:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3567;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} out_vslice_dummy_var_45 := ti_port_probe(out_$p115);
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$p115 := $M.20;
    goto corral_source_split_3565;

  $bb91:
    assume out_$i114 == 1;
    goto corral_source_split_3564;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 4);
    goto corral_source_split_3500;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    out_$i113 := $M.27;
    goto corral_source_split_3499;

  $bb63:
    assume !(out_$i83 == 1);
    goto corral_source_split_3498;

  $bb104:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb106:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3602;

  $bb105:
    assume out_$i135 == 1;
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 0);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$i134 := $M.31;
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.31 := out_$i133;
    call {:si_unique_call 740} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_3597;

  SeqInstr_36:
    goto corral_source_split_3596;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} out_$i133 := ti_open(out_$p131, out_$p132);
    goto SeqInstr_35;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$p132 := $M.20;
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$p131 := $M.22;
    goto corral_source_split_3594;

  $bb103:
    assume out_$i130 == 1;
    goto corral_source_split_3593;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 3);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$i129 := $M.27;
    goto corral_source_split_3483;

  $bb56:
    assume out_$i80 == 1;
    goto corral_source_split_3482;

  $bb55:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i59, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb119:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} ti_unthrottle(out_$p147);
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$p147 := $M.22;
    goto corral_source_split_3629;

  $bb118:
    assume out_$i146 == 1;
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 2);
    goto corral_source_split_3626;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i145 := $M.27;
    goto corral_source_split_3625;

  $bb116:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 747} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} ti_unthrottle(out_$p144);
    goto corral_source_split_3622;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$p144 := $M.22;
    goto corral_source_split_3621;

  $bb115:
    assume out_$i143 == 1;
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 3);
    goto corral_source_split_3618;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i142 := $M.27;
    goto corral_source_split_3617;

  $bb113:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ti_unthrottle(out_$p141);
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$p141 := $M.22;
    goto corral_source_split_3613;

  $bb112:
    assume out_$i140 == 1;
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 1);
    goto corral_source_split_3610;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i139 := $M.27;
    goto corral_source_split_3609;

  $bb110:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ti_unthrottle(out_$p138);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$p138 := $M.22;
    goto corral_source_split_3605;

  $bb109:
    assume out_$i137 == 1;
    goto corral_source_split_3604;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 4);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i136 := $M.27;
    goto corral_source_split_3487;

  $bb58:
    assume out_$i81 == 1;
    goto corral_source_split_3486;

  $bb57:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i59, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb131:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ti_set_termios(out_$p162, out_$p163, in_$p16);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$p163 := $M.20;
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$p162 := $M.22;
    goto corral_source_split_3661;

  $bb130:
    assume out_$i161 == 1;
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 2);
    goto corral_source_split_3658;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i160 := $M.27;
    goto corral_source_split_3657;

  $bb128:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 755} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} ti_set_termios(out_$p158, out_$p159, in_$p16);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$p159 := $M.20;
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$p158 := $M.22;
    goto corral_source_split_3652;

  $bb127:
    assume out_$i157 == 1;
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 3);
    goto corral_source_split_3649;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i156 := $M.27;
    goto corral_source_split_3648;

  $bb125:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 753} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} ti_set_termios(out_$p154, out_$p155, in_$p16);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p155 := $M.20;
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p154 := $M.22;
    goto corral_source_split_3643;

  $bb124:
    assume out_$i153 == 1;
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 1);
    goto corral_source_split_3640;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i152 := $M.27;
    goto corral_source_split_3639;

  $bb122:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} ti_set_termios(out_$p150, out_$p151, in_$p16);
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$p151 := $M.20;
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$p150 := $M.22;
    goto corral_source_split_3634;

  $bb121:
    assume out_$i149 == 1;
    goto corral_source_split_3633;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 4);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i148 := $M.27;
    goto corral_source_split_3491;

  $bb59:
    assume !(out_$i81 == 1);
    goto corral_source_split_3490;

  $bb134:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} ti_bulk_out_callback(out_$p166);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$p166 := $M.19;
    goto corral_source_split_3667;

  $bb133:
    assume out_$i165 == 1;
    goto corral_source_split_3666;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 4);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i164 := $M.27;
    goto corral_source_split_3471;

  $bb50:
    assume out_$i77 == 1;
    goto corral_source_split_3470;

  $bb44:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i59, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb43:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i59, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb146:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 767} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_vslice_dummy_var_52 := ti_port_remove(out_$p181);
    goto corral_source_split_3697;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    out_$p181 := $M.20;
    goto corral_source_split_3696;

  $bb145:
    assume out_$i180 == 1;
    goto corral_source_split_3695;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 2);
    goto corral_source_split_3693;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i179 := $M.27;
    goto corral_source_split_3692;

  $bb143:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3690;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_vslice_dummy_var_51 := ti_port_remove(out_$p177);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$p177 := $M.20;
    goto corral_source_split_3688;

  $bb142:
    assume out_$i176 == 1;
    goto corral_source_split_3687;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 3);
    goto corral_source_split_3685;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i175 := $M.27;
    goto corral_source_split_3684;

  $bb140:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_vslice_dummy_var_50 := ti_port_remove(out_$p173);
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p173 := $M.20;
    goto corral_source_split_3680;

  $bb139:
    assume out_$i172 == 1;
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 1);
    goto corral_source_split_3677;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i171 := $M.27;
    goto corral_source_split_3676;

  $bb137:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_vslice_dummy_var_49 := ti_port_remove(out_$p169);
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$p169 := $M.20;
    goto corral_source_split_3672;

  $bb136:
    assume out_$i168 == 1;
    goto corral_source_split_3671;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 4);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i167 := $M.27;
    goto corral_source_split_3475;

  $bb52:
    assume out_$i78 == 1;
    goto corral_source_split_3474;

  $bb51:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i59, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb149:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.28 := out_$i187;
    call {:si_unique_call 770} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i187 := $sub.i32(out_$i186, 1);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$i186 := $M.28;
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} ti_release(out_$p185);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$p185 := $M.21;
    goto corral_source_split_3701;

  $bb148:
    assume out_$i184 == 1;
    goto corral_source_split_3700;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 2);
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    out_$i183 := $M.27;
    goto corral_source_split_3479;

  $bb53:
    assume !(out_$i78 == 1);
    goto corral_source_split_3478;

  $bb161:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 778} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3743;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} out_vslice_dummy_var_56 := ti_ioctl(out_$p208, out_$i209, out_$i210);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i64($M.18, in_$p3);
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i32($M.18, in_$p0);
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$p208 := $M.22;
    goto corral_source_split_3739;

  $bb160:
    assume out_$i207 == 1;
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 2);
    goto corral_source_split_3736;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i206 := $M.27;
    goto corral_source_split_3735;

  $bb158:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} out_vslice_dummy_var_55 := ti_ioctl(out_$p202, out_$i203, out_$i204);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i204 := $load.i64($M.18, in_$p3);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i32($M.18, in_$p0);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p202 := $M.22;
    goto corral_source_split_3729;

  $bb157:
    assume out_$i201 == 1;
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 3);
    goto corral_source_split_3726;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i200 := $M.27;
    goto corral_source_split_3725;

  $bb155:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 774} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_vslice_dummy_var_54 := ti_ioctl(out_$p196, out_$i197, out_$i198);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i64($M.18, in_$p3);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i32($M.18, in_$p0);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$p196 := $M.22;
    goto corral_source_split_3719;

  $bb154:
    assume out_$i195 == 1;
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_3716;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i194 := $M.27;
    goto corral_source_split_3715;

  $bb152:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_vslice_dummy_var_53 := ti_ioctl(out_$p190, out_$i191, out_$i192);
    goto corral_source_split_3712;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i64($M.18, in_$p3);
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i32($M.18, in_$p0);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$p190 := $M.22;
    goto corral_source_split_3709;

  $bb151:
    assume out_$i189 == 1;
    goto corral_source_split_3708;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 4);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i188 := $M.27;
    goto corral_source_split_3459;

  $bb46:
    assume out_$i75 == 1;
    goto corral_source_split_3458;

  $bb45:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i59, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb173:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} out_vslice_dummy_var_60 := ti_tiocmset(out_$p232, out_$i233, out_$i234);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i32($M.18, in_$p5);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$i233 := $load.i32($M.18, in_$p2);
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$p232 := $M.22;
    goto corral_source_split_3776;

  $bb172:
    assume out_$i231 == 1;
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_3773;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i230 := $M.27;
    goto corral_source_split_3772;

  $bb170:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_vslice_dummy_var_59 := ti_tiocmset(out_$p226, out_$i227, out_$i228);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i32($M.18, in_$p5);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.18, in_$p2);
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$p226 := $M.22;
    goto corral_source_split_3766;

  $bb169:
    assume out_$i225 == 1;
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 3);
    goto corral_source_split_3763;

  $bb168:
    assume {:verifier.code 0} true;
    out_$i224 := $M.27;
    goto corral_source_split_3762;

  $bb167:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} out_vslice_dummy_var_58 := ti_tiocmset(out_$p220, out_$i221, out_$i222);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i32($M.18, in_$p5);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i32($M.18, in_$p2);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p220 := $M.22;
    goto corral_source_split_3756;

  $bb166:
    assume out_$i219 == 1;
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_3753;

  $bb165:
    assume {:verifier.code 0} true;
    out_$i218 := $M.27;
    goto corral_source_split_3752;

  $bb164:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_vslice_dummy_var_57 := ti_tiocmset(out_$p214, out_$i215, out_$i216);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i32($M.18, in_$p5);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.18, in_$p2);
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$p214 := $M.22;
    goto corral_source_split_3746;

  $bb163:
    assume out_$i213 == 1;
    goto corral_source_split_3745;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 4);
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i212 := $M.27;
    goto corral_source_split_3463;

  $bb48:
    assume out_$i76 == 1;
    goto corral_source_split_3462;

  $bb47:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i59, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb185:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 794} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_vslice_dummy_var_64 := ti_write(out_$p256, out_$p257, in_$p14, out_$i258);
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$i258 := $load.i32($M.18, in_$p6);
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    out_$p257 := $M.20;
    goto corral_source_split_3814;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$p256 := $M.22;
    goto corral_source_split_3813;

  $bb184:
    assume out_$i255 == 1;
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 2);
    goto corral_source_split_3810;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i254 := $M.27;
    goto corral_source_split_3809;

  $bb182:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} out_vslice_dummy_var_63 := ti_write(out_$p250, out_$p251, in_$p14, out_$i252);
    goto corral_source_split_3806;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.18, in_$p6);
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$p251 := $M.20;
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$p250 := $M.22;
    goto corral_source_split_3803;

  $bb181:
    assume out_$i249 == 1;
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 3);
    goto corral_source_split_3800;

  $bb180:
    assume {:verifier.code 0} true;
    out_$i248 := $M.27;
    goto corral_source_split_3799;

  $bb179:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} out_vslice_dummy_var_62 := ti_write(out_$p244, out_$p245, in_$p14, out_$i246);
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$i246 := $load.i32($M.18, in_$p6);
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$p245 := $M.20;
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    out_$p244 := $M.22;
    goto corral_source_split_3793;

  $bb178:
    assume out_$i243 == 1;
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 1);
    goto corral_source_split_3790;

  $bb177:
    assume {:verifier.code 0} true;
    out_$i242 := $M.27;
    goto corral_source_split_3789;

  $bb176:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_vslice_dummy_var_61 := ti_write(out_$p238, out_$p239, in_$p14, out_$i240);
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i32($M.18, in_$p6);
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$p239 := $M.20;
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$p238 := $M.22;
    goto corral_source_split_3783;

  $bb175:
    assume out_$i237 == 1;
    goto corral_source_split_3782;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 4);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$i236 := $M.27;
    goto corral_source_split_3467;

  $bb49:
    assume !(out_$i76 == 1);
    goto corral_source_split_3466;

  $bb197:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 802} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} out_vslice_dummy_var_68 := usb_serial_generic_tiocmiwait(out_$p277, out_$i278);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i278 := $load.i64($M.18, in_$p4);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$p277 := $M.22;
    goto corral_source_split_3847;

  $bb196:
    assume out_$i276 == 1;
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 2);
    goto corral_source_split_3844;

  $bb195:
    assume {:verifier.code 0} true;
    out_$i275 := $M.27;
    goto corral_source_split_3843;

  $bb194:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} out_vslice_dummy_var_67 := usb_serial_generic_tiocmiwait(out_$p272, out_$i273);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$i273 := $load.i64($M.18, in_$p4);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$p272 := $M.22;
    goto corral_source_split_3838;

  $bb193:
    assume out_$i271 == 1;
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 3);
    goto corral_source_split_3835;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i270 := $M.27;
    goto corral_source_split_3834;

  $bb191:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 798} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} out_vslice_dummy_var_66 := usb_serial_generic_tiocmiwait(out_$p267, out_$i268);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$i268 := $load.i64($M.18, in_$p4);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$p267 := $M.22;
    goto corral_source_split_3829;

  $bb190:
    assume out_$i266 == 1;
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 1);
    goto corral_source_split_3826;

  $bb189:
    assume {:verifier.code 0} true;
    out_$i265 := $M.27;
    goto corral_source_split_3825;

  $bb188:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 796} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} out_vslice_dummy_var_65 := usb_serial_generic_tiocmiwait(out_$p262, out_$i263);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i64($M.18, in_$p4);
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$p262 := $M.22;
    goto corral_source_split_3820;

  $bb187:
    assume out_$i261 == 1;
    goto corral_source_split_3819;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 4);
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i260 := $M.27;
    goto corral_source_split_3447;

  $bb38:
    assume out_$i71 == 1;
    goto corral_source_split_3446;

  $bb32:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i59, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb17:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i59, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb16:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i59, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb200:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb202:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3860;

  $bb201:
    assume out_$i285 == 1;
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 0);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i284 := $M.32;
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.32 := out_$i283;
    call {:si_unique_call 804} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i283);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} out_$i283 := ti_startup(out_$p282);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p282 := $M.21;
    goto corral_source_split_3853;

  $bb199:
    assume out_$i281 == 1;
    goto corral_source_split_3852;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 2);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i280 := $M.27;
    goto corral_source_split_3451;

  $bb40:
    assume out_$i72 == 1;
    goto corral_source_split_3450;

  $bb39:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i59, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb206:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ti_interrupt_callback(out_$p288);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$p288 := $M.19;
    goto corral_source_split_3863;

  $bb205:
    assume out_$i287 == 1;
    goto corral_source_split_3862;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i286, 4);
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$i286 := $M.27;
    goto corral_source_split_3455;

  $bb41:
    assume !(out_$i72 == 1);
    goto corral_source_split_3454;

  $bb218:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_vslice_dummy_var_72 := ti_tx_empty(out_$p303);
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$p303 := $M.20;
    goto corral_source_split_3892;

  $bb217:
    assume out_$i302 == 1;
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 2);
    goto corral_source_split_3889;

  $bb216:
    assume {:verifier.code 0} true;
    out_$i301 := $M.27;
    goto corral_source_split_3888;

  $bb215:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_vslice_dummy_var_71 := ti_tx_empty(out_$p299);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$p299 := $M.20;
    goto corral_source_split_3884;

  $bb214:
    assume out_$i298 == 1;
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i297, 3);
    goto corral_source_split_3881;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i297 := $M.27;
    goto corral_source_split_3880;

  $bb212:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_vslice_dummy_var_70 := ti_tx_empty(out_$p295);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$p295 := $M.20;
    goto corral_source_split_3876;

  $bb211:
    assume out_$i294 == 1;
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 1);
    goto corral_source_split_3873;

  $bb210:
    assume {:verifier.code 0} true;
    out_$i293 := $M.27;
    goto corral_source_split_3872;

  $bb209:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_vslice_dummy_var_69 := ti_tx_empty(out_$p291);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p291 := $M.20;
    goto corral_source_split_3868;

  $bb208:
    assume out_$i290 == 1;
    goto corral_source_split_3867;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 4);
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    out_$i289 := $M.27;
    goto corral_source_split_3435;

  $bb34:
    assume out_$i69 == 1;
    goto corral_source_split_3434;

  $bb33:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i59, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb221:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3899;

  SeqInstr_39:
    goto corral_source_split_3898;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ti_close(out_$p307);
    goto SeqInstr_38;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$p307 := $M.20;
    goto corral_source_split_3897;

  $bb220:
    assume out_$i306 == 1;
    goto corral_source_split_3896;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 4);
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$i305 := $M.27;
    goto corral_source_split_3439;

  $bb36:
    assume out_$i70 == 1;
    goto corral_source_split_3438;

  $bb35:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i59, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb233:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 825} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} out_vslice_dummy_var_76 := ti_write_room(out_$p322);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$p322 := $M.22;
    goto corral_source_split_3926;

  $bb232:
    assume out_$i321 == 1;
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i321 := $eq.i32(out_$i320, 2);
    goto corral_source_split_3923;

  $bb231:
    assume {:verifier.code 0} true;
    out_$i320 := $M.27;
    goto corral_source_split_3922;

  $bb230:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} out_vslice_dummy_var_75 := ti_write_room(out_$p318);
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$p318 := $M.22;
    goto corral_source_split_3918;

  $bb229:
    assume out_$i317 == 1;
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 3);
    goto corral_source_split_3915;

  $bb228:
    assume {:verifier.code 0} true;
    out_$i316 := $M.27;
    goto corral_source_split_3914;

  $bb227:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} out_vslice_dummy_var_74 := ti_write_room(out_$p314);
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    out_$p314 := $M.22;
    goto corral_source_split_3910;

  $bb226:
    assume out_$i313 == 1;
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 1);
    goto corral_source_split_3907;

  $bb225:
    assume {:verifier.code 0} true;
    out_$i312 := $M.27;
    goto corral_source_split_3906;

  $bb224:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 819} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} out_vslice_dummy_var_73 := ti_write_room(out_$p310);
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$p310 := $M.22;
    goto corral_source_split_3902;

  $bb223:
    assume out_$i309 == 1;
    goto corral_source_split_3901;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 4);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    out_$i308 := $M.27;
    goto corral_source_split_3443;

  $bb37:
    assume !(out_$i70 == 1);
    goto corral_source_split_3442;

  $bb245:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} ti_break(out_$p338, out_$i339);
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$i339 := $load.i32($M.18, in_$p1);
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$p338 := $M.22;
    goto corral_source_split_3958;

  $bb244:
    assume out_$i337 == 1;
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 2);
    goto corral_source_split_3955;

  $bb243:
    assume {:verifier.code 0} true;
    out_$i336 := $M.27;
    goto corral_source_split_3954;

  $bb242:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 831} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ti_break(out_$p334, out_$i335);
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$i335 := $load.i32($M.18, in_$p1);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$p334 := $M.22;
    goto corral_source_split_3949;

  $bb241:
    assume out_$i333 == 1;
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 3);
    goto corral_source_split_3946;

  $bb240:
    assume {:verifier.code 0} true;
    out_$i332 := $M.27;
    goto corral_source_split_3945;

  $bb239:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 829} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ti_break(out_$p330, out_$i331);
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$i331 := $load.i32($M.18, in_$p1);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$p330 := $M.22;
    goto corral_source_split_3940;

  $bb238:
    assume out_$i329 == 1;
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i328, 1);
    goto corral_source_split_3937;

  $bb237:
    assume {:verifier.code 0} true;
    out_$i328 := $M.27;
    goto corral_source_split_3936;

  $bb236:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 827} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} ti_break(out_$p326, out_$i327);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i327 := $load.i32($M.18, in_$p1);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$p326 := $M.22;
    goto corral_source_split_3931;

  $bb235:
    assume out_$i325 == 1;
    goto corral_source_split_3930;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 4);
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    out_$i324 := $M.27;
    goto corral_source_split_3423;

  $bb28:
    assume out_$i66 == 1;
    goto corral_source_split_3422;

  $bb19:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i59, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb18:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i59, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb257:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 841} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} out_vslice_dummy_var_80 := ti_chars_in_buffer(out_$p354);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$p354 := $M.22;
    goto corral_source_split_3988;

  $bb256:
    assume out_$i353 == 1;
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 2);
    goto corral_source_split_3985;

  $bb255:
    assume {:verifier.code 0} true;
    out_$i352 := $M.27;
    goto corral_source_split_3984;

  $bb254:
    assume !(out_$i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_3982;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} out_vslice_dummy_var_79 := ti_chars_in_buffer(out_$p350);
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    out_$p350 := $M.22;
    goto corral_source_split_3980;

  $bb253:
    assume out_$i349 == 1;
    goto corral_source_split_3979;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$i349 := $eq.i32(out_$i348, 3);
    goto corral_source_split_3977;

  $bb252:
    assume {:verifier.code 0} true;
    out_$i348 := $M.27;
    goto corral_source_split_3976;

  $bb251:
    assume !(out_$i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 837} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_vslice_dummy_var_78 := ti_chars_in_buffer(out_$p346);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$p346 := $M.22;
    goto corral_source_split_3972;

  $bb250:
    assume out_$i345 == 1;
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i344, 1);
    goto corral_source_split_3969;

  $bb249:
    assume {:verifier.code 0} true;
    out_$i344 := $M.27;
    goto corral_source_split_3968;

  $bb248:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 835} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} out_vslice_dummy_var_77 := ti_chars_in_buffer(out_$p342);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$p342 := $M.22;
    goto corral_source_split_3964;

  $bb247:
    assume out_$i341 == 1;
    goto corral_source_split_3963;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i341 := $eq.i32(out_$i340, 4);
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    out_$i340 := $M.27;
    goto corral_source_split_3427;

  $bb30:
    assume out_$i67 == 1;
    goto corral_source_split_3426;

  $bb29:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i59, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb269:
    assume !(out_$i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 849} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} out_vslice_dummy_var_84 := ti_tiocmget(out_$p370);
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$p370 := $M.22;
    goto corral_source_split_4017;

  $bb268:
    assume out_$i369 == 1;
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 2);
    goto corral_source_split_4014;

  $bb267:
    assume {:verifier.code 0} true;
    out_$i368 := $M.27;
    goto corral_source_split_4013;

  $bb266:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} out_vslice_dummy_var_83 := ti_tiocmget(out_$p366);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$p366 := $M.22;
    goto corral_source_split_4009;

  $bb265:
    assume out_$i365 == 1;
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 3);
    goto corral_source_split_4006;

  $bb264:
    assume {:verifier.code 0} true;
    out_$i364 := $M.27;
    goto corral_source_split_4005;

  $bb263:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4003;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} out_vslice_dummy_var_82 := ti_tiocmget(out_$p362);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$p362 := $M.22;
    goto corral_source_split_4001;

  $bb262:
    assume out_$i361 == 1;
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i360, 1);
    goto corral_source_split_3998;

  $bb261:
    assume {:verifier.code 0} true;
    out_$i360 := $M.27;
    goto corral_source_split_3997;

  $bb260:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 843} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_3995;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} out_vslice_dummy_var_81 := ti_tiocmget(out_$p358);
    goto corral_source_split_3994;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    out_$p358 := $M.22;
    goto corral_source_split_3993;

  $bb259:
    assume out_$i357 == 1;
    goto corral_source_split_3992;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i356, 4);
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_$i356 := $M.27;
    goto corral_source_split_3431;

  $bb31:
    assume !(out_$i67 == 1);
    goto corral_source_split_3430;

  $bb281:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 857} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ti_bulk_in_callback(out_$p383);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p383 := $M.19;
    goto corral_source_split_4046;

  $bb280:
    assume out_$i382 == 1;
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 2);
    goto corral_source_split_4043;

  $bb279:
    assume {:verifier.code 0} true;
    out_$i381 := $M.27;
    goto corral_source_split_4042;

  $bb278:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 855} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ti_bulk_in_callback(out_$p380);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$p380 := $M.19;
    goto corral_source_split_4038;

  $bb277:
    assume out_$i379 == 1;
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i378, 3);
    goto corral_source_split_4035;

  $bb276:
    assume {:verifier.code 0} true;
    out_$i378 := $M.27;
    goto corral_source_split_4034;

  $bb275:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ti_bulk_in_callback(out_$p377);
    goto corral_source_split_4031;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$p377 := $M.19;
    goto corral_source_split_4030;

  $bb274:
    assume out_$i376 == 1;
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 1);
    goto corral_source_split_4027;

  $bb273:
    assume {:verifier.code 0} true;
    out_$i375 := $M.27;
    goto corral_source_split_4026;

  $bb272:
    assume !(out_$i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ti_bulk_in_callback(out_$p374);
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$p374 := $M.19;
    goto corral_source_split_4022;

  $bb271:
    assume out_$i373 == 1;
    goto corral_source_split_4021;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$i373 := $eq.i32(out_$i372, 4);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i372 := $M.27;
    goto corral_source_split_3411;

  $bb21:
    assume out_$i63 == 1;
    goto corral_source_split_3410;

  $bb20:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i59, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb287:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 861} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} out_vslice_dummy_var_86 := ldv_detach_1();
    goto corral_source_split_4058;

  $bb286:
    assume out_$i388 == 1;
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    out_$i388 := $eq.i32(out_$i387, 3);
    goto corral_source_split_4055;

  $bb285:
    assume {:verifier.code 0} true;
    out_$i387 := $M.27;
    goto corral_source_split_4054;

  $bb284:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 859} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} out_vslice_dummy_var_85 := ldv_detach_1();
    goto corral_source_split_4051;

  $bb283:
    assume out_$i385 == 1;
    goto corral_source_split_4050;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i384, 4);
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$i384 := $M.27;
    goto corral_source_split_3415;

  $bb23:
    assume out_$i64 == 1;
    goto corral_source_split_3414;

  $bb22:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i59, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb290:
    assume !(out_$i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.28 := out_$i394;
    call {:si_unique_call 864} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i394);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i394 := $add.i32(out_$i393, 1);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$i393 := $M.28;
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 863} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} out_vslice_dummy_var_87 := ldv_probe_1();
    goto corral_source_split_4062;

  $bb289:
    assume out_$i391 == 1;
    goto corral_source_split_4061;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$i391 := $eq.i32(out_$i390, 1);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$i390 := $M.27;
    goto corral_source_split_3419;

  $bb25:
    assume out_$i65 == 1;
    goto corral_source_split_3418;

  $bb24:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i59, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} ldv_stop();
    goto corral_source_split_4068;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb27;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb27;

  $bb297:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb307:
    assume {:verifier.code 0} true;
    assume !(out_$i402 == 1);
    goto $bb308;

  $bb310:
    assume {:verifier.code 0} true;
    assume !(out_$i404 == 1);
    goto $bb308;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 0);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i403 := $M.28;
    goto corral_source_split_4081;

  $bb306:
    assume out_$i402 == 1;
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i401, 2);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$i401 := $M.29;
    goto corral_source_split_4077;

  $bb304:
    assume out_$i400 == 1;
    goto corral_source_split_4076;

  $bb299:
    assume out_$i398 == 1;
    assume {:verifier.code 0} true;
    out_$i400 := $eq.i32(out_$i397, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb298:
    assume {:verifier.code 0} true;
    out_$i398 := $slt.i32(out_$i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_4070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 866} out_$i397 := __VERIFIER_nondet_int();
    call {:si_unique_call 867} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i397);
    call {:si_unique_call 868} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i397);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb296:
    assume out_$i396 == 1;
    goto corral_source_split_4070;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    out_$i396 := $ne.i32(out_$i395, 0);
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    out_$i395 := $M.29;
    goto corral_source_split_3397;

  $bb5:
    assume out_$i54 == 1;
    goto corral_source_split_3396;

  $bb4:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i52, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb315:
    assume !(out_$i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb320:
    assume !(out_$i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_initialize_usb_serial_driver_1();
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 878} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_initialize_usb_serial_driver_2();
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4103;

  $bb319:
    assume out_$i411 == 1;
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$i411 := $eq.i32(out_$i410, 0);
    goto corral_source_split_4100;

  $bb318:
    assume {:verifier.code 0} true;
    out_$i410 := $M.33;
    goto corral_source_split_4099;

  $bb317:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$i409 := $ne.i32(out_$i408, 0);
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$i408 := $M.33;
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.33 := out_$i407;
    call {:si_unique_call 873} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i407);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} out_$i407 := usb_serial_module_init();
    goto corral_source_split_4091;

  $bb314:
    assume out_$i406 == 1;
    goto corral_source_split_4090;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i406 := $eq.i32(out_$i405, 1);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$i405 := $M.29;
    goto corral_source_split_4073;

  $bb301:
    assume out_$i399 == 1;
    goto corral_source_split_4072;

  $bb300:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    out_$i399 := $eq.i32(out_$i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_stop();
    goto corral_source_split_4109;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb302:
    assume {:verifier.code 0} true;
    assume !(out_$i399 == 1);
    goto $bb303;

  $bb305:
    assume {:verifier.code 0} true;
    assume !(out_$i400 == 1);
    goto $bb303;

  $bb327:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb605:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb602:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb584:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb560:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb533:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb530:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb518:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb488:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb390:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ti_throttle(out_$p451);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$p451 := $M.26;
    goto corral_source_split_4234;

  $bb389:
    assume out_$i450 == 1;
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i450 := $eq.i32(out_$i449, 2);
    goto corral_source_split_4231;

  $bb388:
    assume {:verifier.code 0} true;
    out_$i449 := $M.30;
    goto corral_source_split_4230;

  $bb387:
    assume !(out_$i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ti_throttle(out_$p448);
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$p448 := $M.26;
    goto corral_source_split_4226;

  $bb386:
    assume out_$i447 == 1;
    goto corral_source_split_4225;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    out_$i447 := $eq.i32(out_$i446, 3);
    goto corral_source_split_4223;

  $bb385:
    assume {:verifier.code 0} true;
    out_$i446 := $M.30;
    goto corral_source_split_4222;

  $bb384:
    assume !(out_$i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ti_throttle(out_$p445);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$p445 := $M.26;
    goto corral_source_split_4218;

  $bb383:
    assume out_$i444 == 1;
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i444 := $eq.i32(out_$i443, 1);
    goto corral_source_split_4215;

  $bb382:
    assume {:verifier.code 0} true;
    out_$i443 := $M.30;
    goto corral_source_split_4214;

  $bb381:
    assume !(out_$i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} ti_throttle(out_$p442);
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$p442 := $M.26;
    goto corral_source_split_4210;

  $bb380:
    assume out_$i441 == 1;
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i441 := $eq.i32(out_$i440, 4);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i440 := $M.30;
    goto corral_source_split_4206;

  $bb378:
    assume out_$i439 == 1;
    goto corral_source_split_4205;

  $bb374:
    assume out_$i437 == 1;
    assume {:verifier.code 0} true;
    out_$i439 := $eq.i32(out_$i414, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb368:
    assume out_$i434 == 1;
    assume {:verifier.code 0} true;
    out_$i437 := $slt.i32(out_$i414, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb356:
    assume out_$i428 == 1;
    assume {:verifier.code 0} true;
    out_$i434 := $slt.i32(out_$i414, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb329:
    assume out_$i415 == 1;
    assume {:verifier.code 0} true;
    out_$i428 := $slt.i32(out_$i414, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb328:
    assume {:verifier.code 0} true;
    out_$i415 := $slt.i32(out_$i414, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_4111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 881} out_$i414 := __VERIFIER_nondet_int();
    call {:si_unique_call 882} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i414);
    call {:si_unique_call 883} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i414);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb326:
    assume out_$i413 == 1;
    goto corral_source_split_4111;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    out_$i413 := $ne.i32(out_$i412, 0);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i412 := $M.30;
    goto corral_source_split_3401;

  $bb7:
    assume out_$i55 == 1;
    goto corral_source_split_3400;

  $bb6:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i52, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb403:
    assume !(out_$i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} out_vslice_dummy_var_91 := usb_serial_generic_get_icount(out_$p466, in_$p23);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$p466 := $M.26;
    goto corral_source_split_4263;

  $bb402:
    assume out_$i465 == 1;
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$i465 := $eq.i32(out_$i464, 2);
    goto corral_source_split_4260;

  $bb401:
    assume {:verifier.code 0} true;
    out_$i464 := $M.30;
    goto corral_source_split_4259;

  $bb400:
    assume !(out_$i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_vslice_dummy_var_90 := usb_serial_generic_get_icount(out_$p462, in_$p23);
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$p462 := $M.26;
    goto corral_source_split_4255;

  $bb399:
    assume out_$i461 == 1;
    goto corral_source_split_4254;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$i461 := $eq.i32(out_$i460, 3);
    goto corral_source_split_4252;

  $bb398:
    assume {:verifier.code 0} true;
    out_$i460 := $M.30;
    goto corral_source_split_4251;

  $bb397:
    assume !(out_$i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} out_vslice_dummy_var_89 := usb_serial_generic_get_icount(out_$p458, in_$p23);
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$p458 := $M.26;
    goto corral_source_split_4247;

  $bb396:
    assume out_$i457 == 1;
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$i457 := $eq.i32(out_$i456, 1);
    goto corral_source_split_4244;

  $bb395:
    assume {:verifier.code 0} true;
    out_$i456 := $M.30;
    goto corral_source_split_4243;

  $bb394:
    assume !(out_$i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} out_vslice_dummy_var_88 := usb_serial_generic_get_icount(out_$p454, in_$p23);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p454 := $M.26;
    goto corral_source_split_4239;

  $bb393:
    assume out_$i453 == 1;
    goto corral_source_split_4238;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i453 := $eq.i32(out_$i452, 4);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i452 := $M.30;
    goto corral_source_split_4198;

  $bb376:
    assume out_$i438 == 1;
    goto corral_source_split_4197;

  $bb375:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    out_$i438 := $slt.i32(out_$i414, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb415:
    assume !(out_$i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4294;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} out_vslice_dummy_var_95 := ti_port_probe(out_$p482);
    goto corral_source_split_4293;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_$p482 := $M.24;
    goto corral_source_split_4292;

  $bb414:
    assume out_$i481 == 1;
    goto corral_source_split_4291;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    out_$i481 := $eq.i32(out_$i480, 2);
    goto corral_source_split_4289;

  $bb413:
    assume {:verifier.code 0} true;
    out_$i480 := $M.30;
    goto corral_source_split_4288;

  $bb412:
    assume !(out_$i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb413;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} out_vslice_dummy_var_94 := ti_port_probe(out_$p478);
    goto corral_source_split_4285;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$p478 := $M.24;
    goto corral_source_split_4284;

  $bb411:
    assume out_$i477 == 1;
    goto corral_source_split_4283;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    out_$i477 := $eq.i32(out_$i476, 3);
    goto corral_source_split_4281;

  $bb410:
    assume {:verifier.code 0} true;
    out_$i476 := $M.30;
    goto corral_source_split_4280;

  $bb409:
    assume !(out_$i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb410;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4278;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} out_vslice_dummy_var_93 := ti_port_probe(out_$p474);
    goto corral_source_split_4277;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$p474 := $M.24;
    goto corral_source_split_4276;

  $bb408:
    assume out_$i473 == 1;
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i473 := $eq.i32(out_$i472, 1);
    goto corral_source_split_4273;

  $bb407:
    assume {:verifier.code 0} true;
    out_$i472 := $M.30;
    goto corral_source_split_4272;

  $bb406:
    assume !(out_$i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} out_vslice_dummy_var_92 := ti_port_probe(out_$p470);
    goto corral_source_split_4269;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$p470 := $M.24;
    goto corral_source_split_4268;

  $bb405:
    assume out_$i469 == 1;
    goto corral_source_split_4267;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$i469 := $eq.i32(out_$i468, 4);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i468 := $M.30;
    goto corral_source_split_4202;

  $bb377:
    assume !(out_$i438 == 1);
    goto corral_source_split_4201;

  $bb418:
    assume !(out_$i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb420:
    assume !(out_$i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb421;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4305;

  $bb419:
    assume out_$i490 == 1;
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$i490 := $eq.i32(out_$i489, 0);
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    out_$i489 := $M.34;
    goto corral_source_split_4301;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $M.34 := out_$i488;
    call {:si_unique_call 909} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i488);
    goto corral_source_split_4300;

  SeqInstr_45:
    goto corral_source_split_4299;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} out_$i488 := ti_open(out_$p486, out_$p487);
    goto SeqInstr_44;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    out_$p487 := $M.24;
    goto corral_source_split_4298;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$p486 := $M.26;
    goto corral_source_split_4297;

  $bb417:
    assume out_$i485 == 1;
    goto corral_source_split_4296;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$i485 := $eq.i32(out_$i484, 3);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i484 := $M.30;
    goto corral_source_split_4186;

  $bb370:
    assume out_$i435 == 1;
    goto corral_source_split_4185;

  $bb369:
    assume !(out_$i434 == 1);
    assume {:verifier.code 0} true;
    out_$i435 := $slt.i32(out_$i414, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb433:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb434;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ti_unthrottle(out_$p502);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    out_$p502 := $M.26;
    goto corral_source_split_4332;

  $bb432:
    assume out_$i501 == 1;
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$i501 := $eq.i32(out_$i500, 2);
    goto corral_source_split_4329;

  $bb431:
    assume {:verifier.code 0} true;
    out_$i500 := $M.30;
    goto corral_source_split_4328;

  $bb430:
    assume !(out_$i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} ti_unthrottle(out_$p499);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$p499 := $M.26;
    goto corral_source_split_4324;

  $bb429:
    assume out_$i498 == 1;
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i498 := $eq.i32(out_$i497, 3);
    goto corral_source_split_4321;

  $bb428:
    assume {:verifier.code 0} true;
    out_$i497 := $M.30;
    goto corral_source_split_4320;

  $bb427:
    assume !(out_$i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 914} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ti_unthrottle(out_$p496);
    goto corral_source_split_4317;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    out_$p496 := $M.26;
    goto corral_source_split_4316;

  $bb426:
    assume out_$i495 == 1;
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$i495 := $eq.i32(out_$i494, 1);
    goto corral_source_split_4313;

  $bb425:
    assume {:verifier.code 0} true;
    out_$i494 := $M.30;
    goto corral_source_split_4312;

  $bb424:
    assume !(out_$i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb425;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ti_unthrottle(out_$p493);
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$p493 := $M.26;
    goto corral_source_split_4308;

  $bb423:
    assume out_$i492 == 1;
    goto corral_source_split_4307;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i492 := $eq.i32(out_$i491, 4);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i491 := $M.30;
    goto corral_source_split_4190;

  $bb372:
    assume out_$i436 == 1;
    goto corral_source_split_4189;

  $bb371:
    assume !(out_$i435 == 1);
    assume {:verifier.code 0} true;
    out_$i436 := $slt.i32(out_$i414, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  $bb445:
    assume !(out_$i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} ti_set_termios(out_$p517, out_$p518, in_$p20);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$p518 := $M.24;
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$p517 := $M.26;
    goto corral_source_split_4364;

  $bb444:
    assume out_$i516 == 1;
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$i516 := $eq.i32(out_$i515, 2);
    goto corral_source_split_4361;

  $bb443:
    assume {:verifier.code 0} true;
    out_$i515 := $M.30;
    goto corral_source_split_4360;

  $bb442:
    assume !(out_$i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb443;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ti_set_termios(out_$p513, out_$p514, in_$p20);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$p514 := $M.24;
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$p513 := $M.26;
    goto corral_source_split_4355;

  $bb441:
    assume out_$i512 == 1;
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb441, $bb442;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$i512 := $eq.i32(out_$i511, 3);
    goto corral_source_split_4352;

  $bb440:
    assume {:verifier.code 0} true;
    out_$i511 := $M.30;
    goto corral_source_split_4351;

  $bb439:
    assume !(out_$i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb440;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} ti_set_termios(out_$p509, out_$p510, in_$p20);
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$p510 := $M.24;
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$p509 := $M.26;
    goto corral_source_split_4346;

  $bb438:
    assume out_$i508 == 1;
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$i508 := $eq.i32(out_$i507, 1);
    goto corral_source_split_4343;

  $bb437:
    assume {:verifier.code 0} true;
    out_$i507 := $M.30;
    goto corral_source_split_4342;

  $bb436:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    goto $bb437;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ti_set_termios(out_$p505, out_$p506, in_$p20);
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$p506 := $M.24;
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$p505 := $M.26;
    goto corral_source_split_4337;

  $bb435:
    assume out_$i504 == 1;
    goto corral_source_split_4336;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i504 := $eq.i32(out_$i503, 4);
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$i503 := $M.30;
    goto corral_source_split_4194;

  $bb373:
    assume !(out_$i436 == 1);
    goto corral_source_split_4193;

  $bb457:
    assume !(out_$i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb458;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 934} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} out_vslice_dummy_var_99 := ti_port_remove(out_$p533);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$p533 := $M.24;
    goto corral_source_split_4394;

  $bb456:
    assume out_$i532 == 1;
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i532 := $eq.i32(out_$i531, 2);
    goto corral_source_split_4391;

  $bb455:
    assume {:verifier.code 0} true;
    out_$i531 := $M.30;
    goto corral_source_split_4390;

  $bb454:
    assume !(out_$i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 932} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4388;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} out_vslice_dummy_var_98 := ti_port_remove(out_$p529);
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$p529 := $M.24;
    goto corral_source_split_4386;

  $bb453:
    assume out_$i528 == 1;
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$i528 := $eq.i32(out_$i527, 3);
    goto corral_source_split_4383;

  $bb452:
    assume {:verifier.code 0} true;
    out_$i527 := $M.30;
    goto corral_source_split_4382;

  $bb451:
    assume !(out_$i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 930} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} out_vslice_dummy_var_97 := ti_port_remove(out_$p525);
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$p525 := $M.24;
    goto corral_source_split_4378;

  $bb450:
    assume out_$i524 == 1;
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i524 := $eq.i32(out_$i523, 1);
    goto corral_source_split_4375;

  $bb449:
    assume {:verifier.code 0} true;
    out_$i523 := $M.30;
    goto corral_source_split_4374;

  $bb448:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 928} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} out_vslice_dummy_var_96 := ti_port_remove(out_$p521);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$p521 := $M.24;
    goto corral_source_split_4370;

  $bb447:
    assume out_$i520 == 1;
    goto corral_source_split_4369;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i520 := $eq.i32(out_$i519, 4);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i519 := $M.30;
    goto corral_source_split_4174;

  $bb364:
    assume out_$i432 == 1;
    goto corral_source_split_4173;

  $bb358:
    assume out_$i429 == 1;
    assume {:verifier.code 0} true;
    out_$i432 := $slt.i32(out_$i414, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb357:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    out_$i429 := $slt.i32(out_$i414, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb460:
    assume !(out_$i536 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb461;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 936} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} ti_bulk_out_callback(out_$p537);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p537 := $M.23;
    goto corral_source_split_4399;

  $bb459:
    assume out_$i536 == 1;
    goto corral_source_split_4398;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i536 := $eq.i32(out_$i535, 4);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i535 := $M.30;
    goto corral_source_split_4178;

  $bb366:
    assume out_$i433 == 1;
    goto corral_source_split_4177;

  $bb365:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    out_$i433 := $slt.i32(out_$i414, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb463:
    assume !(out_$i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto $bb464;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.28 := out_$i542;
    call {:si_unique_call 939} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i542);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i542 := $sub.i32(out_$i541, 1);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i541 := $M.28;
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 938} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ti_release(out_$p540);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$p540 := $M.25;
    goto corral_source_split_4404;

  $bb462:
    assume out_$i539 == 1;
    goto corral_source_split_4403;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$i539 := $eq.i32(out_$i538, 2);
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i538 := $M.30;
    goto corral_source_split_4182;

  $bb367:
    assume !(out_$i433 == 1);
    goto corral_source_split_4181;

  $bb475:
    assume !(out_$i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    goto $bb476;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} out_vslice_dummy_var_103 := ti_ioctl(out_$p563, out_$i564, out_$i565);
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i565 := $load.i64($M.18, in_$p9);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i564 := $load.i32($M.18, in_$p12);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$p563 := $M.26;
    goto corral_source_split_4442;

  $bb474:
    assume out_$i562 == 1;
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    out_$i562 := $eq.i32(out_$i561, 2);
    goto corral_source_split_4439;

  $bb473:
    assume {:verifier.code 0} true;
    out_$i561 := $M.30;
    goto corral_source_split_4438;

  $bb472:
    assume !(out_$i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    goto $bb473;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} out_vslice_dummy_var_102 := ti_ioctl(out_$p557, out_$i558, out_$i559);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$i559 := $load.i64($M.18, in_$p9);
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i558 := $load.i32($M.18, in_$p12);
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$p557 := $M.26;
    goto corral_source_split_4432;

  $bb471:
    assume out_$i556 == 1;
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$i556 := $eq.i32(out_$i555, 3);
    goto corral_source_split_4429;

  $bb470:
    assume {:verifier.code 0} true;
    out_$i555 := $M.30;
    goto corral_source_split_4428;

  $bb469:
    assume !(out_$i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_vslice_dummy_var_101 := ti_ioctl(out_$p551, out_$i552, out_$i553);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i553 := $load.i64($M.18, in_$p9);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$i552 := $load.i32($M.18, in_$p12);
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$p551 := $M.26;
    goto corral_source_split_4422;

  $bb468:
    assume out_$i550 == 1;
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i550 := $eq.i32(out_$i549, 1);
    goto corral_source_split_4419;

  $bb467:
    assume {:verifier.code 0} true;
    out_$i549 := $M.30;
    goto corral_source_split_4418;

  $bb466:
    assume !(out_$i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    goto $bb467;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} out_vslice_dummy_var_100 := ti_ioctl(out_$p545, out_$i546, out_$i547);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i547 := $load.i64($M.18, in_$p9);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i546 := $load.i32($M.18, in_$p12);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$p545 := $M.26;
    goto corral_source_split_4412;

  $bb465:
    assume out_$i544 == 1;
    goto corral_source_split_4411;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i544 := $eq.i32(out_$i543, 4);
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i543 := $M.30;
    goto corral_source_split_4162;

  $bb360:
    assume out_$i430 == 1;
    goto corral_source_split_4161;

  $bb359:
    assume !(out_$i429 == 1);
    assume {:verifier.code 0} true;
    out_$i430 := $slt.i32(out_$i414, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb487:
    assume !(out_$i586 == 1);
    assume {:verifier.code 0} true;
    goto $bb488;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    goto $bb488;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_107 := ti_tiocmset(out_$p587, out_$i588, out_$i589);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i589 := $load.i32($M.18, in_$p11);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$i588 := $load.i32($M.18, in_$p10);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$p587 := $M.26;
    goto corral_source_split_4479;

  $bb486:
    assume out_$i586 == 1;
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i586 := $eq.i32(out_$i585, 2);
    goto corral_source_split_4476;

  $bb485:
    assume {:verifier.code 0} true;
    out_$i585 := $M.30;
    goto corral_source_split_4475;

  $bb484:
    assume !(out_$i580 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    goto $bb485;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4473;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_vslice_dummy_var_106 := ti_tiocmset(out_$p581, out_$i582, out_$i583);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i583 := $load.i32($M.18, in_$p11);
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    out_$i582 := $load.i32($M.18, in_$p10);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$p581 := $M.26;
    goto corral_source_split_4469;

  $bb483:
    assume out_$i580 == 1;
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i580 := $eq.i32(out_$i579, 3);
    goto corral_source_split_4466;

  $bb482:
    assume {:verifier.code 0} true;
    out_$i579 := $M.30;
    goto corral_source_split_4465;

  $bb481:
    assume !(out_$i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} out_vslice_dummy_var_105 := ti_tiocmset(out_$p575, out_$i576, out_$i577);
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    out_$i577 := $load.i32($M.18, in_$p11);
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    out_$i576 := $load.i32($M.18, in_$p10);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$p575 := $M.26;
    goto corral_source_split_4459;

  $bb480:
    assume out_$i574 == 1;
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i574 := $eq.i32(out_$i573, 1);
    goto corral_source_split_4456;

  $bb479:
    assume {:verifier.code 0} true;
    out_$i573 := $M.30;
    goto corral_source_split_4455;

  $bb478:
    assume !(out_$i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    goto $bb479;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4453;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} out_vslice_dummy_var_104 := ti_tiocmset(out_$p569, out_$i570, out_$i571);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$i571 := $load.i32($M.18, in_$p11);
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i570 := $load.i32($M.18, in_$p10);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$p569 := $M.26;
    goto corral_source_split_4449;

  $bb477:
    assume out_$i568 == 1;
    goto corral_source_split_4448;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i568 := $eq.i32(out_$i567, 4);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i567 := $M.30;
    goto corral_source_split_4166;

  $bb362:
    assume out_$i431 == 1;
    goto corral_source_split_4165;

  $bb361:
    assume !(out_$i430 == 1);
    assume {:verifier.code 0} true;
    out_$i431 := $slt.i32(out_$i414, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb499:
    assume !(out_$i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_vslice_dummy_var_111 := ti_write(out_$p611, out_$p612, in_$p21, out_$i613);
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    out_$i613 := $load.i32($M.18, in_$p8);
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    out_$p612 := $M.24;
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$p611 := $M.26;
    goto corral_source_split_4516;

  $bb498:
    assume out_$i610 == 1;
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$i610 := $eq.i32(out_$i609, 2);
    goto corral_source_split_4513;

  $bb497:
    assume {:verifier.code 0} true;
    out_$i609 := $M.30;
    goto corral_source_split_4512;

  $bb496:
    assume !(out_$i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_110 := ti_write(out_$p605, out_$p606, in_$p21, out_$i607);
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$i607 := $load.i32($M.18, in_$p8);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$p606 := $M.24;
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$p605 := $M.26;
    goto corral_source_split_4506;

  $bb495:
    assume out_$i604 == 1;
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$i604 := $eq.i32(out_$i603, 3);
    goto corral_source_split_4503;

  $bb494:
    assume {:verifier.code 0} true;
    out_$i603 := $M.30;
    goto corral_source_split_4502;

  $bb493:
    assume !(out_$i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb494;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_vslice_dummy_var_109 := ti_write(out_$p599, out_$p600, in_$p21, out_$i601);
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    out_$i601 := $load.i32($M.18, in_$p8);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$p600 := $M.24;
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$p599 := $M.26;
    goto corral_source_split_4496;

  $bb492:
    assume out_$i598 == 1;
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$i598 := $eq.i32(out_$i597, 1);
    goto corral_source_split_4493;

  $bb491:
    assume {:verifier.code 0} true;
    out_$i597 := $M.30;
    goto corral_source_split_4492;

  $bb490:
    assume !(out_$i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_vslice_dummy_var_108 := ti_write(out_$p593, out_$p594, in_$p21, out_$i595);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i595 := $load.i32($M.18, in_$p8);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$p594 := $M.24;
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$p593 := $M.26;
    goto corral_source_split_4486;

  $bb489:
    assume out_$i592 == 1;
    goto corral_source_split_4485;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i592 := $eq.i32(out_$i591, 4);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i591 := $M.30;
    goto corral_source_split_4170;

  $bb363:
    assume !(out_$i431 == 1);
    goto corral_source_split_4169;

  $bb511:
    assume !(out_$i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb512;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4553;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} out_vslice_dummy_var_115 := usb_serial_generic_tiocmiwait(out_$p632, out_$i633);
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    out_$i633 := $load.i64($M.18, in_$p7);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$p632 := $M.26;
    goto corral_source_split_4550;

  $bb510:
    assume out_$i631 == 1;
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$i631 := $eq.i32(out_$i630, 2);
    goto corral_source_split_4547;

  $bb509:
    assume {:verifier.code 0} true;
    out_$i630 := $M.30;
    goto corral_source_split_4546;

  $bb508:
    assume !(out_$i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb509;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} out_vslice_dummy_var_114 := usb_serial_generic_tiocmiwait(out_$p627, out_$i628);
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$i628 := $load.i64($M.18, in_$p7);
    goto corral_source_split_4542;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    out_$p627 := $M.26;
    goto corral_source_split_4541;

  $bb507:
    assume out_$i626 == 1;
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb507, $bb508;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    out_$i626 := $eq.i32(out_$i625, 3);
    goto corral_source_split_4538;

  $bb506:
    assume {:verifier.code 0} true;
    out_$i625 := $M.30;
    goto corral_source_split_4537;

  $bb505:
    assume !(out_$i621 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    goto $bb506;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} out_vslice_dummy_var_113 := usb_serial_generic_tiocmiwait(out_$p622, out_$i623);
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    out_$i623 := $load.i64($M.18, in_$p7);
    goto corral_source_split_4533;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    out_$p622 := $M.26;
    goto corral_source_split_4532;

  $bb504:
    assume out_$i621 == 1;
    goto corral_source_split_4531;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$i621 := $eq.i32(out_$i620, 1);
    goto corral_source_split_4529;

  $bb503:
    assume {:verifier.code 0} true;
    out_$i620 := $M.30;
    goto corral_source_split_4528;

  $bb502:
    assume !(out_$i616 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb503;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} out_vslice_dummy_var_112 := usb_serial_generic_tiocmiwait(out_$p617, out_$i618);
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$i618 := $load.i64($M.18, in_$p7);
    goto corral_source_split_4524;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    out_$p617 := $M.26;
    goto corral_source_split_4523;

  $bb501:
    assume out_$i616 == 1;
    goto corral_source_split_4522;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i616 := $eq.i32(out_$i615, 4);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i615 := $M.30;
    goto corral_source_split_4150;

  $bb352:
    assume out_$i426 == 1;
    goto corral_source_split_4149;

  $bb346:
    assume out_$i423 == 1;
    assume {:verifier.code 0} true;
    out_$i426 := $slt.i32(out_$i414, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb331:
    assume out_$i416 == 1;
    assume {:verifier.code 0} true;
    out_$i423 := $slt.i32(out_$i414, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb330:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    out_$i416 := $slt.i32(out_$i414, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb514:
    assume !(out_$i636 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb516:
    assume !(out_$i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4563;

  $bb515:
    assume out_$i640 == 1;
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i640 := $eq.i32(out_$i639, 0);
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    out_$i639 := $M.35;
    goto corral_source_split_4559;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.35 := out_$i638;
    call {:si_unique_call 973} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i638);
    goto corral_source_split_4558;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} out_$i638 := ti_startup(out_$p637);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$p637 := $M.25;
    goto corral_source_split_4556;

  $bb513:
    assume out_$i636 == 1;
    goto corral_source_split_4555;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i636 := $eq.i32(out_$i635, 2);
    goto corral_source_split_4155;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i635 := $M.30;
    goto corral_source_split_4154;

  $bb354:
    assume out_$i427 == 1;
    goto corral_source_split_4153;

  $bb353:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    out_$i427 := $slt.i32(out_$i414, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb529:
    assume !(out_$i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb530;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb530;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_vslice_dummy_var_119 := ti_tx_empty(out_$p655);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$p655 := $M.24;
    goto corral_source_split_4590;

  $bb528:
    assume out_$i654 == 1;
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$i654 := $eq.i32(out_$i653, 2);
    goto corral_source_split_4587;

  $bb527:
    assume {:verifier.code 0} true;
    out_$i653 := $M.30;
    goto corral_source_split_4586;

  $bb526:
    assume !(out_$i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb527;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    goto $bb527;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} out_vslice_dummy_var_118 := ti_tx_empty(out_$p651);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$p651 := $M.24;
    goto corral_source_split_4582;

  $bb525:
    assume out_$i650 == 1;
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$i650 := $eq.i32(out_$i649, 3);
    goto corral_source_split_4579;

  $bb524:
    assume {:verifier.code 0} true;
    out_$i649 := $M.30;
    goto corral_source_split_4578;

  $bb523:
    assume !(out_$i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb524;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb524;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_vslice_dummy_var_117 := ti_tx_empty(out_$p647);
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    out_$p647 := $M.24;
    goto corral_source_split_4574;

  $bb522:
    assume out_$i646 == 1;
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$i646 := $eq.i32(out_$i645, 1);
    goto corral_source_split_4571;

  $bb521:
    assume {:verifier.code 0} true;
    out_$i645 := $M.30;
    goto corral_source_split_4570;

  $bb520:
    assume !(out_$i642 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb521;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} out_vslice_dummy_var_116 := ti_tx_empty(out_$p643);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    out_$p643 := $M.24;
    goto corral_source_split_4566;

  $bb519:
    assume out_$i642 == 1;
    goto corral_source_split_4565;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$i642 := $eq.i32(out_$i641, 4);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$i641 := $M.30;
    goto corral_source_split_4158;

  $bb355:
    assume !(out_$i427 == 1);
    goto corral_source_split_4157;

  $bb532:
    assume !(out_$i658 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    goto $bb533;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} ti_interrupt_callback(out_$p659);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$p659 := $M.23;
    goto corral_source_split_4595;

  $bb531:
    assume out_$i658 == 1;
    goto corral_source_split_4594;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i658 := $eq.i32(out_$i657, 4);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$i657 := $M.30;
    goto corral_source_split_4138;

  $bb348:
    assume out_$i424 == 1;
    goto corral_source_split_4137;

  $bb347:
    assume !(out_$i423 == 1);
    assume {:verifier.code 0} true;
    out_$i424 := $slt.i32(out_$i414, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb535:
    assume !(out_$i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb536;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb536;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4602;

  SeqInstr_48:
    goto corral_source_split_4601;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} ti_close(out_$p662);
    goto SeqInstr_47;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$p662 := $M.24;
    goto corral_source_split_4600;

  $bb534:
    assume out_$i661 == 1;
    goto corral_source_split_4599;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$i661 := $eq.i32(out_$i660, 4);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$i660 := $M.30;
    goto corral_source_split_4142;

  $bb350:
    assume out_$i425 == 1;
    goto corral_source_split_4141;

  $bb349:
    assume !(out_$i424 == 1);
    assume {:verifier.code 0} true;
    out_$i425 := $slt.i32(out_$i414, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb547:
    assume !(out_$i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} out_vslice_dummy_var_123 := ti_write_room(out_$p677);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$p677 := $M.26;
    goto corral_source_split_4629;

  $bb546:
    assume out_$i676 == 1;
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$i676 := $eq.i32(out_$i675, 2);
    goto corral_source_split_4626;

  $bb545:
    assume {:verifier.code 0} true;
    out_$i675 := $M.30;
    goto corral_source_split_4625;

  $bb544:
    assume !(out_$i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} out_vslice_dummy_var_122 := ti_write_room(out_$p673);
    goto corral_source_split_4622;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$p673 := $M.26;
    goto corral_source_split_4621;

  $bb543:
    assume out_$i672 == 1;
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i672 := $eq.i32(out_$i671, 3);
    goto corral_source_split_4618;

  $bb542:
    assume {:verifier.code 0} true;
    out_$i671 := $M.30;
    goto corral_source_split_4617;

  $bb541:
    assume !(out_$i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb542;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} out_vslice_dummy_var_121 := ti_write_room(out_$p669);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$p669 := $M.26;
    goto corral_source_split_4613;

  $bb540:
    assume out_$i668 == 1;
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$i668 := $eq.i32(out_$i667, 1);
    goto corral_source_split_4610;

  $bb539:
    assume {:verifier.code 0} true;
    out_$i667 := $M.30;
    goto corral_source_split_4609;

  $bb538:
    assume !(out_$i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb539;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} out_vslice_dummy_var_120 := ti_write_room(out_$p665);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$p665 := $M.26;
    goto corral_source_split_4605;

  $bb537:
    assume out_$i664 == 1;
    goto corral_source_split_4604;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$i664 := $eq.i32(out_$i663, 4);
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    out_$i663 := $M.30;
    goto corral_source_split_4146;

  $bb351:
    assume !(out_$i425 == 1);
    goto corral_source_split_4145;

  $bb559:
    assume !(out_$i692 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb560;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4664;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} ti_break(out_$p693, out_$i694);
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$i694 := $load.i32($M.18, in_$p13);
    goto corral_source_split_4662;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$p693 := $M.26;
    goto corral_source_split_4661;

  $bb558:
    assume out_$i692 == 1;
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_$i692 := $eq.i32(out_$i691, 2);
    goto corral_source_split_4658;

  $bb557:
    assume {:verifier.code 0} true;
    out_$i691 := $M.30;
    goto corral_source_split_4657;

  $bb556:
    assume !(out_$i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb557;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ti_break(out_$p689, out_$i690);
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    out_$i690 := $load.i32($M.18, in_$p13);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    out_$p689 := $M.26;
    goto corral_source_split_4652;

  $bb555:
    assume out_$i688 == 1;
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$i688 := $eq.i32(out_$i687, 3);
    goto corral_source_split_4649;

  $bb554:
    assume {:verifier.code 0} true;
    out_$i687 := $M.30;
    goto corral_source_split_4648;

  $bb553:
    assume !(out_$i684 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb554;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 998} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ti_break(out_$p685, out_$i686);
    goto corral_source_split_4645;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    out_$i686 := $load.i32($M.18, in_$p13);
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    out_$p685 := $M.26;
    goto corral_source_split_4643;

  $bb552:
    assume out_$i684 == 1;
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$i684 := $eq.i32(out_$i683, 1);
    goto corral_source_split_4640;

  $bb551:
    assume {:verifier.code 0} true;
    out_$i683 := $M.30;
    goto corral_source_split_4639;

  $bb550:
    assume !(out_$i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 996} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ti_break(out_$p681, out_$i682);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$i682 := $load.i32($M.18, in_$p13);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$p681 := $M.26;
    goto corral_source_split_4634;

  $bb549:
    assume out_$i680 == 1;
    goto corral_source_split_4633;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$i680 := $eq.i32(out_$i679, 4);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i679 := $M.30;
    goto corral_source_split_4126;

  $bb342:
    assume out_$i421 == 1;
    goto corral_source_split_4125;

  $bb333:
    assume out_$i417 == 1;
    assume {:verifier.code 0} true;
    out_$i421 := $slt.i32(out_$i414, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb332:
    assume !(out_$i416 == 1);
    assume {:verifier.code 0} true;
    out_$i417 := $slt.i32(out_$i414, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb571:
    assume !(out_$i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb572;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb572;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} out_vslice_dummy_var_127 := ti_chars_in_buffer(out_$p709);
    goto corral_source_split_4692;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$p709 := $M.26;
    goto corral_source_split_4691;

  $bb570:
    assume out_$i708 == 1;
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb570, $bb571;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$i708 := $eq.i32(out_$i707, 2);
    goto corral_source_split_4688;

  $bb569:
    assume {:verifier.code 0} true;
    out_$i707 := $M.30;
    goto corral_source_split_4687;

  $bb568:
    assume !(out_$i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb569;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} out_vslice_dummy_var_126 := ti_chars_in_buffer(out_$p705);
    goto corral_source_split_4684;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$p705 := $M.26;
    goto corral_source_split_4683;

  $bb567:
    assume out_$i704 == 1;
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    out_$i704 := $eq.i32(out_$i703, 3);
    goto corral_source_split_4680;

  $bb566:
    assume {:verifier.code 0} true;
    out_$i703 := $M.30;
    goto corral_source_split_4679;

  $bb565:
    assume !(out_$i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb566;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} out_vslice_dummy_var_125 := ti_chars_in_buffer(out_$p701);
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$p701 := $M.26;
    goto corral_source_split_4675;

  $bb564:
    assume out_$i700 == 1;
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$i700 := $eq.i32(out_$i699, 1);
    goto corral_source_split_4672;

  $bb563:
    assume {:verifier.code 0} true;
    out_$i699 := $M.30;
    goto corral_source_split_4671;

  $bb562:
    assume !(out_$i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb563;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb563;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4669;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} out_vslice_dummy_var_124 := ti_chars_in_buffer(out_$p697);
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    out_$p697 := $M.26;
    goto corral_source_split_4667;

  $bb561:
    assume out_$i696 == 1;
    goto corral_source_split_4666;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb561, $bb562;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i696 := $eq.i32(out_$i695, 4);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i695 := $M.30;
    goto corral_source_split_4130;

  $bb344:
    assume out_$i422 == 1;
    goto corral_source_split_4129;

  $bb343:
    assume !(out_$i421 == 1);
    assume {:verifier.code 0} true;
    out_$i422 := $slt.i32(out_$i414, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb583:
    assume !(out_$i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb584;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} out_vslice_dummy_var_131 := ti_tiocmget(out_$p725);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$p725 := $M.26;
    goto corral_source_split_4720;

  $bb582:
    assume out_$i724 == 1;
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i724 := $eq.i32(out_$i723, 2);
    goto corral_source_split_4717;

  $bb581:
    assume {:verifier.code 0} true;
    out_$i723 := $M.30;
    goto corral_source_split_4716;

  $bb580:
    assume !(out_$i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb581;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} out_vslice_dummy_var_130 := ti_tiocmget(out_$p721);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    out_$p721 := $M.26;
    goto corral_source_split_4712;

  $bb579:
    assume out_$i720 == 1;
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$i720 := $eq.i32(out_$i719, 3);
    goto corral_source_split_4709;

  $bb578:
    assume {:verifier.code 0} true;
    out_$i719 := $M.30;
    goto corral_source_split_4708;

  $bb577:
    assume !(out_$i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb578;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb578;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} out_vslice_dummy_var_129 := ti_tiocmget(out_$p717);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$p717 := $M.26;
    goto corral_source_split_4704;

  $bb576:
    assume out_$i716 == 1;
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$i716 := $eq.i32(out_$i715, 1);
    goto corral_source_split_4701;

  $bb575:
    assume {:verifier.code 0} true;
    out_$i715 := $M.30;
    goto corral_source_split_4700;

  $bb574:
    assume !(out_$i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb575;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb575;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} out_vslice_dummy_var_128 := ti_tiocmget(out_$p713);
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$p713 := $M.26;
    goto corral_source_split_4696;

  $bb573:
    assume out_$i712 == 1;
    goto corral_source_split_4695;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i712 := $eq.i32(out_$i711, 4);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$i711 := $M.30;
    goto corral_source_split_4134;

  $bb345:
    assume !(out_$i422 == 1);
    goto corral_source_split_4133;

  $bb595:
    assume !(out_$i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb596;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb596;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ti_bulk_in_callback(out_$p738);
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    out_$p738 := $M.23;
    goto corral_source_split_4749;

  $bb594:
    assume out_$i737 == 1;
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$i737 := $eq.i32(out_$i736, 2);
    goto corral_source_split_4746;

  $bb593:
    assume {:verifier.code 0} true;
    out_$i736 := $M.30;
    goto corral_source_split_4745;

  $bb592:
    assume !(out_$i734 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb593;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} ti_bulk_in_callback(out_$p735);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$p735 := $M.23;
    goto corral_source_split_4741;

  $bb591:
    assume out_$i734 == 1;
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$i734 := $eq.i32(out_$i733, 3);
    goto corral_source_split_4738;

  $bb590:
    assume {:verifier.code 0} true;
    out_$i733 := $M.30;
    goto corral_source_split_4737;

  $bb589:
    assume !(out_$i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb590;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ti_bulk_in_callback(out_$p732);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$p732 := $M.23;
    goto corral_source_split_4733;

  $bb588:
    assume out_$i731 == 1;
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    out_$i731 := $eq.i32(out_$i730, 1);
    goto corral_source_split_4730;

  $bb587:
    assume {:verifier.code 0} true;
    out_$i730 := $M.30;
    goto corral_source_split_4729;

  $bb586:
    assume !(out_$i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    goto $bb587;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ti_bulk_in_callback(out_$p729);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$p729 := $M.23;
    goto corral_source_split_4725;

  $bb585:
    assume out_$i728 == 1;
    goto corral_source_split_4724;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb585, $bb586;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    out_$i728 := $eq.i32(out_$i727, 4);
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i727 := $M.30;
    goto corral_source_split_4114;

  $bb335:
    assume out_$i418 == 1;
    goto corral_source_split_4113;

  $bb334:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    out_$i418 := $slt.i32(out_$i414, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb601:
    assume !(out_$i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb602;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    goto $bb602;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4762;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} out_vslice_dummy_var_133 := ldv_detach_2();
    goto corral_source_split_4761;

  $bb600:
    assume out_$i743 == 1;
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    out_$i743 := $eq.i32(out_$i742, 3);
    goto corral_source_split_4758;

  $bb599:
    assume {:verifier.code 0} true;
    out_$i742 := $M.30;
    goto corral_source_split_4757;

  $bb598:
    assume !(out_$i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    goto $bb599;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1028} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} out_vslice_dummy_var_132 := ldv_detach_2();
    goto corral_source_split_4754;

  $bb597:
    assume out_$i740 == 1;
    goto corral_source_split_4753;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i740 := $eq.i32(out_$i739, 4);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i739 := $M.30;
    goto corral_source_split_4118;

  $bb337:
    assume out_$i419 == 1;
    goto corral_source_split_4117;

  $bb336:
    assume !(out_$i418 == 1);
    assume {:verifier.code 0} true;
    out_$i419 := $slt.i32(out_$i414, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb604:
    assume !(out_$i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb605;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    goto $bb605;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.28 := out_$i749;
    call {:si_unique_call 1033} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i749);
    goto corral_source_split_4769;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    out_$i749 := $add.i32(out_$i748, 1);
    goto corral_source_split_4768;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$i748 := $M.28;
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4766;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} out_vslice_dummy_var_134 := ldv_probe_2();
    goto corral_source_split_4765;

  $bb603:
    assume out_$i746 == 1;
    goto corral_source_split_4764;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$i746 := $eq.i32(out_$i745, 1);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$i745 := $M.30;
    goto corral_source_split_4122;

  $bb339:
    assume out_$i420 == 1;
    goto corral_source_split_4121;

  $bb338:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    out_$i420 := $eq.i32(out_$i414, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_stop();
    goto corral_source_split_4771;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb340:
    assume {:verifier.code 0} true;
    assume !(out_$i420 == 1);
    goto $bb341;

  $bb379:
    assume {:verifier.code 0} true;
    assume !(out_$i439 == 1);
    goto $bb341;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_stop();
    goto corral_source_split_4773;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb9;

  $bb295_dummy:
    call {:si_unique_call 1} out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$i179, out_$i180, out_$p181, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i236, out_$i237, out_$p238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$p257, out_$i258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i270, out_$i271, out_$p272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$i320, out_$i321, out_$p322, out_$i324, out_$i325, out_$p326, out_$i327, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$p338, out_$i339, out_$i340, out_$i341, out_$p342, out_$i344, out_$i345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i387, out_$i388, out_$i390, out_$i391, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$p445, out_$i446, out_$i447, out_$p448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$p454, out_$i456, out_$i457, out_$p458, out_$i460, out_$i461, out_$p462, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$p474, out_$i476, out_$i477, out_$p478, out_$i480, out_$i481, out_$p482, out_$i484, out_$i485, out_$p486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$p493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$p499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i508, out_$p509, out_$p510, out_$i511, out_$i512, out_$p513, out_$p514, out_$i515, out_$i516, out_$p517, out_$p518, out_$i519, out_$i520, out_$p521, out_$i523, out_$i524, out_$p525, out_$i527, out_$i528, out_$p529, out_$i531, out_$i532, out_$p533, out_$i535, out_$i536, out_$p537, out_$i538, out_$i539, out_$p540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i546, out_$i547, out_$i549, out_$i550, out_$p551, out_$i552, out_$i553, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$i561, out_$i562, out_$p563, out_$i564, out_$i565, out_$i567, out_$i568, out_$p569, out_$i570, out_$i571, out_$i573, out_$i574, out_$p575, out_$i576, out_$i577, out_$i579, out_$i580, out_$p581, out_$i582, out_$i583, out_$i585, out_$i586, out_$p587, out_$i588, out_$i589, out_$i591, out_$i592, out_$p593, out_$p594, out_$i595, out_$i597, out_$i598, out_$p599, out_$p600, out_$i601, out_$i603, out_$i604, out_$p605, out_$p606, out_$i607, out_$i609, out_$i610, out_$p611, out_$p612, out_$i613, out_$i615, out_$i616, out_$p617, out_$i618, out_$i620, out_$i621, out_$p622, out_$i623, out_$i625, out_$i626, out_$p627, out_$i628, out_$i630, out_$i631, out_$p632, out_$i633, out_$i635, out_$i636, out_$p637, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$p643, out_$i645, out_$i646, out_$p647, out_$i649, out_$i650, out_$p651, out_$i653, out_$i654, out_$p655, out_$i657, out_$i658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$p665, out_$i667, out_$i668, out_$p669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$i687, out_$i688, out_$p689, out_$i690, out_$i691, out_$i692, out_$p693, out_$i694, out_$i695, out_$i696, out_$p697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$i715, out_$i716, out_$p717, out_$i719, out_$i720, out_$p721, out_$i723, out_$i724, out_$p725, out_$i727, out_$i728, out_$p729, out_$i730, out_$i731, out_$p732, out_$i733, out_$i734, out_$p735, out_$i736, out_$i737, out_$p738, out_$i739, out_$i740, out_$i742, out_$i743, out_$i745, out_$i746, out_$i748, out_$i749, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p16, in_$p18, in_$p20, in_$p21, in_$p23, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$i179, out_$i180, out_$p181, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i236, out_$i237, out_$p238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$p257, out_$i258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i270, out_$i271, out_$p272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$p288, out_$i289, out_$i290, out_$p291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$i320, out_$i321, out_$p322, out_$i324, out_$i325, out_$p326, out_$i327, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$p338, out_$i339, out_$i340, out_$i341, out_$p342, out_$i344, out_$i345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i387, out_$i388, out_$i390, out_$i391, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$p445, out_$i446, out_$i447, out_$p448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$p454, out_$i456, out_$i457, out_$p458, out_$i460, out_$i461, out_$p462, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$p474, out_$i476, out_$i477, out_$p478, out_$i480, out_$i481, out_$p482, out_$i484, out_$i485, out_$p486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$p493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$p499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i508, out_$p509, out_$p510, out_$i511, out_$i512, out_$p513, out_$p514, out_$i515, out_$i516, out_$p517, out_$p518, out_$i519, out_$i520, out_$p521, out_$i523, out_$i524, out_$p525, out_$i527, out_$i528, out_$p529, out_$i531, out_$i532, out_$p533, out_$i535, out_$i536, out_$p537, out_$i538, out_$i539, out_$p540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i546, out_$i547, out_$i549, out_$i550, out_$p551, out_$i552, out_$i553, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$i561, out_$i562, out_$p563, out_$i564, out_$i565, out_$i567, out_$i568, out_$p569, out_$i570, out_$i571, out_$i573, out_$i574, out_$p575, out_$i576, out_$i577, out_$i579, out_$i580, out_$p581, out_$i582, out_$i583, out_$i585, out_$i586, out_$p587, out_$i588, out_$i589, out_$i591, out_$i592, out_$p593, out_$p594, out_$i595, out_$i597, out_$i598, out_$p599, out_$p600, out_$i601, out_$i603, out_$i604, out_$p605, out_$p606, out_$i607, out_$i609, out_$i610, out_$p611, out_$p612, out_$i613, out_$i615, out_$i616, out_$p617, out_$i618, out_$i620, out_$i621, out_$p622, out_$i623, out_$i625, out_$i626, out_$p627, out_$i628, out_$i630, out_$i631, out_$p632, out_$i633, out_$i635, out_$i636, out_$p637, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$p643, out_$i645, out_$i646, out_$p647, out_$i649, out_$i650, out_$p651, out_$i653, out_$i654, out_$p655, out_$i657, out_$i658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$p665, out_$i667, out_$i668, out_$p669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$i687, out_$i688, out_$p689, out_$i690, out_$i691, out_$i692, out_$p693, out_$i694, out_$i695, out_$i696, out_$p697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$i715, out_$i716, out_$p717, out_$i719, out_$i720, out_$p721, out_$i723, out_$i724, out_$p725, out_$i727, out_$i728, out_$p729, out_$i730, out_$i731, out_$p732, out_$i733, out_$i734, out_$p735, out_$i736, out_$i737, out_$p738, out_$i739, out_$i740, out_$i742, out_$i743, out_$i745, out_$i746, out_$i748, out_$i749, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i52: i32, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i64, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i32, in_$i198: i64, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i204: i64, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i64, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i234: i32, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$p239: ref, in_$i240: i32, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$p257: ref, in_$i258: i32, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i64, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i64, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i64, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i278: i64, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i320: i32, in_$i321: i1, in_$p322: ref, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i327: i32, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i32, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i335: i32, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$i339: i32, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$i344: i32, in_$i345: i1, in_$p346: ref, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i1, in_$i387: i32, in_$i388: i1, in_$i390: i32, in_$i391: i1, in_$i393: i32, in_$i394: i32, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i1, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i1, in_$i407: i32, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$i411: i1, in_$i412: i32, in_$i413: i1, in_$i414: i32, in_$i415: i1, in_$i416: i1, in_$i417: i1, in_$i418: i1, in_$i419: i1, in_$i420: i1, in_$i421: i1, in_$i422: i1, in_$i423: i1, in_$i424: i1, in_$i425: i1, in_$i426: i1, in_$i427: i1, in_$i428: i1, in_$i429: i1, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i1, in_$i434: i1, in_$i435: i1, in_$i436: i1, in_$i437: i1, in_$i438: i1, in_$i439: i1, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i443: i32, in_$i444: i1, in_$p445: ref, in_$i446: i32, in_$i447: i1, in_$p448: ref, in_$i449: i32, in_$i450: i1, in_$p451: ref, in_$i452: i32, in_$i453: i1, in_$p454: ref, in_$i456: i32, in_$i457: i1, in_$p458: ref, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$i464: i32, in_$i465: i1, in_$p466: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$i476: i32, in_$i477: i1, in_$p478: ref, in_$i480: i32, in_$i481: i1, in_$p482: ref, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$p487: ref, in_$i488: i32, in_$i489: i32, in_$i490: i1, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$i497: i32, in_$i498: i1, in_$p499: ref, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$p506: ref, in_$i507: i32, in_$i508: i1, in_$p509: ref, in_$p510: ref, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$p514: ref, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$p518: ref, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i523: i32, in_$i524: i1, in_$p525: ref, in_$i527: i32, in_$i528: i1, in_$p529: ref, in_$i531: i32, in_$i532: i1, in_$p533: ref, in_$i535: i32, in_$i536: i1, in_$p537: ref, in_$i538: i32, in_$i539: i1, in_$p540: ref, in_$i541: i32, in_$i542: i32, in_$i543: i32, in_$i544: i1, in_$p545: ref, in_$i546: i32, in_$i547: i64, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i552: i32, in_$i553: i64, in_$i555: i32, in_$i556: i1, in_$p557: ref, in_$i558: i32, in_$i559: i64, in_$i561: i32, in_$i562: i1, in_$p563: ref, in_$i564: i32, in_$i565: i64, in_$i567: i32, in_$i568: i1, in_$p569: ref, in_$i570: i32, in_$i571: i32, in_$i573: i32, in_$i574: i1, in_$p575: ref, in_$i576: i32, in_$i577: i32, in_$i579: i32, in_$i580: i1, in_$p581: ref, in_$i582: i32, in_$i583: i32, in_$i585: i32, in_$i586: i1, in_$p587: ref, in_$i588: i32, in_$i589: i32, in_$i591: i32, in_$i592: i1, in_$p593: ref, in_$p594: ref, in_$i595: i32, in_$i597: i32, in_$i598: i1, in_$p599: ref, in_$p600: ref, in_$i601: i32, in_$i603: i32, in_$i604: i1, in_$p605: ref, in_$p606: ref, in_$i607: i32, in_$i609: i32, in_$i610: i1, in_$p611: ref, in_$p612: ref, in_$i613: i32, in_$i615: i32, in_$i616: i1, in_$p617: ref, in_$i618: i64, in_$i620: i32, in_$i621: i1, in_$p622: ref, in_$i623: i64, in_$i625: i32, in_$i626: i1, in_$p627: ref, in_$i628: i64, in_$i630: i32, in_$i631: i1, in_$p632: ref, in_$i633: i64, in_$i635: i32, in_$i636: i1, in_$p637: ref, in_$i638: i32, in_$i639: i32, in_$i640: i1, in_$i641: i32, in_$i642: i1, in_$p643: ref, in_$i645: i32, in_$i646: i1, in_$p647: ref, in_$i649: i32, in_$i650: i1, in_$p651: ref, in_$i653: i32, in_$i654: i1, in_$p655: ref, in_$i657: i32, in_$i658: i1, in_$p659: ref, in_$i660: i32, in_$i661: i1, in_$p662: ref, in_$i663: i32, in_$i664: i1, in_$p665: ref, in_$i667: i32, in_$i668: i1, in_$p669: ref, in_$i671: i32, in_$i672: i1, in_$p673: ref, in_$i675: i32, in_$i676: i1, in_$p677: ref, in_$i679: i32, in_$i680: i1, in_$p681: ref, in_$i682: i32, in_$i683: i32, in_$i684: i1, in_$p685: ref, in_$i686: i32, in_$i687: i32, in_$i688: i1, in_$p689: ref, in_$i690: i32, in_$i691: i32, in_$i692: i1, in_$p693: ref, in_$i694: i32, in_$i695: i32, in_$i696: i1, in_$p697: ref, in_$i699: i32, in_$i700: i1, in_$p701: ref, in_$i703: i32, in_$i704: i1, in_$p705: ref, in_$i707: i32, in_$i708: i1, in_$p709: ref, in_$i711: i32, in_$i712: i1, in_$p713: ref, in_$i715: i32, in_$i716: i1, in_$p717: ref, in_$i719: i32, in_$i720: i1, in_$p721: ref, in_$i723: i32, in_$i724: i1, in_$p725: ref, in_$i727: i32, in_$i728: i1, in_$p729: ref, in_$i730: i32, in_$i731: i1, in_$p732: ref, in_$i733: i32, in_$i734: i1, in_$p735: ref, in_$i736: i32, in_$i737: i1, in_$p738: ref, in_$i739: i32, in_$i740: i1, in_$i742: i32, in_$i743: i1, in_$i745: i32, in_$i746: i1, in_$i748: i32, in_$i749: i32, in_vslice_dummy_var_41: i32, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i32, in_vslice_dummy_var_44: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i1, in_vslice_dummy_var_70: i1, in_vslice_dummy_var_71: i1, in_vslice_dummy_var_72: i1, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i1, in_vslice_dummy_var_117: i1, in_vslice_dummy_var_118: i1, in_vslice_dummy_var_119: i1, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32) returns (out_$i52: i32, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i64, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i32, out_$i198: i64, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i204: i64, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i64, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i234: i32, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$p239: ref, out_$i240: i32, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$p257: ref, out_$i258: i32, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i64, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i64, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i64, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i278: i64, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i320: i32, out_$i321: i1, out_$p322: ref, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i327: i32, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i32, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i335: i32, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$i339: i32, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$i344: i32, out_$i345: i1, out_$p346: ref, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i1, out_$i387: i32, out_$i388: i1, out_$i390: i32, out_$i391: i1, out_$i393: i32, out_$i394: i32, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i1, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i1, out_$i407: i32, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$i411: i1, out_$i412: i32, out_$i413: i1, out_$i414: i32, out_$i415: i1, out_$i416: i1, out_$i417: i1, out_$i418: i1, out_$i419: i1, out_$i420: i1, out_$i421: i1, out_$i422: i1, out_$i423: i1, out_$i424: i1, out_$i425: i1, out_$i426: i1, out_$i427: i1, out_$i428: i1, out_$i429: i1, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i1, out_$i434: i1, out_$i435: i1, out_$i436: i1, out_$i437: i1, out_$i438: i1, out_$i439: i1, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i443: i32, out_$i444: i1, out_$p445: ref, out_$i446: i32, out_$i447: i1, out_$p448: ref, out_$i449: i32, out_$i450: i1, out_$p451: ref, out_$i452: i32, out_$i453: i1, out_$p454: ref, out_$i456: i32, out_$i457: i1, out_$p458: ref, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$i464: i32, out_$i465: i1, out_$p466: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$i476: i32, out_$i477: i1, out_$p478: ref, out_$i480: i32, out_$i481: i1, out_$p482: ref, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$p487: ref, out_$i488: i32, out_$i489: i32, out_$i490: i1, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$i497: i32, out_$i498: i1, out_$p499: ref, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$p506: ref, out_$i507: i32, out_$i508: i1, out_$p509: ref, out_$p510: ref, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$p514: ref, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$p518: ref, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i523: i32, out_$i524: i1, out_$p525: ref, out_$i527: i32, out_$i528: i1, out_$p529: ref, out_$i531: i32, out_$i532: i1, out_$p533: ref, out_$i535: i32, out_$i536: i1, out_$p537: ref, out_$i538: i32, out_$i539: i1, out_$p540: ref, out_$i541: i32, out_$i542: i32, out_$i543: i32, out_$i544: i1, out_$p545: ref, out_$i546: i32, out_$i547: i64, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i552: i32, out_$i553: i64, out_$i555: i32, out_$i556: i1, out_$p557: ref, out_$i558: i32, out_$i559: i64, out_$i561: i32, out_$i562: i1, out_$p563: ref, out_$i564: i32, out_$i565: i64, out_$i567: i32, out_$i568: i1, out_$p569: ref, out_$i570: i32, out_$i571: i32, out_$i573: i32, out_$i574: i1, out_$p575: ref, out_$i576: i32, out_$i577: i32, out_$i579: i32, out_$i580: i1, out_$p581: ref, out_$i582: i32, out_$i583: i32, out_$i585: i32, out_$i586: i1, out_$p587: ref, out_$i588: i32, out_$i589: i32, out_$i591: i32, out_$i592: i1, out_$p593: ref, out_$p594: ref, out_$i595: i32, out_$i597: i32, out_$i598: i1, out_$p599: ref, out_$p600: ref, out_$i601: i32, out_$i603: i32, out_$i604: i1, out_$p605: ref, out_$p606: ref, out_$i607: i32, out_$i609: i32, out_$i610: i1, out_$p611: ref, out_$p612: ref, out_$i613: i32, out_$i615: i32, out_$i616: i1, out_$p617: ref, out_$i618: i64, out_$i620: i32, out_$i621: i1, out_$p622: ref, out_$i623: i64, out_$i625: i32, out_$i626: i1, out_$p627: ref, out_$i628: i64, out_$i630: i32, out_$i631: i1, out_$p632: ref, out_$i633: i64, out_$i635: i32, out_$i636: i1, out_$p637: ref, out_$i638: i32, out_$i639: i32, out_$i640: i1, out_$i641: i32, out_$i642: i1, out_$p643: ref, out_$i645: i32, out_$i646: i1, out_$p647: ref, out_$i649: i32, out_$i650: i1, out_$p651: ref, out_$i653: i32, out_$i654: i1, out_$p655: ref, out_$i657: i32, out_$i658: i1, out_$p659: ref, out_$i660: i32, out_$i661: i1, out_$p662: ref, out_$i663: i32, out_$i664: i1, out_$p665: ref, out_$i667: i32, out_$i668: i1, out_$p669: ref, out_$i671: i32, out_$i672: i1, out_$p673: ref, out_$i675: i32, out_$i676: i1, out_$p677: ref, out_$i679: i32, out_$i680: i1, out_$p681: ref, out_$i682: i32, out_$i683: i32, out_$i684: i1, out_$p685: ref, out_$i686: i32, out_$i687: i32, out_$i688: i1, out_$p689: ref, out_$i690: i32, out_$i691: i32, out_$i692: i1, out_$p693: ref, out_$i694: i32, out_$i695: i32, out_$i696: i1, out_$p697: ref, out_$i699: i32, out_$i700: i1, out_$p701: ref, out_$i703: i32, out_$i704: i1, out_$p705: ref, out_$i707: i32, out_$i708: i1, out_$p709: ref, out_$i711: i32, out_$i712: i1, out_$p713: ref, out_$i715: i32, out_$i716: i1, out_$p717: ref, out_$i719: i32, out_$i720: i1, out_$p721: ref, out_$i723: i32, out_$i724: i1, out_$p725: ref, out_$i727: i32, out_$i728: i1, out_$p729: ref, out_$i730: i32, out_$i731: i1, out_$p732: ref, out_$i733: i32, out_$i734: i1, out_$p735: ref, out_$i736: i32, out_$i737: i1, out_$p738: ref, out_$i739: i32, out_$i740: i1, out_$i742: i32, out_$i743: i1, out_$i745: i32, out_$i746: i1, out_$i748: i32, out_$i749: i32, out_vslice_dummy_var_41: i32, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i32, out_vslice_dummy_var_44: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i1, out_vslice_dummy_var_70: i1, out_vslice_dummy_var_71: i1, out_vslice_dummy_var_72: i1, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i1, out_vslice_dummy_var_117: i1, out_vslice_dummy_var_118: i1, out_vslice_dummy_var_119: i1, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32);
  modifies $M.27, $M.0, $CurrAddr, $M.31, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.12, assertsPassed, $M.28, $M.11, $M.32, $M.13, $M.9, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.30, $M.29, $M.33, $M.34, $M.35;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


