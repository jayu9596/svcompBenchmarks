var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: [ref]i64;

var $M.6: [ref]i32;

var $M.7: [ref]i32;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]i8;

var $M.11: [ref]i32;

var $M.12: [ref]i8;

var $M.13: [ref]i64;

var $M.14: [ref]i64;

var $M.15: [ref]i32;

var $M.16: [ref]i32;

var $M.22: [ref]i8;

var $M.23: [ref]i32;

var $M.34: [ref]i32;

var $M.38: [ref]i32;

var $M.53: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.73: [ref]i8;

var $M.74: [ref]i8;

var $M.75: [ref]i16;

var $M.89: [ref]i32;

var $M.90: [ref]i32;

var $M.95: [ref]i64;

var $M.96: [ref]i8;

var $M.97: [ref]i8;

var $M.98: [ref]i8;

var $M.99: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 578583);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const debug_mode: ref;

axiom debug_mode == $sub.ref(0, 2056);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 3104);

const firmware_name: ref;

axiom firmware_name == $sub.ref(0, 4136);

const pd_device_list: ref;

axiom pd_device_list == $sub.ref(0, 5176);

const pm_notifer: ref;

axiom pm_notifer == $sub.ref(0, 6224);

const {:count 3} id_table: ref;

axiom id_table == $sub.ref(0, 7320);

const poseidon_driver: ref;

axiom poseidon_driver == $sub.ref(0, 8632);

const {:count 3} preemphasis: ref;

axiom preemphasis == $sub.ref(0, 9668);

const poseidon_fm_ioctl_ops: ref;

axiom poseidon_fm_ioctl_ops == $sub.ref(0, 11476);

const poseidon_fm_fops: ref;

axiom poseidon_fm_fops == $sub.ref(0, 12572);

const poseidon_fm_template: ref;

axiom poseidon_fm_template == $sub.ref(0, 14924);

const dvb_bandwidth_length: ref;

axiom dvb_bandwidth_length == $sub.ref(0, 15952);

const {:count 3} dvb_bandwidth: ref;

axiom dvb_bandwidth == $sub.ref(0, 17000);

const poseidon_frontend_ops: ref;

axiom poseidon_frontend_ops == $sub.ref(0, 18776);

const {:count 8} adapter_nr: ref;

axiom adapter_nr == $sub.ref(0, 19816);

const snd_pd_hw_capture: ref;

axiom snd_pd_hw_capture == $sub.ref(0, 20920);

const pcm_capture_ops: ref;

axiom pcm_capture_ops == $sub.ref(0, 22048);

const {:count 4} controls: ref;

axiom controls == $sub.ref(0, 23360);

const {:count 18} poseidon_tvnorms: ref;

axiom poseidon_tvnorms == $sub.ref(0, 24816);

const {:count 5} pd_audio_modes: ref;

axiom pd_audio_modes == $sub.ref(0, 25900);

const {:count 4} pd_inputs: ref;

axiom pd_inputs == $sub.ref(0, 26988);

const {:count 2} poseidon_formats: ref;

axiom poseidon_formats == $sub.ref(0, 28060);

const pd_video_qops: ref;

axiom pd_video_qops == $sub.ref(0, 29116);

const {:count 3} video_to_audio_map: ref;

axiom video_to_audio_map == $sub.ref(0, 30188);

const usb_transfer_mode: ref;

axiom usb_transfer_mode == $sub.ref(0, 31216);

const pd_video_ioctl_ops: ref;

axiom pd_video_ioctl_ops == $sub.ref(0, 33024);

const pd_video_fops: ref;

axiom pd_video_fops == $sub.ref(0, 34120);

const pd_video_template: ref;

axiom pd_video_template == $sub.ref(0, 36472);

const ldv_mutex_vb_lock_of_videobuf_queue: ref;

axiom ldv_mutex_vb_lock_of_videobuf_queue == $sub.ref(0, 37500);

const ldv_mutex_power_lock_of_snd_card: ref;

axiom ldv_mutex_power_lock_of_snd_card == $sub.ref(0, 38528);

const ldv_mutex_pm_mutex: ref;

axiom ldv_mutex_pm_mutex == $sub.ref(0, 39556);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 40584);

const ldv_mutex_lock_of_poseidon: ref;

axiom ldv_mutex_lock_of_poseidon == $sub.ref(0, 41612);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 30} .str.32: ref;

axiom .str.32 == $sub.ref(0, 42666);

const {:count 17} .str.33: ref;

axiom .str.33 == $sub.ref(0, 43707);

const {:count 32} .str.34: ref;

axiom .str.34 == $sub.ref(0, 44763);

const .str: ref;

axiom .str == $sub.ref(0, 45807);

const {:count 16} .str.16: ref;

axiom .str.16 == $sub.ref(0, 46847);

const {:count 26} .str.29: ref;

axiom .str.29 == $sub.ref(0, 47897);

const {:count 14} .str.30: ref;

axiom .str.30 == $sub.ref(0, 48935);

const {:count 29} .str.31: ref;

axiom .str.31 == $sub.ref(0, 49988);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 19} .str.58: ref;

axiom .str.58 == $sub.ref(0, 51031);

const {:count 15} .str.6: ref;

axiom .str.6 == $sub.ref(0, 52070);

const {:count 32} .str.64: ref;

axiom .str.64 == $sub.ref(0, 53126);

const {:count 15} .str.65: ref;

axiom .str.65 == $sub.ref(0, 54165);

const {:count 50} .str.66: ref;

axiom .str.66 == $sub.ref(0, 55239);

const {:count 23} .str.67: ref;

axiom .str.67 == $sub.ref(0, 56286);

const snd_pcm_link_rwlock: ref;

axiom snd_pcm_link_rwlock == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 22} .str.20: ref;

axiom .str.20 == $sub.ref(0, 57332);

const {:count 41} .str.27: ref;

axiom .str.27 == $sub.ref(0, 58397);

const {:count 13} .str.28: ref;

axiom .str.28 == $sub.ref(0, 59434);

const {:count 44} .str.25: ref;

axiom .str.25 == $sub.ref(0, 60502);

const {:count 18} .str.26: ref;

axiom .str.26 == $sub.ref(0, 61544);

const {:count 5} .str.24: ref;

axiom .str.24 == $sub.ref(0, 62573);

const {:count 44} .str.21: ref;

axiom .str.21 == $sub.ref(0, 63641);

const {:count 17} .str.22: ref;

axiom .str.22 == $sub.ref(0, 64682);

const {:count 43} .str.23: ref;

axiom .str.23 == $sub.ref(0, 65749);

const {:count 29} .str.56: ref;

axiom .str.56 == $sub.ref(0, 66802);

const {:count 8} .str.57: ref;

axiom .str.57 == $sub.ref(0, 67834);

const {:count 16} .str.5: ref;

axiom .str.5 == $sub.ref(0, 68874);

const {:count 15} .str.63: ref;

axiom .str.63 == $sub.ref(0, 69913);

const {:count 15} .str.54: ref;

axiom .str.54 == $sub.ref(0, 70952);

const {:count 29} .str.51: ref;

axiom .str.51 == $sub.ref(0, 72005);

const {:count 15} .str.52: ref;

axiom .str.52 == $sub.ref(0, 73044);

const {:count 17} .str.53: ref;

axiom .str.53 == $sub.ref(0, 74085);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 75122);

const {:count 15} .str.44: ref;

axiom .str.44 == $sub.ref(0, 76161);

const {:count 18} .str.49: ref;

axiom .str.49 == $sub.ref(0, 77203);

const {:count 13} .str.55: ref;

axiom .str.55 == $sub.ref(0, 78240);

const {:count 17} .str.62: ref;

axiom .str.62 == $sub.ref(0, 79281);

const {:count 16} .str.61: ref;

axiom .str.61 == $sub.ref(0, 80321);

const {:count 16} .str.60: ref;

axiom .str.60 == $sub.ref(0, 81361);

const {:count 15} .str.59: ref;

axiom .str.59 == $sub.ref(0, 82400);

const {:count 13} .str.42: ref;

axiom .str.42 == $sub.ref(0, 83437);

const {:count 17} .str.43: ref;

axiom .str.43 == $sub.ref(0, 84478);

const {:count 13} .str.39: ref;

axiom .str.39 == $sub.ref(0, 85515);

const {:count 16} .str.35: ref;

axiom .str.35 == $sub.ref(0, 86555);

const {:count 11} .str.36: ref;

axiom .str.36 == $sub.ref(0, 87590);

const {:count 18} .str.37: ref;

axiom .str.37 == $sub.ref(0, 88632);

const {:count 10} .str.38: ref;

axiom .str.38 == $sub.ref(0, 89666);

const {:count 29} .str.18: ref;

axiom .str.18 == $sub.ref(0, 90719);

const {:count 13} .str.19: ref;

axiom .str.19 == $sub.ref(0, 91756);

const {:count 8} .str.40: ref;

axiom .str.40 == $sub.ref(0, 92788);

const {:count 7} .str.41: ref;

axiom .str.41 == $sub.ref(0, 93819);

const {:count 11} .str.45: ref;

axiom .str.45 == $sub.ref(0, 94854);

const {:count 9} .str.46: ref;

axiom .str.46 == $sub.ref(0, 95887);

const {:count 10} .str.47: ref;

axiom .str.47 == $sub.ref(0, 96921);

const {:count 13} .str.48: ref;

axiom .str.48 == $sub.ref(0, 97958);

const {:count 44} .str.69: ref;

axiom .str.69 == $sub.ref(0, 99026);

const {:count 23} .str.70: ref;

axiom .str.70 == $sub.ref(0, 100073);

const {:count 23} .str.68: ref;

axiom .str.68 == $sub.ref(0, 101120);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 102169);

const {:count 19} .str.14: ref;

axiom .str.14 == $sub.ref(0, 103212);

const {:count 42} .str.78: ref;

axiom .str.78 == $sub.ref(0, 104278);

const {:count 21} .str.79: ref;

axiom .str.79 == $sub.ref(0, 105323);

const {:count 40} .str.80: ref;

axiom .str.80 == $sub.ref(0, 106387);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 30} .str.76: ref;

axiom .str.76 == $sub.ref(0, 107441);

const {:count 16} .str.77: ref;

axiom .str.77 == $sub.ref(0, 108481);

const {:count 40} .str.71: ref;

axiom .str.71 == $sub.ref(0, 109545);

const {:count 20} .str.72: ref;

axiom .str.72 == $sub.ref(0, 110589);

const {:count 5} .str.73: ref;

axiom .str.73 == $sub.ref(0, 111618);

const {:count 52} .str.74: ref;

axiom .str.74 == $sub.ref(0, 112694);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 113730);

const {:count 13} .str.85: ref;

axiom .str.85 == $sub.ref(0, 114767);

const {:count 14} .str.84: ref;

axiom .str.84 == $sub.ref(0, 115805);

const {:count 6} .str.83: ref;

axiom .str.83 == $sub.ref(0, 116835);

const {:count 11} .str.82: ref;

axiom .str.82 == $sub.ref(0, 117870);

const {:count 9} .str.86: ref;

axiom .str.86 == $sub.ref(0, 118903);

const {:count 29} .str.103: ref;

axiom .str.103 == $sub.ref(0, 119956);

const {:count 16} .str.104: ref;

axiom .str.104 == $sub.ref(0, 120996);

const {:count 32} .str.101: ref;

axiom .str.101 == $sub.ref(0, 122052);

const {:count 17} .str.102: ref;

axiom .str.102 == $sub.ref(0, 123093);

const {:count 20} .str.105: ref;

axiom .str.105 == $sub.ref(0, 124137);

const {:count 14} .str.1: ref;

axiom .str.1 == $sub.ref(0, 125175);

const {:count 15} .str.89: ref;

axiom .str.89 == $sub.ref(0, 126214);

const {:count 10} .str.90: ref;

axiom .str.90 == $sub.ref(0, 127248);

const {:count 6} .str.91: ref;

axiom .str.91 == $sub.ref(0, 128278);

const {:count 15} .str.92: ref;

axiom .str.92 == $sub.ref(0, 129317);

const {:count 19} .str.100: ref;

axiom .str.100 == $sub.ref(0, 130360);

const {:count 22} .str.15: ref;

axiom .str.15 == $sub.ref(0, 131406);

const {:count 9} .str.7: ref;

axiom .str.7 == $sub.ref(0, 132439);

const {:count 15} .str.8: ref;

axiom .str.8 == $sub.ref(0, 133478);

const {:count 23} .str.9: ref;

axiom .str.9 == $sub.ref(0, 134525);

const {:count 12} .str.10: ref;

axiom .str.10 == $sub.ref(0, 135561);

const {:count 15} .str.11: ref;

axiom .str.11 == $sub.ref(0, 136600);

const {:count 20} .str.12: ref;

axiom .str.12 == $sub.ref(0, 137644);

const {:count 46} .str.2: ref;

axiom .str.2 == $sub.ref(0, 138714);

const {:count 14} .str.3: ref;

axiom .str.3 == $sub.ref(0, 139752);

const {:count 59} .str.4: ref;

axiom .str.4 == $sub.ref(0, 140835);

const {:count 46} .str.97: ref;

axiom .str.97 == $sub.ref(0, 141905);

const {:count 6} .str.98: ref;

axiom .str.98 == $sub.ref(0, 142935);

const {:count 31} .str.99: ref;

axiom .str.99 == $sub.ref(0, 143990);

const {:count 37} .str.93: ref;

axiom .str.93 == $sub.ref(0, 145051);

const {:count 18} .str.94: ref;

axiom .str.94 == $sub.ref(0, 146093);

const {:count 41} .str.95: ref;

axiom .str.95 == $sub.ref(0, 147158);

const {:count 31} .str.87: ref;

axiom .str.87 == $sub.ref(0, 148213);

const {:count 18} .str.88: ref;

axiom .str.88 == $sub.ref(0, 149255);

const {:count 21} .str.96: ref;

axiom .str.96 == $sub.ref(0, 150300);

const {:count 14} .str.106: ref;

axiom .str.106 == $sub.ref(0, 151338);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 152370);

const {:count 3} .str.1.136: ref;

axiom .str.1.136 == $sub.ref(0, 153397);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 154435);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 155463);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 156495);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 157527);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const video_device_release: ref;

axiom video_device_release == $sub.ref(0, 158559);

procedure video_device_release($p0: ref);



const pd_video_read: ref;

axiom pd_video_read == $sub.ref(0, 159591);

procedure pd_video_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pd_video_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "pd_video_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(128, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2048);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i11 := videobuf_read_stream($p7, $p1, $i2, $p3, 0, $i10);
    call {:si_unique_call 2} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const pd_video_poll: ref;

axiom pd_video_poll == $sub.ref(0, 160623);

procedure pd_video_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pd_video_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i6 := videobuf_poll_stream($p0, $p5, $p1);
    call {:si_unique_call 4} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 161655);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);



const pd_video_mmap: ref;

axiom pd_video_mmap == $sub.ref(0, 162687);

procedure pd_video_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pd_video_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i6 := videobuf_mmap_mapper($p5, $p1);
    call {:si_unique_call 6} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pd_video_open: ref;

axiom pd_video_open == $sub.ref(0, 163719);

procedure pd_video_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $CurrAddr, assertsPassed;



implementation pd_video_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i21: i32;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p43: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i20: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i84: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: ref;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p2 := video_devdata($p0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p3 := video_get_drvdata($p2);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} ldv_mutex_lock_25($p5);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_42 := usb_autopm_get_interface($p7);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1328)), $mul.ref(1160, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 1328)), $mul.ref(1160, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_44 := printk.ref.ref.i32(.str.29, .str.30, 1504);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} usb_autopm_put_interface($p86);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} ldv_mutex_unlock_27($p87);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i84 := $i20;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 8);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb16;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p51 := kzalloc(736, 208);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 8);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p52, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 4);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(16, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p51);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 1);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p52, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p52, $mul.ref(0, 736)), $mul.ref(640, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p52);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} videobuf_queue_vmalloc_init($p68, pd_video_qops, $0.ref, $p69, 4, 1, 248, $p70, $0.ref);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p43 := $p51;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p3);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(632, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $0.ref);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(712, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} INIT_LIST_HEAD($p74);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(640, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_43 := spinlock_check($p75);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(640, 1)), $mul.ref(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} __raw_spin_lock_init($p79, .str.31, $p1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p43);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} kref_get($p82);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} ldv_mutex_unlock_26($p83);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb23;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb8;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p16 := kzalloc(736, 208);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $M.1;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(528, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} init_video_context($p24);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i25 := pd_video_checkmode($p4);
    call {:si_unique_call 17} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 1);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i36);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i39 := $M.2;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} set_debug_mode($p2, $i39);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p17, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p17, $mul.ref(0, 736)), $mul.ref(640, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p17);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} videobuf_queue_vmalloc_init($p40, pd_video_qops, $0.ref, $p41, 1, 4, 248, $p42, $0.ref);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p43 := $p16;
    goto $bb13;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p17);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} kfree($p27);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb8;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const pd_video_release: ref;

axiom pd_video_release == $sub.ref(0, 164751);

procedure pd_video_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, assertsPassed;



implementation pd_video_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i7 := $M.2;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $M.2;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 8);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} ldv_mutex_lock_28($p21);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 4);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} videobuf_stop($p55);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_49 := videobuf_mmap_free($p56);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} usb_autopm_put_interface($p59);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} ldv_mutex_unlock_29($p60);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p4);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} kfree($p61);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $0.ref);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_50 := kref_put($p63, poseidon_delete);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $sub.i32(0, 9));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(16, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i51, 1);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i52);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $sub.i32(0, 2));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_47 := usb_transfer_stop($p29);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} free_all_urb($p31);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_48 := send_set_req($p6, 68, 2, $p1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i36, 1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_46 := printk.ref.ref.i32(.str.34, .str.33, 1531);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_45 := printk.ref.ref.i32(.str.32, .str.33, 1531);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const printk: ref;

axiom printk == $sub.ref(0, 165783);

procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 42} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 43} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 44} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 45} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 1} true;
    call {:si_unique_call 46} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 47} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 48} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 49} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_28: ref;

axiom ldv_mutex_lock_28 == $sub.ref(0, 166815);

procedure ldv_mutex_lock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} mutex_lock($p0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const usb_transfer_stop: ref;

axiom usb_transfer_stop == $sub.ref(0, 167847);

procedure usb_transfer_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_transfer_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(192, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(176, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(192, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(1, 8));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(2, 8));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(3, 8));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(4, 8));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(5, 8));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(6, 8));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(7, 8));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_51 := send_set_req($p6, 68, 2, $p1);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(7, 8));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} usb_kill_urb($p72);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i61 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(6, 8));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} usb_kill_urb($p64);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i53 == 1;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(5, 8));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} usb_kill_urb($p56);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(4, 8));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} usb_kill_urb($p48);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(3, 8));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} usb_kill_urb($p40);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(2, 8));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} usb_kill_urb($p32);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(1, 8));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} usb_kill_urb($p24);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} usb_kill_urb($p15);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const free_all_urb: ref;

axiom free_all_urb == $sub.ref(0, 168879);

procedure free_all_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_all_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} free_all_urb_generic($p2, 8);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    return;
}



const send_set_req: ref;

axiom send_set_req == $sub.ref(0, 169911);

procedure send_set_req($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation send_set_req($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i1;
  var $i45: i16;
  var $i46: i32;
  var $i47: i16;
  var $i43: i16;
  var $i44: i16;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i41: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 64} {:cexpr "send_set_req:arg:cmdid"} boogie_si_record_i8($i1);
    call {:si_unique_call 65} {:cexpr "send_set_req:arg:param"} boogie_si_record_i32($i2);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(5, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(6, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(7, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(9, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(10, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(11, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(13, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(15, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(17, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(18, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(19, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(21, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(25, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(26, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(27, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(29, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(30, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(31, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 128);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} __const_udelay(4295000);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} __const_udelay(4295000);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} __const_udelay(4295000);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} __const_udelay(4295000);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} __const_udelay(4295000);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} __const_udelay(4295000);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} __const_udelay(4295000);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} __const_udelay(4295000);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} __const_udelay(4295000);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} __const_udelay(4295000);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} __const_udelay(4295000);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} __const_udelay(4295000);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} __const_udelay(4295000);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} __const_udelay(4295000);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} __const_udelay(4295000);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} __const_udelay(4295000);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} __const_udelay(4295000);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} __const_udelay(4295000);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} __const_udelay(4295000);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} __const_udelay(4295000);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} __const_udelay(4295000);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} __const_udelay(4295000);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __const_udelay(4295000);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} __const_udelay(4295000);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __const_udelay(4295000);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} __const_udelay(4295000);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} __const_udelay(4295000);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} __const_udelay(4295000);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} __const_udelay(4295000);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i2, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i2);
    call {:si_unique_call 68} {:cexpr "lower_16"} boogie_si_record_i16($i45);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i46 := $ashr.i32($i2, 16);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    call {:si_unique_call 69} {:cexpr "upper_16"} boogie_si_record_i16($i47);
    assume {:verifier.code 0} true;
    $i43, $i44 := $i45, $i47;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i50 := __create_pipe($p49, 0);
    call {:si_unique_call 71} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i50, $sub.i32(0, 2147483520));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i43);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i44);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p4);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i61 := usb_control_msg($p52, $i53, $i55, $sub.i8(0, 64), $i57, $i59, $p60, 4, 5000);
    call {:si_unique_call 73} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i62 == 1);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i63 := $ugt.i64(4, 63);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p3);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p4);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 75} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p66, $p67, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p3);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p4);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 74} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p64, $p65, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i62 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 6);
    goto $bb3;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i43, $i44 := 0, 0;
    goto $bb11;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 19);
    goto $bb3;
}



const videobuf_stop: ref;

axiom videobuf_stop == $sub.ref(0, 170943);

procedure videobuf_stop($p0: ref);
  free requires assertsPassed;



implementation videobuf_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_mmap_free: ref;

axiom videobuf_mmap_free == $sub.ref(0, 171975);

procedure videobuf_mmap_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_mmap_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_autopm_put_interface: ref;

axiom usb_autopm_put_interface == $sub.ref(0, 173007);

procedure usb_autopm_put_interface($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 174039);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} mutex_unlock($p0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 175071);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} free_($p0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    return;
}



const poseidon_delete: ref;

axiom poseidon_delete == $sub.ref(0, 176103);

procedure poseidon_delete($p0: ref);



const kref_put: ref;

axiom kref_put == $sub.ref(0, 177135);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 110} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 178167);

procedure list_del_init($p0: ref);



const pd_dvb_usb_device_cleanup: ref;

axiom pd_dvb_usb_device_cleanup == $sub.ref(0, 179199);

procedure pd_dvb_usb_device_cleanup($p0: ref);



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 180231);

procedure usb_put_dev($p0: ref);



const usb_put_intf: ref;

axiom usb_put_intf == $sub.ref(0, 181263);

procedure usb_put_intf($p0: ref);



const dvb_urb_cleanup: ref;

axiom dvb_urb_cleanup == $sub.ref(0, 182295);

procedure dvb_urb_cleanup($p0: ref);



const free_all_urb_generic: ref;

axiom free_all_urb_generic == $sub.ref(0, 183327);

procedure free_all_urb_generic($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation free_all_urb_generic($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} {:cexpr "free_all_urb_generic:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32(0, $i1);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21, $i3 := free_all_urb_generic_loop_$bb4($p0, $i1, $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21, $i3);
    goto $bb4_last;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 8));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i3, 1);
    call {:si_unique_call 114} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, $i1);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i20;
    goto $bb9_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} usb_free_coherent($p10, $i13, $p15, $i17);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} usb_free_urb($p6);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i3);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref($i18, 8));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_555;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 184359);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 116} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 185391);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 186423);

procedure __list_del_entry($p0: ref);



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 187455);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 188487);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 117} $free($p0);
    return;
}



const ldv_mutex_unlock_lock_of_poseidon: ref;

axiom ldv_mutex_unlock_lock_of_poseidon == $sub.ref(0, 189519);

procedure ldv_mutex_unlock_lock_of_poseidon($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_lock_of_poseidon($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 119} {:cexpr "ldv_mutex_lock_of_poseidon"} boogie_si_record_i32(1);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 190551);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 191583);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 120} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 192615);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 193647);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(0, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 194679);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 124} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 125} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 126} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 127} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 128} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 129} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 130} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 131} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 195711);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 196743);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_lock_of_poseidon: ref;

axiom ldv_mutex_lock_lock_of_poseidon == $sub.ref(0, 197775);

procedure ldv_mutex_lock_lock_of_poseidon($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_lock_of_poseidon($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} ldv_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 133} {:cexpr "ldv_mutex_lock_of_poseidon"} boogie_si_record_i32(2);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 198807);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    return;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 199839);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p1 := external_alloc();
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 200871);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(8, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_25: ref;

axiom ldv_mutex_lock_25 == $sub.ref(0, 201903);

procedure ldv_mutex_lock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} mutex_lock($p0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const usb_autopm_get_interface: ref;

axiom usb_autopm_get_interface == $sub.ref(0, 202935);

procedure usb_autopm_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 203967);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 141} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const init_video_context: ref;

axiom init_video_context == $sub.ref(0, 204999);

procedure init_video_context($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_video_context($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 32);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 720);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 576);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1448695129);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 4);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1440);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 829440);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 144} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p14, $p15, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    return;
}



const pd_video_checkmode: ref;

axiom pd_video_checkmode == $sub.ref(0, 206031);

procedure pd_video_checkmode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $CurrAddr;



implementation pd_video_checkmode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i16: i32;
  var vslice_dummy_var_52: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p2, 1);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p3 := get_current();
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.4, $p2);
    call {:si_unique_call 148} $i6 := devirtbounce(0, $p4, $i5, $p4);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p2, $i6);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_52 := schedule_timeout(125);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(528, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 1 else 2);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i14 := usb_set_interface($p9, 0, $i13);
    call {:si_unique_call 151} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i17 := set_tuner_mode($p0, 1);
    call {:si_unique_call 153} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i18 := send_set_req($p0, 19, 1, $p1);
    call {:si_unique_call 155} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $i17);
    call {:si_unique_call 156} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i20 := send_set_req($p0, 20, 32, $p1);
    call {:si_unique_call 158} {:cexpr "tmp___4"} boogie_si_record_i32($i20);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $i19);
    call {:si_unique_call 159} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i22 := send_set_req($p0, 21, 1, $p1);
    call {:si_unique_call 161} {:cexpr "tmp___5"} boogie_si_record_i32($i22);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $i21);
    call {:si_unique_call 162} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i24 := send_set_req($p0, 23, 1, $p1);
    call {:si_unique_call 164} {:cexpr "tmp___6"} boogie_si_record_i32($i24);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $i23);
    call {:si_unique_call 165} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i26 := send_set_req($p0, 18, 45000000, $p1);
    call {:si_unique_call 167} {:cexpr "tmp___7"} boogie_si_record_i32($i26);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $i25);
    call {:si_unique_call 168} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i28 := send_set_req($p0, 37, 1, $p1);
    call {:si_unique_call 170} {:cexpr "tmp___8"} boogie_si_record_i32($i28);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, $i27);
    call {:si_unique_call 171} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i34 := get_audio_std($i33);
    call {:si_unique_call 173} {:cexpr "audiomode"} boogie_si_record_i32($i34);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i35 := send_set_req($p0, 44, $i34, $p1);
    call {:si_unique_call 175} {:cexpr "tmp___9"} boogie_si_record_i32($i35);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, $i29);
    call {:si_unique_call 176} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i37 := send_set_req($p0, 42, 2, $p1);
    call {:si_unique_call 178} {:cexpr "tmp___10"} boogie_si_record_i32($i37);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, $i36);
    call {:si_unique_call 179} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i39 := send_set_req($p0, 41, 2, $p1);
    call {:si_unique_call 181} {:cexpr "tmp___11"} boogie_si_record_i32($i39);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, $i38);
    call {:si_unique_call 182} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i16 := $i40;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb2:
    assume $i15 == 1;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb4;
}



const set_debug_mode: ref;

axiom set_debug_mode == $sub.ref(0, 207063);

procedure set_debug_mode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_debug_mode($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} {:cexpr "set_debug_mode:arg:debug_mode___0"} boogie_si_record_i32($i1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(1280, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 2);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(1280, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 3);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(1280, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const videobuf_queue_vmalloc_init: ref;

axiom videobuf_queue_vmalloc_init == $sub.ref(0, 208095);

procedure videobuf_queue_vmalloc_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref);
  free requires assertsPassed;



implementation videobuf_queue_vmalloc_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} {:cexpr "videobuf_queue_vmalloc_init:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 185} {:cexpr "videobuf_queue_vmalloc_init:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 186} {:cexpr "videobuf_queue_vmalloc_init:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 209127);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 210159);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 211191);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_26: ref;

axiom ldv_mutex_unlock_26 == $sub.ref(0, 212223);

procedure ldv_mutex_unlock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} mutex_unlock($p0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 213255);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} mutex_unlock($p0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 214287);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p0 := devirtbounce.1(0, current_task);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 215319);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 192} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 193} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 194} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 216351);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 195} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 196} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 197} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const set_tuner_mode: ref;

axiom set_tuner_mode == $sub.ref(0, 217383);

procedure set_tuner_mode($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_tuner_mode($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 200} {:cexpr "set_tuner_mode:arg:mode"} boogie_si_record_i8($i1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 128);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i9 := send_set_req($p0, 17, $i8, $p2);
    call {:si_unique_call 202} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p2);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 6);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const get_audio_std: ref;

axiom get_audio_std == $sub.ref(0, 218415);

procedure get_audio_std($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation get_audio_std($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} {:cexpr "get_audio_std:arg:v4l2_std"} boogie_si_record_i64($i0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $and.i64(4325425, $i0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9 := $and.i64(4864, $i0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i3 := 1;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i11 := $and.i64(8192, $i0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i3 := 2;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref($i4, 16)), $mul.ref(8, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb4;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 219447);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 205} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 220479);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 208} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p2 := ldv_malloc($i0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 221511);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 210} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 211} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 212} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p3 := malloc($i0);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i4 := ldv_is_err($p3);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} __VERIFIER_assume($i7);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 222543);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 216} $r := $malloc($i0);
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 223575);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p1 := external_alloc();
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 224607);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 1} true;
    call {:si_unique_call 218} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 219} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const videobuf_mmap_mapper: ref;

axiom videobuf_mmap_mapper == $sub.ref(0, 225639);

procedure videobuf_mmap_mapper($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_mmap_mapper($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 220} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 221} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_poll_stream: ref;

axiom videobuf_poll_stream == $sub.ref(0, 226671);

procedure videobuf_poll_stream($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_poll_stream($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 1} true;
    call {:si_unique_call 222} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 223} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const videobuf_read_stream: ref;

axiom videobuf_read_stream == $sub.ref(0, 227703);

procedure videobuf_read_stream($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32, $i5: i32) returns ($r: i64);
  free requires assertsPassed;



implementation videobuf_read_stream($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32, $i5: i32) returns ($r: i64)
{
  var $i6: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 224} {:cexpr "videobuf_read_stream:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 225} {:cexpr "videobuf_read_stream:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 226} {:cexpr "videobuf_read_stream:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i6 := __VERIFIER_nondet_long();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i6);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vidioc_querycap: ref;

axiom vidioc_querycap == $sub.ref(0, 228735);

procedure vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} vslice_dummy_var_55 := strcpy($p21, .str.36);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_56 := strcpy($p24, .str.37);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_57 := usb_make_path($p27, $p29, 32);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 84082705);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_54 := printk.ref.ref.i32(.str.34, .str.35, 196);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_53 := printk.ref.ref.i32(.str.32, .str.35, 196);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_enum_fmt: ref;

axiom vidioc_enum_fmt == $sub.ref(0, 229767);

procedure vidioc_enum_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $i6: i32;
  var vslice_dummy_var_58: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 1);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref($i11, 24)), $mul.ref(8, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref($i20, 24)), $mul.ref(0, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.8, $p22);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_58 := strcpy($p17, $p23);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_fmt: ref;

axiom vidioc_g_fmt == $sub.ref(0, 230799);

procedure vidioc_g_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p21);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p24);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 237} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p25, $p26, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_60 := printk.ref.ref.i32(.str.34, .str.39, 770);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_59 := printk.ref.ref.i32(.str.32, .str.39, 770);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_g_fmt_vbi: ref;

axiom vidioc_g_fmt_vbi == $sub.ref(0, 231831);

procedure vidioc_g_fmt_vbi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt_vbi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1440);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 27000000);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1497715271);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 256);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 63744);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(0, 4));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 6);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(1, 4));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 314);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(0, 4));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 18);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(1, 4));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 18);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i35 := $M.2;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 4);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i42 := $M.2;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 8);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb12;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_62 := printk.ref.ref.i32(.str.34, .str.43, 880);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 4);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb6;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_61 := printk.ref.ref.i32(.str.32, .str.43, 880);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(0, 4));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 10);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(1, 4));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 264);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(0, 4));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 12);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(1, 4));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 12);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_s_fmt: ref;

axiom vidioc_s_fmt == $sub.ref(0, 232863);

procedure vidioc_s_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed, $CurrAddr;



implementation vidioc_s_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i23: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 1);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} ldv_mutex_lock_6($p24);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i32, $i33);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_65 := pd_vidioc_s_fmt($p5, $p37);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} ldv_mutex_unlock_8($p39);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} ldv_mutex_unlock_7($p35);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb15;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb15;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_64 := printk.ref.ref.i32(.str.34, .str.42, 839);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_63 := printk.ref.ref.i32(.str.32, .str.42, 839);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_try_fmt: ref;

axiom vidioc_try_fmt == $sub.ref(0, 233895);

procedure vidioc_try_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_try_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_reqbufs: ref;

axiom vidioc_reqbufs == $sub.ref(0, 234927);

procedure vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i21 := videobuf_reqbufs($p20, $p2);
    call {:si_unique_call 249} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_67 := printk.ref.ref.i32(.str.34, .str.59, 1217);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_66 := printk.ref.ref.i32(.str.32, .str.59, 1217);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_querybuf: ref;

axiom vidioc_querybuf == $sub.ref(0, 235959);

procedure vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i21 := videobuf_querybuf($p20, $p2);
    call {:si_unique_call 253} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_69 := printk.ref.ref.i32(.str.34, .str.60, 1224);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_68 := printk.ref.ref.i32(.str.32, .str.60, 1224);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_qbuf: ref;

axiom vidioc_qbuf == $sub.ref(0, 236991);

procedure vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i7 := videobuf_qbuf($p6, $p2);
    call {:si_unique_call 255} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const vidioc_dqbuf: ref;

axiom vidioc_dqbuf == $sub.ref(0, 238023);

procedure vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(128, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2048);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i10 := videobuf_dqbuf($p6, $p2, $i9);
    call {:si_unique_call 257} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vidioc_streamon: ref;

axiom vidioc_streamon == $sub.ref(0, 239055);

procedure vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i25: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "vidioc_streamon:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $M.2;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 8);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, $i2);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 262} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i27 := videobuf_streamon($p26);
    call {:si_unique_call 264} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i25 := $i27;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb15;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_71 := printk.ref.ref.i32(.str.34, .str.61, 1313);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 4);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_70 := printk.ref.ref.i32(.str.32, .str.61, 1313);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_streamoff: ref;

axiom vidioc_streamoff == $sub.ref(0, 240087);

procedure vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i27: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} {:cexpr "vidioc_streamoff:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $i2);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i29 := videobuf_streamoff($p28);
    call {:si_unique_call 271} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i27 := $i29;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb15;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_73 := printk.ref.ref.i32(.str.34, .str.62, 1324);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_72 := printk.ref.ref.i32(.str.32, .str.62, 1324);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_s_std: ref;

axiom vidioc_s_std == $sub.ref(0, 241119);

procedure vidioc_s_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_s_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $M.2;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 8);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i20 := set_std($p19, $p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 275} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_75 := printk.ref.ref.i32(.str.34, .str.55, 932);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 4);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_74 := printk.ref.ref.i32(.str.32, .str.55, 932);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_enum_input: ref;

axiom vidioc_enum_input == $sub.ref(0, 242151);

procedure vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i7: i32;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i6 := $uge.i32($i5, 4);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.9, $p14);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} vslice_dummy_var_76 := strcpy($p9, $p15);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, 16777215);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i22 := $M.2;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := $M.2;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 8);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_78 := printk.ref.ref.i32(.str.34, .str.49, 953);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb7;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_77 := printk.ref.ref.i32(.str.32, .str.49, 953);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_input: ref;

axiom vidioc_g_input == $sub.ref(0, 243183);

procedure vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i8 := $M.2;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $M.2;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 8);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p22 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.10, $p22);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i23);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_80 := printk.ref.ref.i32(.str.34, .str.44, 963);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 4);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_79 := printk.ref.ref.i32(.str.32, .str.44, 963);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_s_input: ref;

axiom vidioc_s_input == $sub.ref(0, 244215);

procedure vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 282} {:cexpr "vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i7 := $uge.i32($i2, 4);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i2);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.11, $p11);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i13 := send_set_req($p6, 19, $i12, $p3);
    call {:si_unique_call 284} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i2);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_queryctrl: ref;

axiom vidioc_queryctrl == $sub.ref(0, 245247);

procedure vidioc_queryctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_queryctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i8: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p5 := check_control_id($i4);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 286} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p10, $p11, 68, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_ctrl: ref;

axiom vidioc_g_ctrl == $sub.ref(0, 246279);

procedure vidioc_g_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_g_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p10 := check_control_id($i9);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} ldv_mutex_lock_11($p14);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i18 := send_get_req($p7, 47, $i16, $p17, $p4, 4);
    call {:si_unique_call 292} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} ldv_mutex_unlock_12($p19);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i18, 0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p4);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_s_ctrl: ref;

axiom vidioc_s_ctrl == $sub.ref(0, 247311);

procedure vidioc_s_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.0, $M.13, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_s_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i16: i32;
  var vslice_dummy_var_81: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p6, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p7, 0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p13 := check_control_id($i12);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p20, $i19);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p24, $i23);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p3);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.12, $p25);
    call {:si_unique_call 298} {:cexpr "params"} boogie_si_record_i32($i26);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} ldv_mutex_lock_13($p27);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i28 := send_set_req($p10, 47, $i26, $p4);
    call {:si_unique_call 301} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i29 := send_set_req($p10, 67, 0, $p4);
    call {:si_unique_call 303} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ldv_mutex_unlock_14($p30);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, $p5, 1);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p31 := get_current();
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.13, $p5);
    call {:si_unique_call 306} $i34 := devirtbounce(0, $p32, $i33, $p32);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, $p5, $i34);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_81 := schedule_timeout(62);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i16 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_enumaudio: ref;

axiom vidioc_enumaudio == $sub.ref(0, 248343);

procedure vidioc_enumaudio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enumaudio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i6: i32;
  var vslice_dummy_var_82: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_82 := strcpy($p9, .str.50);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_audio: ref;

axiom vidioc_g_audio == $sub.ref(0, 249375);

procedure vidioc_g_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var vslice_dummy_var_83: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_83 := strcpy($p6, .str.50);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_audio: ref;

axiom vidioc_s_audio == $sub.ref(0, 250407);

procedure vidioc_s_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 0 else $sub.i32(0, 22));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vidioc_g_tuner: ref;

axiom vidioc_g_tuner == $sub.ref(0, 251439);

procedure vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i20: i32;
  var $i21: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i32;
  var $i34: i32;
  var $i31: i32;
  var $i19: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i64;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i12: i32;
  var vslice_dummy_var_84: i64;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: ref;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} ldv_mutex_lock_15($p13);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i15 := send_get_req($p8, 69, 1, $p14, $p4, 24);
    call {:si_unique_call 315} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i19 := $i15;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i37 := $i19;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} ldv_mutex_unlock_16($p38);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i39 := $M.2;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i37, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i46 == 1);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p4);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 255);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i60 := $udiv.i32($i59, 10);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32($i60, 8);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(4, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_86 := strcpy($p64, .str.53);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(36, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 2);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(44, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 720);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(48, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 13792);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(40, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 114);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    call {:si_unique_call 325} {:cexpr "index"} boogie_si_record_i32($i73);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i74, 12)), $mul.ref(4, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.15, $p76);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i73);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i79, 12)), $mul.ref(8, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.16, $p81);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(64, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i85 := $M.2;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 4);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i92 := $M.2;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 8);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb40:
    assume $i94 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb42;

  $bb43:
    assume $i97 == 1;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} vslice_dummy_var_88 := printk.ref.ref.i32(.str.34, .str.52, 1131);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 4);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb36;

  $bb37:
    assume $i90 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_87 := printk.ref.ref.i32(.str.32, .str.52, 1131);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb30;

  $bb31:
    assume $i55 == 1;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 65535);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb23;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_85 := printk.ref.ref.i32.i32.i32(.str.51, .str.52, 1112, $i42, $i44);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i15, 5;
    goto $bb8;

  $bb8:
    call $p22, $p23, $i24, $i25, $p27, $i28, $i29, $i30, $i20, $i21, $i32, $i33, $i35, $i36, $i34, $i31, vslice_dummy_var_84 := vidioc_g_tuner_loop_$bb8($p3, $p4, $p5, $p8, $p16, $p22, $p23, $i24, $i25, $p27, $i28, $i29, $i30, $i20, $i21, $i32, $i33, $i35, $i36, $i34, $i31, vslice_dummy_var_84);
    goto $bb8_last;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i21, 1);
    call {:si_unique_call 316} {:cexpr "count"} boogie_si_record_i32($i32);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i21, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i34 := $i20;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb17;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i20, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i36 := $i20;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb17;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p5, 1);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p22 := get_current();
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.14, $p5);
    call {:si_unique_call 318} $i25 := devirtbounce(0, $p23, $i24, $p23);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p5, $i25);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_84 := schedule_timeout(250);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i28 := send_get_req($p8, 69, 1, $p27, $p4, 24);
    call {:si_unique_call 321} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p16);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i31 := $i28;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i19 := $i31;
    goto $bb7;

  $bb11:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i20, $i21 := $i28, $i32;
    goto $bb11_dummy;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;
}



const vidioc_s_tuner: ref;

axiom vidioc_s_tuner == $sub.ref(0, 252471);

procedure vidioc_s_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_s_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i9: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $M.2;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $M.2;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 8);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume {:branchcond $i26} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i27 := 1;
    assume {:branchcond $i31} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i27 := 2;
    assume {:branchcond $i34} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i27 := 3;
    assume {:branchcond $i37} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 4);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i27 := 4;
    assume {:branchcond $i40} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i28 := pd_vidioc_s_tuner($p5, $i27);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 331} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i9 := $i28;
    goto $bb3;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb20;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb20;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb20;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_90 := printk.ref.ref.i32(.str.34, .str.54, 1159);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 4);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} vslice_dummy_var_89 := printk.ref.ref.i32(.str.32, .str.54, 1159);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_frequency: ref;

axiom vidioc_g_frequency == $sub.ref(0, 253503);

procedure vidioc_g_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p12 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 2);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_s_frequency: ref;

axiom vidioc_s_frequency == $sub.ref(0, 254535);

procedure vidioc_s_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_s_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3752, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, pm_video_suspend);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3760, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, pm_video_resume);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i26 := set_frequency($p5, $i25);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 335} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_92 := printk.ref.ref.i32(.str.34, .str.58, 1205);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} vslice_dummy_var_91 := printk.ref.ref.i32(.str.32, .str.58, 1205);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pm_video_suspend: ref;

axiom pm_video_suspend == $sub.ref(0, 255567);

procedure pm_video_suspend($p0: ref) returns ($r: i32);



const pm_video_resume: ref;

axiom pm_video_resume == $sub.ref(0, 256599);

procedure pm_video_resume($p0: ref) returns ($r: i32);



const set_frequency: ref;

axiom set_frequency == $sub.ref(0, 257631);

procedure set_frequency($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation set_frequency($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 337} {:cexpr "set_frequency:arg:frequency"} boogie_si_record_i32($i1);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i1, 62500);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i32($i5, 1000);
    call {:si_unique_call 338} {:cexpr "param"} boogie_si_record_i32($i6);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i6, 44999);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i6, 862000);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} ldv_mutex_lock_19($p10);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i11 := send_set_req($p0, 18, $i6, $p2);
    call {:si_unique_call 341} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i12 := send_set_req($p0, 67, 0, $p2);
    call {:si_unique_call 343} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} msleep(250);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i1);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_mutex_unlock_20($p14);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const ldv_mutex_lock_19: ref;

axiom ldv_mutex_lock_19 == $sub.ref(0, 258663);

procedure ldv_mutex_lock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} mutex_lock($p0);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 259695);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_20: ref;

axiom ldv_mutex_unlock_20 == $sub.ref(0, 260727);

procedure ldv_mutex_unlock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} mutex_unlock($p0);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const restore_v4l2_context: ref;

axiom restore_v4l2_context == $sub.ref(0, 261759);

procedure restore_v4l2_context($p0: ref, $p1: ref) returns ($r: i32);



const init_copy: ref;

axiom init_copy == $sub.ref(0, 262791);

procedure init_copy($p0: ref, $i1: i1);



const start_video_stream: ref;

axiom start_video_stream == $sub.ref(0, 263823);

procedure start_video_stream($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation start_video_stream($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_93 := send_set_req($p0, 67, 0, $p1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_94 := send_set_req($p0, 68, 1, $p1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(528, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_96 := prepare_bulk_urb($p4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} vslice_dummy_var_97 := fire_all_urb($p4);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_95 := prepare_iso_urb($p4);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} __init_work($p11, 0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 2097664);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 358} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p15, $p16, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1)), $mul.ref(32, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} lockdep_init_map($p18, .str.20, $p2, 0);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} INIT_LIST_HEAD($p20);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1)), $mul.ref(24, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, iso_bubble_handler);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pm_alsa_resume: ref;

axiom pm_alsa_resume == $sub.ref(0, 264855);

procedure pm_alsa_resume($p0: ref) returns ($r: i32);



const fire_audio_urb: ref;

axiom fire_audio_urb == $sub.ref(0, 265887);

procedure fire_audio_urb($p0: ref) returns ($r: i32);



const complete_handler_audio: ref;

axiom complete_handler_audio == $sub.ref(0, 266919);

procedure complete_handler_audio($p0: ref);



const alloc_bulk_urbs_generic: ref;

axiom alloc_bulk_urbs_generic == $sub.ref(0, 267951);

procedure alloc_bulk_urbs_generic($p0: ref, $i1: i32, $p2: ref, $i3: i8, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation alloc_bulk_urbs_generic($p0: ref, $i1: i32, $p2: ref, $i3: i8, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $i8: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i10: i32;
  var $i34: i32;
  var $i9: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} {:cexpr "alloc_bulk_urbs_generic:arg:num"} boogie_si_record_i32($i1);
    call {:si_unique_call 364} {:cexpr "alloc_bulk_urbs_generic:arg:ep_addr"} boogie_si_record_i8($i3);
    call {:si_unique_call 365} {:cexpr "alloc_bulk_urbs_generic:arg:buf_size"} boogie_si_record_i32($i4);
    call {:si_unique_call 366} {:cexpr "alloc_bulk_urbs_generic:arg:gfp_flags"} boogie_si_record_i32($i5);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(0, $i1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i15 := $i9;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $i16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $p31, $i32, $i33, $i10, $i34 := alloc_bulk_urbs_generic_loop_$bb4($p0, $i1, $p2, $i3, $i4, $i5, $p6, $p7, $p11, $i12, $i13, $i14, $i16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $p31, $i32, $i33, $i10, $i34);
    goto $bb4_last;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p11 := usb_alloc_urb(0, $i5);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i14 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i4);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p18 := usb_alloc_coherent($p2, $i16, $i5, $p17);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i21, $p22 := $i10, $p11;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i3);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i24 := __create_pipe($p2, $i23);
    call {:si_unique_call 371} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $sub.i32(0, 1073741696));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} usb_fill_bulk_urb($p11, $p2, $i25, $p18, $i4, $p6, $p7);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 4);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i10);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p0, $mul.ref($i30, 8));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p11);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i10, 1);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, $i1);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i9 := $i34;
    goto $bb3;

  $bb13:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i32;
    goto $bb13_dummy;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} usb_free_urb($p22);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb8;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1825;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 268983);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 374} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 1} true;
    call {:si_unique_call 375} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 376} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 270015);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 378} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p2 := external_alloc();
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 271047);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 381} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p4 := external_alloc();
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 272079);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 384} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    return;
}



const handle_audio_data: ref;

axiom handle_audio_data == $sub.ref(0, 273111);

procedure handle_audio_data($p0: ref, $p1: ref);



const snd_pcm_period_elapsed: ref;

axiom snd_pcm_period_elapsed == $sub.ref(0, 274143);

procedure snd_pcm_period_elapsed($p0: ref);



const snd_pcm_stream_lock: ref;

axiom snd_pcm_stream_lock == $sub.ref(0, 275175);

procedure snd_pcm_stream_lock($p0: ref);



const snd_pcm_stream_unlock: ref;

axiom snd_pcm_stream_unlock == $sub.ref(0, 276207);

procedure snd_pcm_stream_unlock($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 277239);

procedure spin_unlock($p0: ref);



const _raw_read_unlock: ref;

axiom _raw_read_unlock == $sub.ref(0, 278271);

procedure _raw_read_unlock($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 279303);

procedure _raw_spin_unlock($p0: ref);



const _raw_read_lock: ref;

axiom _raw_read_lock == $sub.ref(0, 280335);

procedure _raw_read_lock($p0: ref);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 281367);

procedure spin_lock($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 282399);

procedure _raw_spin_lock($p0: ref);



const prepare_iso_urb: ref;

axiom prepare_iso_urb == $sub.ref(0, 283431);

procedure prepare_iso_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation prepare_iso_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p41: ref;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $i43: i32;
  var $i10: i32;
  var $p48: ref;
  var $p51: ref;
  var $p54: ref;
  var $p57: ref;
  var $p60: ref;
  var $p63: ref;
  var $p66: ref;
  var $p69: ref;
  var $p72: ref;
  var $p75: ref;
  var $p78: ref;
  var $p81: ref;
  var $p84: ref;
  var $p87: ref;
  var $p90: ref;
  var $p93: ref;
  var $p96: ref;
  var $p99: ref;
  var $p102: ref;
  var $p105: ref;
  var $p108: ref;
  var $p111: ref;
  var $p114: ref;
  var $p117: ref;
  var $p120: ref;
  var $p123: ref;
  var $p126: ref;
  var $p129: ref;
  var $p132: ref;
  var $p135: ref;
  var $p138: ref;
  var $p141: ref;
  var $p144: ref;
  var $p147: ref;
  var $p150: ref;
  var $p153: ref;
  var $p156: ref;
  var $p159: ref;
  var $p162: ref;
  var $p165: ref;
  var $p168: ref;
  var $p171: ref;
  var $p174: ref;
  var $p177: ref;
  var $p180: ref;
  var $p183: ref;
  var $p186: ref;
  var $p189: ref;
  var $p192: ref;
  var $p195: ref;
  var $p198: ref;
  var $p201: ref;
  var $p204: ref;
  var $p207: ref;
  var $p210: ref;
  var $p213: ref;
  var $p216: ref;
  var $p219: ref;
  var $p222: ref;
  var $p225: ref;
  var $p228: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i8;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p258: ref;
  var $p261: ref;
  var $p264: ref;
  var $p267: ref;
  var $p270: ref;
  var $p273: ref;
  var $p276: ref;
  var $p279: ref;
  var $p282: ref;
  var $p285: ref;
  var $p288: ref;
  var $p291: ref;
  var $p294: ref;
  var $p297: ref;
  var $p300: ref;
  var $p303: ref;
  var $p306: ref;
  var $p309: ref;
  var $p312: ref;
  var $p315: ref;
  var $p318: ref;
  var $p321: ref;
  var $p324: ref;
  var $p327: ref;
  var $p330: ref;
  var $p333: ref;
  var $p336: ref;
  var $p339: ref;
  var $p342: ref;
  var $p345: ref;
  var $p348: ref;
  var $p351: ref;
  var $p354: ref;
  var $p357: ref;
  var $p360: ref;
  var $p363: ref;
  var $p366: ref;
  var $p369: ref;
  var $p372: ref;
  var $p375: ref;
  var $p378: ref;
  var $p381: ref;
  var $p384: ref;
  var $p387: ref;
  var $p390: ref;
  var $p393: ref;
  var $p396: ref;
  var $p399: ref;
  var $p402: ref;
  var $p405: ref;
  var $p408: ref;
  var $p411: ref;
  var $p414: ref;
  var $p417: ref;
  var $p420: ref;
  var $p423: ref;
  var $p426: ref;
  var $p429: ref;
  var $p432: ref;
  var $p435: ref;
  var $p438: ref;
  var $p441: ref;
  var $p444: ref;
  var $p447: ref;
  var $p448: ref;
  var $i449: i64;
  var $i450: i1;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $p460: ref;
  var $p461: ref;
  var $i462: i8;
  var $i463: i32;
  var $i464: i32;
  var $i465: i32;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $p474: ref;
  var $p477: ref;
  var $p480: ref;
  var $p483: ref;
  var $p486: ref;
  var $p489: ref;
  var $p492: ref;
  var $p495: ref;
  var $p498: ref;
  var $p501: ref;
  var $p504: ref;
  var $p507: ref;
  var $p510: ref;
  var $p513: ref;
  var $p516: ref;
  var $p519: ref;
  var $p522: ref;
  var $p525: ref;
  var $p528: ref;
  var $p531: ref;
  var $p534: ref;
  var $p537: ref;
  var $p540: ref;
  var $p543: ref;
  var $p546: ref;
  var $p549: ref;
  var $p552: ref;
  var $p555: ref;
  var $p558: ref;
  var $p561: ref;
  var $p564: ref;
  var $p567: ref;
  var $p570: ref;
  var $p573: ref;
  var $p576: ref;
  var $p579: ref;
  var $p582: ref;
  var $p585: ref;
  var $p588: ref;
  var $p591: ref;
  var $p594: ref;
  var $p597: ref;
  var $p600: ref;
  var $p603: ref;
  var $p606: ref;
  var $p609: ref;
  var $p612: ref;
  var $p615: ref;
  var $p618: ref;
  var $p621: ref;
  var $p624: ref;
  var $p627: ref;
  var $p630: ref;
  var $p633: ref;
  var $p636: ref;
  var $p639: ref;
  var $p642: ref;
  var $p645: ref;
  var $p648: ref;
  var $p651: ref;
  var $p654: ref;
  var $p657: ref;
  var $p660: ref;
  var $p663: ref;
  var $p664: ref;
  var $i665: i64;
  var $i666: i1;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $p676: ref;
  var $p677: ref;
  var $i678: i8;
  var $i679: i32;
  var $i680: i32;
  var $i681: i32;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $p690: ref;
  var $p693: ref;
  var $p696: ref;
  var $p699: ref;
  var $p702: ref;
  var $p705: ref;
  var $p708: ref;
  var $p711: ref;
  var $p714: ref;
  var $p717: ref;
  var $p720: ref;
  var $p723: ref;
  var $p726: ref;
  var $p729: ref;
  var $p732: ref;
  var $p735: ref;
  var $p738: ref;
  var $p741: ref;
  var $p744: ref;
  var $p747: ref;
  var $p750: ref;
  var $p753: ref;
  var $p756: ref;
  var $p759: ref;
  var $p762: ref;
  var $p765: ref;
  var $p768: ref;
  var $p771: ref;
  var $p774: ref;
  var $p777: ref;
  var $p780: ref;
  var $p783: ref;
  var $p786: ref;
  var $p789: ref;
  var $p792: ref;
  var $p795: ref;
  var $p798: ref;
  var $p801: ref;
  var $p804: ref;
  var $p807: ref;
  var $p810: ref;
  var $p813: ref;
  var $p816: ref;
  var $p819: ref;
  var $p822: ref;
  var $p825: ref;
  var $p828: ref;
  var $p831: ref;
  var $p834: ref;
  var $p837: ref;
  var $p840: ref;
  var $p843: ref;
  var $p846: ref;
  var $p849: ref;
  var $p852: ref;
  var $p855: ref;
  var $p858: ref;
  var $p861: ref;
  var $p864: ref;
  var $p867: ref;
  var $p870: ref;
  var $p873: ref;
  var $p876: ref;
  var $p879: ref;
  var $p880: ref;
  var $i881: i64;
  var $i882: i1;
  var $p884: ref;
  var $p885: ref;
  var $p886: ref;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $p892: ref;
  var $p893: ref;
  var $i894: i8;
  var $i895: i32;
  var $i896: i32;
  var $i897: i32;
  var $p898: ref;
  var $p899: ref;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $p903: ref;
  var $p906: ref;
  var $p909: ref;
  var $p912: ref;
  var $p915: ref;
  var $p918: ref;
  var $p921: ref;
  var $p924: ref;
  var $p927: ref;
  var $p930: ref;
  var $p933: ref;
  var $p936: ref;
  var $p939: ref;
  var $p942: ref;
  var $p945: ref;
  var $p948: ref;
  var $p951: ref;
  var $p954: ref;
  var $p957: ref;
  var $p960: ref;
  var $p963: ref;
  var $p966: ref;
  var $p969: ref;
  var $p972: ref;
  var $p975: ref;
  var $p978: ref;
  var $p981: ref;
  var $p984: ref;
  var $p987: ref;
  var $p990: ref;
  var $p993: ref;
  var $p996: ref;
  var $p999: ref;
  var $p1002: ref;
  var $p1005: ref;
  var $p1008: ref;
  var $p1011: ref;
  var $p1014: ref;
  var $p1017: ref;
  var $p1020: ref;
  var $p1023: ref;
  var $p1026: ref;
  var $p1029: ref;
  var $p1032: ref;
  var $p1035: ref;
  var $p1038: ref;
  var $p1041: ref;
  var $p1044: ref;
  var $p1047: ref;
  var $p1050: ref;
  var $p1053: ref;
  var $p1056: ref;
  var $p1059: ref;
  var $p1062: ref;
  var $p1065: ref;
  var $p1068: ref;
  var $p1071: ref;
  var $p1074: ref;
  var $p1077: ref;
  var $p1080: ref;
  var $p1083: ref;
  var $p1086: ref;
  var $p1089: ref;
  var $p1092: ref;
  var $p1095: ref;
  var $p1096: ref;
  var $i1097: i64;
  var $i1098: i1;
  var $p1100: ref;
  var $p1101: ref;
  var $p1102: ref;
  var $p1103: ref;
  var $p1104: ref;
  var $p1105: ref;
  var $p1106: ref;
  var $p1108: ref;
  var $p1109: ref;
  var $i1110: i8;
  var $i1111: i32;
  var $i1112: i32;
  var $i1113: i32;
  var $p1114: ref;
  var $p1115: ref;
  var $p1116: ref;
  var $p1117: ref;
  var $p1118: ref;
  var $p1119: ref;
  var $p1122: ref;
  var $p1125: ref;
  var $p1128: ref;
  var $p1131: ref;
  var $p1134: ref;
  var $p1137: ref;
  var $p1140: ref;
  var $p1143: ref;
  var $p1146: ref;
  var $p1149: ref;
  var $p1152: ref;
  var $p1155: ref;
  var $p1158: ref;
  var $p1161: ref;
  var $p1164: ref;
  var $p1167: ref;
  var $p1170: ref;
  var $p1173: ref;
  var $p1176: ref;
  var $p1179: ref;
  var $p1182: ref;
  var $p1185: ref;
  var $p1188: ref;
  var $p1191: ref;
  var $p1194: ref;
  var $p1197: ref;
  var $p1200: ref;
  var $p1203: ref;
  var $p1206: ref;
  var $p1209: ref;
  var $p1212: ref;
  var $p1215: ref;
  var $p1218: ref;
  var $p1221: ref;
  var $p1224: ref;
  var $p1227: ref;
  var $p1230: ref;
  var $p1233: ref;
  var $p1236: ref;
  var $p1239: ref;
  var $p1242: ref;
  var $p1245: ref;
  var $p1248: ref;
  var $p1251: ref;
  var $p1254: ref;
  var $p1257: ref;
  var $p1260: ref;
  var $p1263: ref;
  var $p1266: ref;
  var $p1269: ref;
  var $p1272: ref;
  var $p1275: ref;
  var $p1278: ref;
  var $p1281: ref;
  var $p1284: ref;
  var $p1287: ref;
  var $p1290: ref;
  var $p1293: ref;
  var $p1296: ref;
  var $p1299: ref;
  var $p1302: ref;
  var $p1305: ref;
  var $p1308: ref;
  var $p1311: ref;
  var $p1312: ref;
  var $i1313: i64;
  var $i1314: i1;
  var $p1316: ref;
  var $p1317: ref;
  var $p1318: ref;
  var $p1319: ref;
  var $p1320: ref;
  var $p1321: ref;
  var $p1322: ref;
  var $p1324: ref;
  var $p1325: ref;
  var $i1326: i8;
  var $i1327: i32;
  var $i1328: i32;
  var $i1329: i32;
  var $p1330: ref;
  var $p1331: ref;
  var $p1332: ref;
  var $p1333: ref;
  var $p1334: ref;
  var $p1335: ref;
  var $p1338: ref;
  var $p1341: ref;
  var $p1344: ref;
  var $p1347: ref;
  var $p1350: ref;
  var $p1353: ref;
  var $p1356: ref;
  var $p1359: ref;
  var $p1362: ref;
  var $p1365: ref;
  var $p1368: ref;
  var $p1371: ref;
  var $p1374: ref;
  var $p1377: ref;
  var $p1380: ref;
  var $p1383: ref;
  var $p1386: ref;
  var $p1389: ref;
  var $p1392: ref;
  var $p1395: ref;
  var $p1398: ref;
  var $p1401: ref;
  var $p1404: ref;
  var $p1407: ref;
  var $p1410: ref;
  var $p1413: ref;
  var $p1416: ref;
  var $p1419: ref;
  var $p1422: ref;
  var $p1425: ref;
  var $p1428: ref;
  var $p1431: ref;
  var $p1434: ref;
  var $p1437: ref;
  var $p1440: ref;
  var $p1443: ref;
  var $p1446: ref;
  var $p1449: ref;
  var $p1452: ref;
  var $p1455: ref;
  var $p1458: ref;
  var $p1461: ref;
  var $p1464: ref;
  var $p1467: ref;
  var $p1470: ref;
  var $p1473: ref;
  var $p1476: ref;
  var $p1479: ref;
  var $p1482: ref;
  var $p1485: ref;
  var $p1488: ref;
  var $p1491: ref;
  var $p1494: ref;
  var $p1497: ref;
  var $p1500: ref;
  var $p1503: ref;
  var $p1506: ref;
  var $p1509: ref;
  var $p1512: ref;
  var $p1515: ref;
  var $p1518: ref;
  var $p1521: ref;
  var $p1524: ref;
  var $p1527: ref;
  var $p1528: ref;
  var $i1529: i64;
  var $i1530: i1;
  var $p1532: ref;
  var $p1533: ref;
  var $p1534: ref;
  var $p1535: ref;
  var $p1536: ref;
  var $p1537: ref;
  var $p1538: ref;
  var $p1540: ref;
  var $p1541: ref;
  var $i1542: i8;
  var $i1543: i32;
  var $i1544: i32;
  var $i1545: i32;
  var $p1546: ref;
  var $p1547: ref;
  var $p1548: ref;
  var $p1549: ref;
  var $p1550: ref;
  var $p1551: ref;
  var $p1554: ref;
  var $p1557: ref;
  var $p1560: ref;
  var $p1563: ref;
  var $p1566: ref;
  var $p1569: ref;
  var $p1572: ref;
  var $p1575: ref;
  var $p1578: ref;
  var $p1581: ref;
  var $p1584: ref;
  var $p1587: ref;
  var $p1590: ref;
  var $p1593: ref;
  var $p1596: ref;
  var $p1599: ref;
  var $p1602: ref;
  var $p1605: ref;
  var $p1608: ref;
  var $p1611: ref;
  var $p1614: ref;
  var $p1617: ref;
  var $p1620: ref;
  var $p1623: ref;
  var $p1626: ref;
  var $p1629: ref;
  var $p1632: ref;
  var $p1635: ref;
  var $p1638: ref;
  var $p1641: ref;
  var $p1644: ref;
  var $p1647: ref;
  var $p1650: ref;
  var $p1653: ref;
  var $p1656: ref;
  var $p1659: ref;
  var $p1662: ref;
  var $p1665: ref;
  var $p1668: ref;
  var $p1671: ref;
  var $p1674: ref;
  var $p1677: ref;
  var $p1680: ref;
  var $p1683: ref;
  var $p1686: ref;
  var $p1689: ref;
  var $p1692: ref;
  var $p1695: ref;
  var $p1698: ref;
  var $p1701: ref;
  var $p1704: ref;
  var $p1707: ref;
  var $p1710: ref;
  var $p1713: ref;
  var $p1716: ref;
  var $p1719: ref;
  var $p1722: ref;
  var $p1725: ref;
  var $p1728: ref;
  var $p1731: ref;
  var $p1734: ref;
  var $p1737: ref;
  var $p1740: ref;
  var $p1743: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(176, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p11 := usb_alloc_urb(32, 208);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p11);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p18 := usb_alloc_coherent($p4, 98304, 208, $p17);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, urb_complete_iso);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p4);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p22);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i28 := __create_pipe($p4, $i27);
    call {:si_unique_call 388} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 128);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 6);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 32);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p18);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 98304);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 3072);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 3072);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 3072);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 6144);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 3072);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 9216);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 3072);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 12288);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 3072);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 15360);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 3072);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 18432);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 3072);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 21504);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 3072);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, 24576);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 3072);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 27648);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 3072);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, 30720);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 3072);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, 33792);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 3072);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 36864);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, 3072);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, 39936);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 3072);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, 43008);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, 3072);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, 46080);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, 3072);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, 49152);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, 3072);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 52224);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, 3072);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, 55296);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, 3072);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, 58368);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p159, 3072);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, 61440);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, 3072);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, 64512);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, 3072);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, 67584);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, 3072);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p180, 70656);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, 3072);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, 73728);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p189, 3072);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p192, 76800);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, 3072);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, 79872);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, 3072);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p204, 82944);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p207, 3072);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, 86016);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p213, 3072);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, 89088);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, 3072);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p222, 92160);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p225, 3072);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p228, 95232);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p231, 3072);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p232 := usb_alloc_urb(32, 208);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i234 := $eq.i64($i233, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i14 := 1;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(1, 8));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p236, $p232);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p238 := usb_alloc_coherent($p4, 98304, 208, $p237);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p239, urb_complete_iso);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p240, $p4);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p242);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i246 := $load.i8($M.0, $p245);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i246);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i248 := __create_pipe($p4, $i247);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i249 := $or.i32($i248, 128);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, $i249);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p251, 1);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p252, 6);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p253, 32);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p254, $p238);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, 98304);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p258, 0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p261, 3072);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p264, 3072);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p267, 3072);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p270, 6144);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p273, 3072);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p276, 9216);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p279, 3072);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p282, 12288);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p285, 3072);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p288, 15360);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p291, 3072);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p294, 18432);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p297, 3072);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p300, 21504);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p303, 3072);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p306, 24576);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p309, 3072);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p312, 27648);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p315, 3072);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p318, 30720);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p321, 3072);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p324, 33792);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p327, 3072);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p330, 36864);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p333, 3072);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p336, 39936);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p339, 3072);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p342, 43008);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p345, 3072);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p348, 46080);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p351, 3072);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p354, 49152);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p357, 3072);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p360, 52224);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p363, 3072);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p366, 55296);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p369, 3072);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p372, 58368);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p375, 3072);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p378, 61440);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p381, 3072);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p384, 64512);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p387, 3072);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p390, 67584);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p393, 3072);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p396, 70656);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p399, 3072);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p402, 73728);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p405, 3072);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p408, 76800);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p411, 3072);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p414, 79872);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p417, 3072);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p420, 82944);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p423, 3072);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p426, 86016);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p429, 3072);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p432, 89088);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p435, 3072);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p438, 92160);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p441, 3072);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p444, 95232);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p447, 3072);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p448 := usb_alloc_urb(32, 208);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i449 := $p2i.ref.i64($p448);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i450 := $eq.i64($i449, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i14 := 2;
    assume {:branchcond $i450} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(2, 8));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p452, $p448);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p454 := usb_alloc_coherent($p4, 98304, 208, $p453);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p455, urb_complete_iso);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p456, $p4);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.0, $p457);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p460, $p458);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i462 := $load.i8($M.0, $p461);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i463 := $zext.i8.i32($i462);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i464 := __create_pipe($p4, $i463);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i465 := $or.i32($i464, 128);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p466, $i465);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p467, 1);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p468, 6);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p469, 32);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p470, $p454);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p471, 98304);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p474, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p477, 3072);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p480, 3072);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p483, 3072);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p486, 6144);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p489, 3072);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p492, 9216);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p495, 3072);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p498, 12288);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p501, 3072);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p504, 15360);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p507, 3072);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p510, 18432);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p513, 3072);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p516, 21504);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p519, 3072);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p522, 24576);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p525, 3072);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p528, 27648);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p531, 3072);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p534, 30720);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p537, 3072);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p540, 33792);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p543, 3072);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p546, 36864);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p549, 3072);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p552, 39936);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p555, 3072);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p558, 43008);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p561, 3072);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p564, 46080);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p567, 3072);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p570, 49152);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p573, 3072);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p576, 52224);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p579, 3072);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p582, 55296);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p585, 3072);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p588, 58368);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p591, 3072);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p594, 61440);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p597, 3072);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p600, 64512);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p603, 3072);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p606, 67584);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p609, 3072);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p612, 70656);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p615, 3072);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p618, 73728);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p621, 3072);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p624, 76800);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p627, 3072);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p630, 79872);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p633, 3072);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p636, 82944);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p639, 3072);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p642, 86016);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p645, 3072);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p648, 89088);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p651, 3072);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p654, 92160);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p657, 3072);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p660, 95232);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p663, 3072);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p664 := usb_alloc_urb(32, 208);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i665 := $p2i.ref.i64($p664);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i666 := $eq.i64($i665, 0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i14 := 3;
    assume {:branchcond $i666} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(3, 8));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p668, $p664);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p670 := usb_alloc_coherent($p4, 98304, 208, $p669);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p671, urb_complete_iso);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p672, $p4);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.0, $p673);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p676, $p674);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i678 := $load.i8($M.0, $p677);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i679 := $zext.i8.i32($i678);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i680 := __create_pipe($p4, $i679);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i681 := $or.i32($i680, 128);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p682, $i681);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p683, 1);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p684, 6);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p685, 32);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p686, $p670);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p687, 98304);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p690, 0);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p693, 3072);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p696, 3072);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p699, 3072);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p702, 6144);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p705, 3072);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p708, 9216);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p711, 3072);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p714, 12288);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p717, 3072);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p720, 15360);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p723, 3072);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p726, 18432);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p729, 3072);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p732, 21504);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p735, 3072);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p738, 24576);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p741, 3072);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p744, 27648);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p747, 3072);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p750, 30720);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p753, 3072);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p756, 33792);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p759, 3072);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p762, 36864);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p765, 3072);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p768, 39936);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p771, 3072);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p774, 43008);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p777, 3072);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p780, 46080);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p783, 3072);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p786, 49152);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p789, 3072);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p792, 52224);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p795, 3072);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p798, 55296);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p801, 3072);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p804, 58368);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p807, 3072);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p810, 61440);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p813, 3072);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p816, 64512);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p819, 3072);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p822, 67584);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p825, 3072);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p828, 70656);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p831, 3072);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p834, 73728);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p837, 3072);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p840, 76800);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p843, 3072);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p846, 79872);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p849, 3072);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p852 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p852, 82944);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p855, 3072);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p858, 86016);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p861, 3072);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p864, 89088);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p867, 3072);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p870, 92160);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p873, 3072);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p876, 95232);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p879 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p879, 3072);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p880 := usb_alloc_urb(32, 208);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i881 := $p2i.ref.i64($p880);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i882 := $eq.i64($i881, 0);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i14 := 4;
    assume {:branchcond $i882} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p884 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(4, 8));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p884, $p880);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p886 := usb_alloc_coherent($p4, 98304, 208, $p885);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p887, urb_complete_iso);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p888, $p4);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.0, $p889);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p892, $p890);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i894 := $load.i8($M.0, $p893);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i895 := $zext.i8.i32($i894);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i896 := __create_pipe($p4, $i895);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i897 := $or.i32($i896, 128);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p898 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p898, $i897);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p899, 1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p900, 6);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p901, 32);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p902, $p886);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p903, 98304);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p906, 0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p909, 3072);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p912, 3072);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p915, 3072);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p918, 6144);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p921, 3072);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p924 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p924, 9216);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p927, 3072);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p930, 12288);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p933 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p933, 3072);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p936, 15360);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p939, 3072);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p942, 18432);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p945, 3072);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p948, 21504);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p951, 3072);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p954 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p954, 24576);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p957 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p957, 3072);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p960 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p960, 27648);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p963, 3072);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p966 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p966, 30720);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p969, 3072);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p972 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p972, 33792);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p975, 3072);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p978 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p978, 36864);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p981, 3072);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p984 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p984, 39936);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p987, 3072);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p990, 43008);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p993, 3072);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p996, 46080);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p999, 3072);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p1002 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1002, 49152);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p1005 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1005, 3072);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p1008 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1008, 52224);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1011, 3072);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p1014 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1014, 55296);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1017, 3072);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p1020 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1020, 58368);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p1023 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1023, 3072);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p1026 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1026, 61440);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p1029 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1029, 3072);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p1032 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1032, 64512);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1035, 3072);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p1038 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1038, 67584);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p1041 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1041, 3072);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1044, 70656);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p1047 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1047, 3072);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p1050 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1050, 73728);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1053, 3072);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1056, 76800);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p1059 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1059, 3072);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1062, 79872);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1065, 3072);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1068, 82944);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1071, 3072);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p1074 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1074, 86016);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p1077 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1077, 3072);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1080, 89088);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p1083 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1083, 3072);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p1086 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1086, 92160);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p1089 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1089, 3072);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p1092 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1092, 95232);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p1095 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1095, 3072);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p1096 := usb_alloc_urb(32, 208);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i1097 := $p2i.ref.i64($p1096);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i1098 := $eq.i64($i1097, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i14 := 5;
    assume {:branchcond $i1098} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i1098 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p1100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(5, 8));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1100, $p1096);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $p1102 := usb_alloc_coherent($p4, 98304, 208, $p1101);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p1103 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1103, urb_complete_iso);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p1104 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1104, $p4);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p1105 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p1106 := $load.ref($M.0, $p1105);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p1108 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1108, $p1106);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i1110 := $load.i8($M.0, $p1109);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i1111 := $zext.i8.i32($i1110);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i1112 := __create_pipe($p4, $i1111);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i1113 := $or.i32($i1112, 128);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p1114 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1114, $i1113);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p1115 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1115, 1);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p1116 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1116, 6);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p1117 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1117, 32);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p1118 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1118, $p1102);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p1119 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1119, 98304);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p1122 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1122, 0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1125, 3072);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p1128 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1128, 3072);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p1131 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1131, 3072);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p1134 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1134, 6144);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p1137 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1137, 3072);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1140, 9216);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p1143 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1143, 3072);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1146, 12288);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p1149 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1149, 3072);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1152, 15360);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1155, 3072);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p1158 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1158, 18432);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1161, 3072);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p1164 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1164, 21504);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p1167 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1167, 3072);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p1170 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1170, 24576);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p1173 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1173, 3072);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p1176 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1176, 27648);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p1179 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1179, 3072);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p1182 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1182, 30720);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p1185 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1185, 3072);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p1188 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1188, 33792);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p1191 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1191, 3072);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p1194 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1194, 36864);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p1197 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1197, 3072);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1200, 39936);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1203, 3072);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p1206 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1206, 43008);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p1209 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1209, 3072);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p1212 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1212, 46080);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p1215 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1215, 3072);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p1218 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1218, 49152);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p1221 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1221, 3072);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p1224 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1224, 52224);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p1227 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1227, 3072);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p1230 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1230, 55296);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p1233 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1233, 3072);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p1236 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1236, 58368);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p1239 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1239, 3072);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1242, 61440);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p1245 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1245, 3072);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p1248 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1248, 64512);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1251, 3072);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p1254 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1254, 67584);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p1257 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1257, 3072);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p1260 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1260, 70656);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p1263 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1263, 3072);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p1266 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1266, 73728);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p1269 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1269, 3072);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p1272 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1272, 76800);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p1275 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1275, 3072);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p1278 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1278, 79872);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p1281 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1281, 3072);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p1284 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1284, 82944);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p1287 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1287, 3072);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p1290 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1290, 86016);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p1293 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1293, 3072);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p1296 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1296, 89088);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p1299 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1299, 3072);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p1302 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1302, 92160);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p1305 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1305, 3072);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p1308 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1308, 95232);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p1311 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1311, 3072);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p1312 := usb_alloc_urb(32, 208);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i1313 := $p2i.ref.i64($p1312);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i1314 := $eq.i64($i1313, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i14 := 6;
    assume {:branchcond $i1314} true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i1314 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(6, 8));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1316, $p1312);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p1317 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p1318 := usb_alloc_coherent($p4, 98304, 208, $p1317);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p1319 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1319, urb_complete_iso);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p1320 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1320, $p4);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p1321 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p1322 := $load.ref($M.0, $p1321);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p1324 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1324, $p1322);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p1325 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i1326 := $load.i8($M.0, $p1325);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i1327 := $zext.i8.i32($i1326);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i1328 := __create_pipe($p4, $i1327);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i1329 := $or.i32($i1328, 128);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p1330 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1330, $i1329);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p1331 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1331, 1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p1332 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1332, 6);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p1333 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1333, 32);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p1334 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1334, $p1318);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p1335 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1335, 98304);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p1338 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1338, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p1341 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1341, 3072);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p1344 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1344, 3072);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p1347 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1347, 3072);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p1350 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1350, 6144);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p1353 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1353, 3072);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p1356 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1356, 9216);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p1359 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1359, 3072);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p1362 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1362, 12288);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p1365 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1365, 3072);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p1368 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1368, 15360);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p1371 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1371, 3072);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p1374 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1374, 18432);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p1377 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1377, 3072);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p1380 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1380, 21504);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p1383 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1383, 3072);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p1386 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1386, 24576);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p1389 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1389, 3072);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p1392 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1392, 27648);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1395, 3072);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p1398 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1398, 30720);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p1401 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1401, 3072);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p1404 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1404, 33792);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p1407 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1407, 3072);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p1410 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1410, 36864);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p1413 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1413, 3072);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p1416 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1416, 39936);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p1419 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1419, 3072);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p1422 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1422, 43008);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p1425 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1425, 3072);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p1428 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1428, 46080);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1431, 3072);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p1434 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1434, 49152);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p1437 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1437, 3072);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p1440 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1440, 52224);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p1443 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1443, 3072);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p1446 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1446, 55296);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p1449 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1449, 3072);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p1452 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1452, 58368);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p1455 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1455, 3072);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p1458 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1458, 61440);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p1461 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1461, 3072);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p1464 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1464, 64512);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p1467 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1467, 3072);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p1470 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1470, 67584);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p1473 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1473, 3072);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p1476 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1476, 70656);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p1479 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1479, 3072);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p1482 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1482, 73728);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1485, 3072);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p1488 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1488, 76800);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p1491 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1491, 3072);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p1494 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1494, 79872);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p1497 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1497, 3072);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p1500 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1500, 82944);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p1503 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1503, 3072);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p1506 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1506, 86016);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p1509 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1509, 3072);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p1512 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1512, 89088);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p1515 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1515, 3072);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p1518 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1518, 92160);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p1521 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1521, 3072);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p1524 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1524, 95232);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p1527 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1527, 3072);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p1528 := usb_alloc_urb(32, 208);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i1529 := $p2i.ref.i64($p1528);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i1530 := $eq.i64($i1529, 0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i14 := 7;
    assume {:branchcond $i1530} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i1530 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p1532 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(7, 8));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1532, $p1528);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p1533 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p1534 := usb_alloc_coherent($p4, 98304, 208, $p1533);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p1535 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1535, urb_complete_iso);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p1536 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1536, $p4);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p1538 := $load.ref($M.0, $p1537);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p1540 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1540, $p1538);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p1541 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i1542 := $load.i8($M.0, $p1541);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i1543 := $zext.i8.i32($i1542);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i1544 := __create_pipe($p4, $i1543);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i1545 := $or.i32($i1544, 128);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p1546 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1546, $i1545);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p1547 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1547, 1);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p1548 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1548, 6);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p1549 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1549, 32);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p1550 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1550, $p1534);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p1551 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1551, 98304);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $p1554 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1554, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p1557 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1557, 3072);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $p1560 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1560, 3072);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p1563 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1563, 3072);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p1566 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1566, 6144);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p1569 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1569, 3072);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p1572 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1572, 9216);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p1575 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1575, 3072);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p1578 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1578, 12288);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p1581 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1581, 3072);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $p1584 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1584, 15360);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p1587 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1587, 3072);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p1590 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1590, 18432);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p1593 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1593, 3072);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p1596 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1596, 21504);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p1599 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1599, 3072);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p1602 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1602, 24576);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p1605 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1605, 3072);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $p1608 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1608, 27648);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p1611 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1611, 3072);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p1614 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1614, 30720);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p1617 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1617, 3072);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p1620 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1620, 33792);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p1623 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1623, 3072);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p1626 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1626, 36864);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p1629 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1629, 3072);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p1632 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1632, 39936);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p1635 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1635, 3072);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p1638 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1638, 43008);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p1641 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1641, 3072);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p1644 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1644, 46080);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p1647 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1647, 3072);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p1650 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1650, 49152);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p1653 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1653, 3072);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $p1656 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1656, 52224);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p1659 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1659, 3072);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p1662 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1662, 55296);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p1665 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1665, 3072);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p1668 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1668, 58368);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p1671 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1671, 3072);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p1674 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1674, 61440);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p1677 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1677, 3072);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $p1680 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1680, 64512);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p1683 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1683, 3072);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p1686 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1686, 67584);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p1689 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1689, 3072);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p1692 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1692, 70656);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p1695 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1695, 3072);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p1698 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1698, 73728);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p1701 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1701, 3072);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p1704 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1704, 76800);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p1707 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1707, 3072);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p1710 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1710, 79872);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p1713 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1713, 3072);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p1716 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1716, 82944);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p1719 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1719, 3072);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p1722 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1722, 86016);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p1725 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1725, 3072);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $p1728 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1728, 89088);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p1731 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1731, 3072);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p1734 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1734, 92160);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p1737 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1737, 3072);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p1740 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1740, 95232);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p1743 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1743, 3072);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb284:
    assume {:verifier.code 0} true;
    assume $i1530 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i14, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i43 := $i14;
    goto $bb21;

  $bb21:
    call $i44, $i45, $i43 := prepare_iso_urb_loop_$bb21($i44, $i45, $i43);
    goto $bb21_last;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i43, 1);
    call {:si_unique_call 390} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb23_dummy;

  $bb246:
    assume {:verifier.code 0} true;
    assume $i1314 == 1;
    goto $bb8;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i1098 == 1;
    goto $bb8;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb8;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i666 == 1;
    goto $bb8;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i450 == 1;
    goto $bb8;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i234 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 284463);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 285495);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    return;
}



const iso_bubble_handler: ref;

axiom iso_bubble_handler == $sub.ref(0, 286527);

procedure iso_bubble_handler($p0: ref);



const prepare_bulk_urb: ref;

axiom prepare_bulk_urb == $sub.ref(0, 287559);

procedure prepare_bulk_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation prepare_bulk_urb($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(176, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_98 := alloc_bulk_urbs_generic($p7, 8, $p11, $i15, 8192, 208, urb_complete_bulk, $p18);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fire_all_urb: ref;

axiom fire_all_urb == $sub.ref(0, 288591);

procedure fire_all_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fire_all_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p46: ref;
  var $p47: ref;
  var $i8: i32;
  var $i48: i1;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(192, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i5 := usb_submit_urb($p4, 208);
    call {:si_unique_call 415} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(1, 8));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i12 := usb_submit_urb($p11, 208);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(2, 8));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i18 := usb_submit_urb($p17, 208);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(3, 8));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i24 := usb_submit_urb($p23, 208);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(4, 8));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i30 := usb_submit_urb($p29, 208);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(5, 8));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i36 := usb_submit_urb($p35, 208);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(6, 8));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i42 := usb_submit_urb($p41, 208);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(7, 8));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i8 := usb_submit_urb($p47, 208);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i8, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb32:
    assume $i48 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} vslice_dummy_var_106 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 680, 7, $i8);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_105 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 680, 6, $i42);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i37 == 1;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_104 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 680, 5, $i36);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_103 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 680, 4, $i30);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_102 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 680, 3, $i24);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_101 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 680, 2, $i18);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vslice_dummy_var_100 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 680, 1, $i12);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_99 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 680, 0, $i5);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const urb_complete_bulk: ref;

axiom urb_complete_bulk == $sub.ref(0, 289623);

procedure urb_complete_bulk($p0: ref);



const get_video_frame: ref;

axiom get_video_frame == $sub.ref(0, 290655);

procedure get_video_frame($p0: ref, $p1: ref) returns ($r: i1);



const copy_vbi_video_data: ref;

axiom copy_vbi_video_data == $sub.ref(0, 291687);

procedure copy_vbi_video_data($p0: ref, $p1: ref, $i2: i32);



const check_trailer: ref;

axiom check_trailer == $sub.ref(0, 292719);

procedure check_trailer($p0: ref, $p1: ref, $i2: i32);



const strncmp: ref;

axiom strncmp == $sub.ref(0, 293751);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const copy_video_data: ref;

axiom copy_video_data == $sub.ref(0, 294783);

procedure copy_video_data($p0: ref, $p1: ref, $i2: i32);



const end_field: ref;

axiom end_field == $sub.ref(0, 295815);

procedure end_field($p0: ref);



const submit_frame: ref;

axiom submit_frame == $sub.ref(0, 296847);

procedure submit_frame($p0: ref);



const do_gettimeofday: ref;

axiom do_gettimeofday == $sub.ref(0, 297879);

procedure do_gettimeofday($p0: ref);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 298911);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);



const copy_vbi_data: ref;

axiom copy_vbi_data == $sub.ref(0, 299943);

procedure copy_vbi_data($p0: ref, $p1: ref, $i2: i32);



const get_frame: ref;

axiom get_frame == $sub.ref(0, 300975);

procedure get_frame($p0: ref, $p1: ref) returns ($r: i1);



const videobuf_to_vmalloc: ref;

axiom videobuf_to_vmalloc == $sub.ref(0, 302007);

procedure videobuf_to_vmalloc($p0: ref) returns ($r: ref);



const list_empty: ref;

axiom list_empty == $sub.ref(0, 303039);

procedure list_empty($p0: ref) returns ($r: i32);



const ldv_mutex_lock_23: ref;

axiom ldv_mutex_lock_23 == $sub.ref(0, 304071);

procedure ldv_mutex_lock_23($p0: ref);



const ldv_mutex_unlock_24: ref;

axiom ldv_mutex_unlock_24 == $sub.ref(0, 305103);

procedure ldv_mutex_unlock_24($p0: ref);



const urb_complete_iso: ref;

axiom urb_complete_iso == $sub.ref(0, 306135);

procedure urb_complete_iso($p0: ref);



const get_chunk: ref;

axiom get_chunk == $sub.ref(0, 307167);

procedure get_chunk($i0: i32, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 308199);

procedure schedule_work($p0: ref) returns ($r: i32);



const set_std: ref;

axiom set_std == $sub.ref(0, 309231);

procedure set_std($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation set_std($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p36: ref;
  var $i35: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i18: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 32);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume {:branchcond $i52} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 4);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i8 := 2;
    assume {:branchcond $i55} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p1);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 8);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i8 := 3;
    assume {:branchcond $i58} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p1);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 16);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i8 := 4;
    assume {:branchcond $i61} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p1);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 256);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i8 := 5;
    assume {:branchcond $i64} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p1);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 512);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i8 := 6;
    assume {:branchcond $i67} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1024);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i8 := 7;
    assume {:branchcond $i70} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p1);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i71, 4096);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i8 := 8;
    assume {:branchcond $i73} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p1);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i75 := $and.i64($i74, 8192);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i8 := 9;
    assume {:branchcond $i76} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p1);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 65536);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i8 := 10;
    assume {:branchcond $i79} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, $p1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 131072);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i8 := 11;
    assume {:branchcond $i82} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i84 := $and.i64($i83, 262144);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i8 := 12;
    assume {:branchcond $i85} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p1);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i86, 524288);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i8 := 13;
    assume {:branchcond $i88} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p1);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1048576);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i8 := 14;
    assume {:branchcond $i91} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 2097152);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i8 := 15;
    assume {:branchcond $i94} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p1);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i96 := $and.i64($i95, 4194304);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i8 := 16;
    assume {:branchcond $i97} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p1);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 8388608);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i8 := 17;
    assume {:branchcond $i100} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i9, 24)), $mul.ref(20, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.22, $p11);
    call {:si_unique_call 432} {:cexpr "param"} boogie_si_record_i32($i12);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i8);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i13, 24)), $mul.ref(8, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_107 := printk.ref.ref.i32.ref(.str.56, .str.57, 896, $p16);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} ldv_mutex_lock_9($p19);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i20 := send_set_req($p0, 20, $i12, $p2);
    call {:si_unique_call 436} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i21 == 1);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p2);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i8);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i25, 24)), $mul.ref(0, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.22, $p27);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i28);
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 63744);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(28, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 51840);
    assume {:verifier.code 0} true;
    $i35 := 576;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, $i35);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} ldv_mutex_unlock_10($p49);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i18 := $i20;
    goto $bb10;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i40 == 1;
    $p41 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i35);
    $p42 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i43, $i45);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i47 := $mul.i32($i46, 2);
    $p48 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i33 == 1;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(28, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 34560);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i35 := 480;
    goto $bb20;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb12;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb4;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb4;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb4;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb4;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb4;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb4;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb4;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb4;
}



const pd_vidioc_s_tuner: ref;

axiom pd_vidioc_s_tuner == $sub.ref(0, 310263);

procedure pd_vidioc_s_tuner($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation pd_vidioc_s_tuner($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 439} {:cexpr "pd_vidioc_s_tuner:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} ldv_mutex_lock_17($p3);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i4, 12)), $mul.ref(0, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.23, $p6);
    call {:si_unique_call 441} {:cexpr "param"} boogie_si_record_i32($i7);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i8 := send_set_req($p0, 42, $i7, $p2);
    call {:si_unique_call 443} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i13 := get_audio_std($i12);
    call {:si_unique_call 445} {:cexpr "audiomode"} boogie_si_record_i32($i13);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i14 := send_set_req($p0, 44, $i13, $p2);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, $i8);
    call {:si_unique_call 448} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} ldv_mutex_unlock_18($p20);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const pd_vidioc_s_fmt: ref;

axiom pd_vidioc_s_fmt == $sub.ref(0, 311295);

procedure pd_vidioc_s_fmt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pd_vidioc_s_fmt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i9: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $i17: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i24: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1346520914);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1448695129);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i11 := send_set_req($p0, 21, $i9, $p2);
    call {:si_unique_call 452} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 720);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i13, 720);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 720);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i19 := send_set_req($p0, 23, $i17, $p2);
    call {:si_unique_call 454} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, $i11);
    call {:si_unique_call 455} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p2);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    $p27 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(8, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 63744);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 480 else 576);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i35, $i37);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i38 == 1);
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i40, $i42);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p1);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p5);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 456} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p61, $p62, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    $p46 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i51, 2);
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(16, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i55, $i57);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 2);
    $p60 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 16);
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb8;

  $bb5:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, 704);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i17 := 2;
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i9 := 4;
    goto $bb3;
}



const ldv_mutex_lock_17: ref;

axiom ldv_mutex_lock_17 == $sub.ref(0, 312327);

procedure ldv_mutex_lock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} mutex_lock($p0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 313359);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} mutex_unlock($p0);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_9: ref;

axiom ldv_mutex_lock_9 == $sub.ref(0, 314391);

procedure ldv_mutex_lock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} mutex_lock($p0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_10: ref;

axiom ldv_mutex_unlock_10 == $sub.ref(0, 315423);

procedure ldv_mutex_unlock_10($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} mutex_unlock($p0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const pm_alsa_suspend: ref;

axiom pm_alsa_suspend == $sub.ref(0, 316455);

procedure pm_alsa_suspend($p0: ref) returns ($r: i32);



const audio_buf_free: ref;

axiom audio_buf_free == $sub.ref(0, 317487);

procedure audio_buf_free($p0: ref) returns ($r: i32);



const ldv_mutex_lock_15: ref;

axiom ldv_mutex_lock_15 == $sub.ref(0, 318519);

procedure ldv_mutex_lock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} mutex_lock($p0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const send_get_req: ref;

axiom send_get_req == $sub.ref(0, 319551);

procedure send_get_req($p0: ref, $i1: i8, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation send_get_req($p0: ref, $i1: i8, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i140: i1;
  var $i143: i16;
  var $i144: i32;
  var $i145: i16;
  var $i141: i16;
  var $i142: i16;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i8;
  var $i155: i32;
  var $i156: i16;
  var $i157: i32;
  var $i158: i16;
  var $p159: ref;
  var $i160: i16;
  var $i161: i32;
  var $i162: i32;
  var $i163: i16;
  var $i164: i32;
  var $i165: i1;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $p172: ref;
  var $p173: ref;
  var $i139: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p6 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 468} {:cexpr "send_get_req:arg:cmdid"} boogie_si_record_i8($i1);
    call {:si_unique_call 469} {:cexpr "send_get_req:arg:param"} boogie_si_record_i32($i2);
    call {:si_unique_call 470} {:cexpr "send_get_req:arg:datalen"} boogie_si_record_i32($i5);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(1, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(2, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(3, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(5, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(6, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(7, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(9, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(10, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(11, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(13, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(14, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(15, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(17, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(18, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(19, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(21, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(22, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(23, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(25, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(26, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(27, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(28, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(29, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(30, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(31, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(33, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(34, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(35, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(36, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(37, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(38, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(39, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(41, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(42, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(43, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(44, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 0);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(45, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(46, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 0);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(47, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 0);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(49, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 0);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(50, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(51, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 0);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(52, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 0);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(53, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(54, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(55, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 0);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(57, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(58, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 0);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(59, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 0);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(61, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(62, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(63, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(65, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(66, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(67, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 0);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(68, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 0);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(69, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(70, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(71, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 0);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(73, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(74, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(75, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(76, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(77, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(78, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(79, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 0);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(80, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(81, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 0);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(82, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, 0);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(83, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 0);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(84, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(85, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(86, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(87, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(89, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(90, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 0);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(91, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(92, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 0);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(93, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 0);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(94, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(95, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(97, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 0);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(98, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(99, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(100, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(101, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(102, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(103, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 0);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(105, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(106, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(107, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, 0);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(108, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(109, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(110, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(111, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(113, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, 0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(114, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(115, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, 0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(116, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(117, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(118, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(119, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, 0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 0);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(121, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p128, 0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(122, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(123, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(125, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(126, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 0);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(127, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, 0);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 128);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} __const_udelay(4295000);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} __const_udelay(4295000);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} __const_udelay(4295000);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(4295000);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} __const_udelay(4295000);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} __const_udelay(4295000);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} __const_udelay(4295000);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} __const_udelay(4295000);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} __const_udelay(4295000);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __const_udelay(4295000);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} __const_udelay(4295000);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} __const_udelay(4295000);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} __const_udelay(4295000);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __const_udelay(4295000);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} __const_udelay(4295000);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __const_udelay(4295000);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} __const_udelay(4295000);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} __const_udelay(4295000);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __const_udelay(4295000);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} __const_udelay(4295000);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} __const_udelay(4295000);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} __const_udelay(4295000);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} __const_udelay(4295000);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __const_udelay(4295000);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} __const_udelay(4295000);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} __const_udelay(4295000);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __const_udelay(4295000);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} __const_udelay(4295000);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} __const_udelay(4295000);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i2, 0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i140 == 1);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i2);
    call {:si_unique_call 473} {:cexpr "lower_16"} boogie_si_record_i16($i143);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i144 := $ashr.i32($i2, 16);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i16($i144);
    call {:si_unique_call 474} {:cexpr "upper_16"} boogie_si_record_i16($i145);
    assume {:verifier.code 0} true;
    $i141, $i142 := $i143, $i145;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i148 := __create_pipe($p147, 0);
    call {:si_unique_call 476} {:cexpr "tmp___0"} boogie_si_record_i32($i148);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i148, $sub.i32(0, 2147483520));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i152, 128);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i8($i153);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i141);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i142);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p6);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i5);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i161, 4);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i164 := usb_control_msg($p150, $i151, $i154, $sub.i8(0, 64), $i156, $i158, $p159, $i163, 5000);
    call {:si_unique_call 478} {:cexpr "ret"} boogie_si_record_i32($i164);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i164, 0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i165 == 1);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i166 := $ugt.i64(4, 63);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i166 == 1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p4);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p6);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 480} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p169, $p170, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i5);
    call {:si_unique_call 481} {:cexpr "__len___0"} boogie_si_record_i64($i171);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p6);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(4, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 482} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p3, $p173, $i171, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i139 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $r := $i139;
    return;

  $bb14:
    assume $i166 == 1;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p4);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p6);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 479} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p167, $p168, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i165 == 1;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32(0, 6);
    goto $bb3;

  $bb9:
    assume $i140 == 1;
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i141, $i142 := 0, 0;
    goto $bb11;

  $bb1:
    assume $i138 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_mutex_unlock_16: ref;

axiom ldv_mutex_unlock_16 == $sub.ref(0, 320583);

procedure ldv_mutex_unlock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} mutex_unlock($p0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 321615);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const check_control_id: ref;

axiom check_control_id == $sub.ref(0, 322647);

procedure check_control_id($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation check_control_id($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p5: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} {:cexpr "check_control_id:arg:id"} boogie_si_record_i32($i0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64(4);
    $p2 := $add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref($i1, 72));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i3, $p2i.ref.i64(controls));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p5 := controls;
    goto $bb4;

  $bb4:
    call $p7, $i8, $i9, $p10, $p12, $i13, $i14, $p5 := check_control_id_loop_$bb4($i0, $i3, $p7, $i8, $i9, $p10, $p12, $i13, $i14, $p5);
    goto $bb4_last;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, $i0);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p10 := $p5;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p5, $mul.ref(1, 72));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i3, $i13);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p12;
    goto $bb10_dummy;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;
}



const ldv_mutex_lock_13: ref;

axiom ldv_mutex_lock_13 == $sub.ref(0, 323679);

procedure ldv_mutex_lock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} mutex_lock($p0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_14: ref;

axiom ldv_mutex_unlock_14 == $sub.ref(0, 324711);

procedure ldv_mutex_unlock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} mutex_unlock($p0);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_11: ref;

axiom ldv_mutex_lock_11 == $sub.ref(0, 325743);

procedure ldv_mutex_lock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} mutex_lock($p0);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_12: ref;

axiom ldv_mutex_unlock_12 == $sub.ref(0, 326775);

procedure ldv_mutex_unlock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} mutex_unlock($p0);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 327807);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 523} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const videobuf_streamoff: ref;

axiom videobuf_streamoff == $sub.ref(0, 328839);

procedure videobuf_streamoff($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_streamoff($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 524} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 525} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const videobuf_streamon: ref;

axiom videobuf_streamon == $sub.ref(0, 329871);

procedure videobuf_streamon($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_streamon($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 526} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const videobuf_dqbuf: ref;

axiom videobuf_dqbuf == $sub.ref(0, 330903);

procedure videobuf_dqbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_dqbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 528} {:cexpr "videobuf_dqbuf:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 529} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 530} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const videobuf_qbuf: ref;

axiom videobuf_qbuf == $sub.ref(0, 331935);

procedure videobuf_qbuf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_qbuf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 531} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 532} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_querybuf: ref;

axiom videobuf_querybuf == $sub.ref(0, 332967);

procedure videobuf_querybuf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_querybuf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 533} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 534} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_reqbufs: ref;

axiom videobuf_reqbufs == $sub.ref(0, 333999);

procedure videobuf_reqbufs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_reqbufs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 535} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 536} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_6: ref;

axiom ldv_mutex_lock_6 == $sub.ref(0, 335031);

procedure ldv_mutex_lock_6($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} mutex_lock($p0);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_7: ref;

axiom ldv_mutex_unlock_7 == $sub.ref(0, 336063);

procedure ldv_mutex_unlock_7($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} mutex_unlock($p0);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_8: ref;

axiom ldv_mutex_unlock_8 == $sub.ref(0, 337095);

procedure ldv_mutex_unlock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} mutex_unlock($p0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 338127);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(64, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(4, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.38, $p6, $p8);
    call {:si_unique_call 545} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 339159);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const pd_buf_setup: ref;

axiom pd_buf_setup == $sub.ref(0, 340191);

procedure pd_buf_setup($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pd_buf_setup($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i47: i32;
  var $i48: i1;
  var $i13: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 624)), $mul.ref(616, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(28, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 4095);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $sub.i32(0, 4096));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i44);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p2);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_108 := printk.ref.ref.i32.i32(.str.18, .str.19, 737, $i45);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p1);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb10;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 4);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1));
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 4095);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, $sub.i32(0, 4096));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i20);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p1);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 3);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(96, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 126));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(816, 1));
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(168, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(168, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p14);
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(176, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p7);
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i32 := $udiv.i32($i31, 2);
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(88, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i35, 2);
    $p37 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(92, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    $p38 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(184, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p4);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i39 := start_video_stream($p7);
    call {:si_unique_call 548} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i13 := $i39;
    goto $bb10;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 4);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const pd_buf_prepare: ref;

axiom pd_buf_prepare == $sub.ref(0, 341223);

procedure pd_buf_prepare($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_prepare($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} {:cexpr "pd_buf_prepare:arg:field"} boogie_si_record_i32($i2);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 624)), $mul.ref(616, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(36, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i2);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 1);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb13;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(28, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(24, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i40);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i42 := videobuf_iolock($p0, $p1, $0.ref);
    call {:si_unique_call 553} {:cexpr "rc"} boogie_si_record_i32($i42);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i31 := $i42;
    goto $bb13;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(24, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(12, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i29 := videobuf_iolock($p0, $p1, $0.ref);
    call {:si_unique_call 551} {:cexpr "rc"} boogie_si_record_i32($i29);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb13;
}



const pd_buf_queue: ref;

axiom pd_buf_queue == $sub.ref(0, 342255);

procedure pd_buf_queue($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_queue($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 624)), $mul.ref(616, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 2);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(64, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(712, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} list_add_tail($p6, $p7);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    return;
}



const pd_buf_release: ref;

axiom pd_buf_release == $sub.ref(0, 343287);

procedure pd_buf_release($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_release($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} videobuf_vmalloc_free($p1);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_vmalloc_free: ref;

axiom videobuf_vmalloc_free == $sub.ref(0, 344319);

procedure videobuf_vmalloc_free($p0: ref);
  free requires assertsPassed;



implementation videobuf_vmalloc_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 345351);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __list_add($p0, $p3, $p1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 346383);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_iolock: ref;

axiom videobuf_iolock == $sub.ref(0, 347415);

procedure videobuf_iolock($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_iolock($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_pd_capture_open: ref;

axiom snd_pd_capture_open == $sub.ref(0, 348447);

procedure snd_pd_capture_open($p0: ref) returns ($r: i32);



const snd_pd_pcm_close: ref;

axiom snd_pd_pcm_close == $sub.ref(0, 349479);

procedure snd_pd_pcm_close($p0: ref) returns ($r: i32);



const snd_pcm_lib_ioctl: ref;

axiom snd_pcm_lib_ioctl == $sub.ref(0, 350511);

procedure snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const snd_pd_hw_capture_params: ref;

axiom snd_pd_hw_capture_params == $sub.ref(0, 351543);

procedure snd_pd_hw_capture_params($p0: ref, $p1: ref) returns ($r: i32);



const snd_pd_hw_capture_free: ref;

axiom snd_pd_hw_capture_free == $sub.ref(0, 352575);

procedure snd_pd_hw_capture_free($p0: ref) returns ($r: i32);



const snd_pd_prepare: ref;

axiom snd_pd_prepare == $sub.ref(0, 353607);

procedure snd_pd_prepare($p0: ref) returns ($r: i32);



const snd_pd_capture_trigger: ref;

axiom snd_pd_capture_trigger == $sub.ref(0, 354639);

procedure snd_pd_capture_trigger($p0: ref, $i1: i32) returns ($r: i32);



const snd_pd_capture_pointer: ref;

axiom snd_pd_capture_pointer == $sub.ref(0, 355671);

procedure snd_pd_capture_pointer($p0: ref) returns ($r: i64);



const snd_pcm_pd_get_page: ref;

axiom snd_pcm_pd_get_page == $sub.ref(0, 356703);

procedure snd_pcm_pd_get_page($p0: ref, $i1: i64) returns ($r: ref);



const vmalloc_to_page: ref;

axiom vmalloc_to_page == $sub.ref(0, 357735);

procedure vmalloc_to_page($p0: ref) returns ($r: ref);



const hw_param_interval: ref;

axiom hw_param_interval == $sub.ref(0, 358767);

procedure hw_param_interval($p0: ref, $i1: i32) returns ($r: ref);



const vfree: ref;

axiom vfree == $sub.ref(0, 359799);

procedure vfree($p0: ref);



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 360831);

procedure vmalloc($i0: i64) returns ($r: ref);



const snd_pcm_hw_constraint_integer: ref;

axiom snd_pcm_hw_constraint_integer == $sub.ref(0, 361863);

procedure snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32);



const poseidon_fe_release: ref;

axiom poseidon_fe_release == $sub.ref(0, 362895);

procedure poseidon_fe_release($p0: ref);



const poseidon_fe_init: ref;

axiom poseidon_fe_init == $sub.ref(0, 363927);

procedure poseidon_fe_init($p0: ref) returns ($r: i32);



const poseidon_fe_sleep: ref;

axiom poseidon_fe_sleep == $sub.ref(0, 364959);

procedure poseidon_fe_sleep($p0: ref) returns ($r: i32);



const poseidon_set_fe: ref;

axiom poseidon_set_fe == $sub.ref(0, 365991);

procedure poseidon_set_fe($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_fe_get_tune_settings: ref;

axiom poseidon_fe_get_tune_settings == $sub.ref(0, 367023);

procedure poseidon_fe_get_tune_settings($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_get_fe: ref;

axiom poseidon_get_fe == $sub.ref(0, 368055);

procedure poseidon_get_fe($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_read_status: ref;

axiom poseidon_read_status == $sub.ref(0, 369087);

procedure poseidon_read_status($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_read_ber: ref;

axiom poseidon_read_ber == $sub.ref(0, 370119);

procedure poseidon_read_ber($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_read_signal_strength: ref;

axiom poseidon_read_signal_strength == $sub.ref(0, 371151);

procedure poseidon_read_signal_strength($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_read_snr: ref;

axiom poseidon_read_snr == $sub.ref(0, 372183);

procedure poseidon_read_snr($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_read_unc_blocks: ref;

axiom poseidon_read_unc_blocks == $sub.ref(0, 373215);

procedure poseidon_read_unc_blocks($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_ts_bus_ctrl: ref;

axiom poseidon_ts_bus_ctrl == $sub.ref(0, 374247);

procedure poseidon_ts_bus_ctrl($p0: ref, $i1: i32) returns ($r: i32);



const ldv_mutex_lock_78: ref;

axiom ldv_mutex_lock_78 == $sub.ref(0, 375279);

procedure ldv_mutex_lock_78($p0: ref);



const poseidon_check_mode_dvbt: ref;

axiom poseidon_check_mode_dvbt == $sub.ref(0, 376311);

procedure poseidon_check_mode_dvbt($p0: ref) returns ($r: i32);



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 377343);

procedure atomic_inc($p0: ref);



const ldv_mutex_unlock_79: ref;

axiom ldv_mutex_unlock_79 == $sub.ref(0, 378375);

procedure ldv_mutex_unlock_79($p0: ref);



const dvb_stop_streaming: ref;

axiom dvb_stop_streaming == $sub.ref(0, 379407);

procedure dvb_stop_streaming($p0: ref);



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 380439);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);



const ldv_mutex_lock_80: ref;

axiom ldv_mutex_lock_80 == $sub.ref(0, 381471);

procedure ldv_mutex_lock_80($p0: ref);



const ldv_mutex_unlock_81: ref;

axiom ldv_mutex_unlock_81 == $sub.ref(0, 382503);

procedure ldv_mutex_unlock_81($p0: ref);



const ldv_mutex_lock_92: ref;

axiom ldv_mutex_lock_92 == $sub.ref(0, 383535);

procedure ldv_mutex_lock_92($p0: ref);



const ldv_mutex_unlock_93: ref;

axiom ldv_mutex_unlock_93 == $sub.ref(0, 384567);

procedure ldv_mutex_unlock_93($p0: ref);



const ldv_mutex_lock_88: ref;

axiom ldv_mutex_lock_88 == $sub.ref(0, 385599);

procedure ldv_mutex_lock_88($p0: ref);



const ldv_mutex_unlock_89: ref;

axiom ldv_mutex_unlock_89 == $sub.ref(0, 386631);

procedure ldv_mutex_unlock_89($p0: ref);



const ldv_mutex_lock_86: ref;

axiom ldv_mutex_lock_86 == $sub.ref(0, 387663);

procedure ldv_mutex_lock_86($p0: ref);



const ldv_mutex_unlock_87: ref;

axiom ldv_mutex_unlock_87 == $sub.ref(0, 388695);

procedure ldv_mutex_unlock_87($p0: ref);



const ldv_mutex_lock_84: ref;

axiom ldv_mutex_lock_84 == $sub.ref(0, 389727);

procedure ldv_mutex_lock_84($p0: ref);



const fw_delay_overflow: ref;

axiom fw_delay_overflow == $sub.ref(0, 390759);

procedure fw_delay_overflow($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_85: ref;

axiom ldv_mutex_unlock_85 == $sub.ref(0, 391791);

procedure ldv_mutex_unlock_85($p0: ref);



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 392823);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);



const ldv_mutex_lock_82: ref;

axiom ldv_mutex_lock_82 == $sub.ref(0, 393855);

procedure ldv_mutex_lock_82($p0: ref);



const check_scan_ok: ref;

axiom check_scan_ok == $sub.ref(0, 394887);

procedure check_scan_ok($i0: i32, $i1: i32, $p2: ref) returns ($r: i1);



const ldv_mutex_unlock_83: ref;

axiom ldv_mutex_unlock_83 == $sub.ref(0, 395919);

procedure ldv_mutex_unlock_83($p0: ref);



const pm_dvb_suspend: ref;

axiom pm_dvb_suspend == $sub.ref(0, 396951);

procedure pm_dvb_suspend($p0: ref) returns ($r: i32);



const pm_dvb_resume: ref;

axiom pm_dvb_resume == $sub.ref(0, 397983);

procedure pm_dvb_resume($p0: ref) returns ($r: i32);



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 399015);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const dvb_start_streaming: ref;

axiom dvb_start_streaming == $sub.ref(0, 400047);

procedure dvb_start_streaming($p0: ref) returns ($r: i32);



const ldv_mutex_lock_90: ref;

axiom ldv_mutex_lock_90 == $sub.ref(0, 401079);

procedure ldv_mutex_lock_90($p0: ref);



const dvb_urb_init: ref;

axiom dvb_urb_init == $sub.ref(0, 402111);

procedure dvb_urb_init($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_91: ref;

axiom ldv_mutex_unlock_91 == $sub.ref(0, 403143);

procedure ldv_mutex_unlock_91($p0: ref);



const dvb_urb_irq: ref;

axiom dvb_urb_irq == $sub.ref(0, 404175);

procedure dvb_urb_irq($p0: ref);



const dvb_dmx_swfilter: ref;

axiom dvb_dmx_swfilter == $sub.ref(0, 405207);

procedure dvb_dmx_swfilter($p0: ref, $p1: ref, $i2: i64);



const poseidon_fm_open: ref;

axiom poseidon_fm_open == $sub.ref(0, 406239);

procedure poseidon_fm_open($p0: ref) returns ($r: i32);



const poseidon_fm_close: ref;

axiom poseidon_fm_close == $sub.ref(0, 407271);

procedure poseidon_fm_close($p0: ref) returns ($r: i32);



const ldv_mutex_lock_122: ref;

axiom ldv_mutex_lock_122 == $sub.ref(0, 408303);

procedure ldv_mutex_lock_122($p0: ref);



const ldv_mutex_unlock_123: ref;

axiom ldv_mutex_unlock_123 == $sub.ref(0, 409335);

procedure ldv_mutex_unlock_123($p0: ref);



const ldv_mutex_lock_120: ref;

axiom ldv_mutex_lock_120 == $sub.ref(0, 410367);

procedure ldv_mutex_lock_120($p0: ref);



const poseidon_check_mode_radio: ref;

axiom poseidon_check_mode_radio == $sub.ref(0, 411399);

procedure poseidon_check_mode_radio($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_121: ref;

axiom ldv_mutex_unlock_121 == $sub.ref(0, 412431);

procedure ldv_mutex_unlock_121($p0: ref);



const vidioc_querycap___0: ref;

axiom vidioc_querycap___0 == $sub.ref(0, 413463);

procedure vidioc_querycap___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vidioc_g_input___0: ref;

axiom vidioc_g_input___0 == $sub.ref(0, 414495);

procedure vidioc_g_input___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vidioc_s_input___0: ref;

axiom vidioc_s_input___0 == $sub.ref(0, 415527);

procedure vidioc_s_input___0($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const tlg_fm_vidioc_queryctrl: ref;

axiom tlg_fm_vidioc_queryctrl == $sub.ref(0, 416559);

procedure tlg_fm_vidioc_queryctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const tlg_fm_vidioc_g_ctrl: ref;

axiom tlg_fm_vidioc_g_ctrl == $sub.ref(0, 417591);

procedure tlg_fm_vidioc_g_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const tlg_fm_vidioc_s_ctrl: ref;

axiom tlg_fm_vidioc_s_ctrl == $sub.ref(0, 418623);

procedure tlg_fm_vidioc_s_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const tlg_fm_vidioc_g_exts_ctrl: ref;

axiom tlg_fm_vidioc_g_exts_ctrl == $sub.ref(0, 419655);

procedure tlg_fm_vidioc_g_exts_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const tlg_fm_vidioc_s_exts_ctrl: ref;

axiom tlg_fm_vidioc_s_exts_ctrl == $sub.ref(0, 420687);

procedure tlg_fm_vidioc_s_exts_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const tlg_fm_vidioc_querymenu: ref;

axiom tlg_fm_vidioc_querymenu == $sub.ref(0, 421719);

procedure tlg_fm_vidioc_querymenu($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vidioc_g_audio___0: ref;

axiom vidioc_g_audio___0 == $sub.ref(0, 422751);

procedure vidioc_g_audio___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vidioc_s_audio___0: ref;

axiom vidioc_s_audio___0 == $sub.ref(0, 423783);

procedure vidioc_s_audio___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const tlg_fm_vidioc_g_tuner: ref;

axiom tlg_fm_vidioc_g_tuner == $sub.ref(0, 424815);

procedure tlg_fm_vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vidioc_s_tuner___0: ref;

axiom vidioc_s_tuner___0 == $sub.ref(0, 425847);

procedure vidioc_s_tuner___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const fm_get_freq: ref;

axiom fm_get_freq == $sub.ref(0, 426879);

procedure fm_get_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const fm_set_freq: ref;

axiom fm_set_freq == $sub.ref(0, 427911);

procedure fm_set_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const pm_fm_suspend: ref;

axiom pm_fm_suspend == $sub.ref(0, 428943);

procedure pm_fm_suspend($p0: ref) returns ($r: i32);



const pm_fm_resume: ref;

axiom pm_fm_resume == $sub.ref(0, 429975);

procedure pm_fm_resume($p0: ref) returns ($r: i32);



const set_frequency___0: ref;

axiom set_frequency___0 == $sub.ref(0, 431007);

procedure set_frequency___0($p0: ref, $i1: i32) returns ($r: i32);



const ldv_mutex_lock_126: ref;

axiom ldv_mutex_lock_126 == $sub.ref(0, 432039);

procedure ldv_mutex_lock_126($p0: ref);



const ldv_mutex_unlock_127: ref;

axiom ldv_mutex_unlock_127 == $sub.ref(0, 433071);

procedure ldv_mutex_unlock_127($p0: ref);



const ldv_mutex_lock_124: ref;

axiom ldv_mutex_lock_124 == $sub.ref(0, 434103);

procedure ldv_mutex_lock_124($p0: ref);



const ldv_mutex_unlock_125: ref;

axiom ldv_mutex_unlock_125 == $sub.ref(0, 435135);

procedure ldv_mutex_unlock_125($p0: ref);



const v4l2_ctrl_query_menu: ref;

axiom v4l2_ctrl_query_menu == $sub.ref(0, 436167);

procedure v4l2_ctrl_query_menu($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const v4l2_ctrl_query_fill: ref;

axiom v4l2_ctrl_query_fill == $sub.ref(0, 437199);

procedure v4l2_ctrl_query_fill($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 438231);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);



const poseidon_probe: ref;

axiom poseidon_probe == $sub.ref(0, 439263);

procedure poseidon_probe($p0: ref, $p1: ref) returns ($r: i32);



const poseidon_disconnect: ref;

axiom poseidon_disconnect == $sub.ref(0, 440295);

procedure poseidon_disconnect($p0: ref);



const poseidon_suspend: ref;

axiom poseidon_suspend == $sub.ref(0, 441327);

procedure poseidon_suspend($p0: ref, $i1: i32) returns ($r: i32);



const poseidon_resume: ref;

axiom poseidon_resume == $sub.ref(0, 442359);

procedure poseidon_resume($p0: ref) returns ($r: i32);



const get_pd: ref;

axiom get_pd == $sub.ref(0, 443391);

procedure get_pd($p0: ref) returns ($r: ref);



const is_working: ref;

axiom is_working == $sub.ref(0, 444423);

procedure is_working($p0: ref) returns ($r: i32);



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 445455);

procedure atomic_read($p0: ref) returns ($r: i32);



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 446487);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);



const ldv_mutex_lock_148: ref;

axiom ldv_mutex_lock_148 == $sub.ref(0, 447519);

procedure ldv_mutex_lock_148($p0: ref);



const ldv_mutex_unlock_149: ref;

axiom ldv_mutex_unlock_149 == $sub.ref(0, 448551);

procedure ldv_mutex_unlock_149($p0: ref);



const stop_all_video_stream: ref;

axiom stop_all_video_stream == $sub.ref(0, 449583);

procedure stop_all_video_stream($p0: ref) returns ($r: i32);



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 450615);

procedure v4l2_device_unregister($p0: ref);



const pd_dvb_usb_device_exit: ref;

axiom pd_dvb_usb_device_exit == $sub.ref(0, 451647);

procedure pd_dvb_usb_device_exit($p0: ref);



const poseidon_fm_exit: ref;

axiom poseidon_fm_exit == $sub.ref(0, 452679);

procedure poseidon_fm_exit($p0: ref) returns ($r: i32);



const poseidon_audio_free: ref;

axiom poseidon_audio_free == $sub.ref(0, 453711);

procedure poseidon_audio_free($p0: ref) returns ($r: i32);



const pd_video_exit: ref;

axiom pd_video_exit == $sub.ref(0, 454743);

procedure pd_video_exit($p0: ref);



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 455775);

procedure usb_set_intfdata($p0: ref, $p1: ref);



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 456807);

procedure dev_set_drvdata($p0: ref, $p1: ref);



const destroy_video_device: ref;

axiom destroy_video_device == $sub.ref(0, 457839);

procedure destroy_video_device($p0: ref);



const video_is_registered: ref;

axiom video_is_registered == $sub.ref(0, 458871);

procedure video_is_registered($p0: ref) returns ($r: i32);



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 459903);

procedure video_unregister_device($p0: ref);



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 460935);

procedure constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);



const snd_card_free: ref;

axiom snd_card_free == $sub.ref(0, 461967);

procedure snd_card_free($p0: ref) returns ($r: i32);



const dvb_dmxdev_release: ref;

axiom dvb_dmxdev_release == $sub.ref(0, 462999);

procedure dvb_dmxdev_release($p0: ref);



const dvb_unregister_frontend: ref;

axiom dvb_unregister_frontend == $sub.ref(0, 464031);

procedure dvb_unregister_frontend($p0: ref) returns ($r: i32);



const dvb_unregister_adapter: ref;

axiom dvb_unregister_adapter == $sub.ref(0, 465063);

procedure dvb_unregister_adapter($p0: ref) returns ($r: i32);



const ldv_mutex_lock_21: ref;

axiom ldv_mutex_lock_21 == $sub.ref(0, 466095);

procedure ldv_mutex_lock_21($p0: ref);



const ldv_mutex_unlock_22: ref;

axiom ldv_mutex_unlock_22 == $sub.ref(0, 467127);

procedure ldv_mutex_unlock_22($p0: ref);



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 468159);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);



const check_firmware: ref;

axiom check_firmware == $sub.ref(0, 469191);

procedure check_firmware($p0: ref, $p1: ref) returns ($r: i1);



const find_old_poseidon: ref;

axiom find_old_poseidon == $sub.ref(0, 470223);

procedure find_old_poseidon($p0: ref) returns ($r: ref);



const kref_init: ref;

axiom kref_init == $sub.ref(0, 471255);

procedure kref_init($p0: ref);



const set_map_flags: ref;

axiom set_map_flags == $sub.ref(0, 472287);

procedure set_map_flags($p0: ref, $p1: ref);



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 473319);

procedure usb_get_dev($p0: ref) returns ($r: ref);



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 474351);

procedure usb_get_intf($p0: ref) returns ($r: ref);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 475383);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);



const dev_name: ref;

axiom dev_name == $sub.ref(0, 476415);

procedure dev_name($p0: ref) returns ($r: ref);



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 477447);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);



const pd_video_init: ref;

axiom pd_video_init == $sub.ref(0, 478479);

procedure pd_video_init($p0: ref) returns ($r: i32);



const poseidon_audio_init: ref;

axiom poseidon_audio_init == $sub.ref(0, 479511);

procedure poseidon_audio_init($p0: ref) returns ($r: i32);



const poseidon_fm_init: ref;

axiom poseidon_fm_init == $sub.ref(0, 480543);

procedure poseidon_fm_init($p0: ref) returns ($r: i32);



const pd_dvb_usb_device_init: ref;

axiom pd_dvb_usb_device_init == $sub.ref(0, 481575);

procedure pd_dvb_usb_device_init($p0: ref) returns ($r: i32);



const device_init_wakeup: ref;

axiom device_init_wakeup == $sub.ref(0, 482607);

procedure device_init_wakeup($p0: ref, $i1: i1) returns ($r: i32);



const pm_runtime_set_autosuspend_delay: ref;

axiom pm_runtime_set_autosuspend_delay == $sub.ref(0, 483639);

procedure pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32);



const usb_enable_autosuspend: ref;

axiom usb_enable_autosuspend == $sub.ref(0, 484671);

procedure usb_enable_autosuspend($p0: ref);



const hibernation_resume: ref;

axiom hibernation_resume == $sub.ref(0, 485703);

procedure hibernation_resume($p0: ref);



const get_autopm_ref: ref;

axiom get_autopm_ref == $sub.ref(0, 486735);

procedure get_autopm_ref($p0: ref) returns ($r: i32);



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 487767);

procedure atomic_set($p0: ref, $i1: i32);



const dvb_register_adapter: ref;

axiom dvb_register_adapter == $sub.ref(0, 488799);

procedure dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const dvb_register_frontend: ref;

axiom dvb_register_frontend == $sub.ref(0, 489831);

procedure dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32);



const pd_start_feed: ref;

axiom pd_start_feed == $sub.ref(0, 490863);

procedure pd_start_feed($p0: ref) returns ($r: i32);



const pd_stop_feed: ref;

axiom pd_stop_feed == $sub.ref(0, 491895);

procedure pd_stop_feed($p0: ref) returns ($r: i32);



const dvb_dmx_init: ref;

axiom dvb_dmx_init == $sub.ref(0, 492927);

procedure dvb_dmx_init($p0: ref) returns ($r: i32);



const dvb_dmxdev_init: ref;

axiom dvb_dmxdev_init == $sub.ref(0, 493959);

procedure dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32);



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 494991);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);



const vdev_init: ref;

axiom vdev_init == $sub.ref(0, 496023);

procedure vdev_init($p0: ref, $p1: ref) returns ($r: ref);



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 497055);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const video_device_alloc: ref;

axiom video_device_alloc == $sub.ref(0, 498087);

procedure video_device_alloc() returns ($r: ref);



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 499119);

procedure video_set_drvdata($p0: ref, $p1: ref);



const ldv_successful_malloc: ref;

axiom ldv_successful_malloc == $sub.ref(0, 500151);

procedure ldv_successful_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_successful_malloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} {:cexpr "ldv_successful_malloc:arg:__size"} boogie_si_record_i64($i0);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p1 := malloc($i0);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 1} true;
    $i2 := $ne.ref($p1, $0.ref);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 1} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 1} true;
    call {:si_unique_call 561} __VERIFIER_assume($i3);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const snd_card_create: ref;

axiom snd_card_create == $sub.ref(0, 501183);

procedure snd_card_create($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);



const snd_pcm_new: ref;

axiom snd_pcm_new == $sub.ref(0, 502215);

procedure snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);



const snd_pcm_set_ops: ref;

axiom snd_pcm_set_ops == $sub.ref(0, 503247);

procedure snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref);



const snd_card_register: ref;

axiom snd_card_register == $sub.ref(0, 504279);

procedure snd_card_register($p0: ref) returns ($r: i32);



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 505311);

procedure kobject_name($p0: ref) returns ($r: ref);



const fixup: ref;

axiom fixup == $sub.ref(0, 506343);

procedure fixup($p0: ref) returns ($r: ref);



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 507375);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const firmware_download: ref;

axiom firmware_download == $sub.ref(0, 508407);

procedure firmware_download($p0: ref) returns ($r: i32);



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 509439);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 510471);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 511503);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 512535);

procedure release_firmware($p0: ref);



const pm_notifier_block: ref;

axiom pm_notifier_block == $sub.ref(0, 513567);

procedure pm_notifier_block($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



const usb_lock_device_for_reset: ref;

axiom usb_lock_device_for_reset == $sub.ref(0, 514599);

procedure usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32);



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 515631);

procedure usb_reset_device($p0: ref) returns ($r: i32);



const device_unlock: ref;

axiom device_unlock == $sub.ref(0, 516663);

procedure device_unlock($p0: ref);



const ldv_mutex_unlock_145: ref;

axiom ldv_mutex_unlock_145 == $sub.ref(0, 517695);

procedure ldv_mutex_unlock_145($p0: ref);



const ldv_mutex_unlock_mutex_of_device: ref;

axiom ldv_mutex_unlock_mutex_of_device == $sub.ref(0, 518727);

procedure ldv_mutex_unlock_mutex_of_device($p0: ref);



const nondet_v4l2_buf_type: ref;

axiom nondet_v4l2_buf_type == $sub.ref(0, 519759);

procedure nondet_v4l2_buf_type() returns ($r: i32);
  free requires assertsPassed;



implementation nondet_v4l2_buf_type() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 562} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i10 := 128;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i10 := 8;
    goto $bb21;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i10 := 7;
    goto $bb21;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i10 := 6;
    goto $bb21;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i10 := 5;
    goto $bb21;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i10 := 4;
    goto $bb21;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i10 := 3;
    goto $bb21;

  $bb13:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i10 := 2;
    goto $bb21;

  $bb17:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb21;
}



const main: ref;

axiom main == $sub.ref(0, 520791);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.2, $M.73, $M.74, $M.38, $M.34, $M.75, $M.22, $M.23, $M.15, $M.16, $M.9, $M.11, $M.8, $M.7, $M.89, $M.90, $M.95, $M.6, $M.1, $M.57, $M.56, $M.55, $M.53, $M.3, $M.96, $M.97, $M.98, $M.10, $M.99, $CurrAddr, $M.4, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $i139: i32;
  var $p140: ref;
  var $i141: i64;
  var $p142: ref;
  var $i143: i32;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $p148: ref;
  var $i149: i32;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $p160: ref;
  var $i161: i32;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $i167: i32;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $i171: i32;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i32;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $i198: i32;
  var $p199: ref;
  var $i200: i32;
  var $p201: ref;
  var $i202: i32;
  var $p203: ref;
  var $i204: i32;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $p209: ref;
  var $i210: i32;
  var $p211: ref;
  var $i212: i32;
  var $p213: ref;
  var $i214: i32;
  var $p215: ref;
  var $i216: i32;
  var $p217: ref;
  var $i218: i32;
  var $p219: ref;
  var $i220: i32;
  var $p221: ref;
  var $i223: i32;
  var $i224: i1;
  var $i225: i1;
  var $i226: i1;
  var $i227: i1;
  var $i228: i1;
  var $i229: i1;
  var $i230: i1;
  var $i231: i1;
  var $i232: i1;
  var $i233: i1;
  var $i234: i1;
  var $i235: i1;
  var $i236: i1;
  var $i237: i1;
  var $i238: i1;
  var $i239: i1;
  var $i240: i1;
  var $i241: i1;
  var $i242: i1;
  var $i243: i1;
  var $i244: i1;
  var $i245: i1;
  var $i246: i1;
  var $i247: i1;
  var $i248: i1;
  var $i249: i1;
  var $i250: i1;
  var $i251: i1;
  var $i252: i1;
  var $i253: i1;
  var $i254: i1;
  var $i255: i1;
  var $i256: i1;
  var $i257: i1;
  var $i258: i1;
  var $i259: i1;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i270: i32;
  var $i261: i32;
  var $i222: i32;
  var $i300: i32;
  var $i301: i1;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i64;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    call {:si_unique_call 564} $initialize();
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p0 := ldv_successful_malloc(736);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p2 := ldv_successful_malloc(624);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p4 := ldv_successful_malloc(4);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 569} $i6 := __VERIFIER_nondet_uint();
    call {:si_unique_call 570} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i6);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i6);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p7 := ldv_successful_malloc(4);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 572} $i9 := __VERIFIER_nondet_uint();
    call {:si_unique_call 573} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i9);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i9);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p10 := ldv_successful_malloc(248);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p12 := ldv_successful_malloc(4);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 576} {:cexpr "var_pd_buf_prepare_21_p2"} boogie_si_record_i32($i14);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p15 := ldv_successful_malloc(336);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 578} $i17 := __VERIFIER_nondet_int();
    call {:si_unique_call 579} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
    call {:si_unique_call 580} {:cexpr "res_pd_video_open_64"} boogie_si_record_i32($i17);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p18 := ldv_successful_malloc(1);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i19 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i19);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i19);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} $i20 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 585} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i20);
    call {:si_unique_call 586} {:cexpr "var_pd_video_read_68_p2"} boogie_si_record_i64($i20);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $p21 := ldv_successful_malloc(8);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} $i23 := __VERIFIER_nondet_longlong();
    call {:si_unique_call 589} {:cexpr "smack:ext:__VERIFIER_nondet_longlong"} boogie_si_record_i64($i23);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i23);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p24 := ldv_successful_malloc(16);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p26 := ldv_successful_malloc(184);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p28 := ldv_successful_malloc(104);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p31 := ldv_successful_malloc(208);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p34 := ldv_successful_malloc(64);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p1);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p40 := ldv_successful_malloc(4);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 596} $i42 := __VERIFIER_nondet_uint();
    call {:si_unique_call 597} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i42);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i42);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p41);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p41);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 598} $i45 := __VERIFIER_nondet_uint();
    call {:si_unique_call 599} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i45);
    call {:si_unique_call 600} {:cexpr "var_vidioc_s_input_35_p2"} boogie_si_record_i32($i45);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p46 := ldv_successful_malloc(80);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p49 := ldv_successful_malloc(52);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p1);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p1);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p1);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p54 := ldv_successful_malloc(84);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p1);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p1);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p58 := ldv_successful_malloc(8);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} $i60 := __VERIFIER_nondet_ulonglong();
    call {:si_unique_call 606} {:cexpr "smack:ext:__VERIFIER_nondet_ulonglong"} boogie_si_record_i64($i60);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, $i60);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p62 := ldv_successful_malloc(44);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p1);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p66 := ldv_successful_malloc(20);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $p69 := ldv_successful_malloc(88);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p1);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p74 := ldv_successful_malloc(4);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p1);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i77 := nondet_v4l2_buf_type();
    call {:si_unique_call 612} {:cexpr "var_vidioc_streamon_56_p2"} boogie_si_record_i32($i77);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i78 := nondet_v4l2_buf_type();
    call {:si_unique_call 614} {:cexpr "var_vidioc_streamoff_57_p2"} boogie_si_record_i32($i78);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p79 := ldv_successful_malloc(68);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p82 := ldv_successful_malloc(8);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p1);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i86 := __VERIFIER_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i86);
    call {:si_unique_call 619} {:cexpr "ldv_s_pd_video_fops_v4l2_file_operations"} boogie_si_record_i32($i86);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 620} $i87 := __VERIFIER_nondet_uint();
    call {:si_unique_call 621} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i87);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p11, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 622} $i89 := __VERIFIER_nondet_uint();
    call {:si_unique_call 623} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i89);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p11, $mul.ref(0, 248)), $mul.ref(12, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 624} $i91 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 625} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i91);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p11, $mul.ref(0, 248)), $mul.ref(24, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p92, $i91);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p13);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p11, $mul.ref(0, 248)), $mul.ref(36, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p95 := ldv_successful_malloc(4);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p11, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $i97);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p99 := ldv_successful_malloc(16);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p11, $mul.ref(0, 248)), $mul.ref(64, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p100);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 628} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p102, $p103, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p104 := ldv_successful_malloc(3864);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p16, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $p104);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 630} $i108 := __VERIFIER_nondet_uint();
    call {:si_unique_call 631} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i108);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p29, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, $i108);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 632} $i110 := __VERIFIER_nondet_uint();
    call {:si_unique_call 633} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i110);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p29, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $p112 := ldv_successful_malloc(200);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p32, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p113);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 635} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p115, $p116, 200, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} $i117 := __VERIFIER_nondet_uint();
    call {:si_unique_call 637} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i117);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p35, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i117);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 1} true;
    $p119 := $add.ref($add.ref($p35, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 1} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 1} true;
    $i121 := $ult.i32($i120, 2);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 1} true;
    $i122 := $zext.i1.i32($i121);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 1} true;
    call {:si_unique_call 638} __VERIFIER_assume($i122);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p75);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p35, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 639} $i125 := __VERIFIER_nondet_uint();
    call {:si_unique_call 640} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i125);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p35, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $i125);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 641} $i127 := __VERIFIER_nondet_uint();
    call {:si_unique_call 642} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i127);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p35, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i127);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 643} $i129 := __VERIFIER_nondet_uint();
    call {:si_unique_call 644} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i129);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i129);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 1} true;
    $p131 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 1} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 1} true;
    $i133 := $ult.i32($i132, 4);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 1} true;
    $i134 := $zext.i1.i32($i133);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 645} __VERIFIER_assume($i134);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 646} $i135 := __VERIFIER_nondet_uint();
    call {:si_unique_call 647} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i135);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i135);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 648} $i137 := __VERIFIER_nondet_uint();
    call {:si_unique_call 649} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i137);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, $i137);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 650} $i139 := __VERIFIER_nondet_uint();
    call {:si_unique_call 651} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i139);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, $i139);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 652} $i141 := __VERIFIER_nondet_ulonglong();
    call {:si_unique_call 653} {:cexpr "smack:ext:__VERIFIER_nondet_ulonglong"} boogie_si_record_i64($i141);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p142, $i141);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 1} true;
    call {:si_unique_call 654} $i143 := __VERIFIER_nondet_uint();
    call {:si_unique_call 655} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i143);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 1} true;
    call {:si_unique_call 656} $i145 := __VERIFIER_nondet_uint();
    call {:si_unique_call 657} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i145);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p50, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $i145);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 658} $i147 := __VERIFIER_nondet_uint();
    call {:si_unique_call 659} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i147);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p50, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, $i147);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 660} $i149 := __VERIFIER_nondet_uint();
    call {:si_unique_call 661} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i149);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p50, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, $i149);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 662} $i151 := __VERIFIER_nondet_uint();
    call {:si_unique_call 663} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i151);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, $i151);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p153 := ldv_successful_malloc(4);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(36, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i155);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 665} $i157 := __VERIFIER_nondet_uint();
    call {:si_unique_call 666} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i157);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(40, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i157);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 667} $i159 := __VERIFIER_nondet_uint();
    call {:si_unique_call 668} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i159);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(44, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, $i159);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 669} $i161 := __VERIFIER_nondet_uint();
    call {:si_unique_call 670} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i161);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(48, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, $i161);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 671} $i163 := __VERIFIER_nondet_uint();
    call {:si_unique_call 672} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i163);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, $i163);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 673} $i165 := __VERIFIER_nondet_uint();
    call {:si_unique_call 674} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i165);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i165);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 675} $i167 := __VERIFIER_nondet_int();
    call {:si_unique_call 676} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i167);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, $i167);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 677} $i169 := __VERIFIER_nondet_int();
    call {:si_unique_call 678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i169);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p55, $mul.ref(0, 84)), $mul.ref(64, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, $i169);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i171 := __VERIFIER_nondet_uint();
    call {:si_unique_call 680} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i171);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p63, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, $i171);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p154);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p63, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, $i173);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} $i175 := __VERIFIER_nondet_uint();
    call {:si_unique_call 682} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i175);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p63, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, $i175);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 683} $i177 := __VERIFIER_nondet_uint();
    call {:si_unique_call 684} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i177);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p80, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i177);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 685} $i179 := __VERIFIER_nondet_uint();
    call {:si_unique_call 686} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i179);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p83, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p180, $i179);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 687} $i181 := __VERIFIER_nondet_int();
    call {:si_unique_call 688} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i181);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p83, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p182, $i181);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p100, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p183, $p99);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p184 := ldv_successful_malloc(32);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p113);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p185);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 690} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p187, $p188, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p189 := ldv_successful_malloc(44);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p113);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p190);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 692} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p192, $p193, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 1} true;
    call {:si_unique_call 693} $i194 := __VERIFIER_nondet_uint();
    call {:si_unique_call 694} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i194);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p185, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, $i194);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 1} true;
    call {:si_unique_call 695} $i196 := __VERIFIER_nondet_uint();
    call {:si_unique_call 696} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i196);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p185, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, $i196);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 697} $i198 := __VERIFIER_nondet_uint();
    call {:si_unique_call 698} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i198);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p185, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p199, $i198);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p13);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p185, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, $i200);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 699} $i202 := __VERIFIER_nondet_uint();
    call {:si_unique_call 700} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i202);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p185, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p203, $i202);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 701} $i204 := __VERIFIER_nondet_uint();
    call {:si_unique_call 702} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i204);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p185, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, $i204);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p206 := ldv_successful_malloc(4);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p185, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p209, $i208);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 1} true;
    call {:si_unique_call 704} $i210 := __VERIFIER_nondet_uint();
    call {:si_unique_call 705} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i210);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p185, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, $i210);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} $i212 := __VERIFIER_nondet_uint();
    call {:si_unique_call 707} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i212);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p190, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p213, $i212);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} $i214 := __VERIFIER_nondet_uint();
    call {:si_unique_call 709} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i214);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p190, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, $i214);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $i216 := __VERIFIER_nondet_uint();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i216);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p190, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, $i216);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} $i218 := __VERIFIER_nondet_uint();
    call {:si_unique_call 713} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i218);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p190, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, $i218);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 1} true;
    call {:si_unique_call 714} $i220 := __VERIFIER_nondet_uint();
    call {:si_unique_call 715} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i220);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p190, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p221, $i220);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} ldv_initialize();
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i222 := 0;
    goto $bb1;

  $bb1:
    call $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i263, $i264, $i265, $i266, $i267, $i268, $i270, $i261, $i222, $i300, $i301, $i302, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140 := main_loop_$bb1($p3, $p5, $p8, $p11, $i14, $p16, $p18, $i20, $p22, $p25, $p27, $p29, $p30, $p32, $p33, $p35, $p36, $p37, $p38, $p39, $p41, $p43, $p44, $i45, $p47, $p48, $p50, $p51, $p52, $p53, $p55, $p56, $p57, $p59, $p61, $p63, $p64, $p65, $p67, $p68, $p70, $p71, $p72, $p73, $p76, $i77, $i78, $p80, $p81, $p83, $p84, $p85, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i263, $i264, $i265, $i266, $i267, $i268, $i270, $i261, $i222, $i300, $i301, $i302, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140);
    goto $bb1_last;

  corral_source_split_4713:
    assume {:verifier.code 1} true;
    call {:si_unique_call 718} $i300 := __VERIFIER_nondet_int();
    call {:si_unique_call 719} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i300);
    call {:si_unique_call 720} {:cexpr "tmp___0"} boogie_si_record_i32($i300);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb91;

  $bb91:
    assume !($i301 == 1);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i222, 0);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} ldv_check_final_state();
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p1);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} free_($p303);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p63);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} free_($p304);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p25);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} free_($p305);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p70);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} free_($p306);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} free_($p18);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p307 := $bitcast.ref.ref($p29);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} free_($p307);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p308 := $bitcast.ref.ref($p154);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} free_($p308);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p309 := $bitcast.ref.ref($p96);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} free_($p309);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p310 := $bitcast.ref.ref($p13);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} free_($p310);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p311 := $bitcast.ref.ref($p27);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} free_($p311);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p312 := $bitcast.ref.ref($p22);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} free_($p312);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p3);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} free_($p313);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p35);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} free_($p314);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p315 := $bitcast.ref.ref($p80);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} free_($p315);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p316 := $bitcast.ref.ref($p5);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} free_($p316);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p41);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} free_($p317);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p318 := $bitcast.ref.ref($p8);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} free_($p318);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p75);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} free_($p319);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p320 := $bitcast.ref.ref($p100);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} free_($p320);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p190);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} free_($p321);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p322 := $bitcast.ref.ref($p16);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} free_($p322);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p55);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} free_($p323);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p324 := $bitcast.ref.ref($p47);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} free_($p324);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p325 := $bitcast.ref.ref($p59);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} free_($p325);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p326 := $bitcast.ref.ref($p105);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} free_($p326);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p327 := $bitcast.ref.ref($p113);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} free_($p327);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p328 := $bitcast.ref.ref($p207);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} free_($p328);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p67);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} free_($p329);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p330 := $bitcast.ref.ref($p50);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} free_($p330);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p83);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} free_($p331);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p332 := $bitcast.ref.ref($p11);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} free_($p332);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p333 := $bitcast.ref.ref($p32);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} free_($p333);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p185);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} free_($p334);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 721} $i223 := __VERIFIER_nondet_int();
    call {:si_unique_call 722} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i223);
    call {:si_unique_call 723} {:cexpr "tmp"} boogie_si_record_i32($i223);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i224 := $slt.i32($i223, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    $i225 := $slt.i32($i223, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    $i226 := $slt.i32($i223, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    $i227 := $slt.i32($i223, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    $i228 := $slt.i32($i223, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    $i229 := $slt.i32($i223, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i223, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i230 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i222 := $i261;
    goto corral_source_split_4855_dummy;

  $bb16:
    assume $i230 == 1;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} ldv_handler_precall();
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_111 := vidioc_s_ctrl($p16, $p85, $p83);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i229 == 1;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} ldv_handler_precall();
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_110 := vidioc_g_ctrl($p16, $p84, $p83);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i228 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} ldv_handler_precall();
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_109 := vidioc_queryctrl($p16, $p81, $p80);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb10:
    assume $i227 == 1;
    assume {:verifier.code 0} true;
    $i231 := $slt.i32($i223, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i231 == 1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} ldv_handler_precall();
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_113 := vidioc_streamoff($p16, $p76, $i78);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb19:
    assume $i231 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ldv_handler_precall();
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_112 := vidioc_streamon($p16, $p76, $i77);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb8:
    assume $i226 == 1;
    assume {:verifier.code 0} true;
    $i232 := $slt.i32($i223, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    $i233 := $slt.i32($i223, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i233 == 1);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_handler_precall();
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_115 := vidioc_dqbuf($p16, $p73, $p70);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb23:
    assume $i233 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ldv_handler_precall();
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_114 := vidioc_qbuf($p16, $p72, $p70);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb21:
    assume $i232 == 1;
    assume {:verifier.code 0} true;
    $i234 := $slt.i32($i223, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i234 == 1);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} ldv_handler_precall();
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_117 := vidioc_querybuf($p16, $p71, $p70);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb25:
    assume $i234 == 1;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ldv_handler_precall();
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} vslice_dummy_var_116 := vidioc_reqbufs($p16, $p68, $p67);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb6:
    assume $i225 == 1;
    assume {:verifier.code 0} true;
    $i235 := $slt.i32($i223, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i223, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    $i237 := $slt.i32($i223, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    $i238 := $slt.i32($i223, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i238 == 1);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} ldv_handler_precall();
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_120 := vidioc_s_frequency($p16, $p65, $p63);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i238 == 1;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_handler_precall();
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_119 := vidioc_g_frequency($p16, $p64, $p63);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb31:
    assume $i237 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_handler_precall();
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_118 := vidioc_s_std($p16, $p61, $p59);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i236 == 1;
    assume {:verifier.code 0} true;
    $i239 := $slt.i32($i223, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i239 == 1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} ldv_handler_precall();
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_122 := vidioc_s_tuner($p16, $p57, $p55);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i239 == 1;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} ldv_handler_precall();
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_121 := vidioc_g_tuner($p16, $p56, $p55);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i235 == 1;
    assume {:verifier.code 0} true;
    $i240 := $slt.i32($i223, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    $i241 := $slt.i32($i223, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i241 == 1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} ldv_handler_precall();
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_124 := vidioc_s_audio($p16, $p53, $p50);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb39:
    assume $i241 == 1;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} ldv_handler_precall();
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_123 := vidioc_g_audio($p16, $p52, $p50);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb37:
    assume $i240 == 1;
    assume {:verifier.code 0} true;
    $i242 := $slt.i32($i223, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i242 == 1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} ldv_handler_precall();
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_126 := vidioc_enumaudio($p16, $p51, $p50);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb41:
    assume $i242 == 1;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ldv_handler_precall();
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_125 := vidioc_enum_input($p16, $p48, $p47);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb4:
    assume $i224 == 1;
    assume {:verifier.code 0} true;
    $i243 := $slt.i32($i223, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    $i244 := $slt.i32($i223, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    $i245 := $slt.i32($i223, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    $i246 := $slt.i32($i223, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    $i247 := $slt.i32($i223, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i247 == 1);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} ldv_handler_precall();
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_129 := vidioc_s_input($p16, $p44, $i45);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb51:
    assume $i247 == 1;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_handler_precall();
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vslice_dummy_var_128 := vidioc_g_input($p16, $p43, $p41);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb49:
    assume $i246 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} ldv_handler_precall();
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_127 := vidioc_try_fmt($p16, $p39, $p32);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb47:
    assume $i245 == 1;
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i223, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i248 == 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} ldv_handler_precall();
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} vslice_dummy_var_131 := vidioc_g_fmt_vbi($p16, $p38, $p32);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb53:
    assume $i248 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ldv_handler_precall();
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_130 := vidioc_s_fmt($p16, $p37, $p32);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i244 == 1;
    assume {:verifier.code 0} true;
    $i249 := $slt.i32($i223, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    $i250 := $slt.i32($i223, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i250 == 1);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} ldv_handler_precall();
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_133 := vidioc_enum_fmt($p16, $p36, $p35);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb57:
    assume $i250 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} ldv_handler_precall();
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_132 := vidioc_g_fmt($p16, $p33, $p32);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb55:
    assume $i249 == 1;
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i223, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i251 == 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_handler_precall();
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_135 := vidioc_querycap($p16, $p30, $p29);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb59:
    assume $i251 == 1;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} ldv_handler_precall();
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_134 := pd_video_mmap($p16, $p27);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb43:
    assume $i243 == 1;
    assume {:verifier.code 0} true;
    $i252 := $slt.i32($i223, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    $i253 := $slt.i32($i223, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    $i254 := $slt.i32($i223, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i254 == 1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} ldv_handler_precall();
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_137 := pd_video_poll($p16, $p25);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb65:
    assume $i254 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ldv_handler_precall();
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_136 := pd_video_read($p16, $p18, $i20, $p22);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb63:
    assume $i253 == 1;
    assume {:verifier.code 0} true;
    $i255 := $slt.i32($i223, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i255 == 1);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i222, 1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i270 := $i222;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i261 := $i270;
    goto $bb77;

  $bb85:
    assume $i268 == 1;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_handler_precall();
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_140 := pd_video_release($p16);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i270 := 0;
    goto $bb87;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i255 == 1;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i222, 0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    $i267 := $i222;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i261 := $i267;
    goto $bb77;

  $bb78:
    assume $i263 == 1;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} ldv_handler_precall();
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i264 := pd_video_open($p16);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 792} {:cexpr "res_pd_video_open_64"} boogie_si_record_i32($i264);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_check_return_value($i264);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i266 := $add.i32($i222, 1);
    call {:si_unique_call 828} {:cexpr "ldv_s_pd_video_fops_v4l2_file_operations"} boogie_si_record_i32($i266);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i267 := $i266;
    goto $bb84;

  $bb80:
    assume $i265 == 1;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i252 == 1;
    assume {:verifier.code 0} true;
    $i256 := $slt.i32($i223, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    $i257 := $slt.i32($i223, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i257 == 1);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} ldv_handler_precall();
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} pd_buf_release($p3, $p11);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb71:
    assume $i257 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} ldv_handler_precall();
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} pd_buf_queue($p3, $p11);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb69:
    assume $i256 == 1;
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i223, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i258 == 1);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_handler_precall();
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_138 := pd_buf_prepare($p3, $p11, $i14);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb73:
    assume $i258 == 1;
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i223, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb18;

  $bb75:
    assume $i259 == 1;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_handler_precall();
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} vslice_dummy_var_139 := pd_buf_setup($p3, $p5, $p8);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i261 := $i222;
    goto $bb77;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb90;

  corral_source_split_4855_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4713;
}



const __VERIFIER_nondet_longlong: ref;

axiom __VERIFIER_nondet_longlong == $sub.ref(0, 521823);

procedure __VERIFIER_nondet_longlong() returns ($r: i64);



const __VERIFIER_nondet_ulonglong: ref;

axiom __VERIFIER_nondet_ulonglong == $sub.ref(0, 522855);

procedure __VERIFIER_nondet_ulonglong() returns ($r: i64);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 523887);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.3, $M.53, $M.55, $M.56, $M.57;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 831} {:cexpr "ldv_mutex_lock_of_poseidon"} boogie_si_record_i32(1);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 832} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 833} {:cexpr "ldv_mutex_pm_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 834} {:cexpr "ldv_mutex_power_lock_of_snd_card"} boogie_si_record_i32(1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 835} {:cexpr "ldv_mutex_vb_lock_of_videobuf_queue"} boogie_si_record_i32(1);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 524919);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 525951);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 526983);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} ldv_error();
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.53;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_error();
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.55;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} ldv_error();
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.56;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_error();
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.57;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_error();
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 528015);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 842} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 1} true;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 529047);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 530079);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 531111);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 532143);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 533175);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 534207);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 535239);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 843} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 844} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 845} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 846} __VERIFIER_assume($i6);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 536271);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 537303);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 538335);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 539367);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 540399);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 541431);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 542463);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 847} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 848} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 849} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 850} __VERIFIER_assume($i4);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 543495);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 544527);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 545559);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 546591);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 851} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 852} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 853} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 854} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 855} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 856} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 857} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 858} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 859} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 860} __VERIFIER_assume($i7);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} __VERIFIER_assume($i11);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 547623);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 548655);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 862} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 863} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 864} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 865} __VERIFIER_assume($i4);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 549687);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 550719);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 551751);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 552783);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 553815);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 1} true;
    call {:si_unique_call 866} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 867} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 868} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 1} true;
    call {:si_unique_call 869} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 870} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 871} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 873} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 874} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 875} __VERIFIER_assume($i7);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 876} __VERIFIER_assume($i11);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 554847);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 555879);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 556911);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 557943);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 558975);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 560007);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 561039);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 562071);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 563103);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 879} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 564135);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 880} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 881} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 882} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 565167);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 884} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 885} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 566199);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 887} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 567231);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 568263);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 888} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 889} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 569295);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 570327);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 571359);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 572391);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.73, $M.74, $M.38, $M.34, $M.75, $M.22, $M.23, $M.15, $M.16, $M.9, $M.11, $M.8, $M.7, $M.89, $M.90, $M.95, $M.6, $M.1, $M.57, $M.56, $M.55, $M.53, $M.3, $M.96, $M.97, $M.98, $M.10, $M.99;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 890} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 891} {:cexpr "debug_mode"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, pd_device_list, pd_device_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_device_list, $mul.ref(0, 16)), $mul.ref(8, 1)), pd_device_list);
    $M.73 := $store.i16($M.73, id_table, 899);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(2, 1)), 6948);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(4, 1)), 16385);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(14, 1)), 1);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), 899);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(2, 1)), 6948);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(4, 1)), 16385);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(14, 1)), 1);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(15, 1)), 1);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i16($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.74 := $store.ref($M.74, poseidon_driver, .str.86);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(8, 1)), poseidon_probe);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(16, 1)), poseidon_disconnect);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(24, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(32, 1)), poseidon_suspend);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(40, 1)), poseidon_resume);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(48, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(56, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(64, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(72, 1)), id_table);
    $M.74 := $store.i32($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i32($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.74 := $store.i32($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.74 := $store.i32($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.74 := $store.i64($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.74 := $store.i32($M.74, $add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(104, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(280, 1)), 2);
    $M.38 := $store.i32($M.38, preemphasis, 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref(1, 4)), 32);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref(2, 4)), 16);
    $M.0 := $store.ref($M.0, poseidon_fm_ioctl_ops, vidioc_querycap___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(376, 1)), vidioc_g_input___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(384, 1)), vidioc_s_input___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(416, 1)), tlg_fm_vidioc_queryctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(424, 1)), tlg_fm_vidioc_g_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(432, 1)), tlg_fm_vidioc_s_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(440, 1)), tlg_fm_vidioc_g_exts_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(448, 1)), tlg_fm_vidioc_s_exts_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(464, 1)), tlg_fm_vidioc_querymenu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(480, 1)), vidioc_g_audio___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(488, 1)), vidioc_s_audio___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(616, 1)), tlg_fm_vidioc_g_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(624, 1)), vidioc_s_tuner___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(632, 1)), fm_get_freq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(640, 1)), fm_set_freq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, poseidon_fm_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(32, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(56, 1)), poseidon_fm_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(64, 1)), poseidon_fm_close);
    $M.0 := $store.ref($M.0, poseidon_fm_template, poseidon_fm_fops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(328, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(504, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(508, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(512, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(513, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(516, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(520, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(524, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(856, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(872, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(880, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(888, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(888, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(936, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1016, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1016, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1064, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1072, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1080, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1096, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(0, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(9, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1160, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1164, 1)), $sub.i32(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1168, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1176, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1184, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1264, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1280, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1288, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1296, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1304, 1)), video_device_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1312, 1)), poseidon_fm_ioctl_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1320, 1)), $0.ref);
    call {:si_unique_call 892} {:cexpr "dvb_bandwidth_length"} boogie_si_record_i32(3);
    $M.34 := $store.i32($M.34, dvb_bandwidth, 8);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(1, 4)), 0);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 4)), 7);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(1, 4)), 1);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 4)), 6);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(1, 4)), 2);
    $M.0 := $store.i8($M.0, poseidon_frontend_ops, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(97, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(102, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(103, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(109, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(110, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(128, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(132, 1)), 174000000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(136, 1)), 862000000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(140, 1)), 62500);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(148, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(164, 1)), 1075523247);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(168, 1)), poseidon_fe_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(184, 1)), poseidon_fe_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(192, 1)), poseidon_fe_sleep);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(224, 1)), poseidon_set_fe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(232, 1)), poseidon_fe_get_tune_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(240, 1)), poseidon_get_fe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(248, 1)), poseidon_read_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(256, 1)), poseidon_read_ber);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(264, 1)), poseidon_read_signal_strength);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(272, 1)), poseidon_read_snr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(280, 1)), poseidon_read_unc_blocks);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(360, 1)), poseidon_ts_bus_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(97, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(102, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(103, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(109, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(110, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(128, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(132, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(136, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(140, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(148, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(744, 1)), $0.ref);
    $M.75 := $store.i16($M.75, adapter_nr, $sub.i16(0, 1));
    $M.75 := $store.i16($M.75, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(1, 2)), $sub.i16(0, 1));
    $M.75 := $store.i16($M.75, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(2, 2)), $sub.i16(0, 1));
    $M.75 := $store.i16($M.75, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.75 := $store.i16($M.75, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(4, 2)), $sub.i16(0, 1));
    $M.75 := $store.i16($M.75, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 1));
    $M.75 := $store.i16($M.75, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(6, 2)), $sub.i16(0, 1));
    $M.75 := $store.i16($M.75, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 1));
    $M.0 := $store.i32($M.0, snd_pd_hw_capture, 65795);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(8, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(16, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(20, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(24, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(28, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(40, 1)), 32768);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(48, 1)), 8192);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(56, 1)), 8192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(64, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(68, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, controls, 9963776);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(44, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(52, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(68, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), 9963777);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(44, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(52, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(68, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), 9963779);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(44, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(52, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(68, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), 9963778);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(44, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(52, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(68, 1)), 4);
    $M.22 := $store.i64($M.22, poseidon_tvnorms, 32);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 68);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(20, 1)), 32);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(0, 1)), 1);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 66);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(20, 1)), 16);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(0, 1)), 4);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 71);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(20, 1)), 64);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(0, 1)), 8);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 72);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(20, 1)), 128);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(0, 1)), 16);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 73);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(20, 1)), 256);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(0, 1)), 256);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(20, 1)), 512);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(0, 1)), 512);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 78);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(20, 1)), 1048576);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(0, 1)), 1024);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 78);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 99);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(20, 1)), 1048576);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(0, 1)), 4096);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 78);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 84);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(20, 1)), 1);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(0, 1)), 8192);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 78);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 84);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 74);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 80);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(20, 1)), 2);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(0, 1)), 65536);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 66);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(20, 1)), 4096);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(0, 1)), 131072);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 68);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(20, 1)), 8192);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(0, 1)), 262144);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 71);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(20, 1)), 16384);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(0, 1)), 524288);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 72);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(20, 1)), 32768);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(0, 1)), 1048576);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 75);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(20, 1)), 65536);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(0, 1)), 2097152);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 75);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 49);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(20, 1)), 131072);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(0, 1)), 4194304);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(20, 1)), 262144);
    $M.22 := $store.i64($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(0, 1)), 8388608);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 76);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 67);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(20, 1)), 524288);
    $M.23 := $store.i32($M.23, pd_audio_modes, 1);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(4, 1)), 1);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(0, 1)), 2);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(4, 1)), 2);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1)), 1);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(0, 1)), 16);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(4, 1)), 8);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1)), 3);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(0, 1)), 32);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(4, 1)), 4);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1)), 2);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(0, 1)), 64);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(4, 1)), 8);
    $M.16 := $store.i32($M.16, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1)), 4);
    $M.9 := $store.ref($M.9, pd_inputs, .str.45);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(0, 16)), $mul.ref(8, 1)), 1);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.46);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(8, 1)), 2);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.47);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(8, 1)), 4);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(0, 1)), .str.48);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(8, 1)), 8);
    $M.8 := $store.ref($M.8, poseidon_formats, .str.40);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(8, 1)), 1448695129);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(12, 1)), 16);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), .str.41);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(8, 1)), 1346520914);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(12, 1)), 16);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.95 := $store.i64($M.95, video_to_audio_map, 4325425);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(8, 1)), 2);
    $M.95 := $store.i64($M.95, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(0, 1)), 4864);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(8, 1)), 8);
    $M.95 := $store.i64($M.95, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(0, 1)), 8192);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(8, 1)), 4);
    $M.1 := 0;
    call {:si_unique_call 893} {:cexpr "usb_transfer_mode"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, pd_video_ioctl_ops, vidioc_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(24, 1)), vidioc_enum_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(56, 1)), vidioc_g_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(88, 1)), vidioc_g_fmt_vbi);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(128, 1)), vidioc_s_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(200, 1)), vidioc_try_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(272, 1)), vidioc_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(280, 1)), vidioc_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(288, 1)), vidioc_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(296, 1)), vidioc_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(328, 1)), vidioc_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(336, 1)), vidioc_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(352, 1)), vidioc_s_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(368, 1)), vidioc_enum_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(376, 1)), vidioc_g_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(384, 1)), vidioc_s_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(416, 1)), vidioc_queryctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(424, 1)), vidioc_g_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(432, 1)), vidioc_s_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(472, 1)), vidioc_enumaudio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(480, 1)), vidioc_g_audio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(488, 1)), vidioc_s_audio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(616, 1)), vidioc_g_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(624, 1)), vidioc_s_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(632, 1)), vidioc_g_frequency);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(640, 1)), vidioc_s_frequency);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, pd_video_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(8, 1)), pd_video_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(24, 1)), pd_video_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(32, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(48, 1)), pd_video_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(56, 1)), pd_video_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(64, 1)), pd_video_release);
    $M.0 := $store.ref($M.0, pd_video_template, pd_video_fops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(328, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(504, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(508, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(512, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(513, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(516, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(520, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(524, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(856, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(872, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(880, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(888, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(888, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(936, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1016, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1016, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1064, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1072, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1080, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1096, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(0, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(9, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1160, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1164, 1)), $sub.i32(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1168, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1176, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1184, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1264, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1280, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1288, 1)), 16777215);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1296, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1304, 1)), video_device_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1312, 1)), pd_video_ioctl_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1320, 1)), $0.ref);
    $M.57 := 0;
    call {:si_unique_call 894} {:cexpr "ldv_mutex_vb_lock_of_videobuf_queue"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 895} {:cexpr "ldv_mutex_power_lock_of_snd_card"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 896} {:cexpr "ldv_mutex_pm_mutex"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 897} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 898} {:cexpr "ldv_mutex_lock_of_poseidon"} boogie_si_record_i32(0);
    $M.96 := $store.i8($M.96, .str.24, 86);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.24, $mul.ref(0, 5)), $mul.ref(1, 1)), 70);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.24, $mul.ref(0, 5)), $mul.ref(2, 1)), 72);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.24, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.24, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.22 := $store.i8($M.22, .str.57, 115);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(.str.57, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(.str.57, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(.str.57, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(.str.57, $mul.ref(0, 8)), $mul.ref(4, 1)), 115);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(.str.57, $mul.ref(0, 8)), $mul.ref(5, 1)), 116);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(.str.57, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(.str.57, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(4, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.97 := $store.i8($M.97, .str.38, 117);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(1, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 9)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 9)), $mul.ref(3, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 9)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 9)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 9)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(3, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(4, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(3, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.98 := $store.i8($M.98, .str.73, 68);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(1, 1)), 86);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(2, 1)), 72);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.10 := $store.i8($M.10, .str.83, 82);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.83, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.83, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.83, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.83, $mul.ref(0, 6)), $mul.ref(4, 1)), 111);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.83, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(4, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.99 := $store.i8($M.99, .str.91, 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(1, 1)), 115);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(2, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(4, 1)), 115);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.9, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(1, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(10, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(11, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(12, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(14, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    call {:si_unique_call 899} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 573423);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 574455);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 575487);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 576519);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 577551);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 578583);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.73, $M.74, $M.38, $M.34, $M.75, $M.22, $M.23, $M.15, $M.16, $M.9, $M.11, $M.8, $M.7, $M.89, $M.90, $M.95, $M.6, $M.1, $M.57, $M.56, $M.55, $M.53, $M.3, $M.96, $M.97, $M.98, $M.10, $M.99, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 900} __SMACK_static_init();
    call {:si_unique_call 901} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.12, $M.13, $M.14, $M.2, $M.73, $M.74, $M.38, $M.34, $M.75, $M.22, $M.23, $M.15, $M.16, $M.9, $M.11, $M.8, $M.7, $M.89, $M.90, $M.95, $M.6, $M.1, $M.57, $M.56, $M.55, $M.53, $M.3, $M.96, $M.97, $M.98, $M.10, $M.99, $CurrAddr, $M.4;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation free_all_urb_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i4: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3 := in_$i4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_555;

  $bb9:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i20;
    goto $bb9_dummy;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, in_$i1);
    goto corral_source_split_580;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i3, 1);
    call {:si_unique_call 114} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_579;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, $0.ref);
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p0, $mul.ref(out_$i18, 8));
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i3);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} usb_free_urb(out_$p6);
    goto corral_source_split_574;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} usb_free_coherent(out_$p10, out_$i13, out_$p15, out_$i17);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_570;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_564;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(in_$p0, $mul.ref(out_$i4, 8));
    goto corral_source_split_558;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3 := free_all_urb_generic_loop_$bb4(in_$p0, in_$i1, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3);
    return;

  exit:
    return;
}



procedure free_all_urb_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i4: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i3: i32);
  modifies $M.0;



implementation vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p16: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i20: i32, in_$i21: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i34: i32, in_$i31: i32, in_vslice_dummy_var_84: i64) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i20: i32, out_$i21: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i34: i32, out_$i31: i32, out_vslice_dummy_var_84: i64)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_84 := in_$p22, in_$p23, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$i20, in_$i21, in_$i32, in_$i33, in_$i35, in_$i36, in_$i34, in_$i31, in_vslice_dummy_var_84;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;

  $bb11:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i28, out_$i32;
    goto $bb11_dummy;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i28;
    assume true;
    goto $bb11;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, in_$p16);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} out_$i28 := send_get_req(in_$p8, 69, 1, out_$p27, in_$p4, 24);
    call {:si_unique_call 321} {:cexpr "ret"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_1541;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} out_vslice_dummy_var_84 := schedule_timeout(250);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, in_$p5, out_$i25);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.14, in_$p5);
    call {:si_unique_call 318} out_$i25 := devirtbounce(0, out_$p23, out_$i24, out_$p23);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} out_$p22 := get_current();
    goto corral_source_split_1535;

  $bb9:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, in_$p5, 1);
    goto corral_source_split_1534;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_1553;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i20;
    assume true;
    goto $bb15;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i20, 0);
    goto corral_source_split_1549;

  $bb13:
    assume out_$i33 == 1;
    goto corral_source_split_1548;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i20;
    assume true;
    goto $bb13;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i21, 0);
    goto corral_source_split_1532;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i21, 1);
    call {:si_unique_call 316} {:cexpr "count"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1531;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_84 := vidioc_g_tuner_loop_$bb8(in_$p3, in_$p4, in_$p5, in_$p8, in_$p16, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_84);
    return;

  exit:
    return;
}



procedure vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p16: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i20: i32, in_$i21: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i34: i32, in_$i31: i32, in_vslice_dummy_var_84: i64) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i20: i32, out_$i21: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i34: i32, out_$i31: i32, out_vslice_dummy_var_84: i64);
  modifies $M.0, $CurrAddr, $M.14;



implementation alloc_bulk_urbs_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i3: i8, in_$i4: i32, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i10: i32, in_$i34: i32) returns (out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i10: i32, out_$i34: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i10, in_$i34;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1825;

  $bb13:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i32;
    goto $bb13_dummy;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i32;
    assume true;
    goto $bb13;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, in_$i1);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i10, 1);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p31, out_$p11);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(in_$p0, $mul.ref(out_$i30, 8));
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i28 := $or.i32(out_$i27, 4);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} usb_fill_bulk_urb(out_$p11, in_$p2, out_$i25, out_$p18, in_$i4, in_$p6, in_$p7);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i25 := $or.i32(out_$i24, $sub.i32(0, 1073741696));
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} out_$i24 := __create_pipe(in_$p2, out_$i23);
    call {:si_unique_call 371} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1845;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(in_$i3);
    goto corral_source_split_1844;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$i21, out_$p22 := out_$i10, out_$p11;
    assume true;
    goto $bb11;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} out_$p18 := usb_alloc_coherent(in_$p2, out_$i16, in_$i5, out_$p17);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1836;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(in_$i4);
    goto corral_source_split_1835;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i10;
    assume true;
    goto $bb7;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_1828;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} out_$p11 := usb_alloc_urb(0, in_$i5);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34 := alloc_bulk_urbs_generic_loop_$bb4(in_$p0, in_$i1, in_$p2, in_$i3, in_$i4, in_$i5, in_$p6, in_$p7, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34);
    return;

  exit:
    return;
}



procedure alloc_bulk_urbs_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i3: i8, in_$i4: i32, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i10: i32, in_$i34: i32) returns (out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i10: i32, out_$i34: i32);
  modifies $M.0;



implementation prepare_iso_urb_loop_$bb21(in_$i44: i32, in_$i45: i1, in_$i43: i32) returns (out_$i44: i32, out_$i45: i1, out_$i43: i32)
{

  entry:
    out_$i44, out_$i45, out_$i43 := in_$i44, in_$i45, in_$i43;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  $bb23:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i44;
    goto $bb23_dummy;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, 0);
    goto corral_source_split_1957;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i43, 1);
    call {:si_unique_call 390} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i44, out_$i45, out_$i43 := prepare_iso_urb_loop_$bb21(out_$i44, out_$i45, out_$i43);
    return;

  exit:
    return;
}



procedure prepare_iso_urb_loop_$bb21(in_$i44: i32, in_$i45: i1, in_$i43: i32) returns (out_$i44: i32, out_$i45: i1, out_$i43: i32);



implementation check_control_id_loop_$bb4(in_$i0: i32, in_$i3: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p5: ref) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p5: ref)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$p10, out_$p12, out_$i13, out_$i14, out_$p5 := in_$p7, in_$i8, in_$i9, in_$p10, in_$p12, in_$i13, in_$i14, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;

  $bb10:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p12;
    goto $bb10_dummy;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$i14 := $ugt.i64(in_$i3, out_$i13);
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_4193;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p5, $mul.ref(1, 72));
    goto corral_source_split_4192;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$p10 := out_$p5;
    assume true;
    goto $bb7;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, in_$i0);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    goto corral_source_split_4185;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($add.ref(out_$p5, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$p10, out_$p12, out_$i13, out_$i14, out_$p5 := check_control_id_loop_$bb4(in_$i0, in_$i3, out_$p7, out_$i8, out_$i9, out_$p10, out_$p12, out_$i13, out_$i14, out_$p5);
    return;

  exit:
    return;
}



procedure check_control_id_loop_$bb4(in_$i0: i32, in_$i3: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p5: ref) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p5: ref);



implementation main_loop_$bb1(in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$p11: ref, in_$i14: i32, in_$p16: ref, in_$p18: ref, in_$i20: i64, in_$p22: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p61: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p80: ref, in_$p81: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i223: i32, in_$i224: i1, in_$i225: i1, in_$i226: i1, in_$i227: i1, in_$i228: i1, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i1, in_$i238: i1, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i1, in_$i248: i1, in_$i249: i1, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i1, in_$i255: i1, in_$i256: i1, in_$i257: i1, in_$i258: i1, in_$i259: i1, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i270: i32, in_$i261: i32, in_$i222: i32, in_$i300: i32, in_$i301: i1, in_$i302: i1, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i64, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32) returns (out_$i223: i32, out_$i224: i1, out_$i225: i1, out_$i226: i1, out_$i227: i1, out_$i228: i1, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i1, out_$i238: i1, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i1, out_$i248: i1, out_$i249: i1, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i1, out_$i255: i1, out_$i256: i1, out_$i257: i1, out_$i258: i1, out_$i259: i1, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i270: i32, out_$i261: i32, out_$i222: i32, out_$i300: i32, out_$i301: i1, out_$i302: i1, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i64, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32)
{

  entry:
    out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i261, out_$i222, out_$i300, out_$i301, out_$i302, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140 := in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i270, in_$i261, in_$i222, in_$i300, in_$i301, in_$i302, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4713;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    out_$i222 := out_$i261;
    goto corral_source_split_4855_dummy;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_4855;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i270;
    goto $bb77;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i267;
    goto $bb77;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$i261 := out_$i222;
    goto $bb77;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} out_vslice_dummy_var_139 := pd_buf_setup(in_$p3, in_$p5, in_$p8);
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_handler_precall();
    goto corral_source_split_4852;

  $bb75:
    assume out_$i259 == 1;
    goto corral_source_split_4851;

  $bb73:
    assume out_$i258 == 1;
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i223, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb69:
    assume out_$i256 == 1;
    assume {:verifier.code 0} true;
    out_$i258 := $slt.i32(out_$i223, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb61:
    assume out_$i252 == 1;
    assume {:verifier.code 0} true;
    out_$i256 := $slt.i32(out_$i223, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb43:
    assume out_$i243 == 1;
    assume {:verifier.code 0} true;
    out_$i252 := $slt.i32(out_$i223, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb4:
    assume out_$i224 == 1;
    assume {:verifier.code 0} true;
    out_$i243 := $slt.i32(out_$i223, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb3:
    assume {:verifier.code 0} true;
    out_$i224 := $slt.i32(out_$i223, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 721} out_$i223 := __VERIFIER_nondet_int();
    call {:si_unique_call 722} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i223);
    call {:si_unique_call 723} {:cexpr "tmp"} boogie_si_record_i32(out_$i223);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb92:
    assume {:verifier.code 0} true;
    assume out_$i302 == 1;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    assume out_$i301 == 1;
    goto $bb90;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb91;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i301 := $ne.i32(out_$i300, 0);
    goto corral_source_split_4715;

  corral_source_split_4713:
    assume {:verifier.code 1} true;
    call {:si_unique_call 718} out_$i300 := __VERIFIER_nondet_int();
    call {:si_unique_call 719} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i300);
    call {:si_unique_call 720} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i300);
    goto corral_source_split_4714;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    out_$i302 := $ne.i32(out_$i222, 0);
    goto corral_source_split_4943;

  $bb91:
    assume !(out_$i301 == 1);
    goto corral_source_split_4942;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_vslice_dummy_var_138 := pd_buf_prepare(in_$p3, in_$p11, in_$i14);
    goto corral_source_split_4849;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_handler_precall();
    goto corral_source_split_4848;

  $bb74:
    assume !(out_$i258 == 1);
    goto corral_source_split_4847;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} pd_buf_queue(in_$p3, in_$p11);
    goto corral_source_split_4841;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} ldv_handler_precall();
    goto corral_source_split_4840;

  $bb71:
    assume out_$i257 == 1;
    goto corral_source_split_4839;

  $bb70:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    out_$i257 := $slt.i32(out_$i223, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} pd_buf_release(in_$p3, in_$p11);
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} ldv_handler_precall();
    goto corral_source_split_4844;

  $bb72:
    assume !(out_$i257 == 1);
    goto corral_source_split_4843;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_4934;

  $bb79:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    out_$i267 := out_$i222;
    goto $bb84;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i267 := out_$i266;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i266 := $add.i32(out_$i222, 1);
    call {:si_unique_call 828} {:cexpr "ldv_s_pd_video_fops_v4l2_file_operations"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_4932;

  $bb81:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    out_$i265 := $ne.i32(out_$i264, 0);
    goto corral_source_split_4861;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_check_return_value(out_$i264);
    goto corral_source_split_4860;

  SeqInstr_162:
    call {:si_unique_call 792} {:cexpr "res_pd_video_open_64"} boogie_si_record_i32(out_$i264);
    goto corral_source_split_4859;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} out_$i264 := pd_video_open(in_$p16);
    goto SeqInstr_161;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} ldv_handler_precall();
    goto corral_source_split_4858;

  $bb78:
    assume out_$i263 == 1;
    goto corral_source_split_4857;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i222, 0);
    goto corral_source_split_4834;

  $bb67:
    assume out_$i255 == 1;
    goto corral_source_split_4833;

  $bb63:
    assume out_$i253 == 1;
    assume {:verifier.code 0} true;
    out_$i255 := $slt.i32(out_$i223, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb62:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    out_$i253 := $slt.i32(out_$i223, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_4940;

  $bb86:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    out_$i270 := out_$i222;
    goto $bb87;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i270 := 0;
    goto $bb87;

  SeqInstr_168:
    goto corral_source_split_4938;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} out_vslice_dummy_var_140 := pd_video_release(in_$p16);
    goto SeqInstr_167;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_handler_precall();
    goto corral_source_split_4937;

  $bb85:
    assume out_$i268 == 1;
    goto corral_source_split_4936;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i222, 1);
    goto corral_source_split_4837;

  $bb68:
    assume !(out_$i255 == 1);
    goto corral_source_split_4836;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_vslice_dummy_var_136 := pd_video_read(in_$p16, in_$p18, in_$i20, in_$p22);
    goto corral_source_split_4827;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ldv_handler_precall();
    goto corral_source_split_4826;

  $bb65:
    assume out_$i254 == 1;
    goto corral_source_split_4825;

  $bb64:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    out_$i254 := $slt.i32(out_$i223, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} out_vslice_dummy_var_137 := pd_video_poll(in_$p16, in_$p25);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} ldv_handler_precall();
    goto corral_source_split_4830;

  $bb66:
    assume !(out_$i254 == 1);
    goto corral_source_split_4829;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} out_vslice_dummy_var_134 := pd_video_mmap(in_$p16, in_$p27);
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} ldv_handler_precall();
    goto corral_source_split_4818;

  $bb59:
    assume out_$i251 == 1;
    goto corral_source_split_4817;

  $bb55:
    assume out_$i249 == 1;
    assume {:verifier.code 0} true;
    out_$i251 := $slt.i32(out_$i223, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb45:
    assume out_$i244 == 1;
    assume {:verifier.code 0} true;
    out_$i249 := $slt.i32(out_$i223, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb44:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    out_$i244 := $slt.i32(out_$i223, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} out_vslice_dummy_var_135 := vidioc_querycap(in_$p16, in_$p30, in_$p29);
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_handler_precall();
    goto corral_source_split_4822;

  $bb60:
    assume !(out_$i251 == 1);
    goto corral_source_split_4821;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_vslice_dummy_var_132 := vidioc_g_fmt(in_$p16, in_$p33, in_$p32);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} ldv_handler_precall();
    goto corral_source_split_4810;

  $bb57:
    assume out_$i250 == 1;
    goto corral_source_split_4809;

  $bb56:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    out_$i250 := $slt.i32(out_$i223, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_vslice_dummy_var_133 := vidioc_enum_fmt(in_$p16, in_$p36, in_$p35);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} ldv_handler_precall();
    goto corral_source_split_4814;

  $bb58:
    assume !(out_$i250 == 1);
    goto corral_source_split_4813;

  SeqInstr_159:
    goto corral_source_split_4803;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} out_vslice_dummy_var_130 := vidioc_s_fmt(in_$p16, in_$p37, in_$p32);
    goto SeqInstr_158;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ldv_handler_precall();
    goto corral_source_split_4802;

  $bb53:
    assume out_$i248 == 1;
    goto corral_source_split_4801;

  $bb47:
    assume out_$i245 == 1;
    assume {:verifier.code 0} true;
    out_$i248 := $slt.i32(out_$i223, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb46:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    out_$i245 := $slt.i32(out_$i223, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} out_vslice_dummy_var_131 := vidioc_g_fmt_vbi(in_$p16, in_$p38, in_$p32);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} ldv_handler_precall();
    goto corral_source_split_4806;

  $bb54:
    assume !(out_$i248 == 1);
    goto corral_source_split_4805;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} out_vslice_dummy_var_127 := vidioc_try_fmt(in_$p16, in_$p39, in_$p32);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} ldv_handler_precall();
    goto corral_source_split_4790;

  $bb49:
    assume out_$i246 == 1;
    goto corral_source_split_4789;

  $bb48:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    out_$i246 := $slt.i32(out_$i223, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} out_vslice_dummy_var_128 := vidioc_g_input(in_$p16, in_$p43, in_$p41);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_handler_precall();
    goto corral_source_split_4794;

  $bb51:
    assume out_$i247 == 1;
    goto corral_source_split_4793;

  $bb50:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    out_$i247 := $slt.i32(out_$i223, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} out_vslice_dummy_var_129 := vidioc_s_input(in_$p16, in_$p44, in_$i45);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} ldv_handler_precall();
    goto corral_source_split_4798;

  $bb52:
    assume !(out_$i247 == 1);
    goto corral_source_split_4797;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_vslice_dummy_var_125 := vidioc_enum_input(in_$p16, in_$p48, in_$p47);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ldv_handler_precall();
    goto corral_source_split_4782;

  $bb41:
    assume out_$i242 == 1;
    goto corral_source_split_4781;

  $bb37:
    assume out_$i240 == 1;
    assume {:verifier.code 0} true;
    out_$i242 := $slt.i32(out_$i223, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb27:
    assume out_$i235 == 1;
    assume {:verifier.code 0} true;
    out_$i240 := $slt.i32(out_$i223, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb6:
    assume out_$i225 == 1;
    assume {:verifier.code 0} true;
    out_$i235 := $slt.i32(out_$i223, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb5:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    out_$i225 := $slt.i32(out_$i223, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} out_vslice_dummy_var_126 := vidioc_enumaudio(in_$p16, in_$p51, in_$p50);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} ldv_handler_precall();
    goto corral_source_split_4786;

  $bb42:
    assume !(out_$i242 == 1);
    goto corral_source_split_4785;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_vslice_dummy_var_123 := vidioc_g_audio(in_$p16, in_$p52, in_$p50);
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} ldv_handler_precall();
    goto corral_source_split_4774;

  $bb39:
    assume out_$i241 == 1;
    goto corral_source_split_4773;

  $bb38:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    out_$i241 := $slt.i32(out_$i223, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} out_vslice_dummy_var_124 := vidioc_s_audio(in_$p16, in_$p53, in_$p50);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} ldv_handler_precall();
    goto corral_source_split_4778;

  $bb40:
    assume !(out_$i241 == 1);
    goto corral_source_split_4777;

  SeqInstr_153:
    goto corral_source_split_4767;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} out_vslice_dummy_var_121 := vidioc_g_tuner(in_$p16, in_$p56, in_$p55);
    goto SeqInstr_152;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} ldv_handler_precall();
    goto corral_source_split_4766;

  $bb35:
    assume out_$i239 == 1;
    goto corral_source_split_4765;

  $bb29:
    assume out_$i236 == 1;
    assume {:verifier.code 0} true;
    out_$i239 := $slt.i32(out_$i223, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb28:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    out_$i236 := $slt.i32(out_$i223, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  SeqInstr_156:
    goto corral_source_split_4771;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} out_vslice_dummy_var_122 := vidioc_s_tuner(in_$p16, in_$p57, in_$p55);
    goto SeqInstr_155;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} ldv_handler_precall();
    goto corral_source_split_4770;

  $bb36:
    assume !(out_$i239 == 1);
    goto corral_source_split_4769;

  SeqInstr_147:
    goto corral_source_split_4755;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} out_vslice_dummy_var_118 := vidioc_s_std(in_$p16, in_$p61, in_$p59);
    goto SeqInstr_146;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_handler_precall();
    goto corral_source_split_4754;

  $bb31:
    assume out_$i237 == 1;
    goto corral_source_split_4753;

  $bb30:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    out_$i237 := $slt.i32(out_$i223, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} out_vslice_dummy_var_119 := vidioc_g_frequency(in_$p16, in_$p64, in_$p63);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_handler_precall();
    goto corral_source_split_4758;

  $bb33:
    assume out_$i238 == 1;
    goto corral_source_split_4757;

  $bb32:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    out_$i238 := $slt.i32(out_$i223, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  SeqInstr_150:
    goto corral_source_split_4763;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} out_vslice_dummy_var_120 := vidioc_s_frequency(in_$p16, in_$p65, in_$p63);
    goto SeqInstr_149;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} ldv_handler_precall();
    goto corral_source_split_4762;

  $bb34:
    assume !(out_$i238 == 1);
    goto corral_source_split_4761;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} out_vslice_dummy_var_116 := vidioc_reqbufs(in_$p16, in_$p68, in_$p67);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ldv_handler_precall();
    goto corral_source_split_4746;

  $bb25:
    assume out_$i234 == 1;
    goto corral_source_split_4745;

  $bb21:
    assume out_$i232 == 1;
    assume {:verifier.code 0} true;
    out_$i234 := $slt.i32(out_$i223, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb8:
    assume out_$i226 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := $slt.i32(out_$i223, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb7:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    out_$i226 := $slt.i32(out_$i223, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} out_vslice_dummy_var_117 := vidioc_querybuf(in_$p16, in_$p71, in_$p70);
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} ldv_handler_precall();
    goto corral_source_split_4750;

  $bb26:
    assume !(out_$i234 == 1);
    goto corral_source_split_4749;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_vslice_dummy_var_114 := vidioc_qbuf(in_$p16, in_$p72, in_$p70);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ldv_handler_precall();
    goto corral_source_split_4738;

  $bb23:
    assume out_$i233 == 1;
    goto corral_source_split_4737;

  $bb22:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    out_$i233 := $slt.i32(out_$i223, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} out_vslice_dummy_var_115 := vidioc_dqbuf(in_$p16, in_$p73, in_$p70);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_handler_precall();
    goto corral_source_split_4742;

  $bb24:
    assume !(out_$i233 == 1);
    goto corral_source_split_4741;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} out_vslice_dummy_var_112 := vidioc_streamon(in_$p16, in_$p76, in_$i77);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ldv_handler_precall();
    goto corral_source_split_4730;

  $bb19:
    assume out_$i231 == 1;
    goto corral_source_split_4729;

  $bb10:
    assume out_$i227 == 1;
    assume {:verifier.code 0} true;
    out_$i231 := $slt.i32(out_$i223, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb9:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    out_$i227 := $slt.i32(out_$i223, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_vslice_dummy_var_113 := vidioc_streamoff(in_$p16, in_$p76, in_$i78);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} ldv_handler_precall();
    goto corral_source_split_4734;

  $bb20:
    assume !(out_$i231 == 1);
    goto corral_source_split_4733;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} out_vslice_dummy_var_109 := vidioc_queryctrl(in_$p16, in_$p81, in_$p80);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} ldv_handler_precall();
    goto corral_source_split_4718;

  $bb12:
    assume out_$i228 == 1;
    goto corral_source_split_4717;

  $bb11:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    out_$i228 := $slt.i32(out_$i223, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  SeqInstr_141:
    goto corral_source_split_4723;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} out_vslice_dummy_var_110 := vidioc_g_ctrl(in_$p16, in_$p84, in_$p83);
    goto SeqInstr_140;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} ldv_handler_precall();
    goto corral_source_split_4722;

  $bb14:
    assume out_$i229 == 1;
    goto corral_source_split_4721;

  $bb13:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    out_$i229 := $slt.i32(out_$i223, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  SeqInstr_144:
    goto corral_source_split_4727;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} out_vslice_dummy_var_111 := vidioc_s_ctrl(in_$p16, in_$p85, in_$p83);
    goto SeqInstr_143;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} ldv_handler_precall();
    goto corral_source_split_4726;

  $bb16:
    assume out_$i230 == 1;
    goto corral_source_split_4725;

  $bb15:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i223, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i230 == 1);
    goto $bb18;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i259 == 1);
    goto $bb18;

  corral_source_split_4855_dummy:
    call {:si_unique_call 1} out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i261, out_$i222, out_$i300, out_$i301, out_$i302, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140 := main_loop_$bb1(in_$p3, in_$p5, in_$p8, in_$p11, in_$i14, in_$p16, in_$p18, in_$i20, in_$p22, in_$p25, in_$p27, in_$p29, in_$p30, in_$p32, in_$p33, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p41, in_$p43, in_$p44, in_$i45, in_$p47, in_$p48, in_$p50, in_$p51, in_$p52, in_$p53, in_$p55, in_$p56, in_$p57, in_$p59, in_$p61, in_$p63, in_$p64, in_$p65, in_$p67, in_$p68, in_$p70, in_$p71, in_$p72, in_$p73, in_$p76, in_$i77, in_$i78, in_$p80, in_$p81, in_$p83, in_$p84, in_$p85, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i261, out_$i222, out_$i300, out_$i301, out_$i302, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$p11: ref, in_$i14: i32, in_$p16: ref, in_$p18: ref, in_$i20: i64, in_$p22: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$p61: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p80: ref, in_$p81: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i223: i32, in_$i224: i1, in_$i225: i1, in_$i226: i1, in_$i227: i1, in_$i228: i1, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i1, in_$i238: i1, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i1, in_$i248: i1, in_$i249: i1, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i1, in_$i255: i1, in_$i256: i1, in_$i257: i1, in_$i258: i1, in_$i259: i1, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i270: i32, in_$i261: i32, in_$i222: i32, in_$i300: i32, in_$i301: i1, in_$i302: i1, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i64, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32) returns (out_$i223: i32, out_$i224: i1, out_$i225: i1, out_$i226: i1, out_$i227: i1, out_$i228: i1, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i1, out_$i238: i1, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i1, out_$i248: i1, out_$i249: i1, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i1, out_$i255: i1, out_$i256: i1, out_$i257: i1, out_$i258: i1, out_$i259: i1, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i270: i32, out_$i261: i32, out_$i222: i32, out_$i300: i32, out_$i301: i1, out_$i302: i1, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i64, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32);
  modifies $M.0, $CurrAddr, $M.3, $M.4, assertsPassed, $M.14, $M.12, $M.13;


