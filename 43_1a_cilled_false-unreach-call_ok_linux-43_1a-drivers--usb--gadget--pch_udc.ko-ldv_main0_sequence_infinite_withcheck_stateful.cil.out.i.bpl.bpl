var $M.1: [ref]i8;

var $M.2: ref;

var $M.3: [ref]ref;

var $M.4: i32;

var $M.5: i8;

var $M.6: i32;

var $M.14: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 390900);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 2056);

const pch_udc: ref;

axiom pch_udc == $sub.ref(0, 3088);

const __mod_pci_device_table: ref;

axiom __mod_pci_device_table == $sub.ref(0, 4144);

const pch_udc_ops: ref;

axiom pch_udc_ops == $sub.ref(0, 5264);

const vbus_gpio_port: ref;

axiom vbus_gpio_port == $sub.ref(0, 6292);

const pch_udc_ep_ops: ref;

axiom pch_udc_ep_ops == $sub.ref(0, 7396);

const udc_stall_spinlock: ref;

axiom udc_stall_spinlock == $sub.ref(0, 8492);

const {:count 6} ep0_string: ref;

axiom ep0_string == $sub.ref(0, 9522);

const speed_fs: ref;

axiom speed_fs == $sub.ref(0, 10547);

const {:count 4} pch_udc_pcidev_id: ref;

axiom pch_udc_pcidev_id == $sub.ref(0, 11699);

const pch_udc_driver: ref;

axiom pch_udc_driver == $sub.ref(0, 13019);

const .str: ref;

axiom .str == $sub.ref(0, 14051);

const {:count 12} .str.89: ref;

axiom .str.89 == $sub.ref(0, 15087);

const {:count 180} .str.69: ref;

axiom .str.69 == $sub.ref(0, 16291);

const {:count 14} .str.90: ref;

axiom .str.90 == $sub.ref(0, 17329);

const {:count 44} .str.99: ref;

axiom .str.99 == $sub.ref(0, 18397);

const {:count 27} .str.100: ref;

axiom .str.100 == $sub.ref(0, 19448);

const {:count 41} .str.7: ref;

axiom .str.7 == $sub.ref(0, 20513);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 22} .str.13: ref;

axiom .str.13 == $sub.ref(0, 21559);

const {:count 21} .str.14: ref;

axiom .str.14 == $sub.ref(0, 22604);

const {:count 3} .str.15: ref;

axiom .str.15 == $sub.ref(0, 23631);

const {:count 4} .str.16: ref;

axiom .str.16 == $sub.ref(0, 24659);

const {:count 34} .str.17: ref;

axiom .str.17 == $sub.ref(0, 25717);

const {:count 16} .str.5: ref;

axiom .str.5 == $sub.ref(0, 26757);

const {:count 22} .str.12: ref;

axiom .str.12 == $sub.ref(0, 27803);

const {:count 46} .str.98: ref;

axiom .str.98 == $sub.ref(0, 28873);

const {:count 16} .str.91: ref;

axiom .str.91 == $sub.ref(0, 29913);

const {:count 11} .str.92: ref;

axiom .str.92 == $sub.ref(0, 30948);

const {:count 10} .str.93: ref;

axiom .str.93 == $sub.ref(0, 31982);

const {:count 13} .str.94: ref;

axiom .str.94 == $sub.ref(0, 33019);

const {:count 5} .str.95: ref;

axiom .str.95 == $sub.ref(0, 34048);

const {:count 4} .str.96: ref;

axiom .str.96 == $sub.ref(0, 35076);

const {:count 6} .str.97: ref;

axiom .str.97 == $sub.ref(0, 36106);

const {:count 33} .str.1: ref;

axiom .str.1 == $sub.ref(0, 37163);

const {:count 13} .str.2: ref;

axiom .str.2 == $sub.ref(0, 38200);

const {:count 17} .str.6: ref;

axiom .str.6 == $sub.ref(0, 39241);

const {:count 30} .str.87: ref;

axiom .str.87 == $sub.ref(0, 40295);

const {:count 15} .str.88: ref;

axiom .str.88 == $sub.ref(0, 41334);

const {:count 37} .str.85: ref;

axiom .str.85 == $sub.ref(0, 42395);

const {:count 16} .str.86: ref;

axiom .str.86 == $sub.ref(0, 43435);

const {:count 34} .str.83: ref;

axiom .str.83 == $sub.ref(0, 44493);

const {:count 15} .str.84: ref;

axiom .str.84 == $sub.ref(0, 45532);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 32} .str.19: ref;

axiom .str.19 == $sub.ref(0, 46588);

const {:count 14} .str.20: ref;

axiom .str.20 == $sub.ref(0, 47626);

const {:count 48} .str.21: ref;

axiom .str.21 == $sub.ref(0, 48698);

const {:count 42} .str.22: ref;

axiom .str.22 == $sub.ref(0, 49764);

const {:count 29} .str.23: ref;

axiom .str.23 == $sub.ref(0, 50817);

const {:count 48} .str.24: ref;

axiom .str.24 == $sub.ref(0, 51889);

const {:count 17} .str.25: ref;

axiom .str.25 == $sub.ref(0, 52930);

const {:count 26} .str.26: ref;

axiom .str.26 == $sub.ref(0, 53980);

const {:count 21} .str.27: ref;

axiom .str.27 == $sub.ref(0, 55025);

const {:count 7} .str.28: ref;

axiom .str.28 == $sub.ref(0, 56056);

const {:count 14} .str.76: ref;

axiom .str.76 == $sub.ref(0, 57094);

const {:count 33} .str.77: ref;

axiom .str.77 == $sub.ref(0, 58151);

const {:count 15} .str.78: ref;

axiom .str.78 == $sub.ref(0, 59190);

const {:count 15} .str.79: ref;

axiom .str.79 == $sub.ref(0, 60229);

const {:count 34} .str.80: ref;

axiom .str.80 == $sub.ref(0, 61287);

const {:count 41} .str.81: ref;

axiom .str.81 == $sub.ref(0, 62352);

const {:count 40} .str.82: ref;

axiom .str.82 == $sub.ref(0, 63416);

const {:count 41} .str.60: ref;

axiom .str.60 == $sub.ref(0, 64481);

const {:count 19} .str.61: ref;

axiom .str.61 == $sub.ref(0, 65524);

const {:count 9} .str.62: ref;

axiom .str.62 == $sub.ref(0, 66557);

const {:count 53} .str.63: ref;

axiom .str.63 == $sub.ref(0, 67634);

const {:count 32} .str.64: ref;

axiom .str.64 == $sub.ref(0, 68690);

const {:count 12} .str.65: ref;

axiom .str.65 == $sub.ref(0, 69726);

const {:count 32} .str.66: ref;

axiom .str.66 == $sub.ref(0, 70782);

const {:count 47} .str.67: ref;

axiom .str.67 == $sub.ref(0, 71853);

const {:count 24} .str.71: ref;

axiom .str.71 == $sub.ref(0, 72901);

const {:count 10} .str.72: ref;

axiom .str.72 == $sub.ref(0, 73935);

const {:count 24} .str.68: ref;

axiom .str.68 == $sub.ref(0, 74983);

const {:count 10} .str.70: ref;

axiom .str.70 == $sub.ref(0, 76017);

const {:count 7} .str.29: ref;

axiom .str.29 == $sub.ref(0, 77048);

const {:count 6} .str.30: ref;

axiom .str.30 == $sub.ref(0, 78078);

const {:count 7} .str.31: ref;

axiom .str.31 == $sub.ref(0, 79109);

const {:count 6} .str.32: ref;

axiom .str.32 == $sub.ref(0, 80139);

const {:count 7} .str.33: ref;

axiom .str.33 == $sub.ref(0, 81170);

const {:count 6} .str.34: ref;

axiom .str.34 == $sub.ref(0, 82200);

const {:count 7} .str.35: ref;

axiom .str.35 == $sub.ref(0, 83231);

const {:count 6} .str.36: ref;

axiom .str.36 == $sub.ref(0, 84261);

const {:count 7} .str.37: ref;

axiom .str.37 == $sub.ref(0, 85292);

const {:count 6} .str.38: ref;

axiom .str.38 == $sub.ref(0, 86322);

const {:count 7} .str.39: ref;

axiom .str.39 == $sub.ref(0, 87353);

const {:count 6} .str.40: ref;

axiom .str.40 == $sub.ref(0, 88383);

const {:count 7} .str.41: ref;

axiom .str.41 == $sub.ref(0, 89414);

const {:count 6} .str.42: ref;

axiom .str.42 == $sub.ref(0, 90444);

const {:count 7} .str.43: ref;

axiom .str.43 == $sub.ref(0, 91475);

const {:count 6} .str.44: ref;

axiom .str.44 == $sub.ref(0, 92505);

const {:count 7} .str.45: ref;

axiom .str.45 == $sub.ref(0, 93536);

const {:count 6} .str.46: ref;

axiom .str.46 == $sub.ref(0, 94566);

const {:count 7} .str.47: ref;

axiom .str.47 == $sub.ref(0, 95597);

const {:count 7} .str.48: ref;

axiom .str.48 == $sub.ref(0, 96628);

const {:count 8} .str.49: ref;

axiom .str.49 == $sub.ref(0, 97660);

const {:count 7} .str.50: ref;

axiom .str.50 == $sub.ref(0, 98691);

const {:count 8} .str.51: ref;

axiom .str.51 == $sub.ref(0, 99723);

const {:count 7} .str.52: ref;

axiom .str.52 == $sub.ref(0, 100754);

const {:count 8} .str.53: ref;

axiom .str.53 == $sub.ref(0, 101786);

const {:count 7} .str.54: ref;

axiom .str.54 == $sub.ref(0, 102817);

const {:count 8} .str.55: ref;

axiom .str.55 == $sub.ref(0, 103849);

const {:count 7} .str.56: ref;

axiom .str.56 == $sub.ref(0, 104880);

const {:count 8} .str.57: ref;

axiom .str.57 == $sub.ref(0, 105912);

const {:count 7} .str.58: ref;

axiom .str.58 == $sub.ref(0, 106943);

const {:count 8} .str.59: ref;

axiom .str.59 == $sub.ref(0, 107975);

const {:count 47} .str.10: ref;

axiom .str.10 == $sub.ref(0, 109046);

const {:count 12} .str.11: ref;

axiom .str.11 == $sub.ref(0, 110082);

const {:count 33} .str.8: ref;

axiom .str.8 == $sub.ref(0, 111139);

const {:count 21} .str.9: ref;

axiom .str.9 == $sub.ref(0, 112184);

const {:count 30} .str.3: ref;

axiom .str.3 == $sub.ref(0, 113238);

const {:count 13} .str.4: ref;

axiom .str.4 == $sub.ref(0, 114275);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 19} .str.18: ref;

axiom .str.18 == $sub.ref(0, 115318);

const {:count 14} .str.73: ref;

axiom .str.73 == $sub.ref(0, 116356);

const {:count 19} .str.74: ref;

axiom .str.74 == $sub.ref(0, 117399);

const {:count 32} .str.75: ref;

axiom .str.75 == $sub.ref(0, 118455);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 119487);

const {:count 3} .str.1.212: ref;

axiom .str.1.212 == $sub.ref(0, 120514);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 121552);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 122580);

const main: ref;

axiom main == $sub.ref(0, 123612);

procedure main();
  free requires assertsPassed;
  modifies $M.4, $M.2, $M.1, $M.6, $M.5, $M.14, $CurrAddr, $M.3, assertsPassed;



implementation main()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i28: i32;
  var $i2: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: ref;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    call {:si_unique_call 0} $initialize();
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} ldv_initialize();
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i0 := pch_udc_pci_init();
    call {:si_unique_call 5} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb5;

  $bb5:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i42, $i43, $i44, $i45, $i28, $i2, $i50, $i51, $i52, vslice_dummy_var_17, vslice_dummy_var_18, vslice_dummy_var_19, vslice_dummy_var_20, vslice_dummy_var_21, vslice_dummy_var_22, vslice_dummy_var_23, vslice_dummy_var_24, vslice_dummy_var_25, vslice_dummy_var_26, vslice_dummy_var_27, vslice_dummy_var_28, vslice_dummy_var_29, vslice_dummy_var_30, vslice_dummy_var_31, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34 := main_loop_$bb5($i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i42, $i43, $i44, $i45, $i28, $i2, $i50, $i51, $i52, vslice_dummy_var_17, vslice_dummy_var_18, vslice_dummy_var_19, vslice_dummy_var_20, vslice_dummy_var_21, vslice_dummy_var_22, vslice_dummy_var_23, vslice_dummy_var_24, vslice_dummy_var_25, vslice_dummy_var_26, vslice_dummy_var_27, vslice_dummy_var_28, vslice_dummy_var_29, vslice_dummy_var_30, vslice_dummy_var_31, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34);
    goto $bb5_last;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    call {:si_unique_call 7} $i50 := __VERIFIER_nondet_int();
    call {:si_unique_call 8} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i50);
    call {:si_unique_call 9} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i51 == 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i2, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i52 == 1);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} pch_udc_pci_exit();
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} ldv_check_final_state();
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    return;

  $bb115:
    assume $i52 == 1;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 10} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 11} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 12} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i4 == 1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 1);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 2);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 3);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i7 == 1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 4);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i8 == 1);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 5);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i9 == 1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 6);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i10 == 1);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 7);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i11 == 1);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i3, 8);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i12 == 1);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i3, 9);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i13 == 1);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i3, 10);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i14 == 1);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i3, 11);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i15 == 1);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i3, 12);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i16 == 1);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i3, 13);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i17 == 1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i3, 14);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i18 == 1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i3, 15);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i19 == 1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i3, 16);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i20 == 1);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i3, 17);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i21 == 1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i3, 18);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i22 == 1);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i3, 19);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i23 == 1);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i3, 20);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i24 == 1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i3, 21);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i25 == 1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i3, 22);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i26 == 1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i2 := $i28;
    goto corral_source_split_185_dummy;

  $bb73:
    assume $i26 == 1;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_34 := pch_vbus_gpio_irq($u1, $u8);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb70:
    assume $i25 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} vslice_dummy_var_33 := pch_udc_isr($u1, $u8);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i24 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} pch_udc_shutdown($u6);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb64:
    assume $i23 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_32 := pch_udc_resume($u6);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb61:
    assume $i22 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_31 := pch_udc_suspend($u6, $u1);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb58:
    assume $i21 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} pch_udc_remove($u6);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb55:
    assume $i20 == 1;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i2, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i2;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i28 := $i45;
    goto $bb80;

  $bb81:
    assume $i42 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i43 := pch_udc_probe($u6, $u7);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 40} {:cexpr "res_pch_udc_probe_108"} boogie_si_record_i32($i43);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} ldv_check_return_value($i43);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb87;

  $bb83:
    assume $i44 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    goto $bb85;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i19 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} pch_udc_pcd_fifo_flush($u3);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb49:
    assume $i18 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_30 := pch_udc_pcd_set_wedge($u3);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb46:
    assume $i17 == 1;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_29 := pch_udc_pcd_set_halt($u3, $u1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb43:
    assume $i16 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_28 := pch_udc_pcd_dequeue($u3, $u5);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb40:
    assume $i15 == 1;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_27 := pch_udc_pcd_queue($u3, $u5, $u1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i14 == 1;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} pch_udc_free_request($u3, $u5);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb34:
    assume $i13 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_26 := pch_udc_alloc_request($u3, $u1);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i12 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} vslice_dummy_var_25 := pch_udc_pcd_ep_disable($u3);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb28:
    assume $i11 == 1;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_24 := pch_udc_pcd_ep_enable($u3, $u4);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb25:
    assume $i10 == 1;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} vslice_dummy_var_23 := pch_udc_stop($u2);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb22:
    assume $i9 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_22 := pch_udc_pcd_vbus_draw($u0, $u1);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb19:
    assume $i8 == 1;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_21 := pch_udc_pcd_vbus_session($u0, $u1);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb16:
    assume $i7 == 1;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_20 := pch_udc_pcd_pullup($u0, $u1);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_19 := pch_udc_pcd_selfpowered($u0, $u1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_18 := pch_udc_pcd_wakeup($u0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb7:
    assume $i4 == 1;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_17 := pch_udc_pcd_get_frame($u0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i28 := $i2;
    goto $bb80;

  $bb113:
    assume $i51 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_185_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 124644);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 125676);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_pci_init: ref;

axiom pch_udc_pci_init == $sub.ref(0, 126708);

procedure pch_udc_pci_init() returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pci_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i0 := __pci_register_driver(pch_udc_driver, __this_module, .str);
    call {:si_unique_call 44} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const pch_udc_pcd_get_frame: ref;

axiom pch_udc_pcd_get_frame == $sub.ref(0, 127740);

procedure pch_udc_pcd_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pcd_get_frame($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 45} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 46} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i6 := pch_udc_get_frame($p5);
    call {:si_unique_call 48} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_wakeup: ref;

axiom pch_udc_pcd_wakeup == $sub.ref(0, 128772);

procedure pch_udc_pcd_wakeup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation pch_udc_pcd_wakeup($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 49} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 50} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} ldv_spin_lock();
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} pch_udc_rmt_wakeup($p5);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 53} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 6088);
    call {:si_unique_call 54} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} spin_unlock_irqrestore($p8, $u9);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_selfpowered: ref;

axiom pch_udc_pcd_selfpowered == $sub.ref(0, 129804);

procedure pch_udc_pcd_selfpowered($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pcd_selfpowered($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} {:cexpr "pch_udc_pcd_selfpowered:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 57} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 58} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} pch_udc_clear_selfpowered($p6);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} pch_udc_set_selfpowered($p6);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_pullup: ref;

axiom pch_udc_pcd_pullup == $sub.ref(0, 130836);

procedure pch_udc_pcd_pullup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.1, $M.4, $CurrAddr;



implementation pch_udc_pcd_pullup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} {:cexpr "pch_udc_pcd_pullup:arg:is_on"} boogie_si_record_i32($i1);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 62} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 63} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 65} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p6);
    call {:si_unique_call 66} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 1208);
    call {:si_unique_call 67} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    call {:si_unique_call 68} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, $i8);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} pch_udc_set_disconnect($p6);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 69} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i15);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    call {:si_unique_call 70} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i16);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 1208);
    call {:si_unique_call 71} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    call {:si_unique_call 72} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 32);
    call {:si_unique_call 73} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 74} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i15);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p6);
    call {:si_unique_call 75} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 6088);
    call {:si_unique_call 76} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} spin_unlock($p28);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p6);
    call {:si_unique_call 78} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i29);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 1208);
    call {:si_unique_call 79} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i30);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    call {:si_unique_call 80} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i33);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 32);
    call {:si_unique_call 81} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i34);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p6);
    call {:si_unique_call 82} devirtbounce($p36, $p37);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p6);
    call {:si_unique_call 83} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i38);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 6088);
    call {:si_unique_call 84} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i39);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} spin_lock($p40);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} pch_udc_reconnect($p6);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_vbus_session: ref;

axiom pch_udc_pcd_vbus_session == $sub.ref(0, 131868);

procedure pch_udc_pcd_vbus_session($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.3, $CurrAddr;



implementation pch_udc_pcd_vbus_session($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} {:cexpr "pch_udc_pcd_vbus_session:arg:is_active"} boogie_si_record_i32($i1);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 88} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 89} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} pch_udc_vbus_session($p6, $i1);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_vbus_draw: ref;

axiom pch_udc_pcd_vbus_draw == $sub.ref(0, 132900);

procedure pch_udc_pcd_vbus_draw($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pcd_vbus_draw($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} {:cexpr "pch_udc_pcd_vbus_draw:arg:mA"} boogie_si_record_i32($i1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const pch_udc_stop: ref;

axiom pch_udc_stop == $sub.ref(0, 133932);

procedure pch_udc_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $CurrAddr;



implementation pch_udc_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i16;
  var $i5: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p1 := $M.2;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 92} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    call {:si_unique_call 93} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 94} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 95} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, $i6);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 101} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    call {:si_unique_call 102} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i18);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 1208);
    call {:si_unique_call 103} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    call {:si_unique_call 104} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $i17);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} pch_udc_disable_interrupts($p1, 127);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 111} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i32);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 32);
    call {:si_unique_call 112} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i33);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    call {:si_unique_call 113} devirtbounce($p35, $p36);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 114} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 16);
    call {:si_unique_call 115} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i38);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p1);
    call {:si_unique_call 116} devirtbounce($p40, $p41);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i42 := $add.i64(0, 328);
    call {:si_unique_call 117} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i42);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p1);
    call {:si_unique_call 118} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i43);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i42);
    call {:si_unique_call 119} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i44);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, $0.ref);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p1);
    call {:si_unique_call 120} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i46);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1208);
    call {:si_unique_call 121} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i47);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p48, $0.ref);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.1, $p49);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i51 := $and.i16($i50, $sub.i16(0, 129));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p49, $i51);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} pch_udc_set_disconnect($p1);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p1);
    call {:si_unique_call 105} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i24);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 1216);
    call {:si_unique_call 106} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    call {:si_unique_call 107} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 144);
    call {:si_unique_call 108} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i29);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_36 := dev_err.ref.ref.ref($p30, .str.3, .str.4);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    call {:si_unique_call 96} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 1216);
    call {:si_unique_call 97} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    call {:si_unique_call 98} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 144);
    call {:si_unique_call 99} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i14);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_35 := dev_err.ref.ref.ref($p15, .str.3, .str.4);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const pch_udc_pcd_ep_enable: ref;

axiom pch_udc_pcd_ep_enable == $sub.ref(0, 134964);

procedure pch_udc_pcd_ep_enable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_pcd_ep_enable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 123} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 124} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i3);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64(ep0_string);
    call {:si_unique_call 125} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i6);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 126} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i7);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 8);
    call {:si_unique_call 127} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 128} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i11);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, $i6);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 129} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i13);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 130} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i14);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, $i13);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    call {:si_unique_call 131} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i16);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 1);
    call {:si_unique_call 132} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i17);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    call {:si_unique_call 133} {:cexpr "__cil_tmp23"} boogie_si_record_i8($i19);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 134} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i20);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 5);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    call {:si_unique_call 135} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i22);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 4);
    call {:si_unique_call 136} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i23);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    call {:si_unique_call 137} {:cexpr "__cil_tmp28"} boogie_si_record_i16($i25);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    call {:si_unique_call 138} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i26);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    call {:si_unique_call 139} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i29);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 96);
    call {:si_unique_call 140} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i30);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 141} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i33);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p32);
    call {:si_unique_call 142} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i34);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 1208);
    call {:si_unique_call 143} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i35);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    call {:si_unique_call 144} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i38);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, $i33);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p32);
    call {:si_unique_call 145} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i40);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 32);
    call {:si_unique_call 146} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i41);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    call {:si_unique_call 147} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i43);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} ldv_spin_lock();
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p28);
    call {:si_unique_call 149} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i45);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 112);
    call {:si_unique_call 150} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i46);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p47, $p1);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p28, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i50 := $and.i8($i49, $sub.i8(0, 65));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p48, $i50);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p28);
    call {:si_unique_call 151} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i51);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 96);
    call {:si_unique_call 152} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i52);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    call {:si_unique_call 153} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i55);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 6228);
    call {:si_unique_call 154} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i56);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} pch_udc_ep_enable($p28, $p57, $p1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i58 := usb_endpoint_maxp($p1);
    call {:si_unique_call 157} {:cexpr "tmp"} boogie_si_record_i32($i58);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p28);
    call {:si_unique_call 158} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i59);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 40);
    call {:si_unique_call 159} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i60);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i58);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i60);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p62, $i61);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p28);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(136, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.1, $p64);
    call {:si_unique_call 160} {:cexpr "__cil_tmp57"} boogie_si_record_i8($i65);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    call {:si_unique_call 161} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i66);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := 16;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p28);
    call {:si_unique_call 162} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i69);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 96);
    call {:si_unique_call 163} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i70);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p28);
    call {:si_unique_call 164} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i73);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 136);
    call {:si_unique_call 165} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i74);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p75);
    call {:si_unique_call 166} {:cexpr "__cil_tmp64"} boogie_si_record_i8($i76);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    call {:si_unique_call 167} {:cexpr "__cil_tmp65"} boogie_si_record_i32($i77);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, $i68);
    call {:si_unique_call 168} {:cexpr "__cil_tmp66"} boogie_si_record_i32($i78);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i79 := $shl.i32(1, $i78);
    call {:si_unique_call 169} {:cexpr "__cil_tmp67"} boogie_si_record_i32($i79);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} pch_udc_enable_ep_interrupts($p72, $i79);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p32);
    call {:si_unique_call 171} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i80);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 6088);
    call {:si_unique_call 172} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i81);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} spin_unlock_irqrestore($p82, $u9);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb23:
    assume $i67 == 1;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb25;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 108);
    goto $bb3;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 108);
    goto $bb3;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_ep_disable: ref;

axiom pch_udc_pcd_ep_disable == $sub.ref(0, 135996);

procedure pch_udc_pcd_ep_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_pcd_ep_disable($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 174} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i1);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 175} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64(ep0_string);
    call {:si_unique_call 176} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i6);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 177} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i7);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 8);
    call {:si_unique_call 178} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 179} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i11);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, $i6);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 180} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i13);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p5);
    call {:si_unique_call 181} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i14);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 112);
    call {:si_unique_call 182} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i15);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    call {:si_unique_call 183} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i18);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, $i13);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} ldv_spin_lock();
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} empty_req_queue($p5);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i21, $sub.i8(0, 65));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i23 := $or.i8($i22, 64);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i23);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} pch_udc_ep_disable($p5);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p5);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(136, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    call {:si_unique_call 187} {:cexpr "__cil_tmp26"} boogie_si_record_i8($i26);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    call {:si_unique_call 188} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i27);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 16;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p5);
    call {:si_unique_call 189} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i30);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 96);
    call {:si_unique_call 190} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i31);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p5);
    call {:si_unique_call 191} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i34);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 136);
    call {:si_unique_call 192} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i35);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    call {:si_unique_call 193} {:cexpr "__cil_tmp33"} boogie_si_record_i8($i37);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    call {:si_unique_call 194} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i38);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, $i29);
    call {:si_unique_call 195} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i39);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32(1, $i39);
    call {:si_unique_call 196} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i40);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} pch_udc_disable_ep_interrupts($p33, $i40);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p5);
    call {:si_unique_call 198} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 112);
    call {:si_unique_call 199} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i42);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, $0.ref);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p5);
    call {:si_unique_call 200} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i44);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 48);
    call {:si_unique_call 201} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i45);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, $0.ref);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p5);
    call {:si_unique_call 202} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i47);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 120);
    call {:si_unique_call 203} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i48);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} INIT_LIST_HEAD($p49);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p5);
    call {:si_unique_call 205} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i50);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 96);
    call {:si_unique_call 206} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i51);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    call {:si_unique_call 207} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i54);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 6088);
    call {:si_unique_call 208} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i55);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} spin_unlock_irqrestore($p56, $u9);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb13;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_alloc_request: ref;

axiom pch_udc_alloc_request == $sub.ref(0, 137028);

procedure pch_udc_alloc_request($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation pch_udc_alloc_request($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "pch_udc_alloc_request:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 211} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 212} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i3);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p7 := kzalloc(152, $i1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 214} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i9);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p8);
    call {:si_unique_call 215} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i10);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, $i9);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p8);
    call {:si_unique_call 216} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i12);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 16);
    call {:si_unique_call 217} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i13);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p14, $sub.i64(0, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p8);
    call {:si_unique_call 218} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i15);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 144);
    call {:si_unique_call 219} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i16);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p17, $sub.i64(0, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p8);
    call {:si_unique_call 220} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i18);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 112);
    call {:si_unique_call 221} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i19);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} INIT_LIST_HEAD($p20);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p6);
    call {:si_unique_call 223} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i21);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 96);
    call {:si_unique_call 224} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i22);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    call {:si_unique_call 225} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i25);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 6184);
    call {:si_unique_call 226} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i26);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    call {:si_unique_call 227} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i28);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p6);
    call {:si_unique_call 228} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i31);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 96);
    call {:si_unique_call 229} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i32);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    call {:si_unique_call 230} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i35);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 6168);
    call {:si_unique_call 231} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i36);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p8);
    call {:si_unique_call 232} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i39);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 88);
    call {:si_unique_call 233} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i40);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $p42 := ldv_dma_pool_alloc_20($p38, $i1, $p41);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 235} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i44);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p43);
    call {:si_unique_call 236} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i45);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, $i44);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p43);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    call {:si_unique_call 238} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i49);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, $sub.i32(0, 1073741824));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p43);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p51, $i50);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p43);
    call {:si_unique_call 239} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i52);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 8);
    call {:si_unique_call 240} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i53);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p54, $sub.i32(0, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p8);
    call {:si_unique_call 241} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i55);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 96);
    call {:si_unique_call 242} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i56);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, $p42);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p8);
    call {:si_unique_call 243} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i58);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 104);
    call {:si_unique_call 244} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i59);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p60, $p42);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p8);
    call {:si_unique_call 245} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i61);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 132);
    call {:si_unique_call 246} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i62);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p63, 1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p5 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p8);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} kfree($p47);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p5 := $p7;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const pch_udc_free_request: ref;

axiom pch_udc_free_request == $sub.ref(0, 138060);

procedure pch_udc_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_free_request($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 247} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 248} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i3);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 249} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    call {:si_unique_call 250} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i6);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, $i5);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p8);
    call {:si_unique_call 251} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i10);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 96);
    call {:si_unique_call 252} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i11);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p9);
    call {:si_unique_call 253} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 112);
    call {:si_unique_call 254} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i17 := list_empty($p16);
    call {:si_unique_call 256} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 264} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i31);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p9);
    call {:si_unique_call 265} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i32);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 96);
    call {:si_unique_call 266} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i33);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    call {:si_unique_call 267} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i36);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, $i31);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p9);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} kfree($p64);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p9);
    call {:si_unique_call 268} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i38);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 132);
    call {:si_unique_call 269} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i39);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    call {:si_unique_call 270} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i41);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i41, 1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p8);
    call {:si_unique_call 274} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i47);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 96);
    call {:si_unique_call 275} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i48);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    call {:si_unique_call 276} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i51);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 6168);
    call {:si_unique_call 277} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i52);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p9);
    call {:si_unique_call 278} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i55);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 96);
    call {:si_unique_call 279} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i56);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p9);
    call {:si_unique_call 280} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i60);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 88);
    call {:si_unique_call 281} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i61);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.1, $p62);
    call {:si_unique_call 282} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i63);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} dma_pool_free($p54, $p59, $i63);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p8);
    call {:si_unique_call 271} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i43);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 96);
    call {:si_unique_call 272} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i44);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} pch_udc_free_dma_chain($p46, $p9);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p13);
    call {:si_unique_call 257} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i19);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 1216);
    call {:si_unique_call 258} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i20);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 259} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i23);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 144);
    call {:si_unique_call 260} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i24);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    call {:si_unique_call 261} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i26);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 8);
    call {:si_unique_call 262} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i27);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_37 := dev_err.ref.ref.ref.ref.ref($p25, .str.8, .str.9, $p29, $p9);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_pcd_queue: ref;

axiom pch_udc_pcd_queue == $sub.ref(0, 139092);

procedure pch_udc_pcd_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, assertsPassed, $CurrAddr;



implementation pch_udc_pcd_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i1;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $i143: i32;
  var $i144: i64;
  var $i145: i64;
  var $i146: i64;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $p166: ref;
  var $i167: i32;
  var $i168: i64;
  var $i169: i64;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $i173: i64;
  var $i174: i64;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i64;
  var $p179: ref;
  var $i180: i64;
  var $i181: i64;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i64;
  var $p186: ref;
  var $i187: i32;
  var $i188: i64;
  var $i189: i64;
  var $p190: ref;
  var $p191: ref;
  var $i192: i8;
  var $i193: i8;
  var $i194: i8;
  var $i195: i64;
  var $i196: i64;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i64;
  var $i204: i64;
  var $p205: ref;
  var $i206: i64;
  var $i207: i64;
  var $p208: ref;
  var $p209: ref;
  var $i210: i8;
  var $i211: i8;
  var $i212: i64;
  var $i213: i64;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i1;
  var $i222: i64;
  var $i223: i64;
  var $p224: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $p228: ref;
  var $i229: i8;
  var $i230: i32;
  var $i231: i1;
  var $i232: i64;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $i236: i64;
  var $i237: i64;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $i241: i32;
  var $i242: i64;
  var $i243: i64;
  var $i244: i1;
  var $i245: i64;
  var $i246: i64;
  var $p247: ref;
  var $i248: i64;
  var $i249: i64;
  var $p250: ref;
  var $i134: i32;
  var $i251: i64;
  var $i252: i64;
  var $p253: ref;
  var $i6: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "pch_udc_pcd_queue:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 286} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i3);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 287} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i4);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $i3);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 288} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i7);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 289} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i8);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, $i7);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 290} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i10);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    call {:si_unique_call 291} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i11);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 48);
    call {:si_unique_call 292} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i12);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    call {:si_unique_call 293} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i15);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, $i10);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 294} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i17);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    call {:si_unique_call 295} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i20);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, $i17);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 296} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i23);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 96);
    call {:si_unique_call 297} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i24);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 298} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i27);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p22);
    call {:si_unique_call 299} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i28);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 112);
    call {:si_unique_call 300} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i29);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    call {:si_unique_call 301} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i32);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, $i27);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    call {:si_unique_call 304} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i40);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 112);
    call {:si_unique_call 305} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i41);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i43 := list_empty($p42);
    call {:si_unique_call 307} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 308} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i45);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p26);
    call {:si_unique_call 309} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i46);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1208);
    call {:si_unique_call 310} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i47);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    call {:si_unique_call 311} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i50);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, $i45);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p26);
    call {:si_unique_call 312} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i52);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 32);
    call {:si_unique_call 313} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i53);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    call {:si_unique_call 314} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i55);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} ldv_spin_lock();
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p1);
    call {:si_unique_call 316} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i57);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 8);
    call {:si_unique_call 317} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i58);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    call {:si_unique_call 318} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i60);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p1);
    call {:si_unique_call 400} {:cexpr "__cil_tmp162"} boogie_si_record_i64($i195);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i196 := $add.i64($i195, 8);
    call {:si_unique_call 401} {:cexpr "__cil_tmp163"} boogie_si_record_i64($i196);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p197 := $i2p.i64.ref($i196);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.1, $p197);
    call {:si_unique_call 402} {:cexpr "__cil_tmp164"} boogie_si_record_i32($i198);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i202 := 0;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p1);
    call {:si_unique_call 405} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i203);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i204 := $add.i64($i203, 84);
    call {:si_unique_call 406} {:cexpr "__cil_tmp166"} boogie_si_record_i64($i204);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p205 := $i2p.i64.ref($i204);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p205, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p1);
    call {:si_unique_call 407} {:cexpr "__cil_tmp167"} boogie_si_record_i64($i206);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i207 := $add.i64($i206, 80);
    call {:si_unique_call 408} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i207);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p208 := $i2p.i64.ref($i207);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p208, $sub.i32(0, 115));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p39, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.1, $p209);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i211 := $and.i8($i210, $sub.i8(0, 5));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p209, $i211);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p22);
    call {:si_unique_call 409} {:cexpr "__cil_tmp169"} boogie_si_record_i64($i212);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i213 := $add.i64($i212, 120);
    call {:si_unique_call 410} {:cexpr "__cil_tmp170"} boogie_si_record_i64($i213);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p214 := $i2p.i64.ref($i213);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i215 := list_empty($p214);
    call {:si_unique_call 412} {:cexpr "tmp___0"} boogie_si_record_i32($i215);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 432} {:cexpr "__cil_tmp194"} boogie_si_record_i64($i242);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p39);
    call {:si_unique_call 433} {:cexpr "__cil_tmp195"} boogie_si_record_i64($i243);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i244 := $ne.i64($i243, $i242);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i134 := $i202;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p26);
    call {:si_unique_call 362} {:cexpr "__cil_tmp202"} boogie_si_record_i64($i251);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i252 := $add.i64($i251, 6088);
    call {:si_unique_call 363} {:cexpr "__cil_tmp203"} boogie_si_record_i64($i252);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p253 := $i2p.i64.ref($i252);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} spin_unlock_irqrestore($p253, $u9);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i6 := $i134;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb70:
    assume $i244 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p39);
    call {:si_unique_call 434} {:cexpr "__cil_tmp196"} boogie_si_record_i64($i245);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i246 := $add.i64($i245, 112);
    call {:si_unique_call 435} {:cexpr "__cil_tmp197"} boogie_si_record_i64($i246);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p247 := $i2p.i64.ref($i246);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i248 := $p2i.ref.i64($p22);
    call {:si_unique_call 436} {:cexpr "__cil_tmp199"} boogie_si_record_i64($i248);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i249 := $add.i64($i248, 120);
    call {:si_unique_call 437} {:cexpr "__cil_tmp200"} boogie_si_record_i64($i249);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p250 := $i2p.i64.ref($i249);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} list_add_tail($p247, $p250);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb58:
    assume $i216 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p22);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p217, $mul.ref(136, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.1, $p218);
    call {:si_unique_call 413} {:cexpr "__cil_tmp175"} boogie_si_record_i8($i219);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    call {:si_unique_call 414} {:cexpr "__cil_tmp176"} boogie_si_record_i32($i220);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb60:
    assume $i221 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p1);
    call {:si_unique_call 415} {:cexpr "__cil_tmp177"} boogie_si_record_i64($i222);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i223 := $add.i64($i222, 8);
    call {:si_unique_call 416} {:cexpr "__cil_tmp178"} boogie_si_record_i64($i223);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p224 := $i2p.i64.ref($i223);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.1, $p224);
    call {:si_unique_call 417} {:cexpr "__cil_tmp179"} boogie_si_record_i32($i225);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 0);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p22);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($p227, $mul.ref(136, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.1, $p228);
    call {:si_unique_call 419} {:cexpr "__cil_tmp182"} boogie_si_record_i8($i229);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    call {:si_unique_call 420} {:cexpr "__cil_tmp183"} boogie_si_record_i32($i230);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i231 == 1);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} pch_udc_wait_ep_stall($p22);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} pch_udc_ep_clear_nak($p22);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i64($p22);
    call {:si_unique_call 424} {:cexpr "__cil_tmp184"} boogie_si_record_i64($i232);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i233 := $add.i64($i232, 96);
    call {:si_unique_call 425} {:cexpr "__cil_tmp185"} boogie_si_record_i64($i233);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p234 := $i2p.i64.ref($i233);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.1, $p234);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i236 := $p2i.ref.i64($p22);
    call {:si_unique_call 426} {:cexpr "__cil_tmp187"} boogie_si_record_i64($i236);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i237 := $add.i64($i236, 136);
    call {:si_unique_call 427} {:cexpr "__cil_tmp188"} boogie_si_record_i64($i237);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p238 := $i2p.i64.ref($i237);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.1, $p238);
    call {:si_unique_call 428} {:cexpr "__cil_tmp189"} boogie_si_record_i8($i239);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    call {:si_unique_call 429} {:cexpr "__cil_tmp190"} boogie_si_record_i32($i240);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i241 := $shl.i32(1, $i240);
    call {:si_unique_call 430} {:cexpr "__cil_tmp191"} boogie_si_record_i32($i241);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} pch_udc_enable_ep_interrupts($p235, $i241);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i231 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} pch_udc_start_rxrequest($p22, $p39);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i226 == 1;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} process_zlp($p22, $p39);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i134 := 0;
    goto $bb44;

  $bb52:
    assume $i199 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i200 := prepare_dma($p22, $p39, 32);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 404} {:cexpr "retval"} boogie_si_record_i32($i200);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i202 := $i200;
    goto $bb57;

  $bb54:
    assume $i201 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i134 := $i200;
    goto $bb44;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p1);
    call {:si_unique_call 319} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i62);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 16);
    call {:si_unique_call 320} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i63);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.1, $p64);
    call {:si_unique_call 321} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i65);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, $sub.i64(0, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p1);
    call {:si_unique_call 322} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i67);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 16);
    call {:si_unique_call 323} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i68);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.1, $p69);
    call {:si_unique_call 324} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i70);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb34:
    assume $i71 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    call {:si_unique_call 325} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i74);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i75 := $and.i64($i74, 3);
    call {:si_unique_call 326} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i75);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i76 == 1);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p39);
    call {:si_unique_call 329} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i118);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 136);
    call {:si_unique_call 330} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i119);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p1);
    call {:si_unique_call 331} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i120);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 8);
    call {:si_unique_call 332} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i121);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.1, $p122);
    call {:si_unique_call 333} {:cexpr "__cil_tmp108"} boogie_si_record_i32($i123);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    call {:si_unique_call 334} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i124);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p125 := kzalloc($i124, 32);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p126 := $i2p.i64.ref($i119);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p126, $p125);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 336} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i127);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p39);
    call {:si_unique_call 337} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i128);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, 136);
    call {:si_unique_call 338} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i129);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p130 := $i2p.i64.ref($i129);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.1, $p130);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    call {:si_unique_call 339} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i132);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, $i127);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p22);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p135, $mul.ref(136, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.1, $p136);
    call {:si_unique_call 365} {:cexpr "__cil_tmp118"} boogie_si_record_i8($i137);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    call {:si_unique_call 366} {:cexpr "__cil_tmp119"} boogie_si_record_i32($i138);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i139 == 1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p39);
    call {:si_unique_call 387} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i171);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i172 := $add.i64($i171, 144);
    call {:si_unique_call 388} {:cexpr "__cil_tmp146"} boogie_si_record_i64($i172);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p26);
    call {:si_unique_call 389} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i173);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i174 := $add.i64($i173, 1216);
    call {:si_unique_call 390} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i174);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p175 := $i2p.i64.ref($i174);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.1, $p175);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    call {:si_unique_call 391} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i177);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i178 := $add.i64($i177, 144);
    call {:si_unique_call 392} {:cexpr "__cil_tmp151"} boogie_si_record_i64($i178);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p179 := $i2p.i64.ref($i178);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p39);
    call {:si_unique_call 393} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i180);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i181 := $add.i64($i180, 136);
    call {:si_unique_call 394} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i181);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p182 := $i2p.i64.ref($i181);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.1, $p182);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p1);
    call {:si_unique_call 395} {:cexpr "__cil_tmp156"} boogie_si_record_i64($i184);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i185 := $add.i64($i184, 8);
    call {:si_unique_call 396} {:cexpr "__cil_tmp157"} boogie_si_record_i64($i185);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p186 := $i2p.i64.ref($i185);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.1, $p186);
    call {:si_unique_call 397} {:cexpr "__cil_tmp158"} boogie_si_record_i32($i187);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i188 := $zext.i32.i64($i187);
    call {:si_unique_call 398} {:cexpr "__cil_tmp159"} boogie_si_record_i64($i188);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i189 := dma_map_single_attrs($p179, $p183, $i188, 2, $0.ref);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p190 := $i2p.i64.ref($i172);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p190, $i189);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p39, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i192 := $load.i8($M.1, $p191);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i193 := $and.i8($i192, $sub.i8(0, 3));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i194 := $or.i8($i193, 2);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p191, $i194);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i139 == 1;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p1);
    call {:si_unique_call 367} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i140);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 8);
    call {:si_unique_call 368} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i141);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i141);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.1, $p142);
    call {:si_unique_call 369} {:cexpr "__cil_tmp122"} boogie_si_record_i32($i143);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i144 := $zext.i32.i64($i143);
    call {:si_unique_call 370} {:cexpr "__len"} boogie_si_record_i64($i144);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p39);
    call {:si_unique_call 371} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i145);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 136);
    call {:si_unique_call 372} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i146);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p147 := $i2p.i64.ref($i146);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.1, $p147);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p1);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.1, $p149);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 373} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p150, $i144, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p39);
    call {:si_unique_call 374} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i151);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i152 := $add.i64($i151, 144);
    call {:si_unique_call 375} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i152);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p26);
    call {:si_unique_call 376} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i153);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i154 := $add.i64($i153, 1216);
    call {:si_unique_call 377} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i154);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p155 := $i2p.i64.ref($i154);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.1, $p155);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    call {:si_unique_call 378} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i157);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i158 := $add.i64($i157, 144);
    call {:si_unique_call 379} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i158);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p159 := $i2p.i64.ref($i158);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p39);
    call {:si_unique_call 380} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i160);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i160, 136);
    call {:si_unique_call 381} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i161);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p162 := $i2p.i64.ref($i161);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.1, $p162);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p1);
    call {:si_unique_call 382} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i164);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i165 := $add.i64($i164, 8);
    call {:si_unique_call 383} {:cexpr "__cil_tmp140"} boogie_si_record_i64($i165);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p166 := $i2p.i64.ref($i165);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.1, $p166);
    call {:si_unique_call 384} {:cexpr "__cil_tmp141"} boogie_si_record_i32($i167);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i168 := $zext.i32.i64($i167);
    call {:si_unique_call 385} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i168);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i169 := dma_map_single_attrs($p159, $p163, $i168, 1, $0.ref);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p170 := $i2p.i64.ref($i152);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p170, $i169);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb42:
    assume $i133 == 1;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i134 := $sub.i32(0, 12);
    goto $bb44;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i76 == 1;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p22);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(136, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    call {:si_unique_call 327} {:cexpr "__cil_tmp72"} boogie_si_record_i8($i79);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    call {:si_unique_call 328} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i80);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i81 == 1);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p1);
    call {:si_unique_call 351} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i100);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i100, 16);
    call {:si_unique_call 352} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i101);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p26);
    call {:si_unique_call 353} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i102);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 1216);
    call {:si_unique_call 354} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i103);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    call {:si_unique_call 355} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i106);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i107 := $add.i64($i106, 144);
    call {:si_unique_call 356} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i107);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p108 := $i2p.i64.ref($i107);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.1, $p109);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p1);
    call {:si_unique_call 357} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i111);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i111, 8);
    call {:si_unique_call 358} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i112);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i112);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.1, $p113);
    call {:si_unique_call 359} {:cexpr "__cil_tmp100"} boogie_si_record_i32($i114);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    call {:si_unique_call 360} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i115);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i116 := dma_map_single_attrs($p108, $p110, $i115, 2, $0.ref);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i101);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p117, $i116);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i81 == 1;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p1);
    call {:si_unique_call 340} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i82);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 16);
    call {:si_unique_call 341} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i83);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p26);
    call {:si_unique_call 342} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i84);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 1216);
    call {:si_unique_call 343} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i85);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i85);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.1, $p86);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    call {:si_unique_call 344} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i88);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 144);
    call {:si_unique_call 345} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i89);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p1);
    call {:si_unique_call 346} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i93);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 8);
    call {:si_unique_call 347} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i94);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i94);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.1, $p95);
    call {:si_unique_call 348} {:cexpr "__cil_tmp85"} boogie_si_record_i32($i96);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    call {:si_unique_call 349} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i97);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i98 := dma_map_single_attrs($p90, $p92, $i97, 1, $0.ref);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i83);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p99, $i98);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 108);
    goto $bb3;

  $bb23:
    assume $i51 == 1;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 108);
    goto $bb3;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p22);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(136, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    call {:si_unique_call 302} {:cexpr "__cil_tmp41"} boogie_si_record_i8($i36);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    call {:si_unique_call 303} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i37);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_dequeue: ref;

axiom pch_udc_pcd_dequeue == $sub.ref(0, 140124);

procedure pch_udc_pcd_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.1;



implementation pch_udc_pcd_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p37: ref;
  var $i48: i32;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 439} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i3);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 440} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i4);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $i3);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 441} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i7);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 442} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i8);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, $i7);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 443} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i10);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p2);
    call {:si_unique_call 444} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i11);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 112);
    call {:si_unique_call 445} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i12);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    call {:si_unique_call 446} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i15);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, $i10);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} ldv_spin_lock();
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p2);
    call {:si_unique_call 450} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i22);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 120);
    call {:si_unique_call 451} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i23);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p2);
    call {:si_unique_call 452} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i28);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 120);
    call {:si_unique_call 453} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i29);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    call {:si_unique_call 454} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i31);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p27);
    call {:si_unique_call 455} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i32);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 112);
    call {:si_unique_call 456} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i33);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    call {:si_unique_call 457} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i35);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, $i31);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 22);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p2);
    call {:si_unique_call 466} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i60);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 96);
    call {:si_unique_call 467} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i61);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    call {:si_unique_call 468} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i64);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 6088);
    call {:si_unique_call 469} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i65);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} spin_unlock_irqrestore($p66, $u9);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i6 := $i48;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p37 := $p27;
    goto $bb17;

  $bb17:
    call $i38, $p39, $i40, $i41, $p42, $i49, $i50, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $p37 := pch_udc_pcd_dequeue_loop_$bb17($p1, $i31, $i38, $p39, $i40, $i41, $p42, $i49, $i50, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $p37);
    goto $bb17_last;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p1);
    call {:si_unique_call 458} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i38);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p37);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    call {:si_unique_call 459} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, $i38);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p42 := $p37;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p37);
    call {:si_unique_call 471} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i49);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 112);
    call {:si_unique_call 472} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i50);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    call {:si_unique_call 473} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i55);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 112);
    call {:si_unique_call 474} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i56);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    call {:si_unique_call 475} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i58);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, $i31);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i59 == 1);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb26:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $p37 := $p54;
    goto $bb26_dummy;

  $bb19:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} pch_udc_ep_set_nak($p2);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    call {:si_unique_call 461} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i43);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 112);
    call {:si_unique_call 462} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i44);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i46 := list_empty($p45);
    call {:si_unique_call 464} {:cexpr "tmp"} boogie_si_record_i32($i46);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb24;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} complete_req($p2, $p42, $sub.i32(0, 104));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(136, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    call {:si_unique_call 447} {:cexpr "__cil_tmp29"} boogie_si_record_i8($i19);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 448} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i20);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;
}



const pch_udc_pcd_set_halt: ref;

axiom pch_udc_pcd_set_halt == $sub.ref(0, 141156);

procedure pch_udc_pcd_set_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_pcd_set_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $i56: i16;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} {:cexpr "pch_udc_pcd_set_halt:arg:halt___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 477} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 478} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i3);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 479} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i7);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    call {:si_unique_call 480} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i8);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 112);
    call {:si_unique_call 481} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i9);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 482} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i12);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, $i7);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 485} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i19);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p6);
    call {:si_unique_call 486} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i20);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 96);
    call {:si_unique_call 487} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i21);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 488} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i24);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 1208);
    call {:si_unique_call 489} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i25);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    call {:si_unique_call 490} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i28);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, $i19);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p6);
    call {:si_unique_call 491} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i30);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 96);
    call {:si_unique_call 492} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i31);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    call {:si_unique_call 493} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i34);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 32);
    call {:si_unique_call 494} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i35);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    call {:si_unique_call 495} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i37);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} ldv_spin_lock();
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p6);
    call {:si_unique_call 497} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i39);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 120);
    call {:si_unique_call 498} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i40);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i42 := list_empty($p41);
    call {:si_unique_call 500} {:cexpr "tmp___0"} boogie_si_record_i32($i42);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i75 := $sub.i32(0, 11);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} spin_unlock_irqrestore(udc_stall_spinlock, $u9);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i5 := $i75;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i1, 0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} pch_udc_ep_clear_stall($p6);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb28;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p6);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(136, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    call {:si_unique_call 501} {:cexpr "__cil_tmp48"} boogie_si_record_i8($i47);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    call {:si_unique_call 502} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i48);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} pch_udc_ep_set_stall($p6);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p6);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(136, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    call {:si_unique_call 507} {:cexpr "__cil_tmp55"} boogie_si_record_i8($i60);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    call {:si_unique_call 508} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i61);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := 16;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p6);
    call {:si_unique_call 509} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i64);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 96);
    call {:si_unique_call 510} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i65);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p6);
    call {:si_unique_call 511} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i68);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 136);
    call {:si_unique_call 512} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i69);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    call {:si_unique_call 513} {:cexpr "__cil_tmp62"} boogie_si_record_i8($i71);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    call {:si_unique_call 514} {:cexpr "__cil_tmp63"} boogie_si_record_i32($i72);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, $i63);
    call {:si_unique_call 515} {:cexpr "__cil_tmp64"} boogie_si_record_i32($i73);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32(1, $i73);
    call {:si_unique_call 516} {:cexpr "__cil_tmp65"} boogie_si_record_i32($i74);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} pch_udc_enable_ep_interrupts($p67, $i74);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i62 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb26;

  $bb21:
    assume $i49 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p6);
    call {:si_unique_call 504} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i50);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 96);
    call {:si_unique_call 505} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i51);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.1, $p54);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i56 := $and.i16($i55, $sub.i16(0, 3));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i57 := $or.i16($i56, 2);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p54, $i57);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 108);
    goto $bb3;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 108);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p6);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(136, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    call {:si_unique_call 483} {:cexpr "__cil_tmp23"} boogie_si_record_i8($i16);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    call {:si_unique_call 484} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i17);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_set_wedge: ref;

axiom pch_udc_pcd_set_wedge == $sub.ref(0, 142188);

procedure pch_udc_pcd_set_wedge($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_pcd_set_wedge($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i16;
  var $i56: i16;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $i80: i16;
  var $i81: i16;
  var $i43: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 519} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 520} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 521} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i6);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    call {:si_unique_call 522} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i7);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 112);
    call {:si_unique_call 523} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i8);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 524} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i11);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, $i6);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 527} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i18);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p5);
    call {:si_unique_call 528} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i19);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 96);
    call {:si_unique_call 529} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i20);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 530} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i23);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 1208);
    call {:si_unique_call 531} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i24);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    call {:si_unique_call 532} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i27);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, $i18);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p5);
    call {:si_unique_call 533} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i29);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 96);
    call {:si_unique_call 534} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i30);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    call {:si_unique_call 535} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i33);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 32);
    call {:si_unique_call 536} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i34);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    call {:si_unique_call 537} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i36);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv_spin_lock();
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p5);
    call {:si_unique_call 539} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i38);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 120);
    call {:si_unique_call 540} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i39);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i41 := list_empty($p40);
    call {:si_unique_call 542} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p5);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(136, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    call {:si_unique_call 543} {:cexpr "__cil_tmp47"} boogie_si_record_i8($i46);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    call {:si_unique_call 544} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i47);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} pch_udc_ep_set_stall($p5);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p5);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(136, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    call {:si_unique_call 549} {:cexpr "__cil_tmp54"} boogie_si_record_i8($i59);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    call {:si_unique_call 550} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i60);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := 16;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p5);
    call {:si_unique_call 551} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i63);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 96);
    call {:si_unique_call 552} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i64);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p5);
    call {:si_unique_call 553} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i67);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 136);
    call {:si_unique_call 554} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i68);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    call {:si_unique_call 555} {:cexpr "__cil_tmp61"} boogie_si_record_i8($i70);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    call {:si_unique_call 556} {:cexpr "__cil_tmp62"} boogie_si_record_i32($i71);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, $i62);
    call {:si_unique_call 557} {:cexpr "__cil_tmp63"} boogie_si_record_i32($i72);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i73 := $shl.i32(1, $i72);
    call {:si_unique_call 558} {:cexpr "__cil_tmp64"} boogie_si_record_i32($i73);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} pch_udc_enable_ep_interrupts($p66, $i73);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p5);
    call {:si_unique_call 560} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i74);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 96);
    call {:si_unique_call 561} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i75);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.1, $p78);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i80 := $and.i16($i79, $sub.i16(0, 5));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i81 := $or.i16($i80, 4);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p78, $i81);
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} spin_unlock_irqrestore(udc_stall_spinlock, $u9);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i4 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb23:
    assume $i61 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb25;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p5);
    call {:si_unique_call 546} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i49);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 96);
    call {:si_unique_call 547} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i50);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i55 := $and.i16($i54, $sub.i16(0, 3));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i56 := $or.i16($i55, 2);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p53, $i56);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 11);
    goto $bb19;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 108);
    goto $bb3;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 108);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p5);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(136, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    call {:si_unique_call 525} {:cexpr "__cil_tmp22"} boogie_si_record_i8($i15);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 526} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i16);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_fifo_flush: ref;

axiom pch_udc_pcd_fifo_flush == $sub.ref(0, 143220);

procedure pch_udc_pcd_fifo_flush($p0: ref);
  free requires assertsPassed;



implementation pch_udc_pcd_fifo_flush($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 562} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 563} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 564} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p4);
    call {:si_unique_call 565} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 112);
    call {:si_unique_call 566} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 567} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $i5);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(136, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    call {:si_unique_call 571} {:cexpr "__cil_tmp17"} boogie_si_record_i8($i19);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 572} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i20);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i8($i23, 5);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i25 := $and.i8($i24, 1);
    call {:si_unique_call 573} {:cexpr "__cil_tmp19"} boogie_si_record_i8($i25);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    call {:si_unique_call 574} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i26);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} pch_udc_ep_fifo_flush($p4, $i26);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i8($i13, 5);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, 1);
    call {:si_unique_call 568} {:cexpr "__cil_tmp13"} boogie_si_record_i8($i15);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 569} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i16);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} pch_udc_ep_fifo_flush($p4, $i16);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_probe: ref;

axiom pch_udc_probe == $sub.ref(0, 144252);

procedure pch_udc_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $CurrAddr, assertsPassed;



implementation pch_udc_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i47: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i16;
  var $i88: i16;
  var $i89: i16;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i111: i32;
  var $i112: i1;
  var $i113: i64;
  var $i114: i64;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i16;
  var $i137: i16;
  var $i138: i16;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $i144: i64;
  var $i145: i64;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $i153: i64;
  var $i154: i64;
  var $p155: ref;
  var $i157: i64;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i64;
  var $i165: i64;
  var $i166: i64;
  var $i167: i64;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $i173: i64;
  var $p174: ref;
  var $i175: i64;
  var $i176: i64;
  var $p177: ref;
  var $i178: i64;
  var $i179: i64;
  var $p180: ref;
  var $i181: i64;
  var $i182: i64;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i16;
  var $i188: i16;
  var $i189: i16;
  var $i190: i64;
  var $i191: i64;
  var $p192: ref;
  var $p193: ref;
  var $i194: i32;
  var $i195: i1;
  var $i82: i32;
  var $i8: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: ref;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 577} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i3);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p4 := $M.2;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 578} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i5);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $i3);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p9 := kzalloc(6408, 208);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 581} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i11);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    call {:si_unique_call 582} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i12);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, $i11);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i15 := pci_enable_device($p0);
    call {:si_unique_call 585} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p10);
    call {:si_unique_call 588} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 6160);
    call {:si_unique_call 589} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p10);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} pci_set_drvdata($p0, $p22);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i23 := $add.i64(1304, 56);
    call {:si_unique_call 591} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i23);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 592} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i24);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, $i23);
    call {:si_unique_call 593} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    call {:si_unique_call 594} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i27);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i28 := $add.i64(1304, 56);
    call {:si_unique_call 595} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i28);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 596} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i29);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, $i28);
    call {:si_unique_call 597} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i30);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    call {:si_unique_call 598} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i32);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i48 := $add.i64(1304, 56);
    call {:si_unique_call 610} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i48);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p0);
    call {:si_unique_call 611} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i49);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, $i48);
    call {:si_unique_call 612} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i50);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.1, $p51);
    call {:si_unique_call 613} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i52);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i53 := $add.i64(56, 8);
    call {:si_unique_call 614} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i53);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i54 := $add.i64(1304, $i53);
    call {:si_unique_call 615} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i54);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p0);
    call {:si_unique_call 616} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i55);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, $i54);
    call {:si_unique_call 617} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i56);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.1, $p57);
    call {:si_unique_call 618} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i58);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, $i52);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i47 := $i73;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p74 := __request_region(iomem_resource, $i27, $i47, .str, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 620} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i75);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p74);
    call {:si_unique_call 621} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i76);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, $i75);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p10);
    call {:si_unique_call 637} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i83);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 6208);
    call {:si_unique_call 638} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i84);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p85, $i27);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p10, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.1, $p86);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i88 := $and.i16($i87, $sub.i16(0, 17));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i89 := $or.i16($i88, 16);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p86, $i89);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p10);
    call {:si_unique_call 639} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i90);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 6216);
    call {:si_unique_call 640} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i91);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p92 := ioremap_nocache($i27, $i47);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i91);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p93, $p92);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 642} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i94);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p10);
    call {:si_unique_call 643} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i95);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 6216);
    call {:si_unique_call 644} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i96);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    call {:si_unique_call 645} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i99);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, $i94);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p0);
    call {:si_unique_call 647} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i102);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 1300);
    call {:si_unique_call 648} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i103);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.1, $p104);
    call {:si_unique_call 649} {:cexpr "__cil_tmp92"} boogie_si_record_i32($i105);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $M.2 := $p9;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i111 := pch_udc_pcd_init($p10);
    call {:si_unique_call 654} {:cexpr "tmp___2"} boogie_si_record_i32($i111);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p0);
    call {:si_unique_call 655} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i113);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i114 := $add.i64($i113, 1300);
    call {:si_unique_call 656} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i114);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p115 := $i2p.i64.ref($i114);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.1, $p115);
    call {:si_unique_call 657} {:cexpr "__cil_tmp99"} boogie_si_record_i32($i116);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p10);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i118 := request_irq($i116, pch_udc_isr, 128, .str, $p117);
    call {:si_unique_call 659} {:cexpr "tmp___3"} boogie_si_record_i32($i118);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p10);
    call {:si_unique_call 666} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i128);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, 6224);
    call {:si_unique_call 667} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i129);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p0);
    call {:si_unique_call 668} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i130);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i130, 1300);
    call {:si_unique_call 669} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i131);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p132 := $i2p.i64.ref($i131);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.1, $p132);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p134 := $i2p.i64.ref($i129);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p134, $i133);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p10, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i136 := $load.i16($M.1, $p135);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i137 := $and.i16($i136, $sub.i16(0, 9));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i138 := $or.i16($i137, 8);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p135, $i138);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} pci_set_master($p0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_45 := pci_try_set_mwi($p0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p10);
    call {:si_unique_call 672} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i140);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 6088);
    call {:si_unique_call 673} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i141);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i141);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_46 := spinlock_check($p142);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p10);
    call {:si_unique_call 675} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i144);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i145 := $add.i64($i144, 6088);
    call {:si_unique_call 676} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i145);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p146 := $i2p.i64.ref($i145);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} __raw_spin_lock_init($p146, .str.27, $p2);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p10);
    call {:si_unique_call 678} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i147);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i148 := $add.i64($i147, 1216);
    call {:si_unique_call 679} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i148);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p149 := $i2p.i64.ref($i148);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p149, $p0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p10);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p150, pch_udc_ops);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i151 := init_dma_pools($p10);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 681} {:cexpr "retval"} boogie_si_record_i32($i151);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p10);
    call {:si_unique_call 682} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i153);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i154 := $add.i64($i153, 56);
    call {:si_unique_call 683} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i154);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p155 := $i2p.i64.ref($i154);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_47 := dev_set_name.ref.ref($p155, .str.28);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p10);
    call {:si_unique_call 685} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i157);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i158 := $add.i64($i157, 56);
    call {:si_unique_call 686} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i158);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p0);
    call {:si_unique_call 687} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i159);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i160 := $add.i64($i159, 144);
    call {:si_unique_call 688} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i160);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p161 := $i2p.i64.ref($i160);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p162 := $i2p.i64.ref($i158);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p162, $p161);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i163 := $add.i64(0, 976);
    call {:si_unique_call 689} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i163);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p10);
    call {:si_unique_call 690} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i164);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i165 := $add.i64($i164, $i163);
    call {:si_unique_call 691} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i165);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i166 := $p2i.ref.i64($p0);
    call {:si_unique_call 692} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i166);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i167 := $add.i64($i166, 1064);
    call {:si_unique_call 693} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i167);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p168 := $i2p.i64.ref($i167);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.1, $p168);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p170 := $i2p.i64.ref($i165);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p170, $p169);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i171 := $add.i64(0, 1200);
    call {:si_unique_call 694} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i171);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p10);
    call {:si_unique_call 695} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i172);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i173 := $add.i64($i172, $i171);
    call {:si_unique_call 696} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i173);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p174 := $i2p.i64.ref($i173);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p174, gadget_release);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p10);
    call {:si_unique_call 697} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i175);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i176 := $add.i64($i175, 48);
    call {:si_unique_call 698} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i176);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p177 := $i2p.i64.ref($i176);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p177, .str);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p10);
    call {:si_unique_call 699} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i178);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i179 := $add.i64($i178, 36);
    call {:si_unique_call 700} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i179);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p180 := $i2p.i64.ref($i179);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p180, 3);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p10);
    call {:si_unique_call 701} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i181);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i182 := $add.i64($i181, 56);
    call {:si_unique_call 702} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i182);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p183 := $i2p.i64.ref($i182);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i184 := device_register($p183);
    call {:si_unique_call 704} {:cexpr "retval"} boogie_si_record_i32($i184);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p10, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.1, $p186);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i188 := $and.i16($i187, $sub.i16(0, 33));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i189 := $or.i16($i188, 32);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p186, $i189);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} pch_udc_set_disconnect($p10);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p0);
    call {:si_unique_call 706} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i190);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i191 := $add.i64($i190, 144);
    call {:si_unique_call 707} {:cexpr "__cil_tmp151"} boogie_si_record_i64($i191);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p192 := $i2p.i64.ref($i191);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p10);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i194 := usb_add_gadget_udc($p192, $p193);
    call {:si_unique_call 709} {:cexpr "retval"} boogie_si_record_i32($i194);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb39:
    assume $i195 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i82 := $i194;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} pch_udc_remove($p0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i8 := $i82;
    goto $bb3;

  $bb36:
    assume $i185 == 1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i82 := $i184;
    goto $bb19;

  $bb33:
    assume $i152 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i82 := $i151;
    goto $bb19;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i119 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p0);
    call {:si_unique_call 660} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i120);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 144);
    call {:si_unique_call 661} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i121);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p0);
    call {:si_unique_call 662} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i123);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 1300);
    call {:si_unique_call 663} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i124);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.1, $p125);
    call {:si_unique_call 664} {:cexpr "__cil_tmp107"} boogie_si_record_i32($i126);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_44 := dev_err.ref.ref.ref.i32($p122, .str.26, .str.20, $i126);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 19);
    goto $bb19;

  $bb27:
    assume $i112 == 1;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 19);
    goto $bb19;

  $bb24:
    assume $i106 == 1;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p0);
    call {:si_unique_call 650} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i107);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 144);
    call {:si_unique_call 651} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i108);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_43 := dev_err.ref.ref.ref($p109, .str.25, .str.20);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 19);
    goto $bb19;

  $bb21:
    assume $i100 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_42 := printk.ref.ref(.str.24, .str.20);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 12);
    goto $bb19;

  $bb17:
    assume $i77 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p0);
    call {:si_unique_call 633} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i78);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 144);
    call {:si_unique_call 634} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i79);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} vslice_dummy_var_41 := dev_err.ref.ref.ref($p80, .str.23, .str.20);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 16);
    goto $bb19;

  $bb14:
    assume $i59 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i60 := $add.i64(1304, 56);
    call {:si_unique_call 622} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i60);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p0);
    call {:si_unique_call 623} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i61);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, $i60);
    call {:si_unique_call 624} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i62);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.1, $p63);
    call {:si_unique_call 625} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i64);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i65 := $add.i64(56, 8);
    call {:si_unique_call 626} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i65);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i66 := $add.i64(1304, $i65);
    call {:si_unique_call 627} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i66);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p0);
    call {:si_unique_call 628} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i67);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, $i66);
    call {:si_unique_call 629} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i68);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.1, $p69);
    call {:si_unique_call 630} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i70);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i71 := $sub.i64($i70, $i64);
    call {:si_unique_call 631} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i71);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 1);
    call {:si_unique_call 632} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i72);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb16;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i34 := $add.i64(1304, 56);
    call {:si_unique_call 599} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i34);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p0);
    call {:si_unique_call 600} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i35);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, $i34);
    call {:si_unique_call 601} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i36);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    call {:si_unique_call 602} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i38);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i39 := $add.i64(56, 8);
    call {:si_unique_call 603} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i39);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i40 := $add.i64(1304, $i39);
    call {:si_unique_call 604} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i40);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    call {:si_unique_call 605} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i41);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, $i40);
    call {:si_unique_call 606} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i42);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p43);
    call {:si_unique_call 607} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i44);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i45 := $sub.i64($i44, $i38);
    call {:si_unique_call 608} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i45);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 1);
    call {:si_unique_call 609} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i46);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p10);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} kfree($p17);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_40 := printk.ref.ref(.str.22, .str.20);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_39 := printk.ref.ref(.str.21, .str.20);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_38 := printk.ref.ref(.str.19, .str.20);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 145284);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_remove: ref;

axiom pch_udc_remove == $sub.ref(0, 146316);

procedure pch_udc_remove($p0: ref);
  free requires assertsPassed;



implementation pch_udc_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i1;
  var $i135: i64;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $i141: i64;
  var $i142: i64;
  var $i143: i64;
  var $p144: ref;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $i151: i64;
  var $i152: i64;
  var $i153: i64;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $i159: i64;
  var $i160: i64;
  var $i161: i64;
  var $i162: i64;
  var $i163: i64;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $i167: i64;
  var $i168: i64;
  var $i169: i64;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $i173: i64;
  var $i174: i64;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $i154: i64;
  var $i181: i64;
  var $i182: i64;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $i192: i8;
  var $i193: i32;
  var $i194: i1;
  var $i195: i64;
  var $i196: i64;
  var $p197: ref;
  var $p198: ref;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} usb_del_gadget_udc($p3);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 713} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    call {:si_unique_call 714} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1208);
    call {:si_unique_call 715} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    call {:si_unique_call 716} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $i4);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 720} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    call {:si_unique_call 721} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 6168);
    call {:si_unique_call 722} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    call {:si_unique_call 723} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, $i15);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 727} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i26);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p2);
    call {:si_unique_call 728} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i27);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 6176);
    call {:si_unique_call 729} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i28);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    call {:si_unique_call 730} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i31);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i26);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p2);
    call {:si_unique_call 770} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i89);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 6184);
    call {:si_unique_call 771} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i90);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p91 := $i2p.i64.ref($i90);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.1, $p91);
    call {:si_unique_call 772} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i92);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p2);
    call {:si_unique_call 781} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i105);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 6192);
    call {:si_unique_call 782} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i106);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} kfree($p108);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} pch_vbus_gpio_free($p2);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} pch_udc_exit($p2);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p2);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(6160, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.1, $p110);
    call {:si_unique_call 786} {:cexpr "__cil_tmp104"} boogie_si_record_i8($i111);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    call {:si_unique_call 787} {:cexpr "__cil_tmp105"} boogie_si_record_i32($i112);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 792} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i119);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p2);
    call {:si_unique_call 793} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i120);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 6216);
    call {:si_unique_call 794} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i121);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.1, $p122);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    call {:si_unique_call 795} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i124);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, $i119);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p2);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p130, $mul.ref(6160, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.1, $p131);
    call {:si_unique_call 799} {:cexpr "__cil_tmp122"} boogie_si_record_i8($i132);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    call {:si_unique_call 800} {:cexpr "__cil_tmp123"} boogie_si_record_i32($i133);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p2);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p185, $mul.ref(6160, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.1, $p186);
    call {:si_unique_call 840} {:cexpr "__cil_tmp170"} boogie_si_record_i8($i187);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    call {:si_unique_call 841} {:cexpr "__cil_tmp171"} boogie_si_record_i32($i188);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p2);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref(6160, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i192 := $load.i8($M.1, $p191);
    call {:si_unique_call 843} {:cexpr "__cil_tmp174"} boogie_si_record_i8($i192);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    call {:si_unique_call 844} {:cexpr "__cil_tmp175"} boogie_si_record_i32($i193);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p2);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} kfree($p198);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i194 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p2);
    call {:si_unique_call 845} {:cexpr "__cil_tmp177"} boogie_si_record_i64($i195);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i196 := $add.i64($i195, 56);
    call {:si_unique_call 846} {:cexpr "__cil_tmp178"} boogie_si_record_i64($i196);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p197 := $i2p.i64.ref($i196);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} device_unregister($p197);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i189 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} pci_disable_device($p0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb25:
    assume $i134 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i135 := $add.i64(1304, 56);
    call {:si_unique_call 801} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i135);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p0);
    call {:si_unique_call 802} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i136);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, $i135);
    call {:si_unique_call 803} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i137);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p138 := $i2p.i64.ref($i137);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.1, $p138);
    call {:si_unique_call 804} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i139);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i140 == 1);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i155 := $add.i64(1304, 56);
    call {:si_unique_call 816} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i155);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p0);
    call {:si_unique_call 817} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i156);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, $i155);
    call {:si_unique_call 818} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i157);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p158 := $i2p.i64.ref($i157);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i159 := $load.i64($M.1, $p158);
    call {:si_unique_call 819} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i159);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i160 := $add.i64(56, 8);
    call {:si_unique_call 820} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i160);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i161 := $add.i64(1304, $i160);
    call {:si_unique_call 821} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i161);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p0);
    call {:si_unique_call 822} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i162);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i163 := $add.i64($i162, $i161);
    call {:si_unique_call 823} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i163);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p164 := $i2p.i64.ref($i163);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i165 := $load.i64($M.1, $p164);
    call {:si_unique_call 824} {:cexpr "__cil_tmp151"} boogie_si_record_i64($i165);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, $i159);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    $i180 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i154 := $i180;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p2);
    call {:si_unique_call 825} {:cexpr "__cil_tmp164"} boogie_si_record_i64($i181);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i182 := $add.i64($i181, 6208);
    call {:si_unique_call 826} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i182);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p183 := $i2p.i64.ref($i182);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i184 := $load.i64($M.1, $p183);
    call {:si_unique_call 827} {:cexpr "__cil_tmp166"} boogie_si_record_i64($i184);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} __release_region(iomem_resource, $i184, $i154);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i166 == 1;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i167 := $add.i64(1304, 56);
    call {:si_unique_call 829} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i167);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p0);
    call {:si_unique_call 830} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i168);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i169 := $add.i64($i168, $i167);
    call {:si_unique_call 831} {:cexpr "__cil_tmp155"} boogie_si_record_i64($i169);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p170 := $i2p.i64.ref($i169);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.1, $p170);
    call {:si_unique_call 832} {:cexpr "__cil_tmp156"} boogie_si_record_i64($i171);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i172 := $add.i64(56, 8);
    call {:si_unique_call 833} {:cexpr "__cil_tmp158"} boogie_si_record_i64($i172);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i173 := $add.i64(1304, $i172);
    call {:si_unique_call 834} {:cexpr "__cil_tmp159"} boogie_si_record_i64($i173);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p0);
    call {:si_unique_call 835} {:cexpr "__cil_tmp160"} boogie_si_record_i64($i174);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i175 := $add.i64($i174, $i173);
    call {:si_unique_call 836} {:cexpr "__cil_tmp161"} boogie_si_record_i64($i175);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p176 := $i2p.i64.ref($i175);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.1, $p176);
    call {:si_unique_call 837} {:cexpr "__cil_tmp162"} boogie_si_record_i64($i177);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i178 := $sub.i64($i177, $i171);
    call {:si_unique_call 838} {:cexpr "__cil_tmp163"} boogie_si_record_i64($i178);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i179 := $add.i64($i178, 1);
    call {:si_unique_call 839} {:cexpr "tmp___0"} boogie_si_record_i64($i179);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i180 := $i179;
    goto $bb32;

  $bb27:
    assume $i140 == 1;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i141 := $add.i64(1304, 56);
    call {:si_unique_call 805} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i141);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p0);
    call {:si_unique_call 806} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i142);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i143 := $add.i64($i142, $i141);
    call {:si_unique_call 807} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i143);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p144 := $i2p.i64.ref($i143);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.1, $p144);
    call {:si_unique_call 808} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i145);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i146 := $add.i64(56, 8);
    call {:si_unique_call 809} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i146);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i147 := $add.i64(1304, $i146);
    call {:si_unique_call 810} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i147);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p0);
    call {:si_unique_call 811} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i148);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i149 := $add.i64($i148, $i147);
    call {:si_unique_call 812} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i149);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p150 := $i2p.i64.ref($i149);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.1, $p150);
    call {:si_unique_call 813} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i151);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i152 := $sub.i64($i151, $i145);
    call {:si_unique_call 814} {:cexpr "__cil_tmp140"} boogie_si_record_i64($i152);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i153 := $add.i64($i152, 1);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i64($i153);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i154 := $i153;
    goto $bb29;

  $bb22:
    assume $i125 == 1;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p2);
    call {:si_unique_call 796} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i126);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 6216);
    call {:si_unique_call 797} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i127);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p128 := $i2p.i64.ref($i127);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.1, $p128);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} iounmap($p129);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i113 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p0);
    call {:si_unique_call 788} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i114);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 1300);
    call {:si_unique_call 789} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i115);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p116);
    call {:si_unique_call 790} {:cexpr "__cil_tmp108"} boogie_si_record_i32($i117);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p2);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} free_irq($i117, $p118);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i93 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p2);
    call {:si_unique_call 773} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i94);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 1216);
    call {:si_unique_call 774} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i95);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    call {:si_unique_call 775} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i98);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 144);
    call {:si_unique_call 776} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i99);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p2);
    call {:si_unique_call 777} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i101);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 6184);
    call {:si_unique_call 778} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i102);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.1, $p103);
    call {:si_unique_call 779} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i104);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} dma_unmap_single_attrs($p100, $i104, 64, 2, $0.ref);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 731} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i33);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i34 := $add.i64(152, 80);
    call {:si_unique_call 732} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i34);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i35 := $add.i64(1224, $i34);
    call {:si_unique_call 733} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i35);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p2);
    call {:si_unique_call 734} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i36);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, $i35);
    call {:si_unique_call 735} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i37);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    call {:si_unique_call 736} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i40);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, $i33);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 749} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i59);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i60 := $add.i64(152, 88);
    call {:si_unique_call 750} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i60);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i61 := $add.i64(1224, $i60);
    call {:si_unique_call 751} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i61);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p2);
    call {:si_unique_call 752} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i62);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, $i61);
    call {:si_unique_call 753} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i63);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    call {:si_unique_call 754} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i66);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, $i59);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p2);
    call {:si_unique_call 767} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i85);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 6176);
    call {:si_unique_call 768} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i86);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} dma_pool_destroy($p88);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i67 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p2);
    call {:si_unique_call 755} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i68);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 6176);
    call {:si_unique_call 756} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i69);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i72 := $add.i64(152, 88);
    call {:si_unique_call 757} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i72);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i73 := $add.i64(1224, $i72);
    call {:si_unique_call 758} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i73);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p2);
    call {:si_unique_call 759} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i74);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, $i73);
    call {:si_unique_call 760} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i75);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i79 := $add.i64(152, 72);
    call {:si_unique_call 761} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i79);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i80 := $add.i64(1224, $i79);
    call {:si_unique_call 762} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i80);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p2);
    call {:si_unique_call 763} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i81);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, $i80);
    call {:si_unique_call 764} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i82);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.1, $p83);
    call {:si_unique_call 765} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i84);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} dma_pool_free($p71, $p78, $i84);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p2);
    call {:si_unique_call 737} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i42);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 6176);
    call {:si_unique_call 738} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i43);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i46 := $add.i64(152, 80);
    call {:si_unique_call 739} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i46);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i47 := $add.i64(1224, $i46);
    call {:si_unique_call 740} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i47);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p2);
    call {:si_unique_call 741} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i48);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, $i47);
    call {:si_unique_call 742} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i49);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i53 := $add.i64(152, 64);
    call {:si_unique_call 743} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i53);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i54 := $add.i64(1224, $i53);
    call {:si_unique_call 744} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i54);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p2);
    call {:si_unique_call 745} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i55);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, $i54);
    call {:si_unique_call 746} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i56);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.1, $p57);
    call {:si_unique_call 747} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i58);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} dma_pool_free($p45, $p52, $i58);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p2);
    call {:si_unique_call 724} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i22);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 6168);
    call {:si_unique_call 725} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i23);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} dma_pool_destroy($p25);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 717} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 144);
    call {:si_unique_call 718} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_48 := dev_err.ref.ref.ref($p13, .str.83, .str.84);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_suspend: ref;

axiom pch_udc_suspend == $sub.ref(0, 147348);

procedure pch_udc_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i13: i32;
  var $i12: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} {:cexpr "pch_udc_suspend:arg:state_event12"} boogie_si_record_i32($i1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} pch_udc_disable_interrupts($p3, 127);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} pch_udc_disable_ep_interrupts($p3, $sub.i32(0, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} pci_disable_device($p0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1(0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_49 := pci_enable_wake($p0, 3, $i4);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i6 := pci_save_state($p0);
    call {:si_unique_call 857} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i13 := pci_choose_state($p0, $i1);
    call {:si_unique_call 862} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_51 := pci_set_power_state($p0, $i13);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 858} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 144);
    call {:si_unique_call 859} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_50 := dev_err.ref.ref.ref($p10, .str.85, .str.86);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;
}



const pch_udc_resume: ref;

axiom pch_udc_resume == $sub.ref(0, 148380);

procedure pch_udc_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_resume($p0: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i9: i1;
  var $i8: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_52 := pci_set_power_state($p0, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} pci_restore_state($p0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i2 := pci_enable_device($p0);
    call {:si_unique_call 867} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} vslice_dummy_var_54 := pci_enable_wake($p0, 3, $i9);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 868} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i4);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 144);
    call {:si_unique_call 869} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i5);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_53 := dev_err.ref.ref.ref($p6, .str.87, .str.88);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i8 := $i2;
    goto $bb3;
}



const pch_udc_shutdown: ref;

axiom pch_udc_shutdown == $sub.ref(0, 149412);

procedure pch_udc_shutdown($p0: ref);
  free requires assertsPassed;



implementation pch_udc_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} pch_udc_disable_interrupts($p2, 127);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} pch_udc_disable_ep_interrupts($p2, $sub.i32(0, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} pch_udc_set_disconnect($p2);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_isr: ref;

axiom pch_udc_isr == $sub.ref(0, 150444);

procedure pch_udc_isr($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.1, $CurrAddr, $M.4, $M.2, assertsPassed;



implementation pch_udc_isr($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i32;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i56: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i42: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 877} {:cexpr "pch_udc_isr:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i4 := pch_udc_read_device_interrupts($p3);
    call {:si_unique_call 879} {:cexpr "dev_intr"} boogie_si_record_i32($i4);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i5 := pch_udc_read_ep_interrupts($p3);
    call {:si_unique_call 881} {:cexpr "ep_intr"} boogie_si_record_i32($i5);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, $i5);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i4, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i5, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i4, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p3);
    call {:si_unique_call 903} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i47);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 6088);
    call {:si_unique_call 904} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i48);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} spin_lock($p49);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i4, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i5, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p3);
    call {:si_unique_call 919} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i64);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 6088);
    call {:si_unique_call 920} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i65);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} spin_unlock($p66);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} pch_udc_read_all_epstatus($p3, $i5);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i5, 1);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i5, 65536);
    call {:si_unique_call 910} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i54);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb34;

  $bb34:
    call $i57, $i58, $i59, $i60, $i61, $i56 := pch_udc_isr_loop_$bb34($p3, $i5, $i57, $i58, $i59, $i60, $i61, $i56);
    goto $bb34_last;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32(1, $i56);
    call {:si_unique_call 912} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i57);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, $i5);
    call {:si_unique_call 913} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i58);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i56, 1);
    call {:si_unique_call 916} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i61 := $sle.i32($i60, 3);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i61 == 1);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i62 := $and.i32(131072, $i5);
    call {:si_unique_call 917} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i62);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i67 := $and.i32(262144, $i5);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i69 := $and.i32(524288, $i5);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb54:
    assume $i70 == 1;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} pch_udc_svc_data_out($p3, 3);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume $i68 == 1;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} pch_udc_svc_data_out($p3, 2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i63 == 1;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} pch_udc_svc_data_out($p3, 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb39:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i56 := $i60;
    goto $bb39_dummy;

  $bb36:
    assume $i59 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} pch_udc_svc_data_in($p3, $i56);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} pch_udc_postsvc_epinters($p3, $i56);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb31:
    assume $i55 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} pch_udc_svc_control_out($p3);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} pch_udc_svc_control_in($p3);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} pch_udc_postsvc_epinters($p3, 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} pch_udc_dev_isr($p3, $i4);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i5, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb8;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} pch_udc_write_ep_interrupts($p3, $i5);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} pch_udc_write_device_interrupts($p3, $i4);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i7 := pch_udc_readl($p3, 1024);
    call {:si_unique_call 883} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i4);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 8);
    call {:si_unique_call 884} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.89);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p2);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 16);
    call {:si_unique_call 885} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str.69);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 24);
    call {:si_unique_call 886} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i17);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.90);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p2);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 32);
    call {:si_unique_call 887} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i20);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, 2807);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p2);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 35);
    call {:si_unique_call 888} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i23);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 1);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p2);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 35);
    call {:si_unique_call 889} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i26);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    call {:si_unique_call 890} {:cexpr "__cil_tmp17"} boogie_si_record_i8($i28);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    call {:si_unique_call 891} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i29);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    call {:si_unique_call 892} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i30);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i31 := __builtinx_expect.i64.i64($i30, 0);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    call {:si_unique_call 894} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} pch_udc_writel($p3, 1, 1276);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb8;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p3);
    call {:si_unique_call 895} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i34);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 1216);
    call {:si_unique_call 896} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i35);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    call {:si_unique_call 897} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i38);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 144);
    call {:si_unique_call 898} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i39);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_55 := __dynamic_dev_dbg.ref.ref.ref($p2, $p40, .str.90);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb39_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;
}



const pch_vbus_gpio_irq: ref;

axiom pch_vbus_gpio_irq == $sub.ref(0, 151476);

procedure pch_vbus_gpio_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_vbus_gpio_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i8: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "pch_vbus_gpio_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 925} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 6240);
    call {:si_unique_call 926} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    call {:si_unique_call 927} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i6);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    call {:si_unique_call 928} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 6244);
    call {:si_unique_call 929} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    call {:si_unique_call 930} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i12);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i14 := pch_vbus_gpio_get_value($p2);
    call {:si_unique_call 932} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p2);
    call {:si_unique_call 936} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i20);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 6248);
    call {:si_unique_call 937} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_57 := schedule_work($p22);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    call {:si_unique_call 933} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i16);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 6328);
    call {:si_unique_call 934} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i17);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_56 := schedule_work($p18);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const pch_udc_pci_exit: ref;

axiom pch_udc_pci_exit == $sub.ref(0, 152508);

procedure pch_udc_pci_exit();
  free requires assertsPassed;



implementation pch_udc_pci_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} pci_unregister_driver(pch_udc_driver);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 153540);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 154572);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    return;
}



const pch_vbus_gpio_get_value: ref;

axiom pch_vbus_gpio_get_value == $sub.ref(0, 155604);

procedure pch_vbus_gpio_get_value($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_vbus_gpio_get_value($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 940} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 6240);
    call {:si_unique_call 941} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    call {:si_unique_call 942} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i4);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 943} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 6240);
    call {:si_unique_call 944} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    call {:si_unique_call 945} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i10 := gpio_get_value($i9);
    call {:si_unique_call 947} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 948} {:cexpr "vbus"} boogie_si_record_i32($i12);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 156636);

procedure schedule_work($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 949} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 950} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gpio_get_value: ref;

axiom gpio_get_value == $sub.ref(0, 157668);

procedure gpio_get_value($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_get_value($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} {:cexpr "gpio_get_value:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i1 := __gpio_get_value($i0);
    call {:si_unique_call 953} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __gpio_get_value: ref;

axiom __gpio_get_value == $sub.ref(0, 158700);

procedure __gpio_get_value($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __gpio_get_value($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} {:cexpr "__gpio_get_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 955} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_device_interrupts: ref;

axiom pch_udc_read_device_interrupts == $sub.ref(0, 159732);

procedure pch_udc_read_device_interrupts($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_device_interrupts($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i1 := pch_udc_readl($p0, 1036);
    call {:si_unique_call 958} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_ep_interrupts: ref;

axiom pch_udc_read_ep_interrupts == $sub.ref(0, 160764);

procedure pch_udc_read_ep_interrupts($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_interrupts($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i1 := pch_udc_readl($p0, 1044);
    call {:si_unique_call 960} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_readl: ref;

axiom pch_udc_readl == $sub.ref(0, 161796);

procedure pch_udc_readl($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_readl($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} {:cexpr "pch_udc_readl:arg:reg"} boogie_si_record_i64($i1);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 962} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 6216);
    call {:si_unique_call 963} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($i1, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i7 := ioread32($p6);
    call {:si_unique_call 965} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __builtinx_expect: ref;

axiom __builtinx_expect == $sub.ref(0, 162828);

procedure __builtinx_expect() returns ($r: i32);



procedure __builtinx_expect.i64.i64(p.0: i64, p.1: i64) returns ($r: i32);



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 163860);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 1} true;
    call {:si_unique_call 966} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 967} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_udc_writel: ref;

axiom pch_udc_writel == $sub.ref(0, 164892);

procedure pch_udc_writel($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_writel($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} {:cexpr "pch_udc_writel:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 969} {:cexpr "pch_udc_writel:arg:reg"} boogie_si_record_i64($i2);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    call {:si_unique_call 970} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i3);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 971} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 6216);
    call {:si_unique_call 972} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($i2, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} iowrite32($i3, $p8);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_write_device_interrupts: ref;

axiom pch_udc_write_device_interrupts == $sub.ref(0, 165924);

procedure pch_udc_write_device_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_write_device_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} {:cexpr "pch_udc_write_device_interrupts:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 975} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} pch_udc_writel($p0, $i2, 1036);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_write_ep_interrupts: ref;

axiom pch_udc_write_ep_interrupts == $sub.ref(0, 166956);

procedure pch_udc_write_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_write_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} {:cexpr "pch_udc_write_ep_interrupts:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 978} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} pch_udc_writel($p0, $i2, 1044);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 167988);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_spin_lock();
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_spin_lock_1($p0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_dev_isr: ref;

axiom pch_udc_dev_isr == $sub.ref(0, 169020);

procedure pch_udc_dev_isr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.3, $M.1, $M.4, $CurrAddr, $M.2, assertsPassed;



implementation pch_udc_dev_isr($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i32;
  var $i33: i64;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i32;
  var $i68: i64;
  var $i69: i1;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $i131: i64;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $i142: i64;
  var $i143: i64;
  var $p144: ref;
  var $i145: i64;
  var $i146: i64;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i1;
  var $i162: i1;
  var $i163: i64;
  var $i164: i64;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i64;
  var $i169: i64;
  var $p170: ref;
  var $p172: ref;
  var $i173: i64;
  var $i174: i64;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $p178: ref;
  var $i179: i64;
  var $i180: i64;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $p184: ref;
  var $i185: i64;
  var $i186: i64;
  var $p187: ref;
  var $i188: i64;
  var $i189: i64;
  var $p190: ref;
  var $i191: i8;
  var $i192: i64;
  var $i193: i64;
  var $i194: i32;
  var $i195: i64;
  var $i196: i1;
  var $i197: i64;
  var $i198: i64;
  var $p199: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i64;
  var $p203: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i64;
  var $i209: i64;
  var $p210: ref;
  var $i211: i64;
  var $i212: i64;
  var $p213: ref;
  var $i214: i64;
  var $i215: i64;
  var $p216: ref;
  var $i217: i64;
  var $i218: i64;
  var $p219: ref;
  var $i220: i64;
  var $i221: i64;
  var $p222: ref;
  var $i223: i64;
  var $i224: i64;
  var $p225: ref;
  var $i226: i8;
  var $i227: i64;
  var $i228: i64;
  var $i229: i32;
  var $i230: i64;
  var $i231: i1;
  var $i232: i64;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $i236: i64;
  var $i237: i64;
  var $p238: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i64;
  var $i244: i64;
  var $p245: ref;
  var $i246: i64;
  var $i247: i64;
  var $p248: ref;
  var $i249: i64;
  var $i250: i64;
  var $p251: ref;
  var $i252: i64;
  var $i253: i64;
  var $p254: ref;
  var $i255: i64;
  var $i256: i64;
  var $p257: ref;
  var $i258: i64;
  var $i259: i64;
  var $p260: ref;
  var $i261: i8;
  var $i262: i64;
  var $i263: i64;
  var $i264: i32;
  var $i265: i64;
  var $i266: i1;
  var $i267: i64;
  var $i268: i64;
  var $p269: ref;
  var $p270: ref;
  var $i271: i64;
  var $i272: i64;
  var $p273: ref;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i278: i64;
  var $i279: i64;
  var $p280: ref;
  var $i281: i64;
  var $i282: i64;
  var $p283: ref;
  var $i284: i64;
  var $i285: i64;
  var $p286: ref;
  var $i287: i64;
  var $i288: i64;
  var $p289: ref;
  var $i290: i64;
  var $i291: i64;
  var $p292: ref;
  var $i293: i64;
  var $i294: i64;
  var $p295: ref;
  var $i296: i8;
  var $i297: i64;
  var $i298: i64;
  var $i299: i32;
  var $i300: i64;
  var $i301: i1;
  var $i302: i64;
  var $i303: i64;
  var $p304: ref;
  var $p305: ref;
  var $i306: i64;
  var $i307: i64;
  var $p308: ref;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 988} {:cexpr "pch_udc_dev_isr:arg:dev_intr"} boogie_si_record_i32($i1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i1, 8);
    call {:si_unique_call 989} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i8);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i1, 64);
    call {:si_unique_call 1007} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i43);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i1, 2);
    call {:si_unique_call 1025} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i78);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call {:si_unique_call 1027} {:cexpr "pch_udc_dev_isr:arg:__cil_tmp53"} boogie_si_record_i32($i1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i1, 1);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i1, 16);
    call {:si_unique_call 1029} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i82);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i1, 32);
    call {:si_unique_call 1101} {:cexpr "__cil_tmp144"} boogie_si_record_i32($i205);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i205, 0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i240 := $and.i32($i1, 4);
    call {:si_unique_call 1118} {:cexpr "__cil_tmp162"} boogie_si_record_i32($i240);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i275 := $and.i32($i1, 128);
    call {:si_unique_call 1135} {:cexpr "__cil_tmp180"} boogie_si_record_i32($i275);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    return;

  $bb65:
    assume $i276 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p7);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p277, .str);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i278 := $p2i.ref.i64($p7);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i279 := $add.i64($i278, 8);
    call {:si_unique_call 1136} {:cexpr "__cil_tmp182"} boogie_si_record_i64($i279);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p280 := $i2p.i64.ref($i279);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p280, .str.91);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i281 := $p2i.ref.i64($p7);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i282 := $add.i64($i281, 16);
    call {:si_unique_call 1137} {:cexpr "__cil_tmp183"} boogie_si_record_i64($i282);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p283 := $i2p.i64.ref($i282);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p283, .str.69);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i284 := $p2i.ref.i64($p7);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i285 := $add.i64($i284, 24);
    call {:si_unique_call 1138} {:cexpr "__cil_tmp184"} boogie_si_record_i64($i285);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p286 := $i2p.i64.ref($i285);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p286, .str.97);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p7);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i288 := $add.i64($i287, 32);
    call {:si_unique_call 1139} {:cexpr "__cil_tmp185"} boogie_si_record_i64($i288);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p289 := $i2p.i64.ref($i288);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p289, 2787);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i290 := $p2i.ref.i64($p7);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i291 := $add.i64($i290, 35);
    call {:si_unique_call 1140} {:cexpr "__cil_tmp186"} boogie_si_record_i64($i291);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p292 := $i2p.i64.ref($i291);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p292, 1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i293 := $p2i.ref.i64($p7);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i294 := $add.i64($i293, 35);
    call {:si_unique_call 1141} {:cexpr "__cil_tmp187"} boogie_si_record_i64($i294);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p295 := $i2p.i64.ref($i294);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i296 := $load.i8($M.1, $p295);
    call {:si_unique_call 1142} {:cexpr "__cil_tmp188"} boogie_si_record_i8($i296);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i64($i296);
    call {:si_unique_call 1143} {:cexpr "__cil_tmp189"} boogie_si_record_i64($i297);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i298 := $and.i64($i297, 1);
    call {:si_unique_call 1144} {:cexpr "__cil_tmp190"} boogie_si_record_i64($i298);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i299 := __builtinx_expect.i64.i64($i298, 0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i300 := $sext.i32.i64($i299);
    call {:si_unique_call 1146} {:cexpr "tmp___4"} boogie_si_record_i64($i300);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i301 == 1;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p0);
    call {:si_unique_call 1147} {:cexpr "__cil_tmp191"} boogie_si_record_i64($i302);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i303 := $add.i64($i302, 1216);
    call {:si_unique_call 1148} {:cexpr "__cil_tmp192"} boogie_si_record_i64($i303);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p304 := $i2p.i64.ref($i303);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.1, $p304);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p305);
    call {:si_unique_call 1149} {:cexpr "__cil_tmp194"} boogie_si_record_i64($i306);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i307 := $add.i64($i306, 144);
    call {:si_unique_call 1150} {:cexpr "__cil_tmp195"} boogie_si_record_i64($i307);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p308 := $i2p.i64.ref($i307);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} vslice_dummy_var_64 := __dynamic_dev_dbg.ref.ref.ref($p7, $p308, .str.97);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb59:
    assume $i241 == 1;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p6);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p242, .str);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p6);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i244 := $add.i64($i243, 8);
    call {:si_unique_call 1119} {:cexpr "__cil_tmp164"} boogie_si_record_i64($i244);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p245 := $i2p.i64.ref($i244);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p245, .str.91);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p6);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i247 := $add.i64($i246, 16);
    call {:si_unique_call 1120} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i247);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p248 := $i2p.i64.ref($i247);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p248, .str.69);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i249 := $p2i.ref.i64($p6);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i250 := $add.i64($i249, 24);
    call {:si_unique_call 1121} {:cexpr "__cil_tmp166"} boogie_si_record_i64($i250);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p251 := $i2p.i64.ref($i250);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p251, .str.96);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p6);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i253 := $add.i64($i252, 32);
    call {:si_unique_call 1122} {:cexpr "__cil_tmp167"} boogie_si_record_i64($i253);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p254 := $i2p.i64.ref($i253);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p254, 2784);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p6);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i256 := $add.i64($i255, 35);
    call {:si_unique_call 1123} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i256);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p257 := $i2p.i64.ref($i256);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p257, 1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p6);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i259 := $add.i64($i258, 35);
    call {:si_unique_call 1124} {:cexpr "__cil_tmp169"} boogie_si_record_i64($i259);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p260 := $i2p.i64.ref($i259);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.1, $p260);
    call {:si_unique_call 1125} {:cexpr "__cil_tmp170"} boogie_si_record_i8($i261);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i64($i261);
    call {:si_unique_call 1126} {:cexpr "__cil_tmp171"} boogie_si_record_i64($i262);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i263 := $and.i64($i262, 1);
    call {:si_unique_call 1127} {:cexpr "__cil_tmp172"} boogie_si_record_i64($i263);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i264 := __builtinx_expect.i64.i64($i263, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i265 := $sext.i32.i64($i264);
    call {:si_unique_call 1129} {:cexpr "tmp___3"} boogie_si_record_i64($i265);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i266 := $ne.i64($i265, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i266 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p0);
    call {:si_unique_call 1130} {:cexpr "__cil_tmp173"} boogie_si_record_i64($i267);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i268 := $add.i64($i267, 1216);
    call {:si_unique_call 1131} {:cexpr "__cil_tmp174"} boogie_si_record_i64($i268);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p269 := $i2p.i64.ref($i268);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.1, $p269);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i271 := $p2i.ref.i64($p270);
    call {:si_unique_call 1132} {:cexpr "__cil_tmp176"} boogie_si_record_i64($i271);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i272 := $add.i64($i271, 144);
    call {:si_unique_call 1133} {:cexpr "__cil_tmp177"} boogie_si_record_i64($i272);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p273 := $i2p.i64.ref($i272);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_63 := __dynamic_dev_dbg.ref.ref.ref($p6, $p273, .str.96);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb53:
    assume $i206 == 1;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p5);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p207, .str);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i208 := $p2i.ref.i64($p5);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i209 := $add.i64($i208, 8);
    call {:si_unique_call 1102} {:cexpr "__cil_tmp146"} boogie_si_record_i64($i209);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p210 := $i2p.i64.ref($i209);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p210, .str.91);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p5);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i212 := $add.i64($i211, 16);
    call {:si_unique_call 1103} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i212);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p213 := $i2p.i64.ref($i212);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p213, .str.69);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i214 := $p2i.ref.i64($p5);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i215 := $add.i64($i214, 24);
    call {:si_unique_call 1104} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i215);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p216 := $i2p.i64.ref($i215);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p216, .str.95);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i217 := $p2i.ref.i64($p5);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i218 := $add.i64($i217, 32);
    call {:si_unique_call 1105} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i218);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p219 := $i2p.i64.ref($i218);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p219, 2781);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i220 := $p2i.ref.i64($p5);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i221 := $add.i64($i220, 35);
    call {:si_unique_call 1106} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i221);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p222 := $i2p.i64.ref($i221);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p222, 1);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p5);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i224 := $add.i64($i223, 35);
    call {:si_unique_call 1107} {:cexpr "__cil_tmp151"} boogie_si_record_i64($i224);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p225 := $i2p.i64.ref($i224);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.1, $p225);
    call {:si_unique_call 1108} {:cexpr "__cil_tmp152"} boogie_si_record_i8($i226);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i64($i226);
    call {:si_unique_call 1109} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i227);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i228 := $and.i64($i227, 1);
    call {:si_unique_call 1110} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i228);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i229 := __builtinx_expect.i64.i64($i228, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i230 := $sext.i32.i64($i229);
    call {:si_unique_call 1112} {:cexpr "tmp___2"} boogie_si_record_i64($i230);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i231 := $ne.i64($i230, 0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i231 == 1;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i64($p0);
    call {:si_unique_call 1113} {:cexpr "__cil_tmp155"} boogie_si_record_i64($i232);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i233 := $add.i64($i232, 1216);
    call {:si_unique_call 1114} {:cexpr "__cil_tmp156"} boogie_si_record_i64($i233);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p234 := $i2p.i64.ref($i233);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.1, $p234);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i236 := $p2i.ref.i64($p235);
    call {:si_unique_call 1115} {:cexpr "__cil_tmp158"} boogie_si_record_i64($i236);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i237 := $add.i64($i236, 144);
    call {:si_unique_call 1116} {:cexpr "__cil_tmp159"} boogie_si_record_i64($i237);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p238 := $i2p.i64.ref($i237);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vslice_dummy_var_62 := __dynamic_dev_dbg.ref.ref.ref($p5, $p238, .str.95);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb19:
    assume $i83 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1030} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i84);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    call {:si_unique_call 1031} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i85);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 1208);
    call {:si_unique_call 1032} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i86);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    call {:si_unique_call 1033} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i89);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, $i84);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i117 := pch_vbus_gpio_get_value($p0);
    call {:si_unique_call 1052} {:cexpr "vbus"} boogie_si_record_i32($i117);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p0);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p118, $mul.ref(6161, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.1, $p119);
    call {:si_unique_call 1053} {:cexpr "__cil_tmp85"} boogie_si_record_i8($i120);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    call {:si_unique_call 1054} {:cexpr "__cil_tmp86"} boogie_si_record_i32($i121);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i122 == 1);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p0);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p157, $mul.ref(6161, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.1, $p158);
    call {:si_unique_call 1077} {:cexpr "__cil_tmp117"} boogie_si_record_i8($i159);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    call {:si_unique_call 1078} {:cexpr "__cil_tmp118"} boogie_si_record_i32($i160);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 0);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p4);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p172, .str);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p4);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i174 := $add.i64($i173, 8);
    call {:si_unique_call 1079} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i174);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p175 := $i2p.i64.ref($i174);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p175, .str.91);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p4);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i177 := $add.i64($i176, 16);
    call {:si_unique_call 1080} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i177);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p178 := $i2p.i64.ref($i177);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p178, .str.69);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p4);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i179, 24);
    call {:si_unique_call 1081} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i180);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p181 := $i2p.i64.ref($i180);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p181, .str.94);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p4);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i183 := $add.i64($i182, 32);
    call {:si_unique_call 1082} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i183);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p184 := $i2p.i64.ref($i183);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p184, 2777);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p4);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i186 := $add.i64($i185, 35);
    call {:si_unique_call 1083} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i186);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p187 := $i2p.i64.ref($i186);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p187, 1);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p4);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i189 := $add.i64($i188, 35);
    call {:si_unique_call 1084} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i189);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p190 := $i2p.i64.ref($i189);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.1, $p190);
    call {:si_unique_call 1085} {:cexpr "__cil_tmp134"} boogie_si_record_i8($i191);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i64($i191);
    call {:si_unique_call 1086} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i192);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i193 := $and.i64($i192, 1);
    call {:si_unique_call 1087} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i193);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i194 := __builtinx_expect.i64.i64($i193, 0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i194);
    call {:si_unique_call 1089} {:cexpr "tmp___1"} boogie_si_record_i64($i195);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i196 := $ne.i64($i195, 0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i196 == 1;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p0);
    call {:si_unique_call 1096} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i197);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i198 := $add.i64($i197, 1216);
    call {:si_unique_call 1097} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i198);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p199 := $i2p.i64.ref($i198);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.1, $p199);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    call {:si_unique_call 1098} {:cexpr "__cil_tmp140"} boogie_si_record_i64($i201);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i202 := $add.i64($i201, 144);
    call {:si_unique_call 1099} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i202);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p203 := $i2p.i64.ref($i202);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} vslice_dummy_var_61 := __dynamic_dev_dbg.ref.ref.ref($p4, $p203, .str.94);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb40:
    assume $i161 == 1;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i117, 1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb42:
    assume $i162 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p0);
    call {:si_unique_call 1090} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i163);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i164 := $add.i64($i163, 6244);
    call {:si_unique_call 1091} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i164);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p165 := $i2p.i64.ref($i164);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.1, $p165);
    call {:si_unique_call 1092} {:cexpr "__cil_tmp122"} boogie_si_record_i32($i166);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i167 == 1;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p0);
    call {:si_unique_call 1093} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i168);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i169 := $add.i64($i168, 6248);
    call {:si_unique_call 1094} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i169);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p170 := $i2p.i64.ref($i169);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_60 := schedule_work($p170);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb27:
    assume $i122 == 1;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i117, 1);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i123 == 1);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29:
    assume $i123 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1055} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i124);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p0);
    call {:si_unique_call 1056} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i125);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, 1208);
    call {:si_unique_call 1057} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i126);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p127 := $i2p.i64.ref($i126);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.1, $p127);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    call {:si_unique_call 1058} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i129);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, $i124);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} pch_udc_reconnect($p0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i130 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1059} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i131);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p0);
    call {:si_unique_call 1060} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i132);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i133 := $add.i64($i132, 1208);
    call {:si_unique_call 1061} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i133);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p134 := $i2p.i64.ref($i133);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.1, $p134);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p135);
    call {:si_unique_call 1062} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i136);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 32);
    call {:si_unique_call 1063} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i137);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p138 := $i2p.i64.ref($i137);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.1, $p138);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    call {:si_unique_call 1064} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i140);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, $i131);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i141 == 1;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p0);
    call {:si_unique_call 1065} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i142);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i143 := $add.i64($i142, 6088);
    call {:si_unique_call 1066} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i143);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p144 := $i2p.i64.ref($i143);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} spin_unlock($p144);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p0);
    call {:si_unique_call 1068} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i145);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 1208);
    call {:si_unique_call 1069} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i146);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p147 := $i2p.i64.ref($i146);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.1, $p147);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    call {:si_unique_call 1070} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i149);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i150 := $add.i64($i149, 32);
    call {:si_unique_call 1071} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i150);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p151 := $i2p.i64.ref($i150);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.1, $p151);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p0);
    call {:si_unique_call 1072} devirtbounce($p152, $p153);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p0);
    call {:si_unique_call 1073} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i154);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i155 := $add.i64($i154, 6088);
    call {:si_unique_call 1074} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i155);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p156 := $i2p.i64.ref($i155);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} spin_lock($p156);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb21:
    assume $i90 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1034} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i91);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p0);
    call {:si_unique_call 1035} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i92);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 1208);
    call {:si_unique_call 1036} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i93);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    call {:si_unique_call 1037} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i96);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 40);
    call {:si_unique_call 1038} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i97);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p98 := $i2p.i64.ref($i97);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    call {:si_unique_call 1039} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i100);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, $i91);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i101 == 1;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p0);
    call {:si_unique_call 1040} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i102);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 6088);
    call {:si_unique_call 1041} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i103);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} spin_unlock($p104);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p0);
    call {:si_unique_call 1043} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i105);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 1208);
    call {:si_unique_call 1044} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i106);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    call {:si_unique_call 1045} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i109);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 40);
    call {:si_unique_call 1046} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i110);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p111 := $i2p.i64.ref($i110);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.1, $p111);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p0);
    call {:si_unique_call 1047} devirtbounce($p112, $p113);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p0);
    call {:si_unique_call 1048} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i114);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 6088);
    call {:si_unique_call 1049} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i115);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} spin_lock($p116);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i81 == 1;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} pch_udc_svc_cfg_interrupt($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i79 == 1;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} pch_udc_svc_intf_interrupt($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} pch_udc_svc_enum_interrupt($p0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p3);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p3);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 8);
    call {:si_unique_call 1009} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i47);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p48, .str.91);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p3);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 16);
    call {:si_unique_call 1010} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i50);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p51, .str.69);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p3);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 24);
    call {:si_unique_call 1011} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i53);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p54, .str.93);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p3);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 32);
    call {:si_unique_call 1012} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i56);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, 2746);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p3);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 35);
    call {:si_unique_call 1013} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i59);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p60, 1);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p3);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 35);
    call {:si_unique_call 1014} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i62);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p63);
    call {:si_unique_call 1015} {:cexpr "__cil_tmp42"} boogie_si_record_i8($i64);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    call {:si_unique_call 1016} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i65);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    call {:si_unique_call 1017} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i66);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i67 := __builtinx_expect.i64.i64($i66, 0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    call {:si_unique_call 1019} {:cexpr "tmp___0"} boogie_si_record_i64($i68);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i69 == 1;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p0);
    call {:si_unique_call 1020} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i70);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 1216);
    call {:si_unique_call 1021} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i71);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    call {:si_unique_call 1022} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i74);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 144);
    call {:si_unique_call 1023} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i75);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} vslice_dummy_var_59 := __dynamic_dev_dbg.ref.ref.ref($p3, $p76, .str.93);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} pch_udc_svc_ur_interrupt($p0);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p2);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 8);
    call {:si_unique_call 991} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i12);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str.91);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p2);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 16);
    call {:si_unique_call 992} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i15);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.69);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 24);
    call {:si_unique_call 993} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i18);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str.92);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p2);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 32);
    call {:si_unique_call 994} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i21);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, 2741);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p2);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 35);
    call {:si_unique_call 995} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 1);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p2);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 35);
    call {:si_unique_call 996} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    call {:si_unique_call 997} {:cexpr "__cil_tmp24"} boogie_si_record_i8($i29);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    call {:si_unique_call 998} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    call {:si_unique_call 999} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i32 := __builtinx_expect.i64.i64($i31, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    call {:si_unique_call 1001} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i34 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p0);
    call {:si_unique_call 1002} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i35);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 1216);
    call {:si_unique_call 1003} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    call {:si_unique_call 1004} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i39);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 144);
    call {:si_unique_call 1005} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i40);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_58 := __dynamic_dev_dbg.ref.ref.ref($p2, $p41, .str.92);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_udc_read_all_epstatus: ref;

axiom pch_udc_read_all_epstatus == $sub.ref(0, 170052);

procedure pch_udc_read_all_epstatus($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_read_all_epstatus($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i64;
  var $i123: i64;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} {:cexpr "pch_udc_read_all_epstatus:arg:ep_intr"} boogie_si_record_i32($i1);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $and.i32(1, $i1);
    call {:si_unique_call 1153} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i2);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $and.i32(65536, $i1);
    call {:si_unique_call 1165} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i18);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i35 := $and.i32(2, $i1);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i52 := $and.i32(131072, $i1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i69 := $and.i32(4, $i1);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i86 := $and.i32(262144, $i1);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i103 := $and.i32(8, $i1);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i120 := $and.i32(524288, $i1);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i121 == 1;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i123 := $add.i64($i122, 1224);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p124 := $i2p.i64.ref($i123);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(7, 152));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i127 := pch_udc_read_ep_status($p126);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p126);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, 144);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i130 := $zext.i32.i64($i127);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p131 := $i2p.i64.ref($i129);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p131, $i130);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p126);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i133 := $add.i64($i132, 144);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p134 := $i2p.i64.ref($i133);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.1, $p134);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i64.i32($i135);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} pch_udc_clear_ep_status($p126, $i136);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i104 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 1224);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(6, 152));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i110 := pch_udc_read_ep_status($p109);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p109);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i111, 144);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i113 := $zext.i32.i64($i110);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i112);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p114, $i113);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p109);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 144);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.1, $p117);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i32($i118);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} pch_udc_clear_ep_status($p109, $i119);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i87 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 1224);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p91, $mul.ref(5, 152));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i93 := pch_udc_read_ep_status($p92);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p92);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 144);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i93);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i95);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p97, $i96);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p92);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 144);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.1, $p100);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i64.i32($i101);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} pch_udc_clear_ep_status($p92, $i102);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i70 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 1224);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i72);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(4, 152));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i76 := pch_udc_read_ep_status($p75);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p75);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 144);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i76);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i78);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p80, $i79);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p75);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 144);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.1, $p83);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} pch_udc_clear_ep_status($p75, $i85);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 1224);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(3, 152));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i59 := pch_udc_read_ep_status($p58);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p58);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 144);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i59);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i61);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p63, $i62);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p58);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 144);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.1, $p66);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i67);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} pch_udc_clear_ep_status($p58, $i68);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 1224);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(2, 152));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i42 := pch_udc_read_ep_status($p41);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p41);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 144);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i42);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i44);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p46, $i45);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p41);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 144);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.1, $p49);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} pch_udc_clear_ep_status($p41, $i51);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 1166} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i20);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 1224);
    call {:si_unique_call 1167} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i21);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(1, 152));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i25 := pch_udc_read_ep_status($p24);
    call {:si_unique_call 1169} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p24);
    call {:si_unique_call 1170} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i26);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 144);
    call {:si_unique_call 1171} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i27);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i25);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i27);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p29, $i28);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p24);
    call {:si_unique_call 1172} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i30);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 144);
    call {:si_unique_call 1173} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i31);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    call {:si_unique_call 1174} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i33);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    call {:si_unique_call 1175} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i34);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} pch_udc_clear_ep_status($p24, $i34);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1154} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i4);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 1224);
    call {:si_unique_call 1155} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i8 := pch_udc_read_ep_status($p7);
    call {:si_unique_call 1157} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p7);
    call {:si_unique_call 1158} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i9);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 144);
    call {:si_unique_call 1159} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i10);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i10);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p12, $i11);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p7);
    call {:si_unique_call 1160} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i13);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 144);
    call {:si_unique_call 1161} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i14);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    call {:si_unique_call 1162} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i16);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    call {:si_unique_call 1163} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i17);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} pch_udc_clear_ep_status($p7, $i17);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_udc_svc_control_in: ref;

axiom pch_udc_svc_control_in == $sub.ref(0, 171084);

procedure pch_udc_svc_control_in($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_svc_control_in($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1189} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1224);
    call {:si_unique_call 1190} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1191} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1224);
    call {:si_unique_call 1192} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(1, 152));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p4);
    call {:si_unique_call 1193} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 144);
    call {:si_unique_call 1194} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    call {:si_unique_call 1195} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 1196} {:cexpr "epsts"} boogie_si_record_i32($i14);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p4);
    call {:si_unique_call 1197} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i15);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 144);
    call {:si_unique_call 1198} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i16);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p17, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i14, 184551104);
    call {:si_unique_call 1199} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i18);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i14, 128);
    call {:si_unique_call 1200} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i20);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i14, 512);
    call {:si_unique_call 1201} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i22);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i14, 1024);
    call {:si_unique_call 1202} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i24);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i14, 64);
    call {:si_unique_call 1215} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i43);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i14, 1024);
    call {:si_unique_call 1216} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i45);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i14, 16777216);
    call {:si_unique_call 1217} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i47);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} pch_udc_start_next_txrequest($p4);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(6160, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    call {:si_unique_call 1203} {:cexpr "__cil_tmp23"} boogie_si_record_i8($i28);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    call {:si_unique_call 1204} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i29);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} pch_udc_complete_transfer($p4);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p9);
    call {:si_unique_call 1207} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i31);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 88);
    call {:si_unique_call 1208} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i32);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p9);
    call {:si_unique_call 1209} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i35);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 88);
    call {:si_unique_call 1210} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i36);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    call {:si_unique_call 1211} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i40);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 1073741823);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p34);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p42, $i41);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} pch_udc_ep_clear_nak($p9);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} pch_udc_set_dma($p0, 1);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} pch_udc_ep_set_rrdy($p9);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_postsvc_epinters: ref;

axiom pch_udc_postsvc_epinters == $sub.ref(0, 172116);

procedure pch_udc_postsvc_epinters($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_postsvc_epinters($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} {:cexpr "pch_udc_postsvc_epinters:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 2);
    call {:si_unique_call 1220} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i2);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    call {:si_unique_call 1221} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i3);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1222} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i4);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 1224);
    call {:si_unique_call 1223} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($i3, 152));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    call {:si_unique_call 1224} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 120);
    call {:si_unique_call 1225} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i10);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i12 := list_empty($p11);
    call {:si_unique_call 1227} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p8);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(136, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    call {:si_unique_call 1228} {:cexpr "__cil_tmp24"} boogie_si_record_i8($i16);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    call {:si_unique_call 1229} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i17);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 16;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p8);
    call {:si_unique_call 1230} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i20);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 96);
    call {:si_unique_call 1231} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i21);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p8);
    call {:si_unique_call 1232} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i24);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 136);
    call {:si_unique_call 1233} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i25);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    call {:si_unique_call 1234} {:cexpr "__cil_tmp31"} boogie_si_record_i8($i27);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    call {:si_unique_call 1235} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i28);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, $i19);
    call {:si_unique_call 1236} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i29);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32(1, $i29);
    call {:si_unique_call 1237} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i30);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} pch_udc_enable_ep_interrupts($p23, $i30);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} pch_udc_ep_clear_nak($p8);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb5;
}



const pch_udc_svc_control_out: ref;

axiom pch_udc_svc_control_out == $sub.ref(0, 173148);

procedure pch_udc_svc_control_out($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.4, $M.3, $CurrAddr, assertsPassed;



implementation pch_udc_svc_control_out($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i16;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i16;
  var $i97: i16;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i32;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i32;
  var $i137: i1;
  var $i138: i1;
  var $i139: i64;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $i144: i64;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i1;
  var $i149: i1;
  var $i150: i64;
  var $i151: i64;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $p166: ref;
  var $i167: i8;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $p171: ref;
  var $i172: i16;
  var $i173: i16;
  var $p174: ref;
  var $i175: i16;
  var $i176: i16;
  var $i177: i16;
  var $i178: i32;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i1;
  var $i186: i64;
  var $i187: i64;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $i191: i64;
  var $i192: i64;
  var $i193: i64;
  var $p194: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1240} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1224);
    call {:si_unique_call 1241} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(1, 152));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 1242} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i6);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 144);
    call {:si_unique_call 1243} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i7);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    call {:si_unique_call 1244} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i9);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 1245} {:cexpr "stat"} boogie_si_record_i32($i10);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p5);
    call {:si_unique_call 1246} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i11);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 144);
    call {:si_unique_call 1247} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p13, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i10, 48);
    call {:si_unique_call 1248} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i14);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 4);
    call {:si_unique_call 1249} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i15);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 2);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i10, 48);
    call {:si_unique_call 1279} {:cexpr "__cil_tmp130"} boogie_si_record_i32($i178);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i179 := $lshr.i32($i178, 4);
    call {:si_unique_call 1280} {:cexpr "__cil_tmp131"} boogie_si_record_i32($i179);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} pch_udc_ep_set_rrdy($p5);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i180 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($p181, $mul.ref(6160, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.1, $p182);
    call {:si_unique_call 1349} {:cexpr "__cil_tmp134"} boogie_si_record_i8($i183);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i183);
    call {:si_unique_call 1350} {:cexpr "__cil_tmp135"} boogie_si_record_i32($i184);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume $i185 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} pch_udc_ep_set_ddptr($p5, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p5);
    call {:si_unique_call 1353} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i186);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i187 := $add.i64($i186, 120);
    call {:si_unique_call 1354} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i187);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p188 := $i2p.i64.ref($i187);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i189 := list_empty($p188);
    call {:si_unique_call 1356} {:cexpr "tmp___0"} boogie_si_record_i32($i189);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} pch_udc_set_dma($p0, 1);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i190 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p5);
    call {:si_unique_call 1357} {:cexpr "__cil_tmp140"} boogie_si_record_i64($i191);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i192 := $add.i64($i191, 144);
    call {:si_unique_call 1358} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i192);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i193 := $zext.i32.i64($i10);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p194 := $i2p.i64.ref($i192);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p194, $i193);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} pch_udc_svc_data_out($p0, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i19 := $and.i16($i18, $sub.i16(0, 3));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p17, $i19);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i20 := $add.i64(1224, 0);
    call {:si_unique_call 1250} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 1251} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, $i20);
    call {:si_unique_call 1252} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, $sub.i8(0, 65));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, $i26);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i27 := $add.i64(1224, 152);
    call {:si_unique_call 1253} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 1254} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, $i27);
    call {:si_unique_call 1255} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i29);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i33 := $and.i8($i32, $sub.i8(0, 65));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p31, $i33);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 1256} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i34);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 6200);
    call {:si_unique_call 1257} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i35);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p5);
    call {:si_unique_call 1258} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 80);
    call {:si_unique_call 1259} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i37);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    call {:si_unique_call 1260} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i40);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 8);
    call {:si_unique_call 1261} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i41);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i35);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i41);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p42);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p43);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 1262} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p44, $p45, 8, $zext.i32.i64(2), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p5);
    call {:si_unique_call 1263} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i46);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 80);
    call {:si_unique_call 1264} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i47);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} pch_udc_init_setup_buff($p49);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    call {:si_unique_call 1267} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i50);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 1224);
    call {:si_unique_call 1268} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i51);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i54 := $add.i64(1224, 0);
    call {:si_unique_call 1269} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i54);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p0);
    call {:si_unique_call 1270} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i55);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, $i54);
    call {:si_unique_call 1271} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i56);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i60 := $lshr.i8($i59, 5);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i61 := $and.i8($i60, 1);
    call {:si_unique_call 1272} {:cexpr "__cil_tmp44"} boogie_si_record_i8($i61);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    call {:si_unique_call 1273} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i62);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} pch_udc_ep_fifo_flush($p53, $i62);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p0);
    call {:si_unique_call 1275} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i63);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 6200);
    call {:si_unique_call 1276} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i64);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    call {:si_unique_call 1277} {:cexpr "__cil_tmp48"} boogie_si_record_i8($i66);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    call {:si_unique_call 1278} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i67);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i68 == 1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p0);
    call {:si_unique_call 1286} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i76);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 8);
    call {:si_unique_call 1287} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i77);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i77);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p79, $p5);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p0);
    call {:si_unique_call 1288} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i80);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 6088);
    call {:si_unique_call 1289} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i81);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} spin_unlock($p82);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p0);
    call {:si_unique_call 1291} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i83);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 6200);
    call {:si_unique_call 1292} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i84);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.1, $p85);
    call {:si_unique_call 1293} {:cexpr "__cil_tmp66"} boogie_si_record_i8($i86);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    call {:si_unique_call 1294} {:cexpr "__cil_tmp67"} boogie_si_record_i32($i87);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 33);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p0);
    call {:si_unique_call 1299} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i98);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 1208);
    call {:si_unique_call 1300} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i99);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    call {:si_unique_call 1301} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i102);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 24);
    call {:si_unique_call 1302} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i103);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p0);
    call {:si_unique_call 1303} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i107);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 6200);
    call {:si_unique_call 1304} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i108);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    call {:si_unique_call 1305} $i110 := devirtbounce.1($p105, $p106, $p109);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 1306} {:cexpr "setup_supported"} boogie_si_record_i32($i110);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p0);
    call {:si_unique_call 1307} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i111);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i111, 6088);
    call {:si_unique_call 1308} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i112);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i112);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} spin_lock($p113);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p0);
    call {:si_unique_call 1310} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i114);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 6200);
    call {:si_unique_call 1311} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i115);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.1, $p116);
    call {:si_unique_call 1312} {:cexpr "__cil_tmp89"} boogie_si_record_i8($i117);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i118 := $sext.i8.i32($i117);
    call {:si_unique_call 1313} {:cexpr "__cil_tmp91"} boogie_si_record_i32($i118);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i118, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i137 := $sge.i32($i110, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i137 == 1);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i110, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i149 == 1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i175 := $load.i16($M.1, $p174);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i176 := $and.i16($i175, $sub.i16(0, 1025));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i177 := $or.i16($i176, 1024);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p174, $i177);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i149 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p0);
    call {:si_unique_call 1333} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i150);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i151 := $add.i64($i150, 1224);
    call {:si_unique_call 1334} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i151);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p152 := $i2p.i64.ref($i151);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} pch_udc_ep_set_stall($p153);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p5);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p154, $mul.ref(136, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.1, $p155);
    call {:si_unique_call 1336} {:cexpr "__cil_tmp118"} boogie_si_record_i8($i156);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    call {:si_unique_call 1337} {:cexpr "__cil_tmp119"} boogie_si_record_i32($i157);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    $i159 := 16;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p5);
    call {:si_unique_call 1338} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i160);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i160, 96);
    call {:si_unique_call 1339} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i161);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p162 := $i2p.i64.ref($i161);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.1, $p162);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p5);
    call {:si_unique_call 1340} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i164);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i165 := $add.i64($i164, 136);
    call {:si_unique_call 1341} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i165);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p166 := $i2p.i64.ref($i165);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.1, $p166);
    call {:si_unique_call 1342} {:cexpr "__cil_tmp125"} boogie_si_record_i8($i167);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    call {:si_unique_call 1343} {:cexpr "__cil_tmp126"} boogie_si_record_i32($i168);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i168, $i159);
    call {:si_unique_call 1344} {:cexpr "__cil_tmp127"} boogie_si_record_i32($i169);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i170 := $shl.i32(1, $i169);
    call {:si_unique_call 1345} {:cexpr "__cil_tmp128"} boogie_si_record_i32($i170);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} pch_udc_enable_ep_interrupts($p163, $i170);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.1, $p171);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i173 := $and.i16($i172, $sub.i16(0, 3));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p171, $i173);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} pch_udc_set_dma($p0, 1);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i158 == 1;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i159 := 0;
    goto $bb29;

  $bb15:
    assume $i137 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i138 := $sle.i32($i110, 63);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i138 == 1);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i138 == 1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p0);
    call {:si_unique_call 1324} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i139);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i140 := $add.i64($i139, 1224);
    call {:si_unique_call 1325} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i140);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p141 := $i2p.i64.ref($i140);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} pch_udc_ep_clear_nak($p142);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p0);
    call {:si_unique_call 1327} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i143);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i144 := $add.i64($i143, 6200);
    call {:si_unique_call 1328} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i144);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p145 := $i2p.i64.ref($i144);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.1, $p145);
    call {:si_unique_call 1329} {:cexpr "__cil_tmp109"} boogie_si_record_i8($i146);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i147 := $sext.i8.i32($i146);
    call {:si_unique_call 1330} {:cexpr "__cil_tmp111"} boogie_si_record_i32($i147);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i148 := $sge.i32($i147, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i148 == 1;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} pch_udc_set_dma($p0, 1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} pch_udc_ep_clear_nak($p5);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i119 == 1;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p5);
    call {:si_unique_call 1314} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i120);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 88);
    call {:si_unique_call 1315} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i121);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.1, $p122);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p5);
    call {:si_unique_call 1316} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i124);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i124, 88);
    call {:si_unique_call 1317} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i125);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p126 := $i2p.i64.ref($i125);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.1, $p126);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.1, $p128);
    call {:si_unique_call 1318} {:cexpr "__cil_tmp98"} boogie_si_record_i32($i129);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i129, 1073741823);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p123);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p131, $i130);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p5);
    call {:si_unique_call 1319} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i132);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i133 := $add.i64($i132, 72);
    call {:si_unique_call 1320} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i133);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p134 := $i2p.i64.ref($i133);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.1, $p134);
    call {:si_unique_call 1321} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i135);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i64.i32($i135);
    call {:si_unique_call 1322} {:cexpr "__cil_tmp102"} boogie_si_record_i32($i136);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} pch_udc_ep_set_ddptr($p5, $i136);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i88 == 1;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p0);
    call {:si_unique_call 1295} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i89);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 6201);
    call {:si_unique_call 1296} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i90);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p91 := $i2p.i64.ref($i90);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.1, $p91);
    call {:si_unique_call 1297} {:cexpr "__cil_tmp71"} boogie_si_record_i8($i92);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    call {:si_unique_call 1298} {:cexpr "__cil_tmp72"} boogie_si_record_i32($i93);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 255);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i94 == 1;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.1, $p95);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i97 := $and.i16($i96, $sub.i16(0, 5));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p95, $i97);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i68 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p0);
    call {:si_unique_call 1281} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i69);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 8);
    call {:si_unique_call 1282} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i70);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i71 := $add.i64(1224, 0);
    call {:si_unique_call 1283} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i71);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p0);
    call {:si_unique_call 1284} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i72);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, $i71);
    call {:si_unique_call 1285} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i73);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i70);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p75, $p74);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_udc_svc_data_in: ref;

axiom pch_udc_svc_data_in == $sub.ref(0, 174180);

procedure pch_udc_svc_data_in($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_svc_data_in($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} {:cexpr "pch_udc_svc_data_in:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 2);
    call {:si_unique_call 1362} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i2);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    call {:si_unique_call 1363} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1364} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 1224);
    call {:si_unique_call 1365} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i5);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($i3, 152));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    call {:si_unique_call 1366} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i9);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 144);
    call {:si_unique_call 1367} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i10);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    call {:si_unique_call 1368} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 1369} {:cexpr "epsts"} boogie_si_record_i32($i13);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p8);
    call {:si_unique_call 1370} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 144);
    call {:si_unique_call 1371} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p16, 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i13, 251659968);
    call {:si_unique_call 1372} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i17);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i13, 128);
    call {:si_unique_call 1373} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i19);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i13, 512);
    call {:si_unique_call 1374} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i21);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i13, 67108864);
    call {:si_unique_call 1375} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i23);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i13, 33554432);
    call {:si_unique_call 1388} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i42);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i13, 1024);
    call {:si_unique_call 1404} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i66);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i13, 64);
    call {:si_unique_call 1406} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i68);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i69 == 1;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i13, 67108864);
    call {:si_unique_call 1407} {:cexpr "__cil_tmp57"} boogie_si_record_i32($i70);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb31:
    assume $i71 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i13, 1024);
    call {:si_unique_call 1408} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i72);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i73 == 1;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i13, 16777216);
    call {:si_unique_call 1409} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i74);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i75 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} pch_udc_start_next_txrequest($p8);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i67 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} pch_udc_complete_transfer($p8);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(6160, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    call {:si_unique_call 1389} {:cexpr "__cil_tmp39"} boogie_si_record_i8($i46);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    call {:si_unique_call 1390} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i47);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} pch_udc_ep_set_stall($p8);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p8);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(136, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    call {:si_unique_call 1393} {:cexpr "__cil_tmp43"} boogie_si_record_i8($i51);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    call {:si_unique_call 1394} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i52);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := 16;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p8);
    call {:si_unique_call 1395} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i55);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 96);
    call {:si_unique_call 1396} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i56);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p8);
    call {:si_unique_call 1397} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i59);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 136);
    call {:si_unique_call 1398} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i60);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    call {:si_unique_call 1399} {:cexpr "__cil_tmp50"} boogie_si_record_i8($i62);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    call {:si_unique_call 1400} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i63);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $i54);
    call {:si_unique_call 1401} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i64);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32(1, $i64);
    call {:si_unique_call 1402} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i65);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} pch_udc_enable_ep_interrupts($p58, $i65);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb24;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} pch_udc_ep_clear_stall($p8);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} pch_udc_ep_set_stall($p8);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p8);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(136, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    call {:si_unique_call 1377} {:cexpr "__cil_tmp24"} boogie_si_record_i8($i27);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    call {:si_unique_call 1378} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i28);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 16;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p8);
    call {:si_unique_call 1379} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 96);
    call {:si_unique_call 1380} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p8);
    call {:si_unique_call 1381} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i35);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 136);
    call {:si_unique_call 1382} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i36);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    call {:si_unique_call 1383} {:cexpr "__cil_tmp31"} boogie_si_record_i8($i38);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    call {:si_unique_call 1384} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i39);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, $i30);
    call {:si_unique_call 1385} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i40);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32(1, $i40);
    call {:si_unique_call 1386} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i41);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} pch_udc_enable_ep_interrupts($p34, $i41);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb15;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_svc_data_out: ref;

axiom pch_udc_svc_data_out == $sub.ref(0, 175212);

procedure pch_udc_svc_data_out($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_svc_data_out($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} {:cexpr "pch_udc_svc_data_out:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 2);
    call {:si_unique_call 1412} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i2);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    call {:si_unique_call 1413} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i3);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 1);
    call {:si_unique_call 1414} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i4);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1415} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i5);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1224);
    call {:si_unique_call 1416} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i6);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($i4, 152));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 1417} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i10);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 144);
    call {:si_unique_call 1418} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i11);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    call {:si_unique_call 1419} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i13);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 1420} {:cexpr "epsts"} boogie_si_record_i32($i14);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p9);
    call {:si_unique_call 1421} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i15);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 144);
    call {:si_unique_call 1422} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i16);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p17, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i14, 128);
    call {:si_unique_call 1423} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i18);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i14, 512);
    call {:si_unique_call 1437} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i44);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i14, 67108864);
    call {:si_unique_call 1438} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i46);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i14, 33554432);
    call {:si_unique_call 1451} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i65);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i14, 48);
    call {:si_unique_call 1467} {:cexpr "__cil_tmp77"} boogie_si_record_i32($i89);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i90 := $lshr.i32($i89, 4);
    call {:si_unique_call 1468} {:cexpr "__cil_tmp78"} boogie_si_record_i32($i90);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p9);
    call {:si_unique_call 1486} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i118);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 120);
    call {:si_unique_call 1487} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i119);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i121 := list_empty($p120);
    call {:si_unique_call 1489} {:cexpr "tmp___3"} boogie_si_record_i32($i121);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i122 == 1;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} pch_udc_set_dma($p0, 1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb32:
    assume $i91 == 1;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p9);
    call {:si_unique_call 1469} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i92);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 96);
    call {:si_unique_call 1470} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i93);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref(6160, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.1, $p97);
    call {:si_unique_call 1471} {:cexpr "__cil_tmp84"} boogie_si_record_i8($i98);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    call {:si_unique_call 1472} {:cexpr "__cil_tmp85"} boogie_si_record_i32($i99);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i100 == 1);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} pch_udc_complete_receiver($p9);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume $i100 == 1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} pch_udc_ep_set_stall($p9);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p9);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p101, $mul.ref(136, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.1, $p102);
    call {:si_unique_call 1474} {:cexpr "__cil_tmp88"} boogie_si_record_i8($i103);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    call {:si_unique_call 1475} {:cexpr "__cil_tmp89"} boogie_si_record_i32($i104);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := 16;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p9);
    call {:si_unique_call 1477} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i107);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 96);
    call {:si_unique_call 1478} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i108);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.1, $p109);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p9);
    call {:si_unique_call 1479} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i111);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i111, 136);
    call {:si_unique_call 1480} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i112);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i112);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.1, $p113);
    call {:si_unique_call 1481} {:cexpr "__cil_tmp95"} boogie_si_record_i8($i114);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    call {:si_unique_call 1482} {:cexpr "__cil_tmp96"} boogie_si_record_i32($i115);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, $i106);
    call {:si_unique_call 1483} {:cexpr "__cil_tmp97"} boogie_si_record_i32($i116);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i117 := $shl.i32(1, $i116);
    call {:si_unique_call 1484} {:cexpr "__cil_tmp98"} boogie_si_record_i32($i117);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} pch_udc_enable_ep_interrupts($p110, $i117);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i105 == 1;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb38;

  $bb23:
    assume $i66 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(6160, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    call {:si_unique_call 1452} {:cexpr "__cil_tmp61"} boogie_si_record_i8($i69);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    call {:si_unique_call 1453} {:cexpr "__cil_tmp62"} boogie_si_record_i32($i70);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i71 == 1);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} pch_udc_ep_set_stall($p9);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p9);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(136, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.1, $p73);
    call {:si_unique_call 1456} {:cexpr "__cil_tmp65"} boogie_si_record_i8($i74);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    call {:si_unique_call 1457} {:cexpr "__cil_tmp66"} boogie_si_record_i32($i75);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := 16;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p9);
    call {:si_unique_call 1458} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i78);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 96);
    call {:si_unique_call 1459} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i79);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p9);
    call {:si_unique_call 1460} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i82);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 136);
    call {:si_unique_call 1461} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i83);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.1, $p84);
    call {:si_unique_call 1462} {:cexpr "__cil_tmp72"} boogie_si_record_i8($i85);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    call {:si_unique_call 1463} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i86);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, $i77);
    call {:si_unique_call 1464} {:cexpr "__cil_tmp74"} boogie_si_record_i32($i87);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i88 := $shl.i32(1, $i87);
    call {:si_unique_call 1465} {:cexpr "__cil_tmp75"} boogie_si_record_i32($i88);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} pch_udc_enable_ep_interrupts($p81, $i88);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i76 == 1;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb30;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} pch_udc_ep_clear_stall($p9);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} pch_udc_ep_set_stall($p9);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p9);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(136, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.1, $p49);
    call {:si_unique_call 1440} {:cexpr "__cil_tmp46"} boogie_si_record_i8($i50);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    call {:si_unique_call 1441} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i51);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := 16;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p9);
    call {:si_unique_call 1442} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i54);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 96);
    call {:si_unique_call 1443} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i55);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p9);
    call {:si_unique_call 1444} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i58);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 136);
    call {:si_unique_call 1445} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i59);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.1, $p60);
    call {:si_unique_call 1446} {:cexpr "__cil_tmp53"} boogie_si_record_i8($i61);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    call {:si_unique_call 1447} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i62);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $i53);
    call {:si_unique_call 1448} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i63);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i64 := $shl.i32(1, $i63);
    call {:si_unique_call 1449} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i64);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} pch_udc_enable_ep_interrupts($p57, $i64);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb21;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p9);
    call {:si_unique_call 1424} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i20);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 120);
    call {:si_unique_call 1425} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i21);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i23 := list_empty($p22);
    call {:si_unique_call 1427} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p9);
    call {:si_unique_call 1428} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i25);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 120);
    call {:si_unique_call 1429} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i26);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    call {:si_unique_call 1430} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i31);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 104);
    call {:si_unique_call 1431} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i32);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    call {:si_unique_call 1432} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i36);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $sub.i32(0, 1073741824));
    call {:si_unique_call 1433} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i37);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, $sub.i32(0, 2147483648));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p30);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(128, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    call {:si_unique_call 1434} {:cexpr "__cil_tmp40"} boogie_si_record_i8($i41);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    call {:si_unique_call 1435} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i42);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} pch_udc_start_rxrequest($p9, $p30);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 176244);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_spin_unlock();
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_spin_unlock_5($p0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 177276);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    call {:si_unique_call 1493} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 178308);

procedure ldv_spin_unlock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_5($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} _raw_spin_unlock($p1);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 179340);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 180372);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1495} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 1496} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $i1);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_start_rxrequest: ref;

axiom pch_udc_start_rxrequest == $sub.ref(0, 181404);

procedure pch_udc_start_rxrequest($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_start_rxrequest($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1497} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 96);
    call {:si_unique_call 1498} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} pch_udc_clear_dma($p5, 1);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    call {:si_unique_call 1500} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 96);
    call {:si_unique_call 1501} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    call {:si_unique_call 1502} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i11);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1073741823);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p9);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i12);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    call {:si_unique_call 1503} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i15);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 134217728);
    call {:si_unique_call 1504} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i16);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p18 := $p9;
    goto $bb4;

  $bb4:
    call $p18, $i19, $i20, $p21, $i22, $i23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33 := pch_udc_start_rxrequest_loop_$bb4($p18, $i19, $i20, $p21, $i22, $i23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    call {:si_unique_call 1525} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i19);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 12);
    call {:si_unique_call 1526} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i20);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    call {:si_unique_call 1527} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i22);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    call {:si_unique_call 1528} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i23);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $p24 := phys_to_virt($i23);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    call {:si_unique_call 1530} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i27);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 1073741823);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p25);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, $i28);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p25);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    call {:si_unique_call 1531} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i31);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 134217728);
    call {:si_unique_call 1532} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i32);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $p18 := $p24;
    goto $bb8_dummy;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p1);
    call {:si_unique_call 1505} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i34);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 88);
    call {:si_unique_call 1506} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i35);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.1, $p36);
    call {:si_unique_call 1507} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i37);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    call {:si_unique_call 1508} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i38);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} pch_udc_ep_set_ddptr($p0, $i38);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p1);
    call {:si_unique_call 1510} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i39);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 128);
    call {:si_unique_call 1511} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i40);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, 1);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p0);
    call {:si_unique_call 1512} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i42);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 96);
    call {:si_unique_call 1513} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i43);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 1514} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i46);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 136);
    call {:si_unique_call 1515} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i47);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    call {:si_unique_call 1516} {:cexpr "__cil_tmp28"} boogie_si_record_i8($i49);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    call {:si_unique_call 1517} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i50);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32(65536, $i50);
    call {:si_unique_call 1518} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i51);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} pch_udc_enable_ep_interrupts($p45, $i51);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p0);
    call {:si_unique_call 1520} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i52);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 96);
    call {:si_unique_call 1521} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i53);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} pch_udc_set_dma($p55, 1);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} pch_udc_ep_set_rrdy($p0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const pch_udc_ep_set_stall: ref;

axiom pch_udc_ep_set_stall == $sub.ref(0, 182436);

procedure pch_udc_ep_set_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_stall($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(136, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    call {:si_unique_call 1533} {:cexpr "__cil_tmp4"} boogie_si_record_i8($i3);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    call {:si_unique_call 1534} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i4);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} pch_udc_ep_bit_set($p0, 0, 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} pch_udc_ep_bit_set($p0, 0, 2);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} pch_udc_ep_bit_set($p0, 0, 1);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_enable_ep_interrupts: ref;

axiom pch_udc_enable_ep_interrupts == $sub.ref(0, 183468);

procedure pch_udc_enable_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_enable_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} {:cexpr "pch_udc_enable_ep_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 1539} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} pch_udc_bit_clr($p0, 1048, $i2);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_clear_stall: ref;

axiom pch_udc_ep_clear_stall == $sub.ref(0, 184500);

procedure pch_udc_ep_clear_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_stall($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} pch_udc_ep_bit_clr($p0, 0, 1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} pch_udc_ep_bit_set($p0, 0, 256);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_complete_receiver: ref;

axiom pch_udc_complete_receiver == $sub.ref(0, 185532);

procedure pch_udc_complete_receiver($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_complete_receiver($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p32: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $p41: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1543} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 96);
    call {:si_unique_call 1544} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1545} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i5);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 120);
    call {:si_unique_call 1546} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i6);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i8 := list_empty($p7);
    call {:si_unique_call 1548} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1549} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i10);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 120);
    call {:si_unique_call 1550} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i11);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 1551} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i16);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 96);
    call {:si_unique_call 1552} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i17);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} pch_udc_clear_dma($p19, 1);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} pch_udc_ep_set_ddptr($p0, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p15);
    call {:si_unique_call 1555} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i20);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 104);
    call {:si_unique_call 1556} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i21);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    call {:si_unique_call 1557} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i25);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 1073741824));
    call {:si_unique_call 1558} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i26);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $sub.i32(0, 2147483648));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p15);
    call {:si_unique_call 1561} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i33);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 96);
    call {:si_unique_call 1562} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i34);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    assume {:verifier.code 0} true;
    $p32 := $p36;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p32);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    call {:si_unique_call 1563} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i38);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 805306368);
    call {:si_unique_call 1564} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i39);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i40 == 1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p41 := $p32;
    goto $bb11;

  $bb11:
    call $p41, $p62, $i63, $i64, $i65, $p66, $i70, $i71, $i72, $p73, $p74, $i75, $i76, $i85, $i86, $p87, $i88, $i89, $p90, $p91, $p92, $i93, $i94, $i95 := pch_udc_complete_receiver_loop_$bb11($p15, $p41, $p62, $i63, $i64, $i65, $p66, $i70, $i71, $i72, $p73, $p74, $i75, $i76, $i85, $i86, $p87, $i88, $i89, $p90, $p91, $p92, $i93, $i94, $i95);
    goto $bb11_last;

  $bb13:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p41);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.1, $p62);
    call {:si_unique_call 1578} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i63);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, $sub.i32(0, 1073741824));
    call {:si_unique_call 1579} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i64);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, $sub.i32(0, 2147483648));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p66 := $p41;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p41);
    call {:si_unique_call 1582} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i70);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p15);
    call {:si_unique_call 1583} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i71);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 104);
    call {:si_unique_call 1584} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i72);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i72);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.1, $p73);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    call {:si_unique_call 1585} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i75);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, $i70);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p41);
    call {:si_unique_call 1591} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i85);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 12);
    call {:si_unique_call 1592} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i86);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.1, $p87);
    call {:si_unique_call 1593} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i88);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i88);
    call {:si_unique_call 1594} {:cexpr "addr"} boogie_si_record_i64($i89);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p90 := phys_to_virt($i89);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.1, $p92);
    call {:si_unique_call 1596} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i93);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 805306368);
    call {:si_unique_call 1597} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i94);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb21;

  $bb21:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $p41 := $p90;
    goto $bb21_dummy;

  $bb12:
    assume $i95 == 1;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p4);
    call {:si_unique_call 1565} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i42);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 1216);
    call {:si_unique_call 1566} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i43);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    call {:si_unique_call 1567} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i46);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 144);
    call {:si_unique_call 1568} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i47);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p15);
    call {:si_unique_call 1569} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i49);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 96);
    call {:si_unique_call 1570} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i50);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    call {:si_unique_call 1571} {:cexpr "__cil_tmp46"} boogie_si_record_i32($i54);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 805306368);
    call {:si_unique_call 1572} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i55);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p0);
    call {:si_unique_call 1573} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i56);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 144);
    call {:si_unique_call 1574} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i57);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.1, $p58);
    call {:si_unique_call 1575} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i59);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    call {:si_unique_call 1576} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i60);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_65 := dev_err.ref.ref.i32.i32($p48, .str.99, $i55, $i60);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i76 == 1;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p4);
    call {:si_unique_call 1586} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i77);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 1216);
    call {:si_unique_call 1587} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i78);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    call {:si_unique_call 1588} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i81);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 144);
    call {:si_unique_call 1589} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i82);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} vslice_dummy_var_66 := dev_err.ref.ref($p83, .str.100);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    call {:si_unique_call 1580} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i68);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 65535);
    call {:si_unique_call 1581} {:cexpr "count"} boogie_si_record_i32($i69);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i69, 0);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i103 := $i69;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p15);
    call {:si_unique_call 1601} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i104);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i104, 96);
    call {:si_unique_call 1602} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i105);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p106 := $i2p.i64.ref($i105);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p15);
    call {:si_unique_call 1603} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i108);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 96);
    call {:si_unique_call 1604} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i109);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p110 := $i2p.i64.ref($i109);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.1, $p110);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    call {:si_unique_call 1605} {:cexpr "__cil_tmp80"} boogie_si_record_i32($i113);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, 134217728);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p107);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p115, $i114);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p66);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p116);
    call {:si_unique_call 1606} {:cexpr "__cil_tmp81"} boogie_si_record_i32($i117);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i118 := $or.i32($i117, $sub.i32(0, 1073741824));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p66);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p119, $i118);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p15);
    call {:si_unique_call 1607} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i120);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 128);
    call {:si_unique_call 1608} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i121);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p122, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p15);
    call {:si_unique_call 1609} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i123);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 84);
    call {:si_unique_call 1610} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i124);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p125, $i103);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} complete_req($p0, $p15, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p0);
    call {:si_unique_call 1612} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i126);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 120);
    call {:si_unique_call 1613} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i127);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p128 := $i2p.i64.ref($i127);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i129 := list_empty($p128);
    call {:si_unique_call 1615} {:cexpr "tmp___1"} boogie_si_record_i32($i129);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28:
    assume $i130 == 1;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p0);
    call {:si_unique_call 1616} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i131);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i132 := $add.i64($i131, 120);
    call {:si_unique_call 1617} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i132);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p133 := $i2p.i64.ref($i132);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.1, $p133);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p135, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} pch_udc_start_rxrequest($p0, $p136);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i96 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p15);
    call {:si_unique_call 1598} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i97);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i97, 8);
    call {:si_unique_call 1599} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i98);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i98);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.1, $p99);
    call {:si_unique_call 1600} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i100);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 65536);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i69;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i103 := $i102;
    goto $bb27;

  $bb24:
    assume $i101 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i102 := 65536;
    goto $bb26;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb9;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p15);
    call {:si_unique_call 1559} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i28);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 104);
    call {:si_unique_call 1560} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i29);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p32 := $p31;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const pch_udc_set_dma: ref;

axiom pch_udc_set_dma == $sub.ref(0, 186564);

procedure pch_udc_set_dma($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_set_dma($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} {:cexpr "pch_udc_set_dma:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} pch_udc_bit_set($p0, 1028, 8);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} pch_udc_bit_set($p0, 1028, 4);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_bit_set: ref;

axiom pch_udc_bit_set == $sub.ref(0, 187596);

procedure pch_udc_bit_set($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_bit_set($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} {:cexpr "pch_udc_bit_set:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 1623} {:cexpr "pch_udc_bit_set:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $i3 := pch_udc_readl($p0, $i1);
    call {:si_unique_call 1625} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    call {:si_unique_call 1626} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, $i2);
    call {:si_unique_call 1627} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} pch_udc_writel($p0, $i5, $i1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_dma: ref;

axiom pch_udc_clear_dma == $sub.ref(0, 188628);

procedure pch_udc_clear_dma($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_clear_dma($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} {:cexpr "pch_udc_clear_dma:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} pch_udc_bit_clr($p0, 1028, 8);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} pch_udc_bit_clr($p0, 1028, 4);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_set_ddptr: ref;

axiom pch_udc_ep_set_ddptr == $sub.ref(0, 189660);

procedure pch_udc_ep_set_ddptr($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_ddptr($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} {:cexpr "pch_udc_ep_set_ddptr:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 1633} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} pch_udc_ep_writel($p0, $i2, 20);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 190692);

procedure dev_err.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1636} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1637} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1638} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1639} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1640} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1645} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1646} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1647} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const phys_to_virt: ref;

axiom phys_to_virt == $sub.ref(0, 191724);

procedure phys_to_virt($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation phys_to_virt($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} {:cexpr "phys_to_virt:arg:address"} boogie_si_record_i64($i0);
    call {:si_unique_call 1650} {:cexpr "phys_to_virt:arg:__cil_tmp2"} boogie_si_record_i64($i0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, $sub.i64(0, 131941395333120));
    call {:si_unique_call 1651} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const complete_req: ref;

axiom complete_req == $sub.ref(0, 192756);

procedure complete_req($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation complete_req($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i8;
  var $p131: ref;
  var $i132: i8;
  var $i133: i8;
  var $i134: i8;
  var $i135: i64;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i1;
  var $i143: i64;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $p151: ref;
  var $i152: i8;
  var $p153: ref;
  var $i154: i8;
  var $i155: i8;
  var $i156: i8;
  var $i157: i8;
  var $i158: i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} {:cexpr "complete_req:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i8($i4, 6);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    call {:si_unique_call 1653} {:cexpr "__cil_tmp8"} boogie_si_record_i8($i6);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 1654} {:cexpr "halted"} boogie_si_record_i32($i7);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 1655} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 112);
    call {:si_unique_call 1656} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} list_del_init($p10);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    call {:si_unique_call 1658} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 80);
    call {:si_unique_call 1659} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    call {:si_unique_call 1660} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i14);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $sub.i32(0, 115));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1663} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i19);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 96);
    call {:si_unique_call 1664} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i20);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(128, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    call {:si_unique_call 1665} {:cexpr "__cil_tmp26"} boogie_si_record_i8($i25);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    call {:si_unique_call 1666} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i26);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.1, $p131);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i133 := $and.i8($i132, $sub.i8(0, 65));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i134 := $or.i8($i133, 64);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p131, $i134);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p22);
    call {:si_unique_call 1736} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i135);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i136 := $add.i64($i135, 6088);
    call {:si_unique_call 1737} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i136);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p137 := $i2p.i64.ref($i136);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} spin_unlock($p137);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p0);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(136, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.1, $p139);
    call {:si_unique_call 1739} {:cexpr "__cil_tmp128"} boogie_si_record_i8($i140);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    call {:si_unique_call 1740} {:cexpr "__cil_tmp129"} boogie_si_record_i32($i141);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p1);
    call {:si_unique_call 1742} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i143);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i144 := $add.i64($i143, 48);
    call {:si_unique_call 1743} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i144);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p145 := $i2p.i64.ref($i144);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.1, $p145);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1744} devirtbounce.2($p146, $p147, $p148);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p22);
    call {:si_unique_call 1745} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i149);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i150 := $add.i64($i149, 6088);
    call {:si_unique_call 1746} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i150);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p151 := $i2p.i64.ref($i150);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} spin_lock($p151);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i8($i7);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.1, $p153);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i155 := $and.i8($i152, 1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i156 := $shl.i8($i155, 6);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i157 := $and.i8($i154, $sub.i8(0, 65));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i158 := $or.i8($i157, $i156);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p153, $i158);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i142 == 1;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} pch_udc_ep_clear_rrdy($p0);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    call {:si_unique_call 1667} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i28);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 144);
    call {:si_unique_call 1668} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i29);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    call {:si_unique_call 1669} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i31);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, $sub.i64(0, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(136, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.1, $p74);
    call {:si_unique_call 1672} {:cexpr "__cil_tmp74"} boogie_si_record_i8($i75);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    call {:si_unique_call 1673} {:cexpr "__cil_tmp75"} boogie_si_record_i32($i76);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i77 == 1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p22);
    call {:si_unique_call 1712} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i94);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 1216);
    call {:si_unique_call 1713} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i95);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    call {:si_unique_call 1714} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i98);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 144);
    call {:si_unique_call 1715} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i99);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p1);
    call {:si_unique_call 1716} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i101);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 144);
    call {:si_unique_call 1717} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i102);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.1, $p103);
    call {:si_unique_call 1718} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i104);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p1);
    call {:si_unique_call 1719} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i105);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 8);
    call {:si_unique_call 1720} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i106);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.1, $p107);
    call {:si_unique_call 1721} {:cexpr "__cil_tmp104"} boogie_si_record_i32($i108);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i108);
    call {:si_unique_call 1722} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i109);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} dma_unmap_single_attrs($p100, $i104, $i109, 2, $0.ref);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p1);
    call {:si_unique_call 1724} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i110);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, 8);
    call {:si_unique_call 1725} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i111);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p112 := $i2p.i64.ref($i111);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    call {:si_unique_call 1726} {:cexpr "__cil_tmp111"} boogie_si_record_i32($i113);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i114 := $zext.i32.i64($i113);
    call {:si_unique_call 1727} {:cexpr "__len"} boogie_si_record_i64($i114);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p1);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.1, $p115);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p1);
    call {:si_unique_call 1728} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i117);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i118 := $add.i64($i117, 136);
    call {:si_unique_call 1729} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i118);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p119 := $i2p.i64.ref($i118);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.1, $p119);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 1730} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p116, $p120, $i114, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p1);
    call {:si_unique_call 1731} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i121);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i121, 136);
    call {:si_unique_call 1732} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i122);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p123 := $i2p.i64.ref($i122);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} kfree($p124);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p1);
    call {:si_unique_call 1734} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i125);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, 144);
    call {:si_unique_call 1735} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i126);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p127 := $i2p.i64.ref($i126);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p127, $sub.i64(0, 1));
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.1, $p128);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i130 := $and.i8($i129, $sub.i8(0, 3));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p128, $i130);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i77 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p22);
    call {:si_unique_call 1700} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i78);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 1216);
    call {:si_unique_call 1701} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i79);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    call {:si_unique_call 1702} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i82);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 144);
    call {:si_unique_call 1703} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i83);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p1);
    call {:si_unique_call 1704} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i85);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 144);
    call {:si_unique_call 1705} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i86);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.1, $p87);
    call {:si_unique_call 1706} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i88);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p1);
    call {:si_unique_call 1707} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i89);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 8);
    call {:si_unique_call 1708} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i90);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p91 := $i2p.i64.ref($i90);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.1, $p91);
    call {:si_unique_call 1709} {:cexpr "__cil_tmp88"} boogie_si_record_i32($i92);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i92);
    call {:si_unique_call 1710} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i93);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} dma_unmap_single_attrs($p84, $i88, $i93, 1, $0.ref);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(136, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    call {:si_unique_call 1670} {:cexpr "__cil_tmp33"} boogie_si_record_i8($i35);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    call {:si_unique_call 1671} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i36);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p22);
    call {:si_unique_call 1686} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i54);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 1216);
    call {:si_unique_call 1687} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i55);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    call {:si_unique_call 1688} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i58);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 144);
    call {:si_unique_call 1689} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i59);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p1);
    call {:si_unique_call 1690} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i61);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 16);
    call {:si_unique_call 1691} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i62);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.1, $p63);
    call {:si_unique_call 1692} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i64);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p1);
    call {:si_unique_call 1693} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i65);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 8);
    call {:si_unique_call 1694} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i66);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    call {:si_unique_call 1695} {:cexpr "__cil_tmp65"} boogie_si_record_i32($i68);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    call {:si_unique_call 1696} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i69);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} dma_unmap_single_attrs($p60, $i64, $i69, 2, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p1);
    call {:si_unique_call 1698} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i70);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 16);
    call {:si_unique_call 1699} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i71);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p72, $sub.i64(0, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p22);
    call {:si_unique_call 1674} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i38);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 1216);
    call {:si_unique_call 1675} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i39);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    call {:si_unique_call 1676} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i42);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 144);
    call {:si_unique_call 1677} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i43);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p1);
    call {:si_unique_call 1678} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i45);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 16);
    call {:si_unique_call 1679} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i46);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.1, $p47);
    call {:si_unique_call 1680} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i48);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p1);
    call {:si_unique_call 1681} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i49);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 8);
    call {:si_unique_call 1682} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i50);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    call {:si_unique_call 1683} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i52);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    call {:si_unique_call 1684} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i53);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} dma_unmap_single_attrs($p44, $i48, $i53, 1, $0.ref);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    call {:si_unique_call 1661} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 80);
    call {:si_unique_call 1662} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, $i2);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 193788);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} __list_del_entry($p0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} INIT_LIST_HEAD($p0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 194820);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1751} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1752} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p5 := get_dma_ops($p0);
    call {:si_unique_call 1754} {:cexpr "dma_unmap_single_attrs:arg:__cil_tmp10"} boogie_si_record_i32($i3);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 1756} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 1757} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i8);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    call {:si_unique_call 1758} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i9);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i10 := __builtinx_expect.i64.i64($i9, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    call {:si_unique_call 1760} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1762} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p5);
    call {:si_unique_call 1763} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 32);
    call {:si_unique_call 1764} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i15);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    call {:si_unique_call 1765} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, $i13);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call {:si_unique_call 1769} {:cexpr "dma_unmap_single_attrs:arg:__cil_tmp22"} boogie_si_record_i32($i3);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1(1);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} debug_dma_unmap_page($p0, $i1, $i2, $i3, $i24);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p5);
    call {:si_unique_call 1766} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 32);
    call {:si_unique_call 1767} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    call {:si_unique_call 1768} devirtbounce.4($p23, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 1761} devirtbounce.3(0, .str.7, 36, 12);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 195852);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const kfree: ref;

axiom kfree == $sub.ref(0, 196884);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} free_($p0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_clear_rrdy: ref;

axiom pch_udc_ep_clear_rrdy == $sub.ref(0, 197916);

procedure pch_udc_ep_clear_rrdy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_rrdy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} pch_udc_ep_bit_clr($p0, 0, 512);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_bit_clr: ref;

axiom pch_udc_ep_bit_clr == $sub.ref(0, 198948);

procedure pch_udc_ep_bit_clr($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_bit_clr($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} {:cexpr "pch_udc_ep_bit_clr:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 1774} {:cexpr "pch_udc_ep_bit_clr:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i3 := pch_udc_ep_readl($p0, $i1);
    call {:si_unique_call 1776} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i4 := $xor.i64($i2, $sub.i64(0, 1));
    call {:si_unique_call 1777} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i3);
    call {:si_unique_call 1778} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, $i4);
    call {:si_unique_call 1779} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} pch_udc_ep_writel($p0, $i6, $i1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_readl: ref;

axiom pch_udc_ep_readl == $sub.ref(0, 199980);

procedure pch_udc_ep_readl($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_ep_readl($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} {:cexpr "pch_udc_ep_readl:arg:reg"} boogie_si_record_i64($i1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1782} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 104);
    call {:si_unique_call 1783} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p4);
    call {:si_unique_call 1784} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, $i1);
    call {:si_unique_call 1785} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 1786} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 96);
    call {:si_unique_call 1787} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 1788} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 6216);
    call {:si_unique_call 1789} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($i6, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} $i16 := ioread32($p15);
    call {:si_unique_call 1791} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const pch_udc_ep_writel: ref;

axiom pch_udc_ep_writel == $sub.ref(0, 201012);

procedure pch_udc_ep_writel($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_writel($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} {:cexpr "pch_udc_ep_writel:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 1793} {:cexpr "pch_udc_ep_writel:arg:reg"} boogie_si_record_i64($i2);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    call {:si_unique_call 1794} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i3);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1795} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 104);
    call {:si_unique_call 1796} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    call {:si_unique_call 1797} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, $i2);
    call {:si_unique_call 1798} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 1799} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 96);
    call {:si_unique_call 1800} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    call {:si_unique_call 1801} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 6216);
    call {:si_unique_call 1802} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i14);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($i8, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} iowrite32($i3, $p17);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 202044);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 203076);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1805} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1806} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 204108);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1807} $free($p0);
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 205140);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1808} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1809} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1810} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i4);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    call {:si_unique_call 1811} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $i6 := __builtinx_expect.i64.i64($i5, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1813} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1814} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i11);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1815} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 976);
    call {:si_unique_call 1816} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    call {:si_unique_call 1817} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, $i11);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1818} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i19);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 976);
    call {:si_unique_call 1819} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i20);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p10 := $p22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, dma_ops);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p10 := $p18;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, dma_ops);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb3;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 206172);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i4: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 2);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb9;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 207204);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1822} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1823} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1824} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 208236);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 209268);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1825} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i2);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    call {:si_unique_call 1826} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i3);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $p0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_bit_clr: ref;

axiom pch_udc_bit_clr == $sub.ref(0, 210300);

procedure pch_udc_bit_clr($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_bit_clr($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} {:cexpr "pch_udc_bit_clr:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 1828} {:cexpr "pch_udc_bit_clr:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $i3 := pch_udc_readl($p0, $i1);
    call {:si_unique_call 1830} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i4 := $xor.i64($i2, $sub.i64(0, 1));
    call {:si_unique_call 1831} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i3);
    call {:si_unique_call 1832} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, $i4);
    call {:si_unique_call 1833} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} pch_udc_writel($p0, $i6, $i1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_bit_set: ref;

axiom pch_udc_ep_bit_set == $sub.ref(0, 211332);

procedure pch_udc_ep_bit_set($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_bit_set($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} {:cexpr "pch_udc_ep_bit_set:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 1836} {:cexpr "pch_udc_ep_bit_set:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $i3 := pch_udc_ep_readl($p0, $i1);
    call {:si_unique_call 1838} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    call {:si_unique_call 1839} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, $i2);
    call {:si_unique_call 1840} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} pch_udc_ep_writel($p0, $i5, $i1);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_clear_nak: ref;

axiom pch_udc_ep_clear_nak == $sub.ref(0, 212364);

procedure pch_udc_ep_clear_nak($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_nak($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i17: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i21: i32;
  var $i16: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i39: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i43: i32;
  var $i38: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1842} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i1);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 96);
    call {:si_unique_call 1843} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} $i5 := pch_udc_ep_readl($p0, 0);
    call {:si_unique_call 1845} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 64);
    call {:si_unique_call 1846} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i6);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(136, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    call {:si_unique_call 1847} {:cexpr "__cil_tmp13"} boogie_si_record_i8($i10);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 1848} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i11);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} $i35 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 1863} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 64);
    call {:si_unique_call 1864} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i36);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i38 := 10000;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i47 := $i38;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i48 == 1;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p0);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(136, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    call {:si_unique_call 1871} {:cexpr "__cil_tmp26"} boogie_si_record_i8($i51);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    call {:si_unique_call 1872} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i52);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $p54 := .str.16;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p4);
    call {:si_unique_call 1873} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i55);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 1216);
    call {:si_unique_call 1874} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i56);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    call {:si_unique_call 1875} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i59);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 144);
    call {:si_unique_call 1876} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i60);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 1877} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i62);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 136);
    call {:si_unique_call 1878} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i63);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.1, $p64);
    call {:si_unique_call 1879} {:cexpr "__cil_tmp37"} boogie_si_record_i8($i65);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    call {:si_unique_call 1880} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i66);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} vslice_dummy_var_68 := dev_err.ref.ref.ref.i32.ref($p61, .str.17, .str.14, $i66, $p54);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i53 == 1;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p54 := .str.15;
    goto $bb35;

  $bb21:
    assume $i37 == 1;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i39 := 10000;
    goto $bb24;

  $bb24:
    call $i40, $i41, $i42, $i39, $i44, $i45, $i46, $i43 := pch_udc_ep_clear_nak_loop_$bb24($p0, $i40, $i41, $i42, $i39, $i44, $i45, $i46, $i43);
    goto $bb24_last;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i39, 1);
    call {:si_unique_call 1865} {:cexpr "loopcnt"} boogie_si_record_i32($i44);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i46 := $i44;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb30;

  $bb28:
    assume $i45 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} pch_udc_ep_bit_set($p0, 0, 256);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} ___udelay(21475);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} $i40 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 1869} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 64);
    call {:si_unique_call 1870} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i41);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i43 := $i44;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i38 := $i43;
    goto $bb23;

  $bb26:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i44;
    goto $bb26_dummy;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $i13 := pch_udc_read_ep_status($p0);
    call {:si_unique_call 1850} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 256);
    call {:si_unique_call 1851} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i14);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i16 := 10000;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i25 := $i16;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p4);
    call {:si_unique_call 1857} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i27);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 1216);
    call {:si_unique_call 1858} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i28);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    call {:si_unique_call 1859} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i31);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 144);
    call {:si_unique_call 1860} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i32);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} vslice_dummy_var_67 := dev_err.ref.ref.ref($p33, .str.13, .str.14);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i17 := 10000;
    goto $bb10;

  $bb10:
    call $i18, $i19, $i20, $i17, $i22, $i23, $i24, $i21 := pch_udc_ep_clear_nak_loop_$bb10($p0, $i18, $i19, $i20, $i17, $i22, $i23, $i24, $i21);
    goto $bb10_last;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i17, 1);
    call {:si_unique_call 1852} {:cexpr "loopcnt"} boogie_si_record_i32($i22);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb16;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} ___udelay(21475);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} $i18 := pch_udc_read_ep_status($p0);
    call {:si_unique_call 1855} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 256);
    call {:si_unique_call 1856} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i19);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb9;

  $bb12:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i22;
    goto $bb12_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4300;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4264;
}



const pch_udc_ep_set_rrdy: ref;

axiom pch_udc_ep_set_rrdy == $sub.ref(0, 213396);

procedure pch_udc_ep_set_rrdy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_rrdy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} pch_udc_ep_bit_set($p0, 0, 512);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    return;
}



const ___udelay: ref;

axiom ___udelay == $sub.ref(0, 214428);

procedure ___udelay($i0: i64);
  free requires assertsPassed;



implementation ___udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} {:cexpr "___udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_read_ep_status: ref;

axiom pch_udc_read_ep_status == $sub.ref(0, 215460);

procedure pch_udc_read_ep_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_status($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $i1 := pch_udc_ep_readl($p0, 4);
    call {:si_unique_call 1885} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_ep_control: ref;

axiom pch_udc_read_ep_control == $sub.ref(0, 216492);

procedure pch_udc_read_ep_control($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_control($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $i1 := pch_udc_ep_readl($p0, 0);
    call {:si_unique_call 1887} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_complete_transfer: ref;

axiom pch_udc_complete_transfer == $sub.ref(0, 217524);

procedure pch_udc_complete_transfer($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation pch_udc_complete_transfer($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1888} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i1);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 96);
    call {:si_unique_call 1889} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1890} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 120);
    call {:si_unique_call 1891} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $i8 := list_empty($p7);
    call {:si_unique_call 1893} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1894} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i10);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 120);
    call {:si_unique_call 1895} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i11);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    call {:si_unique_call 1896} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i16);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 104);
    call {:si_unique_call 1897} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i17);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    call {:si_unique_call 1898} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i21);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $sub.i32(0, 1073741824));
    call {:si_unique_call 1899} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i22);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, $sub.i32(0, 2147483648));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p15);
    call {:si_unique_call 1900} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i24);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 104);
    call {:si_unique_call 1901} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i25);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    call {:si_unique_call 1902} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i29);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 805306368);
    call {:si_unique_call 1903} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i30);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p15);
    call {:si_unique_call 1917} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i52);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 84);
    call {:si_unique_call 1918} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i53);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p15);
    call {:si_unique_call 1919} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i54);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 8);
    call {:si_unique_call 1920} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i55);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i53);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p58, $i57);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p15);
    call {:si_unique_call 1921} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i59);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 104);
    call {:si_unique_call 1922} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i60);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p63, $sub.i32(0, 939524096));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p15);
    call {:si_unique_call 1923} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i64);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 96);
    call {:si_unique_call 1924} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i65);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p68, $sub.i32(0, 939524096));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} complete_req($p0, $p15, 0);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p15);
    call {:si_unique_call 1926} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i69);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 128);
    call {:si_unique_call 1927} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i70);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p71, 0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p0);
    call {:si_unique_call 1928} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i72);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 120);
    call {:si_unique_call 1929} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i73);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $i75 := list_empty($p74);
    call {:si_unique_call 1931} {:cexpr "tmp___2"} boogie_si_record_i32($i75);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i76 == 1);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref(136, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.1, $p95);
    call {:si_unique_call 1936} {:cexpr "__cil_tmp79"} boogie_si_record_i8($i96);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    call {:si_unique_call 1937} {:cexpr "__cil_tmp80"} boogie_si_record_i32($i97);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := 16;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p0);
    call {:si_unique_call 1947} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i100);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i100, 96);
    call {:si_unique_call 1948} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i101);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i101);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.1, $p102);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p0);
    call {:si_unique_call 1949} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i104);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i104, 136);
    call {:si_unique_call 1950} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i105);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p106 := $i2p.i64.ref($i105);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.1, $p106);
    call {:si_unique_call 1951} {:cexpr "__cil_tmp86"} boogie_si_record_i8($i107);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    call {:si_unique_call 1952} {:cexpr "__cil_tmp87"} boogie_si_record_i32($i108);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, $i99);
    call {:si_unique_call 1953} {:cexpr "__cil_tmp88"} boogie_si_record_i32($i109);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i110 := $shl.i32(1, $i109);
    call {:si_unique_call 1954} {:cexpr "__cil_tmp89"} boogie_si_record_i32($i110);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} pch_udc_disable_ep_interrupts($p103, $i110);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i98 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb19;

  $bb11:
    assume $i76 == 1;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} pch_udc_wait_ep_stall($p0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(136, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    call {:si_unique_call 1934} {:cexpr "__cil_tmp65"} boogie_si_record_i8($i79);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    call {:si_unique_call 1935} {:cexpr "__cil_tmp66"} boogie_si_record_i32($i80);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := 16;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p0);
    call {:si_unique_call 1938} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i83);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 96);
    call {:si_unique_call 1939} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i84);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.1, $p85);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p0);
    call {:si_unique_call 1940} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i87);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 136);
    call {:si_unique_call 1941} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i88);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    call {:si_unique_call 1942} {:cexpr "__cil_tmp72"} boogie_si_record_i8($i90);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    call {:si_unique_call 1943} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i91);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, $i82);
    call {:si_unique_call 1944} {:cexpr "__cil_tmp74"} boogie_si_record_i32($i92);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i93 := $shl.i32(1, $i92);
    call {:si_unique_call 1945} {:cexpr "__cil_tmp75"} boogie_si_record_i32($i93);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} pch_udc_enable_ep_interrupts($p86, $i93);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i81 == 1;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb15;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p4);
    call {:si_unique_call 1904} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 1216);
    call {:si_unique_call 1905} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i33);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    call {:si_unique_call 1906} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i36);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 144);
    call {:si_unique_call 1907} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i37);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p15);
    call {:si_unique_call 1908} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i39);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 104);
    call {:si_unique_call 1909} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    call {:si_unique_call 1910} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i44);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 805306368);
    call {:si_unique_call 1911} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i45);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 1912} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i46);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 144);
    call {:si_unique_call 1913} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i47);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.1, $p48);
    call {:si_unique_call 1914} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i49);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i49);
    call {:si_unique_call 1915} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i50);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} vslice_dummy_var_69 := dev_err.ref.ref.i32.i32($p38, .str.98, $i45, $i50);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_start_next_txrequest: ref;

axiom pch_udc_start_next_txrequest == $sub.ref(0, 218556);

procedure pch_udc_start_next_txrequest($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_start_next_txrequest($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} $i1 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 1957} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 8);
    call {:si_unique_call 1958} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i2);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1959} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i4);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 120);
    call {:si_unique_call 1960} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $i7 := list_empty($p6);
    call {:si_unique_call 1962} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 1963} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 120);
    call {:si_unique_call 1964} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i10);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(128, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    call {:si_unique_call 1965} {:cexpr "__cil_tmp20"} boogie_si_record_i8($i17);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 1966} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i18);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1967} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i20);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p14);
    call {:si_unique_call 1968} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i21);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 96);
    call {:si_unique_call 1969} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i22);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    call {:si_unique_call 1970} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i25);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, $i20);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} pch_udc_wait_ep_stall($p0);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p14);
    call {:si_unique_call 1972} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i27);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 128);
    call {:si_unique_call 1973} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i28);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} pch_udc_ep_set_ddptr($p0, 0);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p14);
    call {:si_unique_call 1975} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i30);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 96);
    call {:si_unique_call 1976} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i31);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    call {:si_unique_call 1977} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i35);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 1073741823);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p33);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, $i36);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p33);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    call {:si_unique_call 1978} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i39);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 134217728);
    call {:si_unique_call 1979} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i40);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i41 == 1);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p42 := $p33;
    goto $bb17;

  $bb17:
    call $p42, $i43, $i44, $p45, $i46, $i47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $i55, $i56, $i57 := pch_udc_start_next_txrequest_loop_$bb17($p42, $i43, $i44, $p45, $i46, $i47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $i55, $i56, $i57);
    goto $bb17_last;

  $bb20:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    call {:si_unique_call 1991} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i43);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 12);
    call {:si_unique_call 1992} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i44);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    call {:si_unique_call 1993} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i46);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    call {:si_unique_call 1994} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i47);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $p48 := phys_to_virt($i47);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    call {:si_unique_call 1996} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i51);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 1073741823);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p49);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, $i52);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p49);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    call {:si_unique_call 1997} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i55);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 134217728);
    call {:si_unique_call 1998} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i56);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb21;

  $bb21:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $p42 := $p48;
    goto $bb21_dummy;

  $bb18:
    assume $i57 == 1;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p14);
    call {:si_unique_call 1980} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i58);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 88);
    call {:si_unique_call 1981} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i59);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.1, $p60);
    call {:si_unique_call 1982} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i61);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i61);
    call {:si_unique_call 1983} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i62);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} pch_udc_ep_set_ddptr($p0, $i62);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p0);
    call {:si_unique_call 1985} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i63);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 96);
    call {:si_unique_call 1986} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i64);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} pch_udc_set_dma($p66, 2);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} pch_udc_ep_set_pd($p0);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p0);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(136, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    call {:si_unique_call 1989} {:cexpr "__cil_tmp48"} boogie_si_record_i8($i69);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    call {:si_unique_call 1990} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i70);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := 16;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p0);
    call {:si_unique_call 1999} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i73);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 96);
    call {:si_unique_call 2000} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i74);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p0);
    call {:si_unique_call 2001} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i77);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 136);
    call {:si_unique_call 2002} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i78);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.1, $p79);
    call {:si_unique_call 2003} {:cexpr "__cil_tmp55"} boogie_si_record_i8($i80);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    call {:si_unique_call 2004} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i81);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i81, $i72);
    call {:si_unique_call 2005} {:cexpr "__cil_tmp57"} boogie_si_record_i32($i82);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32(1, $i82);
    call {:si_unique_call 2006} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i83);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} pch_udc_enable_ep_interrupts($p76, $i83);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i71 == 1;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb24;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb15;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;
}



const pch_udc_wait_ep_stall: ref;

axiom pch_udc_wait_ep_stall == $sub.ref(0, 219588);

procedure pch_udc_wait_ep_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_wait_ep_stall($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i5: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i9: i32;
  var $i4: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} $i1 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 2010} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i4 := 10000;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 2015} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i15);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 96);
    call {:si_unique_call 2016} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i16);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    call {:si_unique_call 2017} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i19);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 1216);
    call {:si_unique_call 2018} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i20);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 2019} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i23);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 144);
    call {:si_unique_call 2020} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i24);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} vslice_dummy_var_70 := dev_err.ref.ref.ref($p25, .str.5, .str.12);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i5 := 10000;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9 := pch_udc_wait_ep_stall_loop_$bb4($p0, $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9);
    goto $bb4_last;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i5, 1);
    call {:si_unique_call 2011} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} ___udelay(21475);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $i6 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 2014} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4617;
}



const pch_udc_ep_set_pd: ref;

axiom pch_udc_ep_set_pd == $sub.ref(0, 220620);

procedure pch_udc_ep_set_pd($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_pd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} pch_udc_ep_bit_set($p0, 0, 8);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_disable_ep_interrupts: ref;

axiom pch_udc_disable_ep_interrupts == $sub.ref(0, 221652);

procedure pch_udc_disable_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_disable_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} {:cexpr "pch_udc_disable_ep_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 2024} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} pch_udc_bit_set($p0, 1048, $i2);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_init_setup_buff: ref;

axiom pch_udc_init_setup_buff == $sub.ref(0, 222684);

procedure pch_udc_init_setup_buff($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_init_setup_buff($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2026} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 2027} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($u1, 1);
    call {:si_unique_call 2028} {:cexpr "pky_marker"} boogie_si_record_i32($i4);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 2029} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 4);
    call {:si_unique_call 2030} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i4);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 2031} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 8);
    call {:si_unique_call 2032} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    call {:si_unique_call 2033} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p11, $sub.i8(0, 1), 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_10;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, 0);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_fifo_flush: ref;

axiom pch_udc_ep_fifo_flush == $sub.ref(0, 223716);

procedure pch_udc_ep_fifo_flush($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_fifo_flush($p0: ref, $i1: i32)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} {:cexpr "pch_udc_ep_fifo_flush:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} pch_udc_ep_bit_set($p0, 0, 2);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 224748);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const pch_udc_clear_ep_status: ref;

axiom pch_udc_clear_ep_status == $sub.ref(0, 225780);

procedure pch_udc_clear_ep_status($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_clear_ep_status($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} {:cexpr "pch_udc_clear_ep_status:arg:stat"} boogie_si_record_i32($i1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_svc_ur_interrupt: ref;

axiom pch_udc_svc_ur_interrupt == $sub.ref(0, 226812);

procedure pch_udc_svc_ur_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.3, $CurrAddr;



implementation pch_udc_svc_ur_interrupt($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i16;
  var $p12: ref;
  var $i13: i16;
  var $i14: i16;
  var $p15: ref;
  var $i16: i16;
  var $i17: i16;
  var $p18: ref;
  var $i19: i16;
  var $i20: i16;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i8;
  var $i81: i8;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $i91: i8;
  var $i92: i32;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i8;
  var $i101: i8;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i8;
  var $i111: i8;
  var $i112: i32;
  var $i113: i64;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i8;
  var $i120: i8;
  var $i121: i8;
  var $i122: i32;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i8;
  var $i131: i8;
  var $i132: i32;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i64;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i64;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i64;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i64;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i64;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $i179: i64;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i64;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i64;
  var $i193: i64;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i64;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i64;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i64;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $i211: i64;
  var $p212: ref;
  var $p213: ref;
  var $i214: i64;
  var $i215: i64;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $i223: i64;
  var $i224: i64;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i64;
  var $i229: i64;
  var $p230: ref;
  var $p231: ref;
  var $i232: i64;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i64;
  var $p239: ref;
  var $p240: ref;
  var $i241: i64;
  var $i242: i64;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i64;
  var $i247: i64;
  var $p248: ref;
  var $p249: ref;
  var $i250: i64;
  var $i251: i64;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $i256: i64;
  var $p257: ref;
  var $p258: ref;
  var $i259: i64;
  var $i260: i64;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i64;
  var $i265: i64;
  var $p266: ref;
  var $p267: ref;
  var $i268: i64;
  var $i269: i64;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $i274: i64;
  var $p275: ref;
  var $p276: ref;
  var $i277: i64;
  var $i278: i64;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $i282: i64;
  var $i283: i64;
  var $p284: ref;
  var $p285: ref;
  var $i286: i64;
  var $i287: i64;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $i292: i64;
  var $p293: ref;
  var $p294: ref;
  var $i295: i64;
  var $i296: i64;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $i300: i64;
  var $i301: i64;
  var $p302: ref;
  var $p303: ref;
  var $i304: i64;
  var $i305: i64;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i309: i64;
  var $i310: i64;
  var $p311: ref;
  var $p312: ref;
  var $i313: i64;
  var $i314: i64;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i64;
  var $i319: i64;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $i323: i64;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i64;
  var $i328: i64;
  var $p329: ref;
  var $p330: ref;
  var $i331: i64;
  var $i332: i64;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i64;
  var $i337: i64;
  var $p338: ref;
  var $p339: ref;
  var $i340: i64;
  var $i341: i64;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i345: i64;
  var $i346: i64;
  var $p347: ref;
  var $p348: ref;
  var $i349: i64;
  var $i350: i64;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i64;
  var $i355: i64;
  var $p356: ref;
  var $p357: ref;
  var $i358: i64;
  var $i359: i64;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i64;
  var $i364: i64;
  var $p365: ref;
  var $p366: ref;
  var $i367: i64;
  var $i368: i64;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $i372: i64;
  var $i373: i64;
  var $p374: ref;
  var $p375: ref;
  var $i376: i64;
  var $i377: i64;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $i381: i64;
  var $i382: i64;
  var $p383: ref;
  var $p384: ref;
  var $i385: i64;
  var $i386: i64;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $i390: i64;
  var $i391: i64;
  var $p392: ref;
  var $p393: ref;
  var $i394: i64;
  var $i395: i64;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i64;
  var $i400: i64;
  var $p401: ref;
  var $p402: ref;
  var $i403: i64;
  var $i404: i64;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $i408: i64;
  var $i409: i64;
  var $p410: ref;
  var $p411: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} pch_udc_clear_dma($p0, 2);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} pch_udc_disable_ep_interrupts($p0, $sub.i32(0, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} pch_udc_write_ep_interrupts($p0, $sub.i32(0, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 2041} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1224);
    call {:si_unique_call 2042} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} pch_udc_clear_ep_status($p4, 520095472);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} pch_udc_clear_ep_control($p4);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} pch_udc_ep_set_ddptr($p4, 0);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 2046} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i5);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 96);
    call {:si_unique_call 2047} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} pch_udc_write_csr($p8, 0, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i134 := $add.i64($i133, 1224);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p135 := $i2p.i64.ref($i134);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p136, $mul.ref(1, 152));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} pch_udc_clear_ep_status($p137, 520095472);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} pch_udc_clear_ep_control($p137);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} pch_udc_ep_set_ddptr($p137, 0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p137);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i139 := $add.i64($i138, 96);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p140 := $i2p.i64.ref($i139);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.1, $p140);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} pch_udc_write_csr($p141, 0, 1);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p0);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i143 := $add.i64($i142, 1224);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p144 := $i2p.i64.ref($i143);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p145, $mul.ref(2, 152));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} pch_udc_clear_ep_status($p146, 520095472);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} pch_udc_clear_ep_control($p146);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} pch_udc_ep_set_ddptr($p146, 0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i148 := $add.i64($i147, 96);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p149 := $i2p.i64.ref($i148);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.1, $p149);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} pch_udc_write_csr($p150, 0, 2);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p0);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i152 := $add.i64($i151, 1224);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p153 := $i2p.i64.ref($i152);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p154, $mul.ref(3, 152));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} pch_udc_clear_ep_status($p155, 520095472);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} pch_udc_clear_ep_control($p155);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} pch_udc_ep_set_ddptr($p155, 0);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, 96);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p158 := $i2p.i64.ref($i157);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.1, $p158);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} pch_udc_write_csr($p159, 0, 3);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p0);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i160, 1224);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p162 := $i2p.i64.ref($i161);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref(4, 152));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} pch_udc_clear_ep_status($p164, 520095472);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} pch_udc_clear_ep_control($p164);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} pch_udc_ep_set_ddptr($p164, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i166 := $add.i64($i165, 96);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p167 := $i2p.i64.ref($i166);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.1, $p167);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} pch_udc_write_csr($p168, 0, 4);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i170 := $add.i64($i169, 1224);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p171 := $i2p.i64.ref($i170);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(5, 152));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} pch_udc_clear_ep_status($p173, 520095472);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} pch_udc_clear_ep_control($p173);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} pch_udc_ep_set_ddptr($p173, 0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i175 := $add.i64($i174, 96);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p176 := $i2p.i64.ref($i175);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.1, $p176);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} pch_udc_write_csr($p177, 0, 5);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i179 := $add.i64($i178, 1224);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p180 := $i2p.i64.ref($i179);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($p181, $mul.ref(6, 152));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} pch_udc_clear_ep_status($p182, 520095472);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} pch_udc_clear_ep_control($p182);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} pch_udc_ep_set_ddptr($p182, 0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p182);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i184 := $add.i64($i183, 96);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p185 := $i2p.i64.ref($i184);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.1, $p185);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} pch_udc_write_csr($p186, 0, 6);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p0);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i188 := $add.i64($i187, 1224);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p189 := $i2p.i64.ref($i188);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref(7, 152));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} pch_udc_clear_ep_status($p191, 520095472);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} pch_udc_clear_ep_control($p191);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} pch_udc_ep_set_ddptr($p191, 0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p191);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i193 := $add.i64($i192, 96);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p194 := $i2p.i64.ref($i193);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.1, $p194);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} pch_udc_write_csr($p195, 0, 7);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i197 := $add.i64($i196, 1224);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p198 := $i2p.i64.ref($i197);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p199, $mul.ref(8, 152));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} pch_udc_clear_ep_status($p200, 520095472);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} pch_udc_clear_ep_control($p200);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} pch_udc_ep_set_ddptr($p200, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i202 := $add.i64($i201, 96);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p203 := $i2p.i64.ref($i202);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.1, $p203);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} pch_udc_write_csr($p204, 0, 8);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p0);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i206 := $add.i64($i205, 1224);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p207 := $i2p.i64.ref($i206);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p208, $mul.ref(9, 152));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} pch_udc_clear_ep_status($p209, 520095472);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} pch_udc_clear_ep_control($p209);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} pch_udc_ep_set_ddptr($p209, 0);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p209);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i211 := $add.i64($i210, 96);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p212 := $i2p.i64.ref($i211);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.1, $p212);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} pch_udc_write_csr($p213, 0, 9);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i214 := $p2i.ref.i64($p0);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i215 := $add.i64($i214, 1224);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p216 := $i2p.i64.ref($i215);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p216);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p217, $mul.ref(10, 152));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} pch_udc_clear_ep_status($p218, 520095472);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} pch_udc_clear_ep_control($p218);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} pch_udc_ep_set_ddptr($p218, 0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i220 := $add.i64($i219, 96);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p221 := $i2p.i64.ref($i220);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.1, $p221);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} pch_udc_write_csr($p222, 0, 10);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i224 := $add.i64($i223, 1224);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p225 := $i2p.i64.ref($i224);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p226 := $bitcast.ref.ref($p225);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($p226, $mul.ref(11, 152));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} pch_udc_clear_ep_status($p227, 520095472);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} pch_udc_clear_ep_control($p227);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} pch_udc_ep_set_ddptr($p227, 0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p227);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i229 := $add.i64($i228, 96);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p230 := $i2p.i64.ref($i229);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.1, $p230);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} pch_udc_write_csr($p231, 0, 11);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i64($p0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i233 := $add.i64($i232, 1224);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p234 := $i2p.i64.ref($i233);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p235, $mul.ref(12, 152));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} pch_udc_clear_ep_status($p236, 520095472);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} pch_udc_clear_ep_control($p236);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} pch_udc_ep_set_ddptr($p236, 0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p236);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i238 := $add.i64($i237, 96);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p239 := $i2p.i64.ref($i238);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.1, $p239);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} pch_udc_write_csr($p240, 0, 12);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p0);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i242 := $add.i64($i241, 1224);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p243 := $i2p.i64.ref($i242);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p243);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($p244, $mul.ref(13, 152));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} pch_udc_clear_ep_status($p245, 520095472);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} pch_udc_clear_ep_control($p245);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} pch_udc_ep_set_ddptr($p245, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p245);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i247 := $add.i64($i246, 96);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p248 := $i2p.i64.ref($i247);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.1, $p248);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} pch_udc_write_csr($p249, 0, 13);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i250 := $p2i.ref.i64($p0);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i251 := $add.i64($i250, 1224);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p252 := $i2p.i64.ref($i251);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p252);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p253, $mul.ref(14, 152));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} pch_udc_clear_ep_status($p254, 520095472);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} pch_udc_clear_ep_control($p254);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} pch_udc_ep_set_ddptr($p254, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p254);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i256 := $add.i64($i255, 96);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p257 := $i2p.i64.ref($i256);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.1, $p257);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} pch_udc_write_csr($p258, 0, 14);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i259 := $p2i.ref.i64($p0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i260 := $add.i64($i259, 1224);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p261 := $i2p.i64.ref($i260);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p261);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($p262, $mul.ref(15, 152));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} pch_udc_clear_ep_status($p263, 520095472);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} pch_udc_clear_ep_control($p263);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} pch_udc_ep_set_ddptr($p263, 0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i264 := $p2i.ref.i64($p263);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i265 := $add.i64($i264, 96);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p266 := $i2p.i64.ref($i265);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.1, $p266);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} pch_udc_write_csr($p267, 0, 15);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p0);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i269 := $add.i64($i268, 1224);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p270 := $i2p.i64.ref($i269);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p270);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($p271, $mul.ref(16, 152));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} pch_udc_clear_ep_status($p272, 520095472);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} pch_udc_clear_ep_control($p272);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} pch_udc_ep_set_ddptr($p272, 0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i274 := $add.i64($i273, 96);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p275 := $i2p.i64.ref($i274);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.1, $p275);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} pch_udc_write_csr($p276, 0, 16);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i278 := $add.i64($i277, 1224);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p279 := $i2p.i64.ref($i278);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p280 := $bitcast.ref.ref($p279);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p280, $mul.ref(17, 152));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} pch_udc_clear_ep_status($p281, 520095472);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} pch_udc_clear_ep_control($p281);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} pch_udc_ep_set_ddptr($p281, 0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i282 := $p2i.ref.i64($p281);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i283 := $add.i64($i282, 96);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p284 := $i2p.i64.ref($i283);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.1, $p284);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} pch_udc_write_csr($p285, 0, 17);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i287 := $add.i64($i286, 1224);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p288 := $i2p.i64.ref($i287);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($p289, $mul.ref(18, 152));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} pch_udc_clear_ep_status($p290, 520095472);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} pch_udc_clear_ep_control($p290);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} pch_udc_ep_set_ddptr($p290, 0);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p290);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i292 := $add.i64($i291, 96);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p293 := $i2p.i64.ref($i292);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.1, $p293);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} pch_udc_write_csr($p294, 0, 18);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p0);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i296 := $add.i64($i295, 1224);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p297 := $i2p.i64.ref($i296);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p298 := $bitcast.ref.ref($p297);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($p298, $mul.ref(19, 152));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} pch_udc_clear_ep_status($p299, 520095472);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} pch_udc_clear_ep_control($p299);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} pch_udc_ep_set_ddptr($p299, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i300 := $p2i.ref.i64($p299);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i301 := $add.i64($i300, 96);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p302 := $i2p.i64.ref($i301);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p303 := $load.ref($M.1, $p302);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} pch_udc_write_csr($p303, 0, 19);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i304 := $p2i.ref.i64($p0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i305 := $add.i64($i304, 1224);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p306 := $i2p.i64.ref($i305);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p307 := $bitcast.ref.ref($p306);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($p307, $mul.ref(20, 152));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} pch_udc_clear_ep_status($p308, 520095472);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} pch_udc_clear_ep_control($p308);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} pch_udc_ep_set_ddptr($p308, 0);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p308);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i310 := $add.i64($i309, 96);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p311 := $i2p.i64.ref($i310);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.1, $p311);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} pch_udc_write_csr($p312, 0, 20);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i313 := $p2i.ref.i64($p0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i314 := $add.i64($i313, 1224);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p315 := $i2p.i64.ref($i314);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p316 := $bitcast.ref.ref($p315);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($p316, $mul.ref(21, 152));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} pch_udc_clear_ep_status($p317, 520095472);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} pch_udc_clear_ep_control($p317);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} pch_udc_ep_set_ddptr($p317, 0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i318 := $p2i.ref.i64($p317);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i319 := $add.i64($i318, 96);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p320 := $i2p.i64.ref($i319);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.1, $p320);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} pch_udc_write_csr($p321, 0, 21);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i322 := $p2i.ref.i64($p0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i323 := $add.i64($i322, 1224);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p324 := $i2p.i64.ref($i323);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p325 := $bitcast.ref.ref($p324);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($p325, $mul.ref(22, 152));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} pch_udc_clear_ep_status($p326, 520095472);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} pch_udc_clear_ep_control($p326);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} pch_udc_ep_set_ddptr($p326, 0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i327 := $p2i.ref.i64($p326);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i328 := $add.i64($i327, 96);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p329 := $i2p.i64.ref($i328);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.1, $p329);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} pch_udc_write_csr($p330, 0, 22);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i332 := $add.i64($i331, 1224);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p333 := $i2p.i64.ref($i332);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p333);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($p334, $mul.ref(23, 152));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} pch_udc_clear_ep_status($p335, 520095472);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} pch_udc_clear_ep_control($p335);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} pch_udc_ep_set_ddptr($p335, 0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i336 := $p2i.ref.i64($p335);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i337 := $add.i64($i336, 96);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p338 := $i2p.i64.ref($i337);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p339 := $load.ref($M.1, $p338);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} pch_udc_write_csr($p339, 0, 23);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i340 := $p2i.ref.i64($p0);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i341 := $add.i64($i340, 1224);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p342 := $i2p.i64.ref($i341);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p343 := $bitcast.ref.ref($p342);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($p343, $mul.ref(24, 152));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} pch_udc_clear_ep_status($p344, 520095472);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} pch_udc_clear_ep_control($p344);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} pch_udc_ep_set_ddptr($p344, 0);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i346 := $add.i64($i345, 96);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p347 := $i2p.i64.ref($i346);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.1, $p347);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} pch_udc_write_csr($p348, 0, 24);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i350 := $add.i64($i349, 1224);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p351 := $i2p.i64.ref($i350);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p352 := $bitcast.ref.ref($p351);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($p352, $mul.ref(25, 152));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} pch_udc_clear_ep_status($p353, 520095472);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} pch_udc_clear_ep_control($p353);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} pch_udc_ep_set_ddptr($p353, 0);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i354 := $p2i.ref.i64($p353);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i355 := $add.i64($i354, 96);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p356 := $i2p.i64.ref($i355);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.1, $p356);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} pch_udc_write_csr($p357, 0, 25);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i358 := $p2i.ref.i64($p0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i359 := $add.i64($i358, 1224);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p360 := $i2p.i64.ref($i359);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p361 := $bitcast.ref.ref($p360);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($p361, $mul.ref(26, 152));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} pch_udc_clear_ep_status($p362, 520095472);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} pch_udc_clear_ep_control($p362);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} pch_udc_ep_set_ddptr($p362, 0);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i364 := $add.i64($i363, 96);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p365 := $i2p.i64.ref($i364);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.1, $p365);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} pch_udc_write_csr($p366, 0, 26);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i367 := $p2i.ref.i64($p0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i368 := $add.i64($i367, 1224);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p369 := $i2p.i64.ref($i368);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($p370, $mul.ref(27, 152));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} pch_udc_clear_ep_status($p371, 520095472);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} pch_udc_clear_ep_control($p371);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} pch_udc_ep_set_ddptr($p371, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i372 := $p2i.ref.i64($p371);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i373 := $add.i64($i372, 96);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p374 := $i2p.i64.ref($i373);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.1, $p374);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} pch_udc_write_csr($p375, 0, 27);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i376 := $p2i.ref.i64($p0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i377 := $add.i64($i376, 1224);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p378 := $i2p.i64.ref($i377);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p379 := $bitcast.ref.ref($p378);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($p379, $mul.ref(28, 152));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} pch_udc_clear_ep_status($p380, 520095472);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} pch_udc_clear_ep_control($p380);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} pch_udc_ep_set_ddptr($p380, 0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i381 := $p2i.ref.i64($p380);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i382 := $add.i64($i381, 96);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p383 := $i2p.i64.ref($i382);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p384 := $load.ref($M.1, $p383);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} pch_udc_write_csr($p384, 0, 28);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i385 := $p2i.ref.i64($p0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i386 := $add.i64($i385, 1224);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p387 := $i2p.i64.ref($i386);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p388 := $bitcast.ref.ref($p387);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($p388, $mul.ref(29, 152));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} pch_udc_clear_ep_status($p389, 520095472);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} pch_udc_clear_ep_control($p389);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} pch_udc_ep_set_ddptr($p389, 0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i390 := $p2i.ref.i64($p389);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i391 := $add.i64($i390, 96);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p392 := $i2p.i64.ref($i391);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.1, $p392);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} pch_udc_write_csr($p393, 0, 29);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i395 := $add.i64($i394, 1224);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p396 := $i2p.i64.ref($i395);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($p397, $mul.ref(30, 152));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} pch_udc_clear_ep_status($p398, 520095472);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} pch_udc_clear_ep_control($p398);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} pch_udc_ep_set_ddptr($p398, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i399 := $p2i.ref.i64($p398);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i400 := $add.i64($i399, 96);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p401 := $i2p.i64.ref($i400);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.1, $p401);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} pch_udc_write_csr($p402, 0, 30);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i403 := $p2i.ref.i64($p0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i404 := $add.i64($i403, 1224);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p405 := $i2p.i64.ref($i404);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p406 := $bitcast.ref.ref($p405);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($p406, $mul.ref(31, 152));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} pch_udc_clear_ep_status($p407, 520095472);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} pch_udc_clear_ep_control($p407);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} pch_udc_ep_set_ddptr($p407, 0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i408 := $p2i.ref.i64($p407);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i409 := $add.i64($i408, 96);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p410 := $i2p.i64.ref($i409);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p411 := $load.ref($M.1, $p410);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} pch_udc_write_csr($p411, 0, 31);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i11 := $and.i16($i10, $sub.i16(0, 3));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p9, $i11);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i14 := $and.i16($i13, $sub.i16(0, 5));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, $i14);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i17 := $and.i16($i16, $sub.i16(0, 1025));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p15, $i17);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p18);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i20 := $and.i16($i19, $sub.i16(0, 513));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p18, $i20);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 2053} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i21);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 1224);
    call {:si_unique_call 2054} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i22);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} pch_udc_ep_set_nak($p24);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i8($i26, 5);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i27, 1);
    call {:si_unique_call 2056} {:cexpr "__cil_tmp18"} boogie_si_record_i8($i28);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    call {:si_unique_call 2057} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i29);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} pch_udc_ep_fifo_flush($p24, $i29);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} empty_req_queue($p24);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p0);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 1224);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(1, 152));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} pch_udc_ep_set_nak($p67);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref(1, 152)), $mul.ref(136, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i70 := $lshr.i8($i69, 5);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, 1);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} pch_udc_ep_fifo_flush($p67, $i72);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} empty_req_queue($p67);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 1224);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(2, 152));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} pch_udc_ep_set_nak($p77);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p76, $mul.ref(2, 152)), $mul.ref(136, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i80 := $lshr.i8($i79, 5);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i81 := $and.i8($i80, 1);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} pch_udc_ep_fifo_flush($p77, $i82);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} empty_req_queue($p77);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p0);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 1224);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(3, 152));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} pch_udc_ep_set_nak($p87);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p86, $mul.ref(3, 152)), $mul.ref(136, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i90 := $lshr.i8($i89, 5);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i91 := $and.i8($i90, 1);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} pch_udc_ep_fifo_flush($p87, $i92);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} empty_req_queue($p87);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 1224);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i94);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref(4, 152));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} pch_udc_ep_set_nak($p97);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p96, $mul.ref(4, 152)), $mul.ref(136, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.1, $p98);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i100 := $lshr.i8($i99, 5);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i101 := $and.i8($i100, 1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} pch_udc_ep_fifo_flush($p97, $i102);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} empty_req_queue($p97);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p0);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 1224);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i104);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(5, 152));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} pch_udc_ep_set_nak($p107);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p106, $mul.ref(5, 152)), $mul.ref(136, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.1, $p108);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i110 := $lshr.i8($i109, 5);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i111 := $and.i8($i110, 1);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} pch_udc_ep_fifo_flush($p107, $i112);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} empty_req_queue($p107);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i114 := $add.i64($i113, 1224);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p115 := $i2p.i64.ref($i114);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p116, $mul.ref(6, 152));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} pch_udc_ep_set_nak($p117);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p116, $mul.ref(6, 152)), $mul.ref(136, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.1, $p118);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i120 := $lshr.i8($i119, 5);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i121 := $and.i8($i120, 1);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} pch_udc_ep_fifo_flush($p117, $i122);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} empty_req_queue($p117);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p0);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 1224);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(7, 152));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} pch_udc_ep_set_nak($p127);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p126, $mul.ref(7, 152)), $mul.ref(136, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.1, $p128);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i130 := $lshr.i8($i129, 5);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i131 := $and.i8($i130, 1);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} pch_udc_ep_fifo_flush($p127, $i132);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} empty_req_queue($p127);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2063} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i30);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    call {:si_unique_call 2064} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i31);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 1208);
    call {:si_unique_call 2065} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i32);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    call {:si_unique_call 2066} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i35);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, $i30);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2067} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i37);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    call {:si_unique_call 2068} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i38);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 1208);
    call {:si_unique_call 2069} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i39);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    call {:si_unique_call 2070} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i42);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 32);
    call {:si_unique_call 2071} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i43);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    call {:si_unique_call 2072} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i46);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, $i37);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p0);
    call {:si_unique_call 2073} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i48);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 6088);
    call {:si_unique_call 2074} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i49);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} spin_unlock($p50);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 2076} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i51);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 1208);
    call {:si_unique_call 2077} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i52);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    call {:si_unique_call 2078} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i55);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 32);
    call {:si_unique_call 2079} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i56);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p0);
    call {:si_unique_call 2080} devirtbounce($p58, $p59);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p0);
    call {:si_unique_call 2081} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i60);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 6088);
    call {:si_unique_call 2082} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i61);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} spin_lock($p62);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const pch_udc_svc_enum_interrupt: ref;

axiom pch_udc_svc_enum_interrupt == $sub.ref(0, 227844);

procedure pch_udc_svc_enum_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_svc_enum_interrupt($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 2223} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 24576);
    call {:si_unique_call 2224} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i2);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 13);
    call {:si_unique_call 2225} {:cexpr "dev_speed"} boogie_si_record_i32($i3);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 1);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 2);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i6 == 1);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call {:si_unique_call 2226} devirtbounce.3(0, .str.69, 2635, 12);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call pch_udc_svc_enum_interrupt_loop_$bb15();
    goto $bb15_last;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 2227} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i8);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 32);
    call {:si_unique_call 2228} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i9);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i7);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} pch_udc_activate_control_ep($p0);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} pch_udc_enable_ep_interrupts($p0, 65537);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} pch_udc_set_dma($p0, 2);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} pch_udc_set_dma($p0, 1);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 2233} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i11);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 1224);
    call {:si_unique_call 2234} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i12);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(1, 152));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} pch_udc_ep_set_rrdy($p15);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} pch_udc_enable_interrupts($p0, 95);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb14;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb14;

  $bb15_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;
}



const pch_udc_svc_intf_interrupt: ref;

axiom pch_udc_svc_intf_interrupt == $sub.ref(0, 228876);

procedure pch_udc_svc_intf_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.2, $M.3, $CurrAddr, assertsPassed;



implementation pch_udc_svc_intf_interrupt($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i16;
  var $i17: i16;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i16;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i16;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i8;
  var $p70: ref;
  var $i71: i16;
  var $i72: i16;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i8;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i8;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i8;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i8;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $i145: i8;
  var $i146: i8;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i64;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 2238} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 2239} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 6230);
    call {:si_unique_call 2240} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 240);
    call {:si_unique_call 2241} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i4);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 4);
    call {:si_unique_call 2242} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i5);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i3);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p7, $i6);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 2243} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i8);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 6232);
    call {:si_unique_call 2244} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i9);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i1, 3840);
    call {:si_unique_call 2245} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i10);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i10, 8);
    call {:si_unique_call 2246} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i11);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i9);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i12);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p14);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i16 := $and.i16($i15, $sub.i16(0, 513));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i17 := $or.i16($i16, 512);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p14, $i17);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 2247} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i18);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 6200);
    call {:si_unique_call 2248} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i19);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.1;
    call {:si_unique_call 2249} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p21, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_12;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 2250} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 6201);
    call {:si_unique_call 2251} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i23);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 11);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    call {:si_unique_call 2252} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 6200);
    call {:si_unique_call 2253} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i26);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 1);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 2254} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i28);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 6202);
    call {:si_unique_call 2255} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i29);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 2256} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i30);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 6232);
    call {:si_unique_call 2257} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i31);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.1, $p32);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i29);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p34, $i33);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p0);
    call {:si_unique_call 2258} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i35);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 6204);
    call {:si_unique_call 2259} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i36);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 2260} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i37);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 6230);
    call {:si_unique_call 2261} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i38);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.1, $p39);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i36);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p41, $i40);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} $i42 := pch_udc_read_csr($p0, 1);
    call {:si_unique_call 2263} {:cexpr "reg"} boogie_si_record_i32($i42);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    call {:si_unique_call 2264} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i43);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 6230);
    call {:si_unique_call 2265} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i44);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.1, $p45);
    call {:si_unique_call 2266} {:cexpr "__cil_tmp40"} boogie_si_record_i16($i46);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    call {:si_unique_call 2267} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i47);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i47, 11);
    call {:si_unique_call 2268} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i48);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i42, $sub.i32(0, 30721));
    call {:si_unique_call 2269} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i49);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, $i48);
    call {:si_unique_call 2270} {:cexpr "reg"} boogie_si_record_i32($i50);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 2271} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i51);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 6232);
    call {:si_unique_call 2272} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i52);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    call {:si_unique_call 2273} {:cexpr "__cil_tmp48"} boogie_si_record_i16($i54);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    call {:si_unique_call 2274} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i55);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32($i55, 15);
    call {:si_unique_call 2275} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i56);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i50, $sub.i32(0, 491521));
    call {:si_unique_call 2276} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i57);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, $i56);
    call {:si_unique_call 2277} {:cexpr "reg"} boogie_si_record_i32($i58);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    call {:si_unique_call 2278} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i59);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} pch_udc_write_csr($p0, $i59, 1);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p0);
    call {:si_unique_call 2280} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i60);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 1224);
    call {:si_unique_call 2281} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i61);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} pch_udc_ep_clear_stall($p63);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p0);
    call {:si_unique_call 2283} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i64);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 1224);
    call {:si_unique_call 2284} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i65);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.1, $p67);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i69 := $and.i8($i68, $sub.i8(0, 65));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p67, $i69);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 1224);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(1, 152));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} pch_udc_ep_clear_stall($p96);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i97, 1376);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i98);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.1, $p100);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i102 := $and.i8($i101, $sub.i8(0, 65));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p100, $i102);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 1224);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i104);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(2, 152));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} pch_udc_ep_clear_stall($p107);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 1528);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p110 := $i2p.i64.ref($i109);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.1, $p111);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i113 := $and.i8($i112, $sub.i8(0, 65));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p111, $i113);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p0);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 1224);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p117, $mul.ref(3, 152));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} pch_udc_ep_clear_stall($p118);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p0);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i120 := $add.i64($i119, 1680);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p121 := $i2p.i64.ref($i120);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.1, $p122);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i124 := $and.i8($i123, $sub.i8(0, 65));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p122, $i124);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, 1224);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p127 := $i2p.i64.ref($i126);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p128, $mul.ref(4, 152));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} pch_udc_ep_clear_stall($p129);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p0);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i130, 1832);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p132 := $i2p.i64.ref($i131);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.1, $p133);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i135 := $and.i8($i134, $sub.i8(0, 65));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p133, $i135);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p0);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 1224);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p138 := $i2p.i64.ref($i137);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p139, $mul.ref(5, 152));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} pch_udc_ep_clear_stall($p140);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p0);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i141, 1984);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p143 := $i2p.i64.ref($i142);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.1, $p144);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i146 := $and.i8($i145, $sub.i8(0, 65));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p144, $i146);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i148 := $add.i64($i147, 1224);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p149 := $i2p.i64.ref($i148);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(6, 152));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} pch_udc_ep_clear_stall($p151);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i153 := $add.i64($i152, 2136);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p154 := $i2p.i64.ref($i153);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.1, $p155);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i157 := $and.i8($i156, $sub.i8(0, 65));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p155, $i157);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i159 := $add.i64($i158, 1224);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p160 := $i2p.i64.ref($i159);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p161, $mul.ref(7, 152));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} pch_udc_ep_clear_stall($p162);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p0);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i164 := $add.i64($i163, 2288);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p165 := $i2p.i64.ref($i164);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.1, $p166);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i168 := $and.i8($i167, $sub.i8(0, 65));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p166, $i168);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.1, $p70);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i72 := $and.i16($i71, $sub.i16(0, 3));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p70, $i72);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p0);
    call {:si_unique_call 2286} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i73);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 6088);
    call {:si_unique_call 2287} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i74);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} spin_unlock($p75);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p0);
    call {:si_unique_call 2289} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i76);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 1208);
    call {:si_unique_call 2290} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i77);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    call {:si_unique_call 2291} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i80);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 24);
    call {:si_unique_call 2292} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i81);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p0);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    call {:si_unique_call 2293} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i85);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 6200);
    call {:si_unique_call 2294} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i86);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    call {:si_unique_call 2295} $i88 := devirtbounce.1($p83, $p84, $p87);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 2296} {:cexpr "ret"} boogie_si_record_i32($i88);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p0);
    call {:si_unique_call 2297} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i89);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 6088);
    call {:si_unique_call 2298} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i90);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p91 := $i2p.i64.ref($i90);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} spin_lock($p91);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const pch_udc_svc_cfg_interrupt: ref;

axiom pch_udc_svc_cfg_interrupt == $sub.ref(0, 229908);

procedure pch_udc_svc_cfg_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.2, $M.3, $CurrAddr, assertsPassed;



implementation pch_udc_svc_cfg_interrupt($p0: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i64;
  var $i7: i64;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i16;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $p47: ref;
  var $i48: i16;
  var $i49: i16;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i8;
  var $i113: i64;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i8;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i64;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i8;
  var $i135: i64;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 2307} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.1, $p2);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i4 := $and.i16($i3, $sub.i16(0, 513));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i5 := $or.i16($i4, 512);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2, $i5);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 2308} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 6228);
    call {:si_unique_call 2309} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i1);
    call {:si_unique_call 2310} {:cexpr "__cil_tmp8"} boogie_si_record_i16($i8);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    call {:si_unique_call 2311} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 15);
    call {:si_unique_call 2312} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i10);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i7);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, $i11);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 2313} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 6200);
    call {:si_unique_call 2314} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 2315} cmdloc_dummy_var_14 := $memset.i8(cmdloc_dummy_var_13, $p16, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_14;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 2316} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 6201);
    call {:si_unique_call 2317} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i18);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 9);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 2318} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 6202);
    call {:si_unique_call 2319} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 2320} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 6228);
    call {:si_unique_call 2321} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i23);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i21);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p26, $i25);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} $i27 := pch_udc_read_csr($p0, 1);
    call {:si_unique_call 2323} {:cexpr "reg"} boogie_si_record_i32($i27);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 2324} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i28);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 6228);
    call {:si_unique_call 2325} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i29);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.1, $p30);
    call {:si_unique_call 2326} {:cexpr "__cil_tmp25"} boogie_si_record_i16($i31);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    call {:si_unique_call 2327} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i32);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 7);
    call {:si_unique_call 2328} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i33);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i27, $sub.i32(0, 1921));
    call {:si_unique_call 2329} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i34);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, $i33);
    call {:si_unique_call 2330} {:cexpr "reg"} boogie_si_record_i32($i35);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    call {:si_unique_call 2331} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i36);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} pch_udc_write_csr($p0, $i36, 1);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 2333} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 1224);
    call {:si_unique_call 2334} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i38);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} pch_udc_ep_clear_stall($p40);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    call {:si_unique_call 2336} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i41);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 1224);
    call {:si_unique_call 2337} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i42);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i46 := $and.i8($i45, $sub.i8(0, 65));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p44, $i46);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 1224);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(1, 152));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} pch_udc_ep_clear_stall($p73);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p0);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 1376);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.1, $p77);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i79 := $and.i8($i78, $sub.i8(0, 65));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p77, $i79);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p0);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 1224);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref(2, 152));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} pch_udc_ep_clear_stall($p84);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 1528);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i89, $sub.i8(0, 65));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p88, $i90);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, 1224);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i92);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref(3, 152));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} pch_udc_ep_clear_stall($p95);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 1680);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p98 := $i2p.i64.ref($i97);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.1, $p99);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i101 := $and.i8($i100, $sub.i8(0, 65));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p99, $i101);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p0);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 1224);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p105, $mul.ref(4, 152));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} pch_udc_ep_clear_stall($p106);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p0);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 1832);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.1, $p110);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i112 := $and.i8($i111, $sub.i8(0, 65));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p110, $i112);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i114 := $add.i64($i113, 1224);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p115 := $i2p.i64.ref($i114);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p116, $mul.ref(5, 152));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} pch_udc_ep_clear_stall($p117);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p0);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 1984);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.1, $p121);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i123 := $and.i8($i122, $sub.i8(0, 65));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p121, $i123);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p0);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i124, 1224);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p126 := $i2p.i64.ref($i125);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p127, $mul.ref(6, 152));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} pch_udc_ep_clear_stall($p128);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i130 := $add.i64($i129, 2136);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p131 := $i2p.i64.ref($i130);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.1, $p132);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i134 := $and.i8($i133, $sub.i8(0, 65));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p132, $i134);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p0);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i136 := $add.i64($i135, 1224);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p137 := $i2p.i64.ref($i136);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(7, 152));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} pch_udc_ep_clear_stall($p139);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 2288);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i141);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.1, $p143);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i145 := $and.i8($i144, $sub.i8(0, 65));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p143, $i145);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.1, $p47);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i49 := $and.i16($i48, $sub.i16(0, 3));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p47, $i49);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    call {:si_unique_call 2339} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i50);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 6088);
    call {:si_unique_call 2340} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i51);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} spin_unlock($p52);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p0);
    call {:si_unique_call 2342} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i53);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 1208);
    call {:si_unique_call 2343} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i54);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    call {:si_unique_call 2344} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i57);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 24);
    call {:si_unique_call 2345} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i58);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 2346} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i62);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 6200);
    call {:si_unique_call 2347} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i63);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    call {:si_unique_call 2348} $i65 := devirtbounce.1($p60, $p61, $p64);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 2349} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p0);
    call {:si_unique_call 2350} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i66);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 6088);
    call {:si_unique_call 2351} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i67);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} spin_lock($p68);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const pch_udc_reconnect: ref;

axiom pch_udc_reconnect == $sub.ref(0, 230940);

procedure pch_udc_reconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_reconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} pch_udc_init($p0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} pch_udc_bit_clr($p0, 1040, 72);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} pch_udc_bit_clr($p0, 1028, 1024);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} ___udelay(4295000);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} ___udelay(4295000);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_init: ref;

axiom pch_udc_init == $sub.ref(0, 231972);

procedure pch_udc_init($p0: ref);
  free requires assertsPassed;



implementation pch_udc_init($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2366} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 2367} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} pch_udc_writel($p0, 1, 1276);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} pch_udc_writel($p0, 3, 1276);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb5, $bb6;

  $bb6:
    assume !(1 == 1);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} ___udelay(4295000);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} pch_udc_writel($p0, 1, 1276);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} pch_udc_writel($p0, 0, 1276);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(1 == 1);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} ___udelay(4295000);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} pch_udc_bit_set($p0, 1040, 127);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} pch_udc_bit_set($p0, 1036, 127);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} pch_udc_bit_set($p0, 1048, 4294967295);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} pch_udc_bit_set($p0, 1044, 4294967295);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i5 := $M.5;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2380} {:cexpr "__cil_tmp10"} boogie_si_record_i8($i7);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} pch_udc_bit_set($p0, 1024, 131080);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} pch_udc_bit_set($p0, 1028, 521077632);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} pch_udc_bit_set($p0, 1024, 131081);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume 1 == 1;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} ___udelay(4295000);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume 1 == 1;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} ___udelay(4295000);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} vslice_dummy_var_71 := printk.ref.ref(.str.1, .str.2);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 233004);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2385} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2387} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2388} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2389} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2390} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_device_status: ref;

axiom pch_udc_read_device_status == $sub.ref(0, 234036);

procedure pch_udc_read_device_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_device_status($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $i1 := pch_udc_readl($p0, 1032);
    call {:si_unique_call 2392} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_csr: ref;

axiom pch_udc_read_csr == $sub.ref(0, 235068);

procedure pch_udc_read_csr($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_csr($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $i6: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} {:cexpr "pch_udc_read_csr:arg:ep"} boogie_si_record_i32($i1);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 320);
    call {:si_unique_call 2394} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i2);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 4);
    call {:si_unique_call 2395} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i3);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    call {:si_unique_call 2396} {:cexpr "reg"} boogie_si_record_i64($i4);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} pch_udc_csr_busy($p0);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} vslice_dummy_var_72 := pch_udc_readl($p0, $i4);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} pch_udc_csr_busy($p0);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $i6 := pch_udc_readl($p0, $i4);
    call {:si_unique_call 2401} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_write_csr: ref;

axiom pch_udc_write_csr == $sub.ref(0, 236100);

procedure pch_udc_write_csr($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;



implementation pch_udc_write_csr($p0: ref, $i1: i64, $i2: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} {:cexpr "pch_udc_write_csr:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 2403} {:cexpr "pch_udc_write_csr:arg:ep"} boogie_si_record_i32($i2);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 320);
    call {:si_unique_call 2404} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i3);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i3, 4);
    call {:si_unique_call 2405} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i4);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    call {:si_unique_call 2406} {:cexpr "reg"} boogie_si_record_i64($i5);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} pch_udc_csr_busy($p0);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} pch_udc_writel($p0, $i1, $i5);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} pch_udc_csr_busy($p0);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_csr_busy: ref;

axiom pch_udc_csr_busy == $sub.ref(0, 237132);

procedure pch_udc_csr_busy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_csr_busy($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i5: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i9: i32;
  var $i4: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $i1 := pch_udc_readl($p0, 1264);
    call {:si_unique_call 2411} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i4 := 200;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 2416} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i15);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 1216);
    call {:si_unique_call 2417} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i16);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    call {:si_unique_call 2418} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i19);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 144);
    call {:si_unique_call 2419} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i20);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} vslice_dummy_var_73 := dev_err.ref.ref.ref($p21, .str.5, .str.6);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i5 := 200;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9 := pch_udc_csr_busy_loop_$bb4($p0, $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9);
    goto $bb4_last;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i5, 1);
    call {:si_unique_call 2412} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} cpu_relax();
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} $i6 := pch_udc_readl($p0, 1264);
    call {:si_unique_call 2415} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5831;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 238164);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} rep_nop();
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    return;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 239196);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} devirtbounce.5(0);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_activate_control_ep: ref;

axiom pch_udc_activate_control_ep == $sub.ref(0, 240228);

procedure pch_udc_activate_control_ep($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_activate_control_ep($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i8;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i32;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i32;
  var $p89: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 2423} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1224);
    call {:si_unique_call 2424} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} pch_udc_clear_ep_control($p4);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i8($i6, 5);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, 1);
    call {:si_unique_call 2426} {:cexpr "__cil_tmp7"} boogie_si_record_i8($i8);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 2427} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i9);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} pch_udc_ep_fifo_flush($p4, $i9);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i8($i11, 5);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i12, 1);
    call {:si_unique_call 2429} {:cexpr "__cil_tmp9"} boogie_si_record_i8($i13);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    call {:si_unique_call 2430} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i14);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} pch_udc_ep_set_bufsz($p4, 16, $i14);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} pch_udc_ep_set_maxpkt($p4, 64);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p4);
    call {:si_unique_call 2433} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i15);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 88);
    call {:si_unique_call 2434} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i16);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, $0.ref);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p4);
    call {:si_unique_call 2435} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i18);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 80);
    call {:si_unique_call 2436} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i19);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, $0.ref);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p4);
    call {:si_unique_call 2437} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i21);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 72);
    call {:si_unique_call 2438} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i22);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p23, 0);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p4);
    call {:si_unique_call 2439} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i24);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 64);
    call {:si_unique_call 2440} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i25);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p26, 0);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    call {:si_unique_call 2441} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i27);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 1224);
    call {:si_unique_call 2442} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i28);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1, 152));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} pch_udc_clear_ep_control($p31);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref(1, 152)), $mul.ref(136, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i8($i33, 5);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i34, 1);
    call {:si_unique_call 2444} {:cexpr "__cil_tmp23"} boogie_si_record_i8($i35);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    call {:si_unique_call 2445} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i36);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} pch_udc_ep_fifo_flush($p31, $i36);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p30, $mul.ref(1, 152)), $mul.ref(136, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i8($i38, 5);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i40 := $and.i8($i39, 1);
    call {:si_unique_call 2447} {:cexpr "__cil_tmp25"} boogie_si_record_i8($i40);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    call {:si_unique_call 2448} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i41);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} pch_udc_ep_set_bufsz($p31, 16, $i41);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} pch_udc_ep_set_maxpkt($p31, 64);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p31);
    call {:si_unique_call 2451} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i42);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 96);
    call {:si_unique_call 2452} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i43);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64(33554432);
    call {:si_unique_call 2453} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i46);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} pch_udc_write_csr($p45, $i46, 1);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p31);
    call {:si_unique_call 2455} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i47);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 80);
    call {:si_unique_call 2456} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i48);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} pch_udc_init_setup_buff($p50);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p31);
    call {:si_unique_call 2458} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i51);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 64);
    call {:si_unique_call 2459} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i52);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.1, $p53);
    call {:si_unique_call 2460} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i54);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    call {:si_unique_call 2461} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i55);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} pch_udc_ep_set_subptr($p31, $i55);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p31);
    call {:si_unique_call 2463} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i56);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 72);
    call {:si_unique_call 2464} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i57);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.1, $p58);
    call {:si_unique_call 2465} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i59);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    call {:si_unique_call 2466} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i60);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} pch_udc_ep_set_ddptr($p31, $i60);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p31);
    call {:si_unique_call 2468} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i61);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 88);
    call {:si_unique_call 2469} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i62);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, 134217728);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p31);
    call {:si_unique_call 2470} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i66);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 88);
    call {:si_unique_call 2471} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i67);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    call {:si_unique_call 2472} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i70);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 8);
    call {:si_unique_call 2473} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i71);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p0);
    call {:si_unique_call 2474} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i72);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 6184);
    call {:si_unique_call 2475} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i73);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.1, $p74);
    call {:si_unique_call 2476} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i75);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i64.i32($i75);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i71);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p77, $i76);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p31);
    call {:si_unique_call 2477} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i78);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 88);
    call {:si_unique_call 2478} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i79);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    call {:si_unique_call 2479} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i82);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 12);
    call {:si_unique_call 2480} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i83);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p31);
    call {:si_unique_call 2481} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i84);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 72);
    call {:si_unique_call 2482} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i85);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i85);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.1, $p86);
    call {:si_unique_call 2483} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i87);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i87);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i83);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p89, $i88);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} pch_udc_ep_clear_nak($p31);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_enable_interrupts: ref;

axiom pch_udc_enable_interrupts == $sub.ref(0, 241260);

procedure pch_udc_enable_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_enable_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} {:cexpr "pch_udc_enable_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 2486} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} pch_udc_bit_clr($p0, 1040, $i2);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_ep_control: ref;

axiom pch_udc_clear_ep_control == $sub.ref(0, 242292);

procedure pch_udc_clear_ep_control($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_ep_control($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_bufsz: ref;

axiom pch_udc_ep_set_bufsz == $sub.ref(0, 243324);

procedure pch_udc_ep_set_bufsz($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_bufsz($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} {:cexpr "pch_udc_ep_set_bufsz:arg:buf_size"} boogie_si_record_i32($i1);
    call {:si_unique_call 2489} {:cexpr "pch_udc_ep_set_bufsz:arg:ep_in"} boogie_si_record_i32($i2);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} $i9 := pch_udc_ep_readl($p0, 12);
    call {:si_unique_call 2498} {:cexpr "data"} boogie_si_record_i32($i9);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 65535);
    call {:si_unique_call 2499} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i10);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i1, 16);
    call {:si_unique_call 2500} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i11);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, $i10);
    call {:si_unique_call 2501} {:cexpr "data"} boogie_si_record_i32($i12);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    call {:si_unique_call 2502} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i13);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} pch_udc_ep_writel($p0, $i13, 12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} $i4 := pch_udc_ep_readl($p0, 8);
    call {:si_unique_call 2491} {:cexpr "data"} boogie_si_record_i32($i4);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 65535);
    call {:si_unique_call 2492} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i5);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i4, $sub.i32(0, 65536));
    call {:si_unique_call 2493} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i6);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, $i5);
    call {:si_unique_call 2494} {:cexpr "data"} boogie_si_record_i32($i7);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    call {:si_unique_call 2495} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i8);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} pch_udc_ep_writel($p0, $i8, 8);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_set_maxpkt: ref;

axiom pch_udc_ep_set_maxpkt == $sub.ref(0, 244356);

procedure pch_udc_ep_set_maxpkt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_maxpkt($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} {:cexpr "pch_udc_ep_set_maxpkt:arg:pkt_size"} boogie_si_record_i32($i1);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} $i2 := pch_udc_ep_readl($p0, 12);
    call {:si_unique_call 2506} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 65535);
    call {:si_unique_call 2507} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i3);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, $sub.i32(0, 65536));
    call {:si_unique_call 2508} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i4);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, $i3);
    call {:si_unique_call 2509} {:cexpr "data"} boogie_si_record_i32($i5);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    call {:si_unique_call 2510} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} pch_udc_ep_writel($p0, $i6, 12);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_subptr: ref;

axiom pch_udc_ep_set_subptr == $sub.ref(0, 245388);

procedure pch_udc_ep_set_subptr($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_subptr($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} {:cexpr "pch_udc_ep_set_subptr:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 2513} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} pch_udc_ep_writel($p0, $i2, 16);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_nak: ref;

axiom pch_udc_ep_set_nak == $sub.ref(0, 246420);

procedure pch_udc_ep_set_nak($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_nak($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} pch_udc_ep_bit_set($p0, 0, 128);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    return;
}



const empty_req_queue: ref;

axiom empty_req_queue == $sub.ref(0, 247452);

procedure empty_req_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation empty_req_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, $sub.i8(0, 65));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i4 := $or.i8($i3, 64);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, $i4);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 2516} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i5);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 120);
    call {:si_unique_call 2517} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} $i8 := list_empty($p7);
    call {:si_unique_call 2519} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i10, $i11, $p12, $p13, $p14, $p15, $i16, $i17 := empty_req_queue_loop_$bb4($p0, $p7, $i10, $i11, $p12, $p13, $p14, $p15, $i16, $i17);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 2520} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i10);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 120);
    call {:si_unique_call 2521} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i11);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} complete_req($p0, $p15, $sub.i32(0, 108));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} $i16 := list_empty($p7);
    call {:si_unique_call 2524} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 248484);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 2525} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 249516);

procedure ldv_spin_lock_1($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_1($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} _raw_spin_lock($p1);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 250548);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 251580);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 2527} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 144);
    call {:si_unique_call 2528} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} $p4 := dev_get_drvdata($p3);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pch_udc_disable_interrupts: ref;

axiom pch_udc_disable_interrupts == $sub.ref(0, 252612);

procedure pch_udc_disable_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_disable_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} {:cexpr "pch_udc_disable_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 2531} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} pch_udc_bit_set($p0, 1040, $i2);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_set_disconnect: ref;

axiom pch_udc_set_disconnect == $sub.ref(0, 253644);

procedure pch_udc_set_disconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} pch_udc_bit_set($p0, 1028, 1024);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 254676);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} $p1 := external_alloc();
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 255708);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2535} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2536} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 256740);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2537} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2538} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2539} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 257772);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 258804);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2540} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2541} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_enable_wake: ref;

axiom pci_enable_wake == $sub.ref(0, 259836);

procedure pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} {:cexpr "pci_enable_wake:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2543} {:cexpr "pci_enable_wake:arg:enable"} boogie_si_record_i1($i2);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 2544} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i5);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2545} {:cexpr "__cil_tmp7"} boogie_si_record_i8($i7);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1(0);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} $i10 := __pci_enable_wake($p0, $i1, $i8, $i9);
    call {:si_unique_call 2547} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __pci_enable_wake: ref;

axiom __pci_enable_wake == $sub.ref(0, 260868);

procedure __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2548} {:cexpr "__pci_enable_wake:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2549} {:cexpr "__pci_enable_wake:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 2550} {:cexpr "__pci_enable_wake:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2551} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2552} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 261900);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 262932);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2553} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2554} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 263964);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2555} {:cexpr "pci_choose_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2556} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2557} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_del_gadget_udc: ref;

axiom usb_del_gadget_udc == $sub.ref(0, 264996);

procedure usb_del_gadget_udc($p0: ref);
  free requires assertsPassed;



implementation usb_del_gadget_udc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    return;
}



const dma_pool_destroy: ref;

axiom dma_pool_destroy == $sub.ref(0, 266028);

procedure dma_pool_destroy($p0: ref);
  free requires assertsPassed;



implementation dma_pool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    return;
}



const dma_pool_free: ref;

axiom dma_pool_free == $sub.ref(0, 267060);

procedure dma_pool_free($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation dma_pool_free($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} {:cexpr "dma_pool_free:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    return;
}



const pch_vbus_gpio_free: ref;

axiom pch_vbus_gpio_free == $sub.ref(0, 268092);

procedure pch_vbus_gpio_free($p0: ref);
  free requires assertsPassed;



implementation pch_vbus_gpio_free($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 2559} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 6244);
    call {:si_unique_call 2560} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    call {:si_unique_call 2561} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i4);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 2566} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 6240);
    call {:si_unique_call 2567} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    call {:si_unique_call 2568} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i14);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 2569} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 6240);
    call {:si_unique_call 2570} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    call {:si_unique_call 2571} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i19);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} gpio_free($i19);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 2562} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 6244);
    call {:si_unique_call 2563} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    call {:si_unique_call 2564} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} free_irq($i9, $p10);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_exit: ref;

axiom pch_udc_exit == $sub.ref(0, 269124);

procedure pch_udc_exit($p0: ref);
  free requires assertsPassed;



implementation pch_udc_exit($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} pch_udc_bit_set($p0, 1040, 127);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} pch_udc_bit_set($p0, 1048, 4294967295);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} pch_udc_set_disconnect($p0);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 270156);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 271188);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 272220);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2578} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    return;
}



const device_unregister: ref;

axiom device_unregister == $sub.ref(0, 273252);

procedure device_unregister($p0: ref);
  free requires assertsPassed;



implementation device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 274284);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 2579} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 144);
    call {:si_unique_call 2580} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} vslice_dummy_var_74 := dev_set_drvdata($p4, $p1);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 275316);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2582} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2583} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gpio_free: ref;

axiom gpio_free == $sub.ref(0, 276348);

procedure gpio_free($i0: i32);
  free requires assertsPassed;



implementation gpio_free($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} {:cexpr "gpio_free:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 277380);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 2586} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} ldv_check_alloc_flags($i1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2588} $p2 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2589} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 278412);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2591} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2592} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} $p5 := external_alloc();
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 279444);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 2595} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} $p2 := external_alloc();
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_udc_pcd_init: ref;

axiom pch_udc_pcd_init == $sub.ref(0, 280476);

procedure pch_udc_pcd_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation pch_udc_pcd_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} pch_udc_init($p0);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} pch_udc_pcd_reinit($p0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} vslice_dummy_var_75 := pch_vbus_gpio_init($p0, $i1);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 281508);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 2601} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 2603} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 282540);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    return;
}



const pci_try_set_mwi: ref;

axiom pci_try_set_mwi == $sub.ref(0, 283572);

procedure pci_try_set_mwi($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_try_set_mwi($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2604} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2605} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 284604);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 285636);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    return;
}



const init_dma_pools: ref;

axiom init_dma_pools == $sub.ref(0, 286668);

procedure init_dma_pools($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation init_dma_pools($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $i139: i64;
  var $i140: i64;
  var $i141: i64;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i64;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $i27: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 2606} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 6168);
    call {:si_unique_call 2607} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 2608} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 1216);
    call {:si_unique_call 2609} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    call {:si_unique_call 2610} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i7);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 144);
    call {:si_unique_call 2611} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i8);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} $p10 := dma_pool_create(.str.76, $p9, 16, 0, 0);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i2);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p10);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2613} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 2614} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i13);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 6168);
    call {:si_unique_call 2615} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    call {:si_unique_call 2616} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, $i12);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 2622} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i28);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 6176);
    call {:si_unique_call 2623} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i29);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 2624} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i30);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 1216);
    call {:si_unique_call 2625} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i31);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    call {:si_unique_call 2626} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i34);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 144);
    call {:si_unique_call 2627} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i35);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} $p37 := dma_pool_create(.str.79, $p36, 16, 0, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i29);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, $p37);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2629} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i39);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 2630} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 6176);
    call {:si_unique_call 2631} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    call {:si_unique_call 2632} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i44);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, $i39);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p0);
    call {:si_unique_call 2638} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i54);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 6176);
    call {:si_unique_call 2639} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i55);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i58 := $add.i64(152, 64);
    call {:si_unique_call 2640} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i58);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i59 := $add.i64(1224, $i58);
    call {:si_unique_call 2641} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i59);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p0);
    call {:si_unique_call 2642} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i60);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, $i59);
    call {:si_unique_call 2643} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i61);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $p63 := ldv_dma_pool_alloc_21($p57, 208, $p62);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2645} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i65);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p64);
    call {:si_unique_call 2646} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i66);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, $i65);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i76 := $add.i64(152, 80);
    call {:si_unique_call 2652} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i76);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i77 := $add.i64(1224, $i76);
    call {:si_unique_call 2653} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i77);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p0);
    call {:si_unique_call 2654} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i78);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, $i77);
    call {:si_unique_call 2655} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i79);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p80, $p63);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p0);
    call {:si_unique_call 2656} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i81);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 6168);
    call {:si_unique_call 2657} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i82);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i85 := $add.i64(152, 72);
    call {:si_unique_call 2658} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i85);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i86 := $add.i64(1224, $i85);
    call {:si_unique_call 2659} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i86);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p0);
    call {:si_unique_call 2660} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i87);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, $i86);
    call {:si_unique_call 2661} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i88);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} $p90 := ldv_dma_pool_alloc_22($p84, 208, $p89);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2663} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i92);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p91);
    call {:si_unique_call 2664} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i93);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, $i92);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i103 := $add.i64(152, 88);
    call {:si_unique_call 2670} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i103);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i104 := $add.i64(1224, $i103);
    call {:si_unique_call 2671} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i104);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p0);
    call {:si_unique_call 2672} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i105);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, $i104);
    call {:si_unique_call 2673} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i106);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p107, $p90);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i108 := $add.i64(0, 80);
    call {:si_unique_call 2674} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i108);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i109 := $add.i64(1224, $i108);
    call {:si_unique_call 2675} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i109);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p0);
    call {:si_unique_call 2676} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i110);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, $i109);
    call {:si_unique_call 2677} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i111);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p112 := $i2p.i64.ref($i111);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p112, $0.ref);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i113 := $add.i64(0, 64);
    call {:si_unique_call 2678} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i113);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i114 := $add.i64(1224, $i113);
    call {:si_unique_call 2679} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i114);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p0);
    call {:si_unique_call 2680} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i115);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, $i114);
    call {:si_unique_call 2681} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i116);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p117, 0);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i118 := $add.i64(0, 88);
    call {:si_unique_call 2682} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i118);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i119 := $add.i64(1224, $i118);
    call {:si_unique_call 2683} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i119);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p0);
    call {:si_unique_call 2684} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i120);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, $i119);
    call {:si_unique_call 2685} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i121);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p122, $0.ref);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i123 := $add.i64(0, 72);
    call {:si_unique_call 2686} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i123);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i124 := $add.i64(1224, $i123);
    call {:si_unique_call 2687} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i124);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p0);
    call {:si_unique_call 2688} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i125);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, $i124);
    call {:si_unique_call 2689} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i126);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p127 := $i2p.i64.ref($i126);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p127, 0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p0);
    call {:si_unique_call 2690} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i128);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, 6192);
    call {:si_unique_call 2691} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i129);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} $p130 := kzalloc(64, 208);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p131 := $i2p.i64.ref($i129);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p131, $p130);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2693} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i132);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p0);
    call {:si_unique_call 2694} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i133);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i134 := $add.i64($i133, 6192);
    call {:si_unique_call 2695} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i134);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p135 := $i2p.i64.ref($i134);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.1, $p135);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    call {:si_unique_call 2696} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i137);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, $i132);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p0);
    call {:si_unique_call 2697} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i139);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i140 := $add.i64($i139, 6184);
    call {:si_unique_call 2698} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i140);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p0);
    call {:si_unique_call 2699} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i141);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i141, 1216);
    call {:si_unique_call 2700} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i142);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p143 := $i2p.i64.ref($i142);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.1, $p143);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    call {:si_unique_call 2701} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i145);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 144);
    call {:si_unique_call 2702} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i146);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p147 := $i2p.i64.ref($i146);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p0);
    call {:si_unique_call 2703} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i148);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i149 := $add.i64($i148, 6192);
    call {:si_unique_call 2704} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i149);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p150 := $i2p.i64.ref($i149);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.1, $p150);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} $i152 := dma_map_single_attrs($p147, $p151, 64, 2, $0.ref);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p153 := $i2p.i64.ref($i140);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p153, $i152);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb14:
    assume $i138 == 1;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i94 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p0);
    call {:si_unique_call 2665} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i95);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 1216);
    call {:si_unique_call 2666} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i96);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    call {:si_unique_call 2667} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i99);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 144);
    call {:si_unique_call 2668} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i100);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} vslice_dummy_var_79 := dev_err.ref.ref.ref($p101, .str.82, .str.78);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i67 == 1;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p0);
    call {:si_unique_call 2647} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i68);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 1216);
    call {:si_unique_call 2648} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i69);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    call {:si_unique_call 2649} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i72);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 144);
    call {:si_unique_call 2650} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i73);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} vslice_dummy_var_78 := dev_err.ref.ref.ref($p74, .str.81, .str.78);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i45 == 1;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 2633} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i46);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1216);
    call {:si_unique_call 2634} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i47);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    call {:si_unique_call 2635} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i50);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 144);
    call {:si_unique_call 2636} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i51);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} vslice_dummy_var_77 := dev_err.ref.ref.ref($p52, .str.80, .str.78);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 2617} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 1216);
    call {:si_unique_call 2618} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 2619} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i23);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 144);
    call {:si_unique_call 2620} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i24);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} vslice_dummy_var_76 := dev_err.ref.ref.ref($p25, .str.77, .str.78);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb3;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 287700);

procedure dev_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2706} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2707} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gadget_release: ref;

axiom gadget_release == $sub.ref(0, 288732);

procedure gadget_release($p0: ref);
  free requires assertsPassed;



implementation gadget_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} kfree($p3);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    return;
}



const device_register: ref;

axiom device_register == $sub.ref(0, 289764);

procedure device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2710} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_add_gadget_udc: ref;

axiom usb_add_gadget_udc == $sub.ref(0, 290796);

procedure usb_add_gadget_udc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_gadget_udc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2712} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_pool_create: ref;

axiom dma_pool_create == $sub.ref(0, 291828);

procedure dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} {:cexpr "dma_pool_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2715} {:cexpr "dma_pool_create:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2716} {:cexpr "dma_pool_create:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} $p5 := external_alloc();
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_dma_pool_alloc_21: ref;

axiom ldv_dma_pool_alloc_21 == $sub.ref(0, 292860);

procedure ldv_dma_pool_alloc_21($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_21($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var vslice_dummy_var_80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} {:cexpr "ldv_dma_pool_alloc_21:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} ldv_check_alloc_flags($i1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} vslice_dummy_var_80 := dma_pool_alloc($p0, $i1, $p2);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const ldv_dma_pool_alloc_22: ref;

axiom ldv_dma_pool_alloc_22 == $sub.ref(0, 293892);

procedure ldv_dma_pool_alloc_22($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_22($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var vslice_dummy_var_81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} {:cexpr "ldv_dma_pool_alloc_22:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} ldv_check_alloc_flags($i1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} vslice_dummy_var_81 := dma_pool_alloc($p0, $i1, $p2);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 294924);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i32;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2725} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} $p5 := get_dma_ops($p0);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    call {:si_unique_call 2727} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i6);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} kmemcheck_mark_initialized($p1, $i6);
    call {:si_unique_call 2729} {:cexpr "dma_map_single_attrs:arg:__cil_tmp14"} boogie_si_record_i32($i3);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 2731} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 2732} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i9);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    call {:si_unique_call 2733} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i10);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} $i11 := __builtinx_expect.i64.i64($i10, 0);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    call {:si_unique_call 2735} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 2737} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} $i15 := __phys_addr($i14);
    call {:si_unique_call 2739} {:cexpr "tmp___2"} boogie_si_record_i64($i15);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p5);
    call {:si_unique_call 2740} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 24);
    call {:si_unique_call 2741} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i64($i15, 12);
    call {:si_unique_call 2742} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($sub.i64(0, 24189255811072), $i20);
    call {:si_unique_call 2743} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i21);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    call {:si_unique_call 2744} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i23);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 4095);
    call {:si_unique_call 2745} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i24);
    call {:si_unique_call 2746} $i25 := devirtbounce.6($p19, $p0, $p22, $i24, $i2, $i3, $p4);
    call {:si_unique_call 2747} {:cexpr "addr"} boogie_si_record_i64($i25);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    call {:si_unique_call 2748} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i26);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} $i27 := __phys_addr($i26);
    call {:si_unique_call 2750} {:cexpr "tmp___3"} boogie_si_record_i64($i27);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i64($i27, 12);
    call {:si_unique_call 2751} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i28);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($sub.i64(0, 24189255811072), $i28);
    call {:si_unique_call 2752} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i29);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p1);
    call {:si_unique_call 2753} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i31);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 4095);
    call {:si_unique_call 2754} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i32);
    call {:si_unique_call 2755} {:cexpr "dma_map_single_attrs:arg:__cil_tmp32"} boogie_si_record_i32($i3);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1(1);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} debug_dma_map_page($p0, $p30, $i32, $i2, $i3, $i25, $i33);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i13 == 1;
    call {:si_unique_call 2736} devirtbounce.3(0, .str.7, 19, 12);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 295956);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 296988);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2758} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2759} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2760} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 298020);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2762} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2763} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 2764} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 2765} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 299052);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 32);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} ldv_blast_assert();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const dma_pool_alloc: ref;

axiom dma_pool_alloc == $sub.ref(0, 300084);

procedure dma_pool_alloc($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_pool_alloc($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} {:cexpr "dma_pool_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} $p3 := external_alloc();
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_blast_assert: ref;

axiom ldv_blast_assert == $sub.ref(0, 301116);

procedure ldv_blast_assert();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_blast_assert()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2770} __VERIFIER_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 302148);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2771} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2772} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2773} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 2774} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_pcd_reinit: ref;

axiom pch_udc_pcd_reinit == $sub.ref(0, 303180);

procedure pch_udc_pcd_reinit($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation pch_udc_pcd_reinit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i64;
  var $p129: ref;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i8;
  var $i150: i8;
  var $i151: i64;
  var $i152: i64;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i8;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $p160: ref;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i64;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i1;
  var $i173: i64;
  var $i174: i64;
  var $i175: i64;
  var $i176: i64;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i32;
  var $i181: i64;
  var $p182: ref;
  var $i183: i64;
  var $i184: i64;
  var $i185: i64;
  var $i186: i64;
  var $p187: ref;
  var $i188: i8;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i64;
  var $p193: ref;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $i197: i64;
  var $i198: i64;
  var $p199: ref;
  var $i200: i64;
  var $i201: i64;
  var $p202: ref;
  var $i203: i64;
  var $i204: i64;
  var $p205: ref;
  var $i206: i64;
  var $i207: i64;
  var $i208: i64;
  var $i209: i64;
  var $p210: ref;
  var $i211: i64;
  var $i212: i64;
  var $i213: i64;
  var $i214: i64;
  var $p215: ref;
  var $i216: i64;
  var $i217: i64;
  var $i218: i64;
  var $i219: i64;
  var $p220: ref;
  var $i221: i64;
  var $i222: i64;
  var $i223: i64;
  var $i224: i64;
  var $p225: ref;
  var $i226: i64;
  var $i227: i64;
  var $i228: i64;
  var $i229: i64;
  var $i230: i64;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i64;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i64;
  var $p239: ref;
  var $i240: i64;
  var $i241: i64;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $i246: i64;
  var $p247: ref;
  var $p248: ref;
  var $i249: i8;
  var $i250: i8;
  var $i251: i8;
  var $i252: i64;
  var $i253: i64;
  var $p254: ref;
  var $p255: ref;
  var $i256: i8;
  var $i257: i8;
  var $i258: i64;
  var $i259: i64;
  var $p260: ref;
  var $i261: i64;
  var $i262: i64;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $i266: i64;
  var $i267: i64;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $i271: i8;
  var $i272: i32;
  var $i273: i1;
  var $i274: i64;
  var $i275: i64;
  var $i276: i64;
  var $i277: i64;
  var $p278: ref;
  var $i279: i8;
  var $i280: i32;
  var $i281: i32;
  var $i282: i32;
  var $i283: i64;
  var $p284: ref;
  var $i285: i64;
  var $i286: i64;
  var $i287: i64;
  var $i288: i64;
  var $p289: ref;
  var $i290: i8;
  var $i291: i32;
  var $i292: i32;
  var $i293: i64;
  var $p294: ref;
  var $i295: i64;
  var $i296: i64;
  var $p297: ref;
  var $i298: i64;
  var $i299: i64;
  var $p300: ref;
  var $i301: i64;
  var $i302: i64;
  var $p303: ref;
  var $i304: i64;
  var $i305: i64;
  var $p306: ref;
  var $i307: i64;
  var $i308: i64;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $i313: i64;
  var $p314: ref;
  var $p315: ref;
  var $i316: i8;
  var $i317: i8;
  var $i318: i8;
  var $i319: i64;
  var $i320: i64;
  var $p321: ref;
  var $p322: ref;
  var $i323: i8;
  var $i324: i8;
  var $i325: i8;
  var $i326: i64;
  var $i327: i64;
  var $p328: ref;
  var $i329: i64;
  var $i330: i64;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i334: i64;
  var $i335: i64;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i1;
  var $i342: i64;
  var $i343: i64;
  var $i344: i64;
  var $i345: i64;
  var $p346: ref;
  var $i347: i8;
  var $i348: i32;
  var $i349: i32;
  var $i350: i32;
  var $i351: i64;
  var $p352: ref;
  var $i353: i64;
  var $i354: i64;
  var $i355: i64;
  var $i356: i64;
  var $p357: ref;
  var $i358: i8;
  var $i359: i32;
  var $i360: i32;
  var $i361: i64;
  var $p362: ref;
  var $i363: i64;
  var $i364: i64;
  var $p365: ref;
  var $i366: i64;
  var $i367: i64;
  var $p368: ref;
  var $i369: i64;
  var $i370: i64;
  var $p371: ref;
  var $i372: i64;
  var $i373: i64;
  var $p374: ref;
  var $i375: i64;
  var $i376: i64;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $i380: i64;
  var $i381: i64;
  var $p382: ref;
  var $p383: ref;
  var $i384: i8;
  var $i385: i8;
  var $i386: i8;
  var $i387: i64;
  var $i388: i64;
  var $p389: ref;
  var $p390: ref;
  var $i391: i8;
  var $i392: i8;
  var $i393: i64;
  var $i394: i64;
  var $p395: ref;
  var $i396: i64;
  var $i397: i64;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $i401: i64;
  var $i402: i64;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $i406: i8;
  var $i407: i32;
  var $i408: i1;
  var $i409: i64;
  var $i410: i64;
  var $i411: i64;
  var $i412: i64;
  var $p413: ref;
  var $i414: i8;
  var $i415: i32;
  var $i416: i32;
  var $i417: i32;
  var $i418: i64;
  var $p419: ref;
  var $i420: i64;
  var $i421: i64;
  var $i422: i64;
  var $i423: i64;
  var $p424: ref;
  var $i425: i8;
  var $i426: i32;
  var $i427: i32;
  var $i428: i64;
  var $p429: ref;
  var $i430: i64;
  var $i431: i64;
  var $p432: ref;
  var $i433: i64;
  var $i434: i64;
  var $p435: ref;
  var $i436: i64;
  var $i437: i64;
  var $p438: ref;
  var $i439: i64;
  var $i440: i64;
  var $p441: ref;
  var $i442: i64;
  var $i443: i64;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $i447: i64;
  var $i448: i64;
  var $p449: ref;
  var $p450: ref;
  var $i451: i8;
  var $i452: i8;
  var $i453: i8;
  var $i454: i64;
  var $i455: i64;
  var $p456: ref;
  var $p457: ref;
  var $i458: i8;
  var $i459: i8;
  var $i460: i8;
  var $i461: i64;
  var $i462: i64;
  var $p463: ref;
  var $i464: i64;
  var $i465: i64;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $i469: i64;
  var $i470: i64;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $i474: i8;
  var $i475: i32;
  var $i476: i1;
  var $i477: i64;
  var $i478: i64;
  var $i479: i64;
  var $i480: i64;
  var $p481: ref;
  var $i482: i8;
  var $i483: i32;
  var $i484: i32;
  var $i485: i32;
  var $i486: i64;
  var $p487: ref;
  var $i488: i64;
  var $i489: i64;
  var $i490: i64;
  var $i491: i64;
  var $p492: ref;
  var $i493: i8;
  var $i494: i32;
  var $i495: i32;
  var $i496: i64;
  var $p497: ref;
  var $i498: i64;
  var $i499: i64;
  var $p500: ref;
  var $i501: i64;
  var $i502: i64;
  var $p503: ref;
  var $i504: i64;
  var $i505: i64;
  var $p506: ref;
  var $i507: i64;
  var $i508: i64;
  var $p509: ref;
  var $i510: i64;
  var $i511: i64;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $i515: i64;
  var $i516: i64;
  var $p517: ref;
  var $p518: ref;
  var $i519: i8;
  var $i520: i8;
  var $i521: i8;
  var $i522: i64;
  var $i523: i64;
  var $p524: ref;
  var $p525: ref;
  var $i526: i8;
  var $i527: i8;
  var $i528: i64;
  var $i529: i64;
  var $p530: ref;
  var $i531: i64;
  var $i532: i64;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $i536: i64;
  var $i537: i64;
  var $p538: ref;
  var $p539: ref;
  var $p540: ref;
  var $i541: i8;
  var $i542: i32;
  var $i543: i1;
  var $i544: i64;
  var $i545: i64;
  var $i546: i64;
  var $i547: i64;
  var $p548: ref;
  var $i549: i8;
  var $i550: i32;
  var $i551: i32;
  var $i552: i32;
  var $i553: i64;
  var $p554: ref;
  var $i555: i64;
  var $i556: i64;
  var $i557: i64;
  var $i558: i64;
  var $p559: ref;
  var $i560: i8;
  var $i561: i32;
  var $i562: i32;
  var $i563: i64;
  var $p564: ref;
  var $i565: i64;
  var $i566: i64;
  var $p567: ref;
  var $i568: i64;
  var $i569: i64;
  var $p570: ref;
  var $i571: i64;
  var $i572: i64;
  var $p573: ref;
  var $i574: i64;
  var $i575: i64;
  var $p576: ref;
  var $i577: i64;
  var $i578: i64;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $i582: i64;
  var $i583: i64;
  var $p584: ref;
  var $p585: ref;
  var $i586: i8;
  var $i587: i8;
  var $i588: i8;
  var $i589: i64;
  var $i590: i64;
  var $p591: ref;
  var $p592: ref;
  var $i593: i8;
  var $i594: i8;
  var $i595: i8;
  var $i596: i64;
  var $i597: i64;
  var $p598: ref;
  var $i599: i64;
  var $i600: i64;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $i604: i64;
  var $i605: i64;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $i609: i8;
  var $i610: i32;
  var $i611: i1;
  var $i612: i64;
  var $i613: i64;
  var $i614: i64;
  var $i615: i64;
  var $p616: ref;
  var $i617: i8;
  var $i618: i32;
  var $i619: i32;
  var $i620: i32;
  var $i621: i64;
  var $p622: ref;
  var $i623: i64;
  var $i624: i64;
  var $i625: i64;
  var $i626: i64;
  var $p627: ref;
  var $i628: i8;
  var $i629: i32;
  var $i630: i32;
  var $i631: i64;
  var $p632: ref;
  var $i633: i64;
  var $i634: i64;
  var $p635: ref;
  var $i636: i64;
  var $i637: i64;
  var $p638: ref;
  var $i639: i64;
  var $i640: i64;
  var $p641: ref;
  var $i642: i64;
  var $i643: i64;
  var $p644: ref;
  var $i645: i64;
  var $i646: i64;
  var $p647: ref;
  var $p648: ref;
  var $p649: ref;
  var $i650: i64;
  var $i651: i64;
  var $p652: ref;
  var $p653: ref;
  var $i654: i8;
  var $i655: i8;
  var $i656: i8;
  var $i657: i64;
  var $i658: i64;
  var $p659: ref;
  var $p660: ref;
  var $i661: i8;
  var $i662: i8;
  var $i663: i64;
  var $i664: i64;
  var $p665: ref;
  var $i666: i64;
  var $i667: i64;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $i671: i64;
  var $i672: i64;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $i676: i8;
  var $i677: i32;
  var $i678: i1;
  var $i679: i64;
  var $i680: i64;
  var $i681: i64;
  var $i682: i64;
  var $p683: ref;
  var $i684: i8;
  var $i685: i32;
  var $i686: i32;
  var $i687: i32;
  var $i688: i64;
  var $p689: ref;
  var $i690: i64;
  var $i691: i64;
  var $i692: i64;
  var $i693: i64;
  var $p694: ref;
  var $i695: i8;
  var $i696: i32;
  var $i697: i32;
  var $i698: i64;
  var $p699: ref;
  var $i700: i64;
  var $i701: i64;
  var $p702: ref;
  var $i703: i64;
  var $i704: i64;
  var $p705: ref;
  var $i706: i64;
  var $i707: i64;
  var $p708: ref;
  var $i709: i64;
  var $i710: i64;
  var $p711: ref;
  var $i712: i64;
  var $i713: i64;
  var $p714: ref;
  var $p715: ref;
  var $p716: ref;
  var $i717: i64;
  var $i718: i64;
  var $p719: ref;
  var $p720: ref;
  var $i721: i8;
  var $i722: i8;
  var $i723: i8;
  var $i724: i64;
  var $i725: i64;
  var $p726: ref;
  var $p727: ref;
  var $i728: i8;
  var $i729: i8;
  var $i730: i8;
  var $i731: i64;
  var $i732: i64;
  var $p733: ref;
  var $i734: i64;
  var $i735: i64;
  var $p736: ref;
  var $p737: ref;
  var $p738: ref;
  var $i739: i64;
  var $i740: i64;
  var $p741: ref;
  var $p742: ref;
  var $p743: ref;
  var $i744: i8;
  var $i745: i32;
  var $i746: i1;
  var $i747: i64;
  var $i748: i64;
  var $i749: i64;
  var $i750: i64;
  var $p751: ref;
  var $i752: i8;
  var $i753: i32;
  var $i754: i32;
  var $i755: i32;
  var $i756: i64;
  var $p757: ref;
  var $i758: i64;
  var $i759: i64;
  var $i760: i64;
  var $i761: i64;
  var $p762: ref;
  var $i763: i8;
  var $i764: i32;
  var $i765: i32;
  var $i766: i64;
  var $p767: ref;
  var $i768: i64;
  var $i769: i64;
  var $p770: ref;
  var $i771: i64;
  var $i772: i64;
  var $p773: ref;
  var $i774: i64;
  var $i775: i64;
  var $p776: ref;
  var $i777: i64;
  var $i778: i64;
  var $p779: ref;
  var $i780: i64;
  var $i781: i64;
  var $p782: ref;
  var $p783: ref;
  var $p784: ref;
  var $i785: i64;
  var $i786: i64;
  var $p787: ref;
  var $p788: ref;
  var $i789: i8;
  var $i790: i8;
  var $i791: i8;
  var $i792: i64;
  var $i793: i64;
  var $p794: ref;
  var $p795: ref;
  var $i796: i8;
  var $i797: i8;
  var $i798: i64;
  var $i799: i64;
  var $p800: ref;
  var $i801: i64;
  var $i802: i64;
  var $p803: ref;
  var $p804: ref;
  var $p805: ref;
  var $i806: i64;
  var $i807: i64;
  var $p808: ref;
  var $p809: ref;
  var $p810: ref;
  var $i811: i8;
  var $i812: i32;
  var $i813: i1;
  var $i814: i64;
  var $i815: i64;
  var $i816: i64;
  var $i817: i64;
  var $p818: ref;
  var $i819: i8;
  var $i820: i32;
  var $i821: i32;
  var $i822: i32;
  var $i823: i64;
  var $p824: ref;
  var $i825: i64;
  var $i826: i64;
  var $i827: i64;
  var $i828: i64;
  var $p829: ref;
  var $i830: i8;
  var $i831: i32;
  var $i832: i32;
  var $i833: i64;
  var $p834: ref;
  var $i835: i64;
  var $i836: i64;
  var $p837: ref;
  var $i838: i64;
  var $i839: i64;
  var $p840: ref;
  var $i841: i64;
  var $i842: i64;
  var $p843: ref;
  var $i844: i64;
  var $i845: i64;
  var $p846: ref;
  var $i847: i64;
  var $i848: i64;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $i852: i64;
  var $i853: i64;
  var $p854: ref;
  var $p855: ref;
  var $i856: i8;
  var $i857: i8;
  var $i858: i8;
  var $i859: i64;
  var $i860: i64;
  var $p861: ref;
  var $p862: ref;
  var $i863: i8;
  var $i864: i8;
  var $i865: i8;
  var $i866: i64;
  var $i867: i64;
  var $p868: ref;
  var $i869: i64;
  var $i870: i64;
  var $p871: ref;
  var $p872: ref;
  var $p873: ref;
  var $i874: i64;
  var $i875: i64;
  var $p876: ref;
  var $p877: ref;
  var $p878: ref;
  var $i879: i8;
  var $i880: i32;
  var $i881: i1;
  var $i882: i64;
  var $i883: i64;
  var $i884: i64;
  var $i885: i64;
  var $p886: ref;
  var $i887: i8;
  var $i888: i32;
  var $i889: i32;
  var $i890: i32;
  var $i891: i64;
  var $p892: ref;
  var $i893: i64;
  var $i894: i64;
  var $i895: i64;
  var $i896: i64;
  var $p897: ref;
  var $i898: i8;
  var $i899: i32;
  var $i900: i32;
  var $i901: i64;
  var $p902: ref;
  var $i903: i64;
  var $i904: i64;
  var $p905: ref;
  var $i906: i64;
  var $i907: i64;
  var $p908: ref;
  var $i909: i64;
  var $i910: i64;
  var $p911: ref;
  var $i912: i64;
  var $i913: i64;
  var $p914: ref;
  var $i915: i64;
  var $i916: i64;
  var $p917: ref;
  var $p918: ref;
  var $p919: ref;
  var $i920: i64;
  var $i921: i64;
  var $p922: ref;
  var $p923: ref;
  var $i924: i8;
  var $i925: i8;
  var $i926: i8;
  var $i927: i64;
  var $i928: i64;
  var $p929: ref;
  var $p930: ref;
  var $i931: i8;
  var $i932: i8;
  var $i933: i64;
  var $i934: i64;
  var $p935: ref;
  var $i936: i64;
  var $i937: i64;
  var $p938: ref;
  var $p939: ref;
  var $p940: ref;
  var $i941: i64;
  var $i942: i64;
  var $p943: ref;
  var $p944: ref;
  var $p945: ref;
  var $i946: i8;
  var $i947: i32;
  var $i948: i1;
  var $i949: i64;
  var $i950: i64;
  var $i951: i64;
  var $i952: i64;
  var $p953: ref;
  var $i954: i8;
  var $i955: i32;
  var $i956: i32;
  var $i957: i32;
  var $i958: i64;
  var $p959: ref;
  var $i960: i64;
  var $i961: i64;
  var $i962: i64;
  var $i963: i64;
  var $p964: ref;
  var $i965: i8;
  var $i966: i32;
  var $i967: i32;
  var $i968: i64;
  var $p969: ref;
  var $i970: i64;
  var $i971: i64;
  var $p972: ref;
  var $i973: i64;
  var $i974: i64;
  var $p975: ref;
  var $i976: i64;
  var $i977: i64;
  var $p978: ref;
  var $i979: i64;
  var $i980: i64;
  var $p981: ref;
  var $i982: i64;
  var $i983: i64;
  var $p984: ref;
  var $p985: ref;
  var $p986: ref;
  var $i987: i64;
  var $i988: i64;
  var $p989: ref;
  var $p990: ref;
  var $i991: i8;
  var $i992: i8;
  var $i993: i8;
  var $i994: i64;
  var $i995: i64;
  var $p996: ref;
  var $p997: ref;
  var $i998: i8;
  var $i999: i8;
  var $i1000: i8;
  var $i1001: i64;
  var $i1002: i64;
  var $p1003: ref;
  var $i1004: i64;
  var $i1005: i64;
  var $p1006: ref;
  var $p1007: ref;
  var $p1008: ref;
  var $i1009: i64;
  var $i1010: i64;
  var $p1011: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $i1014: i8;
  var $i1015: i32;
  var $i1016: i1;
  var $i1017: i64;
  var $i1018: i64;
  var $i1019: i64;
  var $i1020: i64;
  var $p1021: ref;
  var $i1022: i8;
  var $i1023: i32;
  var $i1024: i32;
  var $i1025: i32;
  var $i1026: i64;
  var $p1027: ref;
  var $i1028: i64;
  var $i1029: i64;
  var $i1030: i64;
  var $i1031: i64;
  var $p1032: ref;
  var $i1033: i8;
  var $i1034: i32;
  var $i1035: i32;
  var $i1036: i64;
  var $p1037: ref;
  var $i1038: i64;
  var $i1039: i64;
  var $p1040: ref;
  var $i1041: i64;
  var $i1042: i64;
  var $p1043: ref;
  var $i1044: i64;
  var $i1045: i64;
  var $p1046: ref;
  var $i1047: i64;
  var $i1048: i64;
  var $p1049: ref;
  var $i1050: i64;
  var $i1051: i64;
  var $p1052: ref;
  var $p1053: ref;
  var $p1054: ref;
  var $i1055: i64;
  var $i1056: i64;
  var $p1057: ref;
  var $p1058: ref;
  var $i1059: i8;
  var $i1060: i8;
  var $i1061: i8;
  var $i1062: i64;
  var $i1063: i64;
  var $p1064: ref;
  var $p1065: ref;
  var $i1066: i8;
  var $i1067: i8;
  var $i1068: i64;
  var $i1069: i64;
  var $p1070: ref;
  var $i1071: i64;
  var $i1072: i64;
  var $p1073: ref;
  var $p1074: ref;
  var $p1075: ref;
  var $i1076: i64;
  var $i1077: i64;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $i1081: i8;
  var $i1082: i32;
  var $i1083: i1;
  var $i1084: i64;
  var $i1085: i64;
  var $i1086: i64;
  var $i1087: i64;
  var $p1088: ref;
  var $i1089: i8;
  var $i1090: i32;
  var $i1091: i32;
  var $i1092: i32;
  var $i1093: i64;
  var $p1094: ref;
  var $i1095: i64;
  var $i1096: i64;
  var $i1097: i64;
  var $i1098: i64;
  var $p1099: ref;
  var $i1100: i8;
  var $i1101: i32;
  var $i1102: i32;
  var $i1103: i64;
  var $p1104: ref;
  var $i1105: i64;
  var $i1106: i64;
  var $p1107: ref;
  var $i1108: i64;
  var $i1109: i64;
  var $p1110: ref;
  var $i1111: i64;
  var $i1112: i64;
  var $p1113: ref;
  var $i1114: i64;
  var $i1115: i64;
  var $p1116: ref;
  var $i1117: i64;
  var $i1118: i64;
  var $p1119: ref;
  var $p1120: ref;
  var $p1121: ref;
  var $i1122: i64;
  var $i1123: i64;
  var $p1124: ref;
  var $p1125: ref;
  var $i1126: i8;
  var $i1127: i8;
  var $i1128: i8;
  var $i1129: i64;
  var $i1130: i64;
  var $p1131: ref;
  var $p1132: ref;
  var $i1133: i8;
  var $i1134: i8;
  var $i1135: i8;
  var $i1136: i64;
  var $i1137: i64;
  var $p1138: ref;
  var $i1139: i64;
  var $i1140: i64;
  var $p1141: ref;
  var $p1142: ref;
  var $p1143: ref;
  var $i1144: i64;
  var $i1145: i64;
  var $p1146: ref;
  var $p1147: ref;
  var $p1148: ref;
  var $i1149: i8;
  var $i1150: i32;
  var $i1151: i1;
  var $i1152: i64;
  var $i1153: i64;
  var $i1154: i64;
  var $i1155: i64;
  var $p1156: ref;
  var $i1157: i8;
  var $i1158: i32;
  var $i1159: i32;
  var $i1160: i32;
  var $i1161: i64;
  var $p1162: ref;
  var $i1163: i64;
  var $i1164: i64;
  var $i1165: i64;
  var $i1166: i64;
  var $p1167: ref;
  var $i1168: i8;
  var $i1169: i32;
  var $i1170: i32;
  var $i1171: i64;
  var $p1172: ref;
  var $i1173: i64;
  var $i1174: i64;
  var $p1175: ref;
  var $i1176: i64;
  var $i1177: i64;
  var $p1178: ref;
  var $i1179: i64;
  var $i1180: i64;
  var $p1181: ref;
  var $i1182: i64;
  var $i1183: i64;
  var $p1184: ref;
  var $i1185: i64;
  var $i1186: i64;
  var $p1187: ref;
  var $p1188: ref;
  var $p1189: ref;
  var $i1190: i64;
  var $i1191: i64;
  var $p1192: ref;
  var $p1193: ref;
  var $i1194: i8;
  var $i1195: i8;
  var $i1196: i8;
  var $i1197: i64;
  var $i1198: i64;
  var $p1199: ref;
  var $p1200: ref;
  var $i1201: i8;
  var $i1202: i8;
  var $i1203: i64;
  var $i1204: i64;
  var $p1205: ref;
  var $i1206: i64;
  var $i1207: i64;
  var $p1208: ref;
  var $p1209: ref;
  var $p1210: ref;
  var $i1211: i64;
  var $i1212: i64;
  var $p1213: ref;
  var $p1214: ref;
  var $p1215: ref;
  var $i1216: i8;
  var $i1217: i32;
  var $i1218: i1;
  var $i1219: i64;
  var $i1220: i64;
  var $i1221: i64;
  var $i1222: i64;
  var $p1223: ref;
  var $i1224: i8;
  var $i1225: i32;
  var $i1226: i32;
  var $i1227: i32;
  var $i1228: i64;
  var $p1229: ref;
  var $i1230: i64;
  var $i1231: i64;
  var $i1232: i64;
  var $i1233: i64;
  var $p1234: ref;
  var $i1235: i8;
  var $i1236: i32;
  var $i1237: i32;
  var $i1238: i64;
  var $p1239: ref;
  var $i1240: i64;
  var $i1241: i64;
  var $p1242: ref;
  var $i1243: i64;
  var $i1244: i64;
  var $p1245: ref;
  var $i1246: i64;
  var $i1247: i64;
  var $p1248: ref;
  var $i1249: i64;
  var $i1250: i64;
  var $p1251: ref;
  var $i1252: i64;
  var $i1253: i64;
  var $p1254: ref;
  var $p1255: ref;
  var $p1256: ref;
  var $i1257: i64;
  var $i1258: i64;
  var $p1259: ref;
  var $p1260: ref;
  var $i1261: i8;
  var $i1262: i8;
  var $i1263: i8;
  var $i1264: i64;
  var $i1265: i64;
  var $p1266: ref;
  var $p1267: ref;
  var $i1268: i8;
  var $i1269: i8;
  var $i1270: i8;
  var $i1271: i64;
  var $i1272: i64;
  var $p1273: ref;
  var $i1274: i64;
  var $i1275: i64;
  var $p1276: ref;
  var $p1277: ref;
  var $p1278: ref;
  var $i1279: i64;
  var $i1280: i64;
  var $p1281: ref;
  var $p1282: ref;
  var $p1283: ref;
  var $i1284: i8;
  var $i1285: i32;
  var $i1286: i1;
  var $i1287: i64;
  var $i1288: i64;
  var $i1289: i64;
  var $i1290: i64;
  var $p1291: ref;
  var $i1292: i8;
  var $i1293: i32;
  var $i1294: i32;
  var $i1295: i32;
  var $i1296: i64;
  var $p1297: ref;
  var $i1298: i64;
  var $i1299: i64;
  var $i1300: i64;
  var $i1301: i64;
  var $p1302: ref;
  var $i1303: i8;
  var $i1304: i32;
  var $i1305: i32;
  var $i1306: i64;
  var $p1307: ref;
  var $i1308: i64;
  var $i1309: i64;
  var $p1310: ref;
  var $i1311: i64;
  var $i1312: i64;
  var $p1313: ref;
  var $i1314: i64;
  var $i1315: i64;
  var $p1316: ref;
  var $i1317: i64;
  var $i1318: i64;
  var $p1319: ref;
  var $i1320: i64;
  var $i1321: i64;
  var $p1322: ref;
  var $p1323: ref;
  var $p1324: ref;
  var $i1325: i64;
  var $i1326: i64;
  var $p1327: ref;
  var $p1328: ref;
  var $i1329: i8;
  var $i1330: i8;
  var $i1331: i8;
  var $i1332: i64;
  var $i1333: i64;
  var $p1334: ref;
  var $p1335: ref;
  var $i1336: i8;
  var $i1337: i8;
  var $i1338: i64;
  var $i1339: i64;
  var $p1340: ref;
  var $i1341: i64;
  var $i1342: i64;
  var $p1343: ref;
  var $p1344: ref;
  var $p1345: ref;
  var $i1346: i64;
  var $i1347: i64;
  var $p1348: ref;
  var $p1349: ref;
  var $p1350: ref;
  var $i1351: i8;
  var $i1352: i32;
  var $i1353: i1;
  var $i1354: i64;
  var $i1355: i64;
  var $i1356: i64;
  var $i1357: i64;
  var $p1358: ref;
  var $i1359: i8;
  var $i1360: i32;
  var $i1361: i32;
  var $i1362: i32;
  var $i1363: i64;
  var $p1364: ref;
  var $i1365: i64;
  var $i1366: i64;
  var $i1367: i64;
  var $i1368: i64;
  var $p1369: ref;
  var $i1370: i8;
  var $i1371: i32;
  var $i1372: i32;
  var $i1373: i64;
  var $p1374: ref;
  var $i1375: i64;
  var $i1376: i64;
  var $p1377: ref;
  var $i1378: i64;
  var $i1379: i64;
  var $p1380: ref;
  var $i1381: i64;
  var $i1382: i64;
  var $p1383: ref;
  var $i1384: i64;
  var $i1385: i64;
  var $p1386: ref;
  var $i1387: i64;
  var $i1388: i64;
  var $p1389: ref;
  var $p1390: ref;
  var $p1391: ref;
  var $i1392: i64;
  var $i1393: i64;
  var $p1394: ref;
  var $p1395: ref;
  var $i1396: i8;
  var $i1397: i8;
  var $i1398: i8;
  var $i1399: i64;
  var $i1400: i64;
  var $p1401: ref;
  var $p1402: ref;
  var $i1403: i8;
  var $i1404: i8;
  var $i1405: i8;
  var $i1406: i64;
  var $i1407: i64;
  var $p1408: ref;
  var $i1409: i64;
  var $i1410: i64;
  var $p1411: ref;
  var $p1412: ref;
  var $p1413: ref;
  var $i1414: i64;
  var $i1415: i64;
  var $p1416: ref;
  var $p1417: ref;
  var $p1418: ref;
  var $i1419: i8;
  var $i1420: i32;
  var $i1421: i1;
  var $i1422: i64;
  var $i1423: i64;
  var $i1424: i64;
  var $i1425: i64;
  var $p1426: ref;
  var $i1427: i8;
  var $i1428: i32;
  var $i1429: i32;
  var $i1430: i32;
  var $i1431: i64;
  var $p1432: ref;
  var $i1433: i64;
  var $i1434: i64;
  var $i1435: i64;
  var $i1436: i64;
  var $p1437: ref;
  var $i1438: i8;
  var $i1439: i32;
  var $i1440: i32;
  var $i1441: i64;
  var $p1442: ref;
  var $i1443: i64;
  var $i1444: i64;
  var $p1445: ref;
  var $i1446: i64;
  var $i1447: i64;
  var $p1448: ref;
  var $i1449: i64;
  var $i1450: i64;
  var $p1451: ref;
  var $i1452: i64;
  var $i1453: i64;
  var $p1454: ref;
  var $i1455: i64;
  var $i1456: i64;
  var $p1457: ref;
  var $p1458: ref;
  var $p1459: ref;
  var $i1460: i64;
  var $i1461: i64;
  var $p1462: ref;
  var $p1463: ref;
  var $i1464: i8;
  var $i1465: i8;
  var $i1466: i8;
  var $i1467: i64;
  var $i1468: i64;
  var $p1469: ref;
  var $p1470: ref;
  var $i1471: i8;
  var $i1472: i8;
  var $i1473: i64;
  var $i1474: i64;
  var $p1475: ref;
  var $i1476: i64;
  var $i1477: i64;
  var $p1478: ref;
  var $p1479: ref;
  var $p1480: ref;
  var $i1481: i64;
  var $i1482: i64;
  var $p1483: ref;
  var $p1484: ref;
  var $p1485: ref;
  var $i1486: i8;
  var $i1487: i32;
  var $i1488: i1;
  var $i1489: i64;
  var $i1490: i64;
  var $i1491: i64;
  var $i1492: i64;
  var $p1493: ref;
  var $i1494: i8;
  var $i1495: i32;
  var $i1496: i32;
  var $i1497: i32;
  var $i1498: i64;
  var $p1499: ref;
  var $i1500: i64;
  var $i1501: i64;
  var $i1502: i64;
  var $i1503: i64;
  var $p1504: ref;
  var $i1505: i8;
  var $i1506: i32;
  var $i1507: i32;
  var $i1508: i64;
  var $p1509: ref;
  var $i1510: i64;
  var $i1511: i64;
  var $p1512: ref;
  var $i1513: i64;
  var $i1514: i64;
  var $p1515: ref;
  var $i1516: i64;
  var $i1517: i64;
  var $p1518: ref;
  var $i1519: i64;
  var $i1520: i64;
  var $p1521: ref;
  var $i1522: i64;
  var $i1523: i64;
  var $p1524: ref;
  var $p1525: ref;
  var $p1526: ref;
  var $i1527: i64;
  var $i1528: i64;
  var $p1529: ref;
  var $p1530: ref;
  var $i1531: i8;
  var $i1532: i8;
  var $i1533: i8;
  var $i1534: i64;
  var $i1535: i64;
  var $p1536: ref;
  var $p1537: ref;
  var $i1538: i8;
  var $i1539: i8;
  var $i1540: i8;
  var $i1541: i64;
  var $i1542: i64;
  var $p1543: ref;
  var $i1544: i64;
  var $i1545: i64;
  var $p1546: ref;
  var $p1547: ref;
  var $p1548: ref;
  var $i1549: i64;
  var $i1550: i64;
  var $p1551: ref;
  var $p1552: ref;
  var $p1553: ref;
  var $i1554: i8;
  var $i1555: i32;
  var $i1556: i1;
  var $i1557: i64;
  var $i1558: i64;
  var $i1559: i64;
  var $i1560: i64;
  var $p1561: ref;
  var $i1562: i8;
  var $i1563: i32;
  var $i1564: i32;
  var $i1565: i32;
  var $i1566: i64;
  var $p1567: ref;
  var $i1568: i64;
  var $i1569: i64;
  var $i1570: i64;
  var $i1571: i64;
  var $p1572: ref;
  var $i1573: i8;
  var $i1574: i32;
  var $i1575: i32;
  var $i1576: i64;
  var $p1577: ref;
  var $i1578: i64;
  var $i1579: i64;
  var $p1580: ref;
  var $i1581: i64;
  var $i1582: i64;
  var $p1583: ref;
  var $i1584: i64;
  var $i1585: i64;
  var $p1586: ref;
  var $i1587: i64;
  var $i1588: i64;
  var $p1589: ref;
  var $i1590: i64;
  var $i1591: i64;
  var $p1592: ref;
  var $p1593: ref;
  var $p1594: ref;
  var $i1595: i64;
  var $i1596: i64;
  var $p1597: ref;
  var $p1598: ref;
  var $i1599: i8;
  var $i1600: i8;
  var $i1601: i8;
  var $i1602: i64;
  var $i1603: i64;
  var $p1604: ref;
  var $p1605: ref;
  var $i1606: i8;
  var $i1607: i8;
  var $i1608: i64;
  var $i1609: i64;
  var $p1610: ref;
  var $i1611: i64;
  var $i1612: i64;
  var $p1613: ref;
  var $p1614: ref;
  var $p1615: ref;
  var $i1616: i64;
  var $i1617: i64;
  var $p1618: ref;
  var $p1619: ref;
  var $p1620: ref;
  var $i1621: i8;
  var $i1622: i32;
  var $i1623: i1;
  var $i1624: i64;
  var $i1625: i64;
  var $i1626: i64;
  var $i1627: i64;
  var $p1628: ref;
  var $i1629: i8;
  var $i1630: i32;
  var $i1631: i32;
  var $i1632: i32;
  var $i1633: i64;
  var $p1634: ref;
  var $i1635: i64;
  var $i1636: i64;
  var $i1637: i64;
  var $i1638: i64;
  var $p1639: ref;
  var $i1640: i8;
  var $i1641: i32;
  var $i1642: i32;
  var $i1643: i64;
  var $p1644: ref;
  var $i1645: i64;
  var $i1646: i64;
  var $p1647: ref;
  var $i1648: i64;
  var $i1649: i64;
  var $p1650: ref;
  var $i1651: i64;
  var $i1652: i64;
  var $p1653: ref;
  var $i1654: i64;
  var $i1655: i64;
  var $p1656: ref;
  var $i1657: i64;
  var $i1658: i64;
  var $p1659: ref;
  var $p1660: ref;
  var $p1661: ref;
  var $i1662: i64;
  var $i1663: i64;
  var $p1664: ref;
  var $p1665: ref;
  var $i1666: i8;
  var $i1667: i8;
  var $i1668: i8;
  var $i1669: i64;
  var $i1670: i64;
  var $p1671: ref;
  var $p1672: ref;
  var $i1673: i8;
  var $i1674: i8;
  var $i1675: i8;
  var $i1676: i64;
  var $i1677: i64;
  var $p1678: ref;
  var $i1679: i64;
  var $i1680: i64;
  var $p1681: ref;
  var $p1682: ref;
  var $p1683: ref;
  var $i1684: i64;
  var $i1685: i64;
  var $p1686: ref;
  var $p1687: ref;
  var $p1688: ref;
  var $i1689: i8;
  var $i1690: i32;
  var $i1691: i1;
  var $i1692: i64;
  var $i1693: i64;
  var $i1694: i64;
  var $i1695: i64;
  var $p1696: ref;
  var $i1697: i8;
  var $i1698: i32;
  var $i1699: i32;
  var $i1700: i32;
  var $i1701: i64;
  var $p1702: ref;
  var $i1703: i64;
  var $i1704: i64;
  var $i1705: i64;
  var $i1706: i64;
  var $p1707: ref;
  var $i1708: i8;
  var $i1709: i32;
  var $i1710: i32;
  var $i1711: i64;
  var $p1712: ref;
  var $i1713: i64;
  var $i1714: i64;
  var $p1715: ref;
  var $i1716: i64;
  var $i1717: i64;
  var $p1718: ref;
  var $i1719: i64;
  var $i1720: i64;
  var $p1721: ref;
  var $i1722: i64;
  var $i1723: i64;
  var $p1724: ref;
  var $i1725: i64;
  var $i1726: i64;
  var $p1727: ref;
  var $p1728: ref;
  var $p1729: ref;
  var $i1730: i64;
  var $i1731: i64;
  var $p1732: ref;
  var $p1733: ref;
  var $i1734: i8;
  var $i1735: i8;
  var $i1736: i8;
  var $i1737: i64;
  var $i1738: i64;
  var $p1739: ref;
  var $p1740: ref;
  var $i1741: i8;
  var $i1742: i8;
  var $i1743: i64;
  var $i1744: i64;
  var $p1745: ref;
  var $i1746: i64;
  var $i1747: i64;
  var $p1748: ref;
  var $p1749: ref;
  var $p1750: ref;
  var $i1751: i64;
  var $i1752: i64;
  var $p1753: ref;
  var $p1754: ref;
  var $p1755: ref;
  var $i1756: i8;
  var $i1757: i32;
  var $i1758: i1;
  var $i1759: i64;
  var $i1760: i64;
  var $i1761: i64;
  var $i1762: i64;
  var $p1763: ref;
  var $i1764: i8;
  var $i1765: i32;
  var $i1766: i32;
  var $i1767: i32;
  var $i1768: i64;
  var $p1769: ref;
  var $i1770: i64;
  var $i1771: i64;
  var $i1772: i64;
  var $i1773: i64;
  var $p1774: ref;
  var $i1775: i8;
  var $i1776: i32;
  var $i1777: i32;
  var $i1778: i64;
  var $p1779: ref;
  var $i1780: i64;
  var $i1781: i64;
  var $p1782: ref;
  var $i1783: i64;
  var $i1784: i64;
  var $p1785: ref;
  var $i1786: i64;
  var $i1787: i64;
  var $p1788: ref;
  var $i1789: i64;
  var $i1790: i64;
  var $p1791: ref;
  var $i1792: i64;
  var $i1793: i64;
  var $p1794: ref;
  var $p1795: ref;
  var $p1796: ref;
  var $i1797: i64;
  var $i1798: i64;
  var $p1799: ref;
  var $p1800: ref;
  var $i1801: i8;
  var $i1802: i8;
  var $i1803: i8;
  var $i1804: i64;
  var $i1805: i64;
  var $p1806: ref;
  var $p1807: ref;
  var $i1808: i8;
  var $i1809: i8;
  var $i1810: i8;
  var $i1811: i64;
  var $i1812: i64;
  var $p1813: ref;
  var $i1814: i64;
  var $i1815: i64;
  var $p1816: ref;
  var $p1817: ref;
  var $p1818: ref;
  var $i1819: i64;
  var $i1820: i64;
  var $p1821: ref;
  var $p1822: ref;
  var $p1823: ref;
  var $i1824: i8;
  var $i1825: i32;
  var $i1826: i1;
  var $i1827: i64;
  var $i1828: i64;
  var $i1829: i64;
  var $i1830: i64;
  var $p1831: ref;
  var $i1832: i8;
  var $i1833: i32;
  var $i1834: i32;
  var $i1835: i32;
  var $i1836: i64;
  var $p1837: ref;
  var $i1838: i64;
  var $i1839: i64;
  var $i1840: i64;
  var $i1841: i64;
  var $p1842: ref;
  var $i1843: i8;
  var $i1844: i32;
  var $i1845: i32;
  var $i1846: i64;
  var $p1847: ref;
  var $i1848: i64;
  var $i1849: i64;
  var $p1850: ref;
  var $i1851: i64;
  var $i1852: i64;
  var $p1853: ref;
  var $i1854: i64;
  var $i1855: i64;
  var $p1856: ref;
  var $i1857: i64;
  var $i1858: i64;
  var $p1859: ref;
  var $i1860: i64;
  var $i1861: i64;
  var $p1862: ref;
  var $p1863: ref;
  var $p1864: ref;
  var $i1865: i64;
  var $i1866: i64;
  var $p1867: ref;
  var $p1868: ref;
  var $i1869: i8;
  var $i1870: i8;
  var $i1871: i8;
  var $i1872: i64;
  var $i1873: i64;
  var $p1874: ref;
  var $p1875: ref;
  var $i1876: i8;
  var $i1877: i8;
  var $i1878: i64;
  var $i1879: i64;
  var $p1880: ref;
  var $i1881: i64;
  var $i1882: i64;
  var $p1883: ref;
  var $p1884: ref;
  var $p1885: ref;
  var $i1886: i64;
  var $i1887: i64;
  var $p1888: ref;
  var $p1889: ref;
  var $p1890: ref;
  var $i1891: i8;
  var $i1892: i32;
  var $i1893: i1;
  var $i1894: i64;
  var $i1895: i64;
  var $i1896: i64;
  var $i1897: i64;
  var $p1898: ref;
  var $i1899: i8;
  var $i1900: i32;
  var $i1901: i32;
  var $i1902: i32;
  var $i1903: i64;
  var $p1904: ref;
  var $i1905: i64;
  var $i1906: i64;
  var $i1907: i64;
  var $i1908: i64;
  var $p1909: ref;
  var $i1910: i8;
  var $i1911: i32;
  var $i1912: i32;
  var $i1913: i64;
  var $p1914: ref;
  var $i1915: i64;
  var $i1916: i64;
  var $p1917: ref;
  var $i1918: i64;
  var $i1919: i64;
  var $p1920: ref;
  var $i1921: i64;
  var $i1922: i64;
  var $p1923: ref;
  var $i1924: i64;
  var $i1925: i64;
  var $p1926: ref;
  var $i1927: i64;
  var $i1928: i64;
  var $p1929: ref;
  var $p1930: ref;
  var $p1931: ref;
  var $i1932: i64;
  var $i1933: i64;
  var $p1934: ref;
  var $p1935: ref;
  var $i1936: i8;
  var $i1937: i8;
  var $i1938: i8;
  var $i1939: i64;
  var $i1940: i64;
  var $p1941: ref;
  var $p1942: ref;
  var $i1943: i8;
  var $i1944: i8;
  var $i1945: i8;
  var $i1946: i64;
  var $i1947: i64;
  var $p1948: ref;
  var $i1949: i64;
  var $i1950: i64;
  var $p1951: ref;
  var $p1952: ref;
  var $p1953: ref;
  var $i1954: i64;
  var $i1955: i64;
  var $p1956: ref;
  var $p1957: ref;
  var $p1958: ref;
  var $i1959: i8;
  var $i1960: i32;
  var $i1961: i1;
  var $i1962: i64;
  var $i1963: i64;
  var $i1964: i64;
  var $i1965: i64;
  var $p1966: ref;
  var $i1967: i8;
  var $i1968: i32;
  var $i1969: i32;
  var $i1970: i32;
  var $i1971: i64;
  var $p1972: ref;
  var $i1973: i64;
  var $i1974: i64;
  var $i1975: i64;
  var $i1976: i64;
  var $p1977: ref;
  var $i1978: i8;
  var $i1979: i32;
  var $i1980: i32;
  var $i1981: i64;
  var $p1982: ref;
  var $i1983: i64;
  var $i1984: i64;
  var $p1985: ref;
  var $i1986: i64;
  var $i1987: i64;
  var $p1988: ref;
  var $i1989: i64;
  var $i1990: i64;
  var $p1991: ref;
  var $i1992: i64;
  var $i1993: i64;
  var $p1994: ref;
  var $i1995: i64;
  var $i1996: i64;
  var $p1997: ref;
  var $p1998: ref;
  var $p1999: ref;
  var $i2000: i64;
  var $i2001: i64;
  var $p2002: ref;
  var $p2003: ref;
  var $i2004: i8;
  var $i2005: i8;
  var $i2006: i8;
  var $i2007: i64;
  var $i2008: i64;
  var $p2009: ref;
  var $p2010: ref;
  var $i2011: i8;
  var $i2012: i8;
  var $i2013: i64;
  var $i2014: i64;
  var $p2015: ref;
  var $i2016: i64;
  var $i2017: i64;
  var $p2018: ref;
  var $p2019: ref;
  var $p2020: ref;
  var $i2021: i64;
  var $i2022: i64;
  var $p2023: ref;
  var $p2024: ref;
  var $p2025: ref;
  var $i2026: i8;
  var $i2027: i32;
  var $i2028: i1;
  var $i2029: i64;
  var $i2030: i64;
  var $i2031: i64;
  var $i2032: i64;
  var $p2033: ref;
  var $i2034: i8;
  var $i2035: i32;
  var $i2036: i32;
  var $i2037: i32;
  var $i2038: i64;
  var $p2039: ref;
  var $i2040: i64;
  var $i2041: i64;
  var $i2042: i64;
  var $i2043: i64;
  var $p2044: ref;
  var $i2045: i8;
  var $i2046: i32;
  var $i2047: i32;
  var $i2048: i64;
  var $p2049: ref;
  var $i2050: i64;
  var $i2051: i64;
  var $p2052: ref;
  var $i2053: i64;
  var $i2054: i64;
  var $p2055: ref;
  var $i2056: i64;
  var $i2057: i64;
  var $p2058: ref;
  var $i2059: i64;
  var $i2060: i64;
  var $p2061: ref;
  var $i2062: i64;
  var $i2063: i64;
  var $p2064: ref;
  var $p2065: ref;
  var $p2066: ref;
  var $i2067: i64;
  var $i2068: i64;
  var $p2069: ref;
  var $p2070: ref;
  var $i2071: i8;
  var $i2072: i8;
  var $i2073: i8;
  var $i2074: i64;
  var $i2075: i64;
  var $p2076: ref;
  var $p2077: ref;
  var $i2078: i8;
  var $i2079: i8;
  var $i2080: i8;
  var $i2081: i64;
  var $i2082: i64;
  var $p2083: ref;
  var $i2084: i64;
  var $i2085: i64;
  var $p2086: ref;
  var $p2087: ref;
  var $p2088: ref;
  var $i2089: i64;
  var $i2090: i64;
  var $p2091: ref;
  var $p2092: ref;
  var $p2093: ref;
  var $i2094: i8;
  var $i2095: i32;
  var $i2096: i1;
  var $i2097: i64;
  var $i2098: i64;
  var $i2099: i64;
  var $i2100: i64;
  var $p2101: ref;
  var $i2102: i8;
  var $i2103: i32;
  var $i2104: i32;
  var $i2105: i32;
  var $i2106: i64;
  var $p2107: ref;
  var $i2108: i64;
  var $i2109: i64;
  var $i2110: i64;
  var $i2111: i64;
  var $p2112: ref;
  var $i2113: i8;
  var $i2114: i32;
  var $i2115: i32;
  var $i2116: i64;
  var $p2117: ref;
  var $i2118: i64;
  var $i2119: i64;
  var $p2120: ref;
  var $i2121: i64;
  var $i2122: i64;
  var $p2123: ref;
  var $i2124: i64;
  var $i2125: i64;
  var $p2126: ref;
  var $i2127: i64;
  var $i2128: i64;
  var $p2129: ref;
  var $i2130: i64;
  var $i2131: i64;
  var $p2132: ref;
  var $p2133: ref;
  var $p2134: ref;
  var $i2135: i64;
  var $i2136: i64;
  var $p2137: ref;
  var $p2138: ref;
  var $i2139: i8;
  var $i2140: i8;
  var $i2141: i8;
  var $i2142: i64;
  var $i2143: i64;
  var $p2144: ref;
  var $p2145: ref;
  var $i2146: i8;
  var $i2147: i8;
  var $i2148: i64;
  var $i2149: i64;
  var $p2150: ref;
  var $i2151: i64;
  var $i2152: i64;
  var $p2153: ref;
  var $p2154: ref;
  var $p2155: ref;
  var $i2156: i64;
  var $i2157: i64;
  var $p2158: ref;
  var $p2159: ref;
  var $p2160: ref;
  var $i2161: i8;
  var $i2162: i32;
  var $i2163: i1;
  var $i2164: i64;
  var $i2165: i64;
  var $i2166: i64;
  var $i2167: i64;
  var $p2168: ref;
  var $i2169: i8;
  var $i2170: i32;
  var $i2171: i32;
  var $i2172: i32;
  var $i2173: i64;
  var $p2174: ref;
  var $i2175: i64;
  var $i2176: i64;
  var $i2177: i64;
  var $i2178: i64;
  var $p2179: ref;
  var $i2180: i8;
  var $i2181: i32;
  var $i2182: i32;
  var $i2183: i64;
  var $p2184: ref;
  var $i2185: i64;
  var $i2186: i64;
  var $p2187: ref;
  var $i2188: i64;
  var $i2189: i64;
  var $p2190: ref;
  var $i2191: i64;
  var $i2192: i64;
  var $p2193: ref;
  var $i2194: i64;
  var $i2195: i64;
  var $p2196: ref;
  var $i2197: i64;
  var $i2198: i64;
  var $p2199: ref;
  var $p2200: ref;
  var $p2201: ref;
  var $i2202: i64;
  var $i2203: i64;
  var $p2204: ref;
  var $p2205: ref;
  var $i2206: i8;
  var $i2207: i8;
  var $i2208: i8;
  var $i2209: i64;
  var $i2210: i64;
  var $p2211: ref;
  var $p2212: ref;
  var $i2213: i8;
  var $i2214: i8;
  var $i2215: i8;
  var $i2216: i64;
  var $i2217: i64;
  var $p2218: ref;
  var $i2219: i64;
  var $i2220: i64;
  var $p2221: ref;
  var $p2222: ref;
  var $p2223: ref;
  var $i2224: i64;
  var $i2225: i64;
  var $p2226: ref;
  var $p2227: ref;
  var $p2228: ref;
  var $i2229: i8;
  var $i2230: i32;
  var $i2231: i1;
  var $i2232: i64;
  var $i2233: i64;
  var $i2234: i64;
  var $i2235: i64;
  var $p2236: ref;
  var $i2237: i8;
  var $i2238: i32;
  var $i2239: i32;
  var $i2240: i32;
  var $i2241: i64;
  var $p2242: ref;
  var $i2243: i64;
  var $i2244: i64;
  var $i2245: i64;
  var $i2246: i64;
  var $p2247: ref;
  var $i2248: i8;
  var $i2249: i32;
  var $i2250: i32;
  var $i2251: i64;
  var $p2252: ref;
  var $i2253: i64;
  var $i2254: i64;
  var $p2255: ref;
  var $i2256: i64;
  var $i2257: i64;
  var $p2258: ref;
  var $i2259: i64;
  var $i2260: i64;
  var $p2261: ref;
  var $i2262: i64;
  var $i2263: i64;
  var $p2264: ref;
  var $i2265: i64;
  var $i2266: i64;
  var $p2267: ref;
  var $p2268: ref;
  var $p2269: ref;
  var $i2270: i64;
  var $i2271: i64;
  var $p2272: ref;
  var $p2273: ref;
  var $i2274: i8;
  var $i2275: i8;
  var $i2276: i8;
  var $i2277: i64;
  var $i2278: i64;
  var $p2279: ref;
  var $p2280: ref;
  var $i2281: i8;
  var $i2282: i8;
  var $i2283: i64;
  var $i2284: i64;
  var $p2285: ref;
  var $i2286: i64;
  var $i2287: i64;
  var $p2288: ref;
  var $p2289: ref;
  var $p2290: ref;
  var $i2291: i64;
  var $i2292: i64;
  var $p2293: ref;
  var $p2294: ref;
  var $p2295: ref;
  var $i2296: i8;
  var $i2297: i32;
  var $i2298: i1;
  var $i2299: i64;
  var $i2300: i64;
  var $i2301: i64;
  var $i2302: i64;
  var $p2303: ref;
  var $i2304: i8;
  var $i2305: i32;
  var $i2306: i32;
  var $i2307: i32;
  var $i2308: i64;
  var $p2309: ref;
  var $i2310: i64;
  var $i2311: i64;
  var $i2312: i64;
  var $i2313: i64;
  var $p2314: ref;
  var $i2315: i8;
  var $i2316: i32;
  var $i2317: i32;
  var $i2318: i64;
  var $p2319: ref;
  var $i2320: i64;
  var $i2321: i64;
  var $p2322: ref;
  var $i2323: i64;
  var $i2324: i64;
  var $p2325: ref;
  var $i2326: i64;
  var $i2327: i64;
  var $p2328: ref;
  var $i2329: i64;
  var $i2330: i64;
  var $p2331: ref;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} $p1 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 0);
    call {:si_unique_call 2776} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, ep0_string);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 8);
    call {:si_unique_call 2777} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.29);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 16);
    call {:si_unique_call 2778} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i12);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str.30);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 24);
    call {:si_unique_call 2779} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i16);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str.31);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 32);
    call {:si_unique_call 2780} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i20);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, .str.32);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 40);
    call {:si_unique_call 2781} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i24);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, .str.33);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 48);
    call {:si_unique_call 2782} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i28);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, .str.34);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 56);
    call {:si_unique_call 2783} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i32);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, .str.35);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 64);
    call {:si_unique_call 2784} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i36);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str.36);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 72);
    call {:si_unique_call 2785} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i40);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, .str.37);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 80);
    call {:si_unique_call 2786} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i44);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str.38);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 88);
    call {:si_unique_call 2787} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i48);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, .str.39);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 96);
    call {:si_unique_call 2788} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i52);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p53, .str.40);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 104);
    call {:si_unique_call 2789} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i56);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, .str.41);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 112);
    call {:si_unique_call 2790} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i60);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p61, .str.42);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 120);
    call {:si_unique_call 2791} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i64);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, .str.43);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 128);
    call {:si_unique_call 2792} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i68);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, .str.44);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 136);
    call {:si_unique_call 2793} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i72);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i72);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, .str.45);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 144);
    call {:si_unique_call 2794} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i76);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p77, .str.46);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 152);
    call {:si_unique_call 2795} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i80);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p81, .str.47);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 160);
    call {:si_unique_call 2796} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i84);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p85, .str.48);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 168);
    call {:si_unique_call 2797} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i88);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p89, .str.49);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, 176);
    call {:si_unique_call 2798} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i92);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i92);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p93, .str.50);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 184);
    call {:si_unique_call 2799} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i96);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p97, .str.51);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 192);
    call {:si_unique_call 2800} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i100);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p101, .str.52);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 200);
    call {:si_unique_call 2801} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i104);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i104);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p105, .str.53);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 208);
    call {:si_unique_call 2802} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i108);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p109, .str.54);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i111, 216);
    call {:si_unique_call 2803} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i112);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i112);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p113, .str.55);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 224);
    call {:si_unique_call 2804} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i116);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p117, .str.56);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i120 := $add.i64($i119, 232);
    call {:si_unique_call 2805} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i120);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p121 := $i2p.i64.ref($i120);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p121, .str.57);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 240);
    call {:si_unique_call 2806} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i124);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p125, .str.58);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i128 := $add.i64($i127, 248);
    call {:si_unique_call 2807} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i128);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p129 := $i2p.i64.ref($i128);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p129, .str.59);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p0);
    call {:si_unique_call 2808} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i130);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i130, 32);
    call {:si_unique_call 2809} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i131);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p132 := $i2p.i64.ref($i131);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p132, 0);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p0);
    call {:si_unique_call 2810} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i133);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i134 := $add.i64($i133, 16);
    call {:si_unique_call 2811} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i134);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p135 := $i2p.i64.ref($i134);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} INIT_LIST_HEAD($p135);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p0);
    call {:si_unique_call 2813} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i136);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 1224);
    call {:si_unique_call 2814} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i137);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p138 := $i2p.i64.ref($i137);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.1;
    call {:si_unique_call 2815} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p139, 0, 4864, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_16;
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p0);
    call {:si_unique_call 2816} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i140);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 1224);
    call {:si_unique_call 2817} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i141);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i141);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    call {:si_unique_call 2818} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i144);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i145 := $add.i64($i144, 96);
    call {:si_unique_call 2819} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i145);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p146 := $i2p.i64.ref($i145);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p146, $p0);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p143, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.1, $p147);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i149 := $and.i8($i148, $sub.i8(0, 65));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i150 := $or.i8($i149, 64);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p147, $i150);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p143);
    call {:si_unique_call 2820} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i151);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i152 := $add.i64($i151, 136);
    call {:si_unique_call 2821} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i152);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p153 := $i2p.i64.ref($i152);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p153, 0);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p143, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.1, $p154);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i156 := $and.i8($i155, $sub.i8(0, 33));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i157 := $or.i8($i156, 32);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p154, $i157);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p143);
    call {:si_unique_call 2822} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i158);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i159 := $add.i64($i158, 8);
    call {:si_unique_call 2823} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i159);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p160);
    call {:si_unique_call 2824} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i161);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p162 := $i2p.i64.ref($i161);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.1, $p162);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p164 := $i2p.i64.ref($i159);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p164, $p163);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p143);
    call {:si_unique_call 2825} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i165);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i166 := $add.i64($i165, 16);
    call {:si_unique_call 2826} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i166);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p167 := $i2p.i64.ref($i166);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p167, pch_udc_ep_ops);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p143);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(136, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.1, $p169);
    call {:si_unique_call 2827} {:cexpr "__cil_tmp102"} boogie_si_record_i8($i170);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    call {:si_unique_call 2828} {:cexpr "__cil_tmp103"} boogie_si_record_i32($i171);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i172 == 1);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p143);
    call {:si_unique_call 2836} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i183);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i184 := $add.i64($i183, 104);
    call {:si_unique_call 2837} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i184);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p143);
    call {:si_unique_call 2838} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i185);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i186 := $add.i64($i185, 136);
    call {:si_unique_call 2839} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i186);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p187 := $i2p.i64.ref($i186);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.1, $p187);
    call {:si_unique_call 2840} {:cexpr "__cil_tmp115"} boogie_si_record_i8($i188);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    call {:si_unique_call 2841} {:cexpr "__cil_tmp116"} boogie_si_record_i32($i189);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i189, 16);
    call {:si_unique_call 2842} {:cexpr "__cil_tmp117"} boogie_si_record_i32($i190);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i191 := $mul.i32($i190, 32);
    call {:si_unique_call 2843} {:cexpr "__cil_tmp118"} boogie_si_record_i32($i191);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64($i191);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p193 := $i2p.i64.ref($i184);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p193, $i192);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p143);
    call {:si_unique_call 2844} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i194);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i195 := $add.i64($i194, 40);
    call {:si_unique_call 2845} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i195);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p196 := $i2p.i64.ref($i195);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p196, 512);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p143);
    call {:si_unique_call 2846} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i197);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i198 := $add.i64($i197, 24);
    call {:si_unique_call 2847} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i198);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p199 := $i2p.i64.ref($i198);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i200 := $p2i.ref.i64($p0);
    call {:si_unique_call 2848} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i200);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i201 := $add.i64($i200, 16);
    call {:si_unique_call 2849} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i201);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p202 := $i2p.i64.ref($i201);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} list_add_tail($p199, $p202);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p143);
    call {:si_unique_call 2851} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i203);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i204 := $add.i64($i203, 120);
    call {:si_unique_call 2852} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i204);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p205 := $i2p.i64.ref($i204);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} INIT_LIST_HEAD($p205);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p0);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i241 := $add.i64($i240, 1224);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p242 := $i2p.i64.ref($i241);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p243, $mul.ref(1, 152));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p244);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i246 := $add.i64($i245, 96);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p247 := $i2p.i64.ref($i246);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p247, $p0);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p243, $mul.ref(1, 152)), $mul.ref(136, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.1, $p248);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i250 := $and.i8($i249, $sub.i8(0, 65));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i251 := $or.i8($i250, 64);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p248, $i251);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p244);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i253 := $add.i64($i252, 136);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p254 := $i2p.i64.ref($i253);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p254, 0);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p243, $mul.ref(1, 152)), $mul.ref(136, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i256 := $load.i8($M.1, $p255);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i257 := $and.i8($i256, $sub.i8(0, 33));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p255, $i257);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p244);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i259 := $add.i64($i258, 8);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i262 := $add.i64($i261, 8);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p263 := $i2p.i64.ref($i262);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.1, $p263);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p265 := $i2p.i64.ref($i259);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p265, $p264);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i266 := $p2i.ref.i64($p244);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i267 := $add.i64($i266, 16);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p268 := $i2p.i64.ref($i267);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p268, pch_udc_ep_ops);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p244);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p269, $mul.ref(136, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.1, $p270);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i32($i271);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i273 == 1);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i274 := $p2i.ref.i64($p244);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i275 := $add.i64($i274, 104);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i276 := $p2i.ref.i64($p244);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i277 := $add.i64($i276, 136);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p278 := $i2p.i64.ref($i277);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i279 := $load.i8($M.1, $p278);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i279);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i281 := $add.i32($i280, 16);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i282 := $mul.i32($i281, 32);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i283 := $sext.i32.i64($i282);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p284 := $i2p.i64.ref($i275);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p284, $i283);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p244);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i296 := $add.i64($i295, 40);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p297 := $i2p.i64.ref($i296);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p297, 512);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i298 := $p2i.ref.i64($p244);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i299 := $add.i64($i298, 24);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p300 := $i2p.i64.ref($i299);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i301 := $p2i.ref.i64($p0);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i302 := $add.i64($i301, 16);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p303 := $i2p.i64.ref($i302);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} list_add_tail($p300, $p303);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i304 := $p2i.ref.i64($p244);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i305 := $add.i64($i304, 120);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p306 := $i2p.i64.ref($i305);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} INIT_LIST_HEAD($p306);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i307 := $p2i.ref.i64($p0);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i308 := $add.i64($i307, 1224);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p309 := $i2p.i64.ref($i308);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p310 := $bitcast.ref.ref($p309);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($p310, $mul.ref(2, 152));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p311);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i313 := $add.i64($i312, 96);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p314 := $i2p.i64.ref($i313);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p314, $p0);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p310, $mul.ref(2, 152)), $mul.ref(136, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i316 := $load.i8($M.1, $p315);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i317 := $and.i8($i316, $sub.i8(0, 65));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i318 := $or.i8($i317, 64);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p315, $i318);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i319 := $p2i.ref.i64($p311);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i320 := $add.i64($i319, 136);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p321 := $i2p.i64.ref($i320);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p321, 1);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p310, $mul.ref(2, 152)), $mul.ref(136, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.1, $p322);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i324 := $and.i8($i323, $sub.i8(0, 33));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i325 := $or.i8($i324, 32);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p322, $i325);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i326 := $p2i.ref.i64($p311);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i327 := $add.i64($i326, 8);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p328);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i330 := $add.i64($i329, 16);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p331 := $i2p.i64.ref($i330);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.1, $p331);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p333 := $i2p.i64.ref($i327);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p333, $p332);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i334 := $p2i.ref.i64($p311);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i335 := $add.i64($i334, 16);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p336 := $i2p.i64.ref($i335);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p336, pch_udc_ep_ops);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p311);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p337, $mul.ref(136, 1));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.1, $p338);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i341 == 1);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p311);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i343 := $add.i64($i342, 104);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i344 := $p2i.ref.i64($p311);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i345 := $add.i64($i344, 136);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p346 := $i2p.i64.ref($i345);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.1, $p346);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i349 := $add.i32($i348, 16);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i350 := $mul.i32($i349, 32);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i351 := $sext.i32.i64($i350);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p352 := $i2p.i64.ref($i343);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p352, $i351);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p311);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i364 := $add.i64($i363, 40);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p365 := $i2p.i64.ref($i364);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p365, 512);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p311);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i367 := $add.i64($i366, 24);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p368 := $i2p.i64.ref($i367);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i369 := $p2i.ref.i64($p0);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i370 := $add.i64($i369, 16);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p371 := $i2p.i64.ref($i370);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} list_add_tail($p368, $p371);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i372 := $p2i.ref.i64($p311);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i373 := $add.i64($i372, 120);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p374 := $i2p.i64.ref($i373);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} INIT_LIST_HEAD($p374);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i375 := $p2i.ref.i64($p0);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i376 := $add.i64($i375, 1224);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p377 := $i2p.i64.ref($i376);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p377);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($p378, $mul.ref(3, 152));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i381 := $add.i64($i380, 96);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p382 := $i2p.i64.ref($i381);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p382, $p0);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p378, $mul.ref(3, 152)), $mul.ref(136, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i384 := $load.i8($M.1, $p383);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i385 := $and.i8($i384, $sub.i8(0, 65));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i386 := $or.i8($i385, 64);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p383, $i386);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p379);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i388 := $add.i64($i387, 136);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p389 := $i2p.i64.ref($i388);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p389, 1);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p378, $mul.ref(3, 152)), $mul.ref(136, 1));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i391 := $load.i8($M.1, $p390);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i392 := $and.i8($i391, $sub.i8(0, 33));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p390, $i392);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i393 := $p2i.ref.i64($p379);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i394 := $add.i64($i393, 8);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i396 := $p2i.ref.i64($p395);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i397 := $add.i64($i396, 24);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p398 := $i2p.i64.ref($i397);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p399 := $load.ref($M.1, $p398);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p400 := $i2p.i64.ref($i394);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p400, $p399);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i401 := $p2i.ref.i64($p379);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i402 := $add.i64($i401, 16);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p403 := $i2p.i64.ref($i402);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p403, pch_udc_ep_ops);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p404 := $bitcast.ref.ref($p379);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($p404, $mul.ref(136, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i406 := $load.i8($M.1, $p405);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i407 := $zext.i8.i32($i406);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i408 := $ne.i32($i407, 0);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i408 == 1);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i409 := $p2i.ref.i64($p379);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i410 := $add.i64($i409, 104);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i411 := $p2i.ref.i64($p379);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i412 := $add.i64($i411, 136);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p413 := $i2p.i64.ref($i412);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i414 := $load.i8($M.1, $p413);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i415 := $zext.i8.i32($i414);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i416 := $add.i32($i415, 16);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i417 := $mul.i32($i416, 32);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i418 := $sext.i32.i64($i417);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p419 := $i2p.i64.ref($i410);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p419, $i418);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i430 := $p2i.ref.i64($p379);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i431 := $add.i64($i430, 40);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p432 := $i2p.i64.ref($i431);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p432, 512);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i433 := $p2i.ref.i64($p379);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i434 := $add.i64($i433, 24);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p435 := $i2p.i64.ref($i434);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i436 := $p2i.ref.i64($p0);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i437 := $add.i64($i436, 16);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p438 := $i2p.i64.ref($i437);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} list_add_tail($p435, $p438);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i439 := $p2i.ref.i64($p379);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i440 := $add.i64($i439, 120);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p441 := $i2p.i64.ref($i440);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} INIT_LIST_HEAD($p441);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i442 := $p2i.ref.i64($p0);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i443 := $add.i64($i442, 1224);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p444 := $i2p.i64.ref($i443);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p445 := $bitcast.ref.ref($p444);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($p445, $mul.ref(4, 152));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i447 := $p2i.ref.i64($p446);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i448 := $add.i64($i447, 96);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p449 := $i2p.i64.ref($i448);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p449, $p0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p445, $mul.ref(4, 152)), $mul.ref(136, 1));
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.1, $p450);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i452 := $and.i8($i451, $sub.i8(0, 65));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i453 := $or.i8($i452, 64);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p450, $i453);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i454 := $p2i.ref.i64($p446);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i455 := $add.i64($i454, 136);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p456 := $i2p.i64.ref($i455);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p456, 2);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p445, $mul.ref(4, 152)), $mul.ref(136, 1));
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i458 := $load.i8($M.1, $p457);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i459 := $and.i8($i458, $sub.i8(0, 33));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i460 := $or.i8($i459, 32);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p457, $i460);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i461 := $p2i.ref.i64($p446);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i462 := $add.i64($i461, 8);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i464 := $p2i.ref.i64($p463);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i465 := $add.i64($i464, 32);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p466 := $i2p.i64.ref($i465);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.1, $p466);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p468 := $i2p.i64.ref($i462);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p468, $p467);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i469 := $p2i.ref.i64($p446);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i470 := $add.i64($i469, 16);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p471 := $i2p.i64.ref($i470);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p471, pch_udc_ep_ops);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p472 := $bitcast.ref.ref($p446);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($p472, $mul.ref(136, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i474 := $load.i8($M.1, $p473);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i475 := $zext.i8.i32($i474);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i476 := $ne.i32($i475, 0);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i476 == 1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i477 := $p2i.ref.i64($p446);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i478 := $add.i64($i477, 104);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i479 := $p2i.ref.i64($p446);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i480 := $add.i64($i479, 136);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p481 := $i2p.i64.ref($i480);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i482 := $load.i8($M.1, $p481);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i483 := $zext.i8.i32($i482);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i484 := $add.i32($i483, 16);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i485 := $mul.i32($i484, 32);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i486 := $sext.i32.i64($i485);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p487 := $i2p.i64.ref($i478);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p487, $i486);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i498 := $p2i.ref.i64($p446);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i499 := $add.i64($i498, 40);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p500 := $i2p.i64.ref($i499);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p500, 512);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i501 := $p2i.ref.i64($p446);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i502 := $add.i64($i501, 24);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p503 := $i2p.i64.ref($i502);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i504 := $p2i.ref.i64($p0);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i505 := $add.i64($i504, 16);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p506 := $i2p.i64.ref($i505);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} list_add_tail($p503, $p506);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i507 := $p2i.ref.i64($p446);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i508 := $add.i64($i507, 120);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p509 := $i2p.i64.ref($i508);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} INIT_LIST_HEAD($p509);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i510 := $p2i.ref.i64($p0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i511 := $add.i64($i510, 1224);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p512 := $i2p.i64.ref($i511);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p513 := $bitcast.ref.ref($p512);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($p513, $mul.ref(5, 152));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i515 := $p2i.ref.i64($p514);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i516 := $add.i64($i515, 96);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p517 := $i2p.i64.ref($i516);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p517, $p0);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p513, $mul.ref(5, 152)), $mul.ref(136, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i519 := $load.i8($M.1, $p518);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i520 := $and.i8($i519, $sub.i8(0, 65));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i521 := $or.i8($i520, 64);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p518, $i521);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i522 := $p2i.ref.i64($p514);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i523 := $add.i64($i522, 136);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p524 := $i2p.i64.ref($i523);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p524, 2);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p513, $mul.ref(5, 152)), $mul.ref(136, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i526 := $load.i8($M.1, $p525);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i527 := $and.i8($i526, $sub.i8(0, 33));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p525, $i527);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i528 := $p2i.ref.i64($p514);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i529 := $add.i64($i528, 8);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i531 := $p2i.ref.i64($p530);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i532 := $add.i64($i531, 40);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p533 := $i2p.i64.ref($i532);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.1, $p533);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p535 := $i2p.i64.ref($i529);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p535, $p534);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i536 := $p2i.ref.i64($p514);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i537 := $add.i64($i536, 16);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p538 := $i2p.i64.ref($i537);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p538, pch_udc_ep_ops);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p539 := $bitcast.ref.ref($p514);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($p539, $mul.ref(136, 1));
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i541 := $load.i8($M.1, $p540);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i542 := $zext.i8.i32($i541);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i543 := $ne.i32($i542, 0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i543} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i543 == 1);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i544 := $p2i.ref.i64($p514);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i545 := $add.i64($i544, 104);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i546 := $p2i.ref.i64($p514);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i547 := $add.i64($i546, 136);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p548 := $i2p.i64.ref($i547);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i549 := $load.i8($M.1, $p548);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i550 := $zext.i8.i32($i549);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i551 := $add.i32($i550, 16);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i552 := $mul.i32($i551, 32);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i553 := $sext.i32.i64($i552);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p554 := $i2p.i64.ref($i545);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p554, $i553);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i565 := $p2i.ref.i64($p514);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i566 := $add.i64($i565, 40);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p567 := $i2p.i64.ref($i566);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p567, 512);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i568 := $p2i.ref.i64($p514);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i569 := $add.i64($i568, 24);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p570 := $i2p.i64.ref($i569);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i571 := $p2i.ref.i64($p0);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i572 := $add.i64($i571, 16);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p573 := $i2p.i64.ref($i572);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} list_add_tail($p570, $p573);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i574 := $p2i.ref.i64($p514);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i575 := $add.i64($i574, 120);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p576 := $i2p.i64.ref($i575);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} INIT_LIST_HEAD($p576);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i577 := $p2i.ref.i64($p0);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i578 := $add.i64($i577, 1224);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p579 := $i2p.i64.ref($i578);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p580 := $bitcast.ref.ref($p579);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($p580, $mul.ref(6, 152));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i582 := $p2i.ref.i64($p581);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i583 := $add.i64($i582, 96);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p584 := $i2p.i64.ref($i583);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p584, $p0);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p580, $mul.ref(6, 152)), $mul.ref(136, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i586 := $load.i8($M.1, $p585);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i587 := $and.i8($i586, $sub.i8(0, 65));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i588 := $or.i8($i587, 64);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p585, $i588);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i589 := $p2i.ref.i64($p581);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i590 := $add.i64($i589, 136);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p591 := $i2p.i64.ref($i590);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p591, 3);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p580, $mul.ref(6, 152)), $mul.ref(136, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i593 := $load.i8($M.1, $p592);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i594 := $and.i8($i593, $sub.i8(0, 33));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i595 := $or.i8($i594, 32);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p592, $i595);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i596 := $p2i.ref.i64($p581);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i597 := $add.i64($i596, 8);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i599 := $p2i.ref.i64($p598);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i600 := $add.i64($i599, 48);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p601 := $i2p.i64.ref($i600);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p602 := $load.ref($M.1, $p601);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p603 := $i2p.i64.ref($i597);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p603, $p602);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i604 := $p2i.ref.i64($p581);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i605 := $add.i64($i604, 16);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p606 := $i2p.i64.ref($i605);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p606, pch_udc_ep_ops);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p607 := $bitcast.ref.ref($p581);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($p607, $mul.ref(136, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i609 := $load.i8($M.1, $p608);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i610 := $zext.i8.i32($i609);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i611 := $ne.i32($i610, 0);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i611} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i611 == 1);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i612 := $p2i.ref.i64($p581);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i613 := $add.i64($i612, 104);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i614 := $p2i.ref.i64($p581);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i615 := $add.i64($i614, 136);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p616 := $i2p.i64.ref($i615);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i617 := $load.i8($M.1, $p616);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i618 := $zext.i8.i32($i617);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i619 := $add.i32($i618, 16);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i620 := $mul.i32($i619, 32);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i621 := $sext.i32.i64($i620);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p622 := $i2p.i64.ref($i613);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p622, $i621);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i633 := $p2i.ref.i64($p581);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i634 := $add.i64($i633, 40);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p635 := $i2p.i64.ref($i634);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p635, 512);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i636 := $p2i.ref.i64($p581);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i637 := $add.i64($i636, 24);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p638 := $i2p.i64.ref($i637);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i639 := $p2i.ref.i64($p0);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i640 := $add.i64($i639, 16);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p641 := $i2p.i64.ref($i640);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} list_add_tail($p638, $p641);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i642 := $p2i.ref.i64($p581);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i643 := $add.i64($i642, 120);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p644 := $i2p.i64.ref($i643);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} INIT_LIST_HEAD($p644);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i645 := $p2i.ref.i64($p0);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i646 := $add.i64($i645, 1224);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p647 := $i2p.i64.ref($i646);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p648 := $bitcast.ref.ref($p647);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($p648, $mul.ref(7, 152));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i650 := $p2i.ref.i64($p649);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i651 := $add.i64($i650, 96);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p652 := $i2p.i64.ref($i651);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p652, $p0);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p648, $mul.ref(7, 152)), $mul.ref(136, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i654 := $load.i8($M.1, $p653);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i655 := $and.i8($i654, $sub.i8(0, 65));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i656 := $or.i8($i655, 64);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p653, $i656);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i657 := $p2i.ref.i64($p649);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i658 := $add.i64($i657, 136);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p659 := $i2p.i64.ref($i658);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p659, 3);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p648, $mul.ref(7, 152)), $mul.ref(136, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i661 := $load.i8($M.1, $p660);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i662 := $and.i8($i661, $sub.i8(0, 33));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p660, $i662);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i663 := $p2i.ref.i64($p649);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i664 := $add.i64($i663, 8);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i666 := $p2i.ref.i64($p665);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i667 := $add.i64($i666, 56);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $p668 := $i2p.i64.ref($i667);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p669 := $load.ref($M.1, $p668);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p670 := $i2p.i64.ref($i664);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p670, $p669);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i671 := $p2i.ref.i64($p649);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i672 := $add.i64($i671, 16);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p673 := $i2p.i64.ref($i672);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p673, pch_udc_ep_ops);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p674 := $bitcast.ref.ref($p649);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($p674, $mul.ref(136, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i676 := $load.i8($M.1, $p675);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i677 := $zext.i8.i32($i676);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i678 := $ne.i32($i677, 0);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i678} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i678 == 1);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i679 := $p2i.ref.i64($p649);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i680 := $add.i64($i679, 104);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i681 := $p2i.ref.i64($p649);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i682 := $add.i64($i681, 136);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p683 := $i2p.i64.ref($i682);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i684 := $load.i8($M.1, $p683);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i685 := $zext.i8.i32($i684);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i686 := $add.i32($i685, 16);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i687 := $mul.i32($i686, 32);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i688 := $sext.i32.i64($i687);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p689 := $i2p.i64.ref($i680);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p689, $i688);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i700 := $p2i.ref.i64($p649);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i701 := $add.i64($i700, 40);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p702 := $i2p.i64.ref($i701);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p702, 512);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i703 := $p2i.ref.i64($p649);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i704 := $add.i64($i703, 24);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p705 := $i2p.i64.ref($i704);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i706 := $p2i.ref.i64($p0);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i707 := $add.i64($i706, 16);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p708 := $i2p.i64.ref($i707);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} list_add_tail($p705, $p708);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i709 := $p2i.ref.i64($p649);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i710 := $add.i64($i709, 120);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p711 := $i2p.i64.ref($i710);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} INIT_LIST_HEAD($p711);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i712 := $p2i.ref.i64($p0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i713 := $add.i64($i712, 1224);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p714 := $i2p.i64.ref($i713);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p715 := $bitcast.ref.ref($p714);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($p715, $mul.ref(8, 152));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i717 := $p2i.ref.i64($p716);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i718 := $add.i64($i717, 96);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p719 := $i2p.i64.ref($i718);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p719, $p0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p715, $mul.ref(8, 152)), $mul.ref(136, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i721 := $load.i8($M.1, $p720);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i722 := $and.i8($i721, $sub.i8(0, 65));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i723 := $or.i8($i722, 64);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p720, $i723);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i724 := $p2i.ref.i64($p716);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i725 := $add.i64($i724, 136);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p726 := $i2p.i64.ref($i725);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p726, 4);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p715, $mul.ref(8, 152)), $mul.ref(136, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i728 := $load.i8($M.1, $p727);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i729 := $and.i8($i728, $sub.i8(0, 33));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i730 := $or.i8($i729, 32);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p727, $i730);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i731 := $p2i.ref.i64($p716);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i732 := $add.i64($i731, 8);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i734 := $p2i.ref.i64($p733);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i735 := $add.i64($i734, 64);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p736 := $i2p.i64.ref($i735);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p737 := $load.ref($M.1, $p736);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p738 := $i2p.i64.ref($i732);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p738, $p737);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i739 := $p2i.ref.i64($p716);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i740 := $add.i64($i739, 16);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p741 := $i2p.i64.ref($i740);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p741, pch_udc_ep_ops);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p742 := $bitcast.ref.ref($p716);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($p742, $mul.ref(136, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i744 := $load.i8($M.1, $p743);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i745 := $zext.i8.i32($i744);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i746 := $ne.i32($i745, 0);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i746 == 1);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i747 := $p2i.ref.i64($p716);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i748 := $add.i64($i747, 104);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i749 := $p2i.ref.i64($p716);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i750 := $add.i64($i749, 136);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p751 := $i2p.i64.ref($i750);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i752 := $load.i8($M.1, $p751);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i753 := $zext.i8.i32($i752);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i754 := $add.i32($i753, 16);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i755 := $mul.i32($i754, 32);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i756 := $sext.i32.i64($i755);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p757 := $i2p.i64.ref($i748);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p757, $i756);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i768 := $p2i.ref.i64($p716);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i769 := $add.i64($i768, 40);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p770 := $i2p.i64.ref($i769);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p770, 512);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i771 := $p2i.ref.i64($p716);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i772 := $add.i64($i771, 24);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $p773 := $i2p.i64.ref($i772);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i774 := $p2i.ref.i64($p0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i775 := $add.i64($i774, 16);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p776 := $i2p.i64.ref($i775);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} list_add_tail($p773, $p776);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i777 := $p2i.ref.i64($p716);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i778 := $add.i64($i777, 120);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p779 := $i2p.i64.ref($i778);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} INIT_LIST_HEAD($p779);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i780 := $p2i.ref.i64($p0);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i781 := $add.i64($i780, 1224);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p782 := $i2p.i64.ref($i781);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p783 := $bitcast.ref.ref($p782);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $p784 := $add.ref($p783, $mul.ref(9, 152));
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i785 := $p2i.ref.i64($p784);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i786 := $add.i64($i785, 96);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p787 := $i2p.i64.ref($i786);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p787, $p0);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p783, $mul.ref(9, 152)), $mul.ref(136, 1));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i789 := $load.i8($M.1, $p788);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i790 := $and.i8($i789, $sub.i8(0, 65));
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i791 := $or.i8($i790, 64);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p788, $i791);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i792 := $p2i.ref.i64($p784);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i793 := $add.i64($i792, 136);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p794 := $i2p.i64.ref($i793);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p794, 4);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($p783, $mul.ref(9, 152)), $mul.ref(136, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i796 := $load.i8($M.1, $p795);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i797 := $and.i8($i796, $sub.i8(0, 33));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p795, $i797);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i798 := $p2i.ref.i64($p784);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i799 := $add.i64($i798, 8);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i801 := $p2i.ref.i64($p800);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i802 := $add.i64($i801, 72);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p803 := $i2p.i64.ref($i802);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p804 := $load.ref($M.1, $p803);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p805 := $i2p.i64.ref($i799);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p805, $p804);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i806 := $p2i.ref.i64($p784);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i807 := $add.i64($i806, 16);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p808 := $i2p.i64.ref($i807);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p808, pch_udc_ep_ops);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p809 := $bitcast.ref.ref($p784);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($p809, $mul.ref(136, 1));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i811 := $load.i8($M.1, $p810);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i812 := $zext.i8.i32($i811);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i813 := $ne.i32($i812, 0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i813} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i813 == 1);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i814 := $p2i.ref.i64($p784);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i815 := $add.i64($i814, 104);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i816 := $p2i.ref.i64($p784);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i817 := $add.i64($i816, 136);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p818 := $i2p.i64.ref($i817);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i819 := $load.i8($M.1, $p818);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i820 := $zext.i8.i32($i819);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i821 := $add.i32($i820, 16);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i822 := $mul.i32($i821, 32);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i823 := $sext.i32.i64($i822);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p824 := $i2p.i64.ref($i815);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p824, $i823);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i835 := $p2i.ref.i64($p784);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i836 := $add.i64($i835, 40);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p837 := $i2p.i64.ref($i836);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p837, 512);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i838 := $p2i.ref.i64($p784);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i839 := $add.i64($i838, 24);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p840 := $i2p.i64.ref($i839);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i841 := $p2i.ref.i64($p0);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i842 := $add.i64($i841, 16);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p843 := $i2p.i64.ref($i842);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} list_add_tail($p840, $p843);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i844 := $p2i.ref.i64($p784);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i845 := $add.i64($i844, 120);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p846 := $i2p.i64.ref($i845);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} INIT_LIST_HEAD($p846);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i847 := $p2i.ref.i64($p0);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i848 := $add.i64($i847, 1224);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p849 := $i2p.i64.ref($i848);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p850 := $bitcast.ref.ref($p849);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($p850, $mul.ref(10, 152));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i852 := $p2i.ref.i64($p851);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i853 := $add.i64($i852, 96);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p854 := $i2p.i64.ref($i853);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p854, $p0);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($p850, $mul.ref(10, 152)), $mul.ref(136, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i856 := $load.i8($M.1, $p855);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i857 := $and.i8($i856, $sub.i8(0, 65));
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i858 := $or.i8($i857, 64);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p855, $i858);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i859 := $p2i.ref.i64($p851);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i860 := $add.i64($i859, 136);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p861 := $i2p.i64.ref($i860);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p861, 5);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p850, $mul.ref(10, 152)), $mul.ref(136, 1));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i863 := $load.i8($M.1, $p862);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i864 := $and.i8($i863, $sub.i8(0, 33));
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i865 := $or.i8($i864, 32);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p862, $i865);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i866 := $p2i.ref.i64($p851);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i867 := $add.i64($i866, 8);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i869 := $p2i.ref.i64($p868);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i870 := $add.i64($i869, 80);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p871 := $i2p.i64.ref($i870);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p872 := $load.ref($M.1, $p871);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p873 := $i2p.i64.ref($i867);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p873, $p872);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i874 := $p2i.ref.i64($p851);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i875 := $add.i64($i874, 16);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p876 := $i2p.i64.ref($i875);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p876, pch_udc_ep_ops);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p877 := $bitcast.ref.ref($p851);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($p877, $mul.ref(136, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i879 := $load.i8($M.1, $p878);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i880 := $zext.i8.i32($i879);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i881 := $ne.i32($i880, 0);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i881} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i881 == 1);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i882 := $p2i.ref.i64($p851);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i883 := $add.i64($i882, 104);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i884 := $p2i.ref.i64($p851);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i885 := $add.i64($i884, 136);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p886 := $i2p.i64.ref($i885);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i887 := $load.i8($M.1, $p886);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i888 := $zext.i8.i32($i887);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i889 := $add.i32($i888, 16);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i890 := $mul.i32($i889, 32);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i891 := $sext.i32.i64($i890);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p892 := $i2p.i64.ref($i883);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p892, $i891);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i903 := $p2i.ref.i64($p851);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i904 := $add.i64($i903, 40);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p905 := $i2p.i64.ref($i904);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p905, 512);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i906 := $p2i.ref.i64($p851);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i907 := $add.i64($i906, 24);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $p908 := $i2p.i64.ref($i907);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i909 := $p2i.ref.i64($p0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i910 := $add.i64($i909, 16);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p911 := $i2p.i64.ref($i910);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} list_add_tail($p908, $p911);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i912 := $p2i.ref.i64($p851);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i913 := $add.i64($i912, 120);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p914 := $i2p.i64.ref($i913);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} INIT_LIST_HEAD($p914);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i915 := $p2i.ref.i64($p0);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i916 := $add.i64($i915, 1224);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p917 := $i2p.i64.ref($i916);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p918 := $bitcast.ref.ref($p917);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($p918, $mul.ref(11, 152));
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i920 := $p2i.ref.i64($p919);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i921 := $add.i64($i920, 96);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p922 := $i2p.i64.ref($i921);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p922, $p0);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($add.ref($p918, $mul.ref(11, 152)), $mul.ref(136, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i924 := $load.i8($M.1, $p923);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i925 := $and.i8($i924, $sub.i8(0, 65));
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i926 := $or.i8($i925, 64);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p923, $i926);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i927 := $p2i.ref.i64($p919);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i928 := $add.i64($i927, 136);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p929 := $i2p.i64.ref($i928);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p929, 5);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($p918, $mul.ref(11, 152)), $mul.ref(136, 1));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i931 := $load.i8($M.1, $p930);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i932 := $and.i8($i931, $sub.i8(0, 33));
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p930, $i932);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i933 := $p2i.ref.i64($p919);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i934 := $add.i64($i933, 8);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p935 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i936 := $p2i.ref.i64($p935);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i937 := $add.i64($i936, 88);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p938 := $i2p.i64.ref($i937);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p939 := $load.ref($M.1, $p938);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p940 := $i2p.i64.ref($i934);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p940, $p939);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i941 := $p2i.ref.i64($p919);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i942 := $add.i64($i941, 16);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p943 := $i2p.i64.ref($i942);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p943, pch_udc_ep_ops);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p944 := $bitcast.ref.ref($p919);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($p944, $mul.ref(136, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i946 := $load.i8($M.1, $p945);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i947 := $zext.i8.i32($i946);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i948 := $ne.i32($i947, 0);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i948} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i948 == 1);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i949 := $p2i.ref.i64($p919);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i950 := $add.i64($i949, 104);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i951 := $p2i.ref.i64($p919);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i952 := $add.i64($i951, 136);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p953 := $i2p.i64.ref($i952);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i954 := $load.i8($M.1, $p953);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i955 := $zext.i8.i32($i954);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i956 := $add.i32($i955, 16);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i957 := $mul.i32($i956, 32);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i958 := $sext.i32.i64($i957);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p959 := $i2p.i64.ref($i950);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p959, $i958);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i970 := $p2i.ref.i64($p919);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i971 := $add.i64($i970, 40);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p972 := $i2p.i64.ref($i971);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p972, 512);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i973 := $p2i.ref.i64($p919);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i974 := $add.i64($i973, 24);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p975 := $i2p.i64.ref($i974);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i976 := $p2i.ref.i64($p0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i977 := $add.i64($i976, 16);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p978 := $i2p.i64.ref($i977);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} list_add_tail($p975, $p978);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i979 := $p2i.ref.i64($p919);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i980 := $add.i64($i979, 120);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p981 := $i2p.i64.ref($i980);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} INIT_LIST_HEAD($p981);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i982 := $p2i.ref.i64($p0);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i983 := $add.i64($i982, 1224);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p984 := $i2p.i64.ref($i983);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p985 := $bitcast.ref.ref($p984);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($p985, $mul.ref(12, 152));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i987 := $p2i.ref.i64($p986);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i988 := $add.i64($i987, 96);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p989 := $i2p.i64.ref($i988);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p989, $p0);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($p985, $mul.ref(12, 152)), $mul.ref(136, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i991 := $load.i8($M.1, $p990);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i992 := $and.i8($i991, $sub.i8(0, 65));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i993 := $or.i8($i992, 64);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p990, $i993);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i994 := $p2i.ref.i64($p986);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i995 := $add.i64($i994, 136);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p996 := $i2p.i64.ref($i995);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p996, 6);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($add.ref($p985, $mul.ref(12, 152)), $mul.ref(136, 1));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i998 := $load.i8($M.1, $p997);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i999 := $and.i8($i998, $sub.i8(0, 33));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i1000 := $or.i8($i999, 32);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p997, $i1000);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i1001 := $p2i.ref.i64($p986);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i1002 := $add.i64($i1001, 8);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i1004 := $p2i.ref.i64($p1003);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i1005 := $add.i64($i1004, 96);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p1006 := $i2p.i64.ref($i1005);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p1007 := $load.ref($M.1, $p1006);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p1008 := $i2p.i64.ref($i1002);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1008, $p1007);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i1009 := $p2i.ref.i64($p986);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i1010 := $add.i64($i1009, 16);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p1011 := $i2p.i64.ref($i1010);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1011, pch_udc_ep_ops);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p1012 := $bitcast.ref.ref($p986);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($p1012, $mul.ref(136, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i1014 := $load.i8($M.1, $p1013);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i1015 := $zext.i8.i32($i1014);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i1016 := $ne.i32($i1015, 0);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1016} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i1016 == 1);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i1017 := $p2i.ref.i64($p986);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i1018 := $add.i64($i1017, 104);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i1019 := $p2i.ref.i64($p986);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i1020 := $add.i64($i1019, 136);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p1021 := $i2p.i64.ref($i1020);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i1022 := $load.i8($M.1, $p1021);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i1023 := $zext.i8.i32($i1022);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i1024 := $add.i32($i1023, 16);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i1025 := $mul.i32($i1024, 32);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i1026 := $sext.i32.i64($i1025);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p1027 := $i2p.i64.ref($i1018);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1027, $i1026);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i1038 := $p2i.ref.i64($p986);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i1039 := $add.i64($i1038, 40);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p1040 := $i2p.i64.ref($i1039);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1040, 512);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i1041 := $p2i.ref.i64($p986);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i1042 := $add.i64($i1041, 24);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p1043 := $i2p.i64.ref($i1042);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i1044 := $p2i.ref.i64($p0);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i1045 := $add.i64($i1044, 16);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p1046 := $i2p.i64.ref($i1045);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} list_add_tail($p1043, $p1046);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i1047 := $p2i.ref.i64($p986);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i1048 := $add.i64($i1047, 120);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p1049 := $i2p.i64.ref($i1048);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} INIT_LIST_HEAD($p1049);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i1050 := $p2i.ref.i64($p0);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i1051 := $add.i64($i1050, 1224);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p1052 := $i2p.i64.ref($i1051);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p1053 := $bitcast.ref.ref($p1052);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($p1053, $mul.ref(13, 152));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i1055 := $p2i.ref.i64($p1054);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i1056 := $add.i64($i1055, 96);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p1057 := $i2p.i64.ref($i1056);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1057, $p0);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($p1053, $mul.ref(13, 152)), $mul.ref(136, 1));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i1059 := $load.i8($M.1, $p1058);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i1060 := $and.i8($i1059, $sub.i8(0, 65));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i1061 := $or.i8($i1060, 64);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1058, $i1061);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i1062 := $p2i.ref.i64($p1054);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i1063 := $add.i64($i1062, 136);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p1064 := $i2p.i64.ref($i1063);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1064, 6);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($p1053, $mul.ref(13, 152)), $mul.ref(136, 1));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i1066 := $load.i8($M.1, $p1065);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i1067 := $and.i8($i1066, $sub.i8(0, 33));
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1065, $i1067);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i1068 := $p2i.ref.i64($p1054);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i1069 := $add.i64($i1068, 8);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p1070 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i1071 := $p2i.ref.i64($p1070);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i1072 := $add.i64($i1071, 104);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p1073 := $i2p.i64.ref($i1072);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p1074 := $load.ref($M.1, $p1073);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p1075 := $i2p.i64.ref($i1069);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1075, $p1074);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i1076 := $p2i.ref.i64($p1054);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i1077 := $add.i64($i1076, 16);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p1078 := $i2p.i64.ref($i1077);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1078, pch_udc_ep_ops);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $p1079 := $bitcast.ref.ref($p1054);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($p1079, $mul.ref(136, 1));
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i1081 := $load.i8($M.1, $p1080);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i1082 := $zext.i8.i32($i1081);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i1083 := $ne.i32($i1082, 0);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1083} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i1083 == 1);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i1084 := $p2i.ref.i64($p1054);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i1085 := $add.i64($i1084, 104);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i1086 := $p2i.ref.i64($p1054);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i1087 := $add.i64($i1086, 136);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p1088 := $i2p.i64.ref($i1087);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i1089 := $load.i8($M.1, $p1088);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i1090 := $zext.i8.i32($i1089);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i1091 := $add.i32($i1090, 16);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i1092 := $mul.i32($i1091, 32);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i1093 := $sext.i32.i64($i1092);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p1094 := $i2p.i64.ref($i1085);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1094, $i1093);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i1105 := $p2i.ref.i64($p1054);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i1106 := $add.i64($i1105, 40);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p1107 := $i2p.i64.ref($i1106);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1107, 512);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i1108 := $p2i.ref.i64($p1054);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i1109 := $add.i64($i1108, 24);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p1110 := $i2p.i64.ref($i1109);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i1111 := $p2i.ref.i64($p0);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i1112 := $add.i64($i1111, 16);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $p1113 := $i2p.i64.ref($i1112);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} list_add_tail($p1110, $p1113);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i1114 := $p2i.ref.i64($p1054);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i1115 := $add.i64($i1114, 120);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p1116 := $i2p.i64.ref($i1115);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} INIT_LIST_HEAD($p1116);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i1117 := $p2i.ref.i64($p0);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i1118 := $add.i64($i1117, 1224);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $p1119 := $i2p.i64.ref($i1118);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p1120 := $bitcast.ref.ref($p1119);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($p1120, $mul.ref(14, 152));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i1122 := $p2i.ref.i64($p1121);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i1123 := $add.i64($i1122, 96);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p1124 := $i2p.i64.ref($i1123);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1124, $p0);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($p1120, $mul.ref(14, 152)), $mul.ref(136, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i1126 := $load.i8($M.1, $p1125);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i1127 := $and.i8($i1126, $sub.i8(0, 65));
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i1128 := $or.i8($i1127, 64);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1125, $i1128);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i1129 := $p2i.ref.i64($p1121);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i1130 := $add.i64($i1129, 136);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p1131 := $i2p.i64.ref($i1130);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1131, 7);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p1132 := $add.ref($add.ref($p1120, $mul.ref(14, 152)), $mul.ref(136, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i1133 := $load.i8($M.1, $p1132);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i1134 := $and.i8($i1133, $sub.i8(0, 33));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i1135 := $or.i8($i1134, 32);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1132, $i1135);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i1136 := $p2i.ref.i64($p1121);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i1137 := $add.i64($i1136, 8);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p1138 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i1139 := $p2i.ref.i64($p1138);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i1140 := $add.i64($i1139, 112);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p1141 := $i2p.i64.ref($i1140);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p1142 := $load.ref($M.1, $p1141);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p1143 := $i2p.i64.ref($i1137);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1143, $p1142);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i1144 := $p2i.ref.i64($p1121);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i1145 := $add.i64($i1144, 16);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p1146 := $i2p.i64.ref($i1145);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1146, pch_udc_ep_ops);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p1147 := $bitcast.ref.ref($p1121);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p1148 := $add.ref($p1147, $mul.ref(136, 1));
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i1149 := $load.i8($M.1, $p1148);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i1150 := $zext.i8.i32($i1149);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i1151 := $ne.i32($i1150, 0);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1151} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i1151 == 1);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i1152 := $p2i.ref.i64($p1121);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i1153 := $add.i64($i1152, 104);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i1154 := $p2i.ref.i64($p1121);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i1155 := $add.i64($i1154, 136);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p1156 := $i2p.i64.ref($i1155);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i1157 := $load.i8($M.1, $p1156);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i1158 := $zext.i8.i32($i1157);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i1159 := $add.i32($i1158, 16);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i1160 := $mul.i32($i1159, 32);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i1161 := $sext.i32.i64($i1160);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p1162 := $i2p.i64.ref($i1153);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1162, $i1161);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i1173 := $p2i.ref.i64($p1121);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i1174 := $add.i64($i1173, 40);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p1175 := $i2p.i64.ref($i1174);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1175, 512);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i1176 := $p2i.ref.i64($p1121);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i1177 := $add.i64($i1176, 24);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p1178 := $i2p.i64.ref($i1177);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i1179 := $p2i.ref.i64($p0);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i1180 := $add.i64($i1179, 16);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p1181 := $i2p.i64.ref($i1180);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} list_add_tail($p1178, $p1181);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i1182 := $p2i.ref.i64($p1121);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i1183 := $add.i64($i1182, 120);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p1184 := $i2p.i64.ref($i1183);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} INIT_LIST_HEAD($p1184);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i1185 := $p2i.ref.i64($p0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i1186 := $add.i64($i1185, 1224);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p1187 := $i2p.i64.ref($i1186);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p1188 := $bitcast.ref.ref($p1187);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p1189 := $add.ref($p1188, $mul.ref(15, 152));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i1190 := $p2i.ref.i64($p1189);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i1191 := $add.i64($i1190, 96);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p1192 := $i2p.i64.ref($i1191);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1192, $p0);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p1193 := $add.ref($add.ref($p1188, $mul.ref(15, 152)), $mul.ref(136, 1));
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i1194 := $load.i8($M.1, $p1193);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i1195 := $and.i8($i1194, $sub.i8(0, 65));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i1196 := $or.i8($i1195, 64);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1193, $i1196);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i1197 := $p2i.ref.i64($p1189);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i1198 := $add.i64($i1197, 136);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p1199 := $i2p.i64.ref($i1198);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1199, 7);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($p1188, $mul.ref(15, 152)), $mul.ref(136, 1));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i1201 := $load.i8($M.1, $p1200);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i1202 := $and.i8($i1201, $sub.i8(0, 33));
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1200, $i1202);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i1203 := $p2i.ref.i64($p1189);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i1204 := $add.i64($i1203, 8);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p1205 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i1206 := $p2i.ref.i64($p1205);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i1207 := $add.i64($i1206, 120);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p1208 := $i2p.i64.ref($i1207);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p1209 := $load.ref($M.1, $p1208);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p1210 := $i2p.i64.ref($i1204);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1210, $p1209);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i1211 := $p2i.ref.i64($p1189);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i1212 := $add.i64($i1211, 16);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $p1213 := $i2p.i64.ref($i1212);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1213, pch_udc_ep_ops);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $p1214 := $bitcast.ref.ref($p1189);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p1215 := $add.ref($p1214, $mul.ref(136, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i1216 := $load.i8($M.1, $p1215);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i1217 := $zext.i8.i32($i1216);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i1218 := $ne.i32($i1217, 0);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1218} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i1218 == 1);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i1219 := $p2i.ref.i64($p1189);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i1220 := $add.i64($i1219, 104);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i1221 := $p2i.ref.i64($p1189);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i1222 := $add.i64($i1221, 136);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p1223 := $i2p.i64.ref($i1222);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i1224 := $load.i8($M.1, $p1223);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i1225 := $zext.i8.i32($i1224);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i1226 := $add.i32($i1225, 16);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i1227 := $mul.i32($i1226, 32);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i1228 := $sext.i32.i64($i1227);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p1229 := $i2p.i64.ref($i1220);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1229, $i1228);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i1240 := $p2i.ref.i64($p1189);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i1241 := $add.i64($i1240, 40);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p1242 := $i2p.i64.ref($i1241);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1242, 512);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i1243 := $p2i.ref.i64($p1189);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i1244 := $add.i64($i1243, 24);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p1245 := $i2p.i64.ref($i1244);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i1246 := $p2i.ref.i64($p0);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i1247 := $add.i64($i1246, 16);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p1248 := $i2p.i64.ref($i1247);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} list_add_tail($p1245, $p1248);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i1249 := $p2i.ref.i64($p1189);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i1250 := $add.i64($i1249, 120);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p1251 := $i2p.i64.ref($i1250);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} INIT_LIST_HEAD($p1251);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i1252 := $p2i.ref.i64($p0);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i1253 := $add.i64($i1252, 1224);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p1254 := $i2p.i64.ref($i1253);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p1255 := $bitcast.ref.ref($p1254);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p1256 := $add.ref($p1255, $mul.ref(16, 152));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i1257 := $p2i.ref.i64($p1256);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i1258 := $add.i64($i1257, 96);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $p1259 := $i2p.i64.ref($i1258);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1259, $p0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p1260 := $add.ref($add.ref($p1255, $mul.ref(16, 152)), $mul.ref(136, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i1261 := $load.i8($M.1, $p1260);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i1262 := $and.i8($i1261, $sub.i8(0, 65));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i1263 := $or.i8($i1262, 64);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1260, $i1263);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i1264 := $p2i.ref.i64($p1256);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i1265 := $add.i64($i1264, 136);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $p1266 := $i2p.i64.ref($i1265);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1266, 8);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p1267 := $add.ref($add.ref($p1255, $mul.ref(16, 152)), $mul.ref(136, 1));
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i1268 := $load.i8($M.1, $p1267);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i1269 := $and.i8($i1268, $sub.i8(0, 33));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i1270 := $or.i8($i1269, 32);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1267, $i1270);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i1271 := $p2i.ref.i64($p1256);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i1272 := $add.i64($i1271, 8);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p1273 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i1274 := $p2i.ref.i64($p1273);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i1275 := $add.i64($i1274, 128);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p1276 := $i2p.i64.ref($i1275);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p1277 := $load.ref($M.1, $p1276);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p1278 := $i2p.i64.ref($i1272);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1278, $p1277);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i1279 := $p2i.ref.i64($p1256);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i1280 := $add.i64($i1279, 16);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p1281 := $i2p.i64.ref($i1280);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1281, pch_udc_ep_ops);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p1282 := $bitcast.ref.ref($p1256);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p1283 := $add.ref($p1282, $mul.ref(136, 1));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i1284 := $load.i8($M.1, $p1283);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i1285 := $zext.i8.i32($i1284);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i1286 := $ne.i32($i1285, 0);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1286} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i1286 == 1);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i1287 := $p2i.ref.i64($p1256);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i1288 := $add.i64($i1287, 104);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i1289 := $p2i.ref.i64($p1256);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i1290 := $add.i64($i1289, 136);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p1291 := $i2p.i64.ref($i1290);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i1292 := $load.i8($M.1, $p1291);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i1293 := $zext.i8.i32($i1292);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i1294 := $add.i32($i1293, 16);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i1295 := $mul.i32($i1294, 32);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i1296 := $sext.i32.i64($i1295);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $p1297 := $i2p.i64.ref($i1288);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1297, $i1296);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i1308 := $p2i.ref.i64($p1256);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i1309 := $add.i64($i1308, 40);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p1310 := $i2p.i64.ref($i1309);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1310, 512);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i1311 := $p2i.ref.i64($p1256);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i1312 := $add.i64($i1311, 24);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p1313 := $i2p.i64.ref($i1312);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i1314 := $p2i.ref.i64($p0);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i1315 := $add.i64($i1314, 16);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p1316 := $i2p.i64.ref($i1315);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} list_add_tail($p1313, $p1316);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i1317 := $p2i.ref.i64($p1256);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i1318 := $add.i64($i1317, 120);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p1319 := $i2p.i64.ref($i1318);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} INIT_LIST_HEAD($p1319);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i1320 := $p2i.ref.i64($p0);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i1321 := $add.i64($i1320, 1224);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p1322 := $i2p.i64.ref($i1321);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p1323 := $bitcast.ref.ref($p1322);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p1324 := $add.ref($p1323, $mul.ref(17, 152));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i1325 := $p2i.ref.i64($p1324);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i1326 := $add.i64($i1325, 96);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p1327 := $i2p.i64.ref($i1326);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1327, $p0);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $p1328 := $add.ref($add.ref($p1323, $mul.ref(17, 152)), $mul.ref(136, 1));
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i1329 := $load.i8($M.1, $p1328);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i1330 := $and.i8($i1329, $sub.i8(0, 65));
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i1331 := $or.i8($i1330, 64);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1328, $i1331);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i1332 := $p2i.ref.i64($p1324);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i1333 := $add.i64($i1332, 136);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p1334 := $i2p.i64.ref($i1333);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1334, 8);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p1335 := $add.ref($add.ref($p1323, $mul.ref(17, 152)), $mul.ref(136, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i1336 := $load.i8($M.1, $p1335);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i1337 := $and.i8($i1336, $sub.i8(0, 33));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1335, $i1337);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i1338 := $p2i.ref.i64($p1324);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i1339 := $add.i64($i1338, 8);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p1340 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i1341 := $p2i.ref.i64($p1340);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i1342 := $add.i64($i1341, 136);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p1343 := $i2p.i64.ref($i1342);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p1344 := $load.ref($M.1, $p1343);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p1345 := $i2p.i64.ref($i1339);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1345, $p1344);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i1346 := $p2i.ref.i64($p1324);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i1347 := $add.i64($i1346, 16);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p1348 := $i2p.i64.ref($i1347);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1348, pch_udc_ep_ops);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p1349 := $bitcast.ref.ref($p1324);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p1350 := $add.ref($p1349, $mul.ref(136, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i1351 := $load.i8($M.1, $p1350);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i1352 := $zext.i8.i32($i1351);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i1353 := $ne.i32($i1352, 0);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1353} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i1353 == 1);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i1354 := $p2i.ref.i64($p1324);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i1355 := $add.i64($i1354, 104);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i1356 := $p2i.ref.i64($p1324);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i1357 := $add.i64($i1356, 136);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p1358 := $i2p.i64.ref($i1357);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i1359 := $load.i8($M.1, $p1358);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i1360 := $zext.i8.i32($i1359);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i1361 := $add.i32($i1360, 16);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i1362 := $mul.i32($i1361, 32);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i1363 := $sext.i32.i64($i1362);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p1364 := $i2p.i64.ref($i1355);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1364, $i1363);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i1375 := $p2i.ref.i64($p1324);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i1376 := $add.i64($i1375, 40);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p1377 := $i2p.i64.ref($i1376);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1377, 512);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i1378 := $p2i.ref.i64($p1324);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i1379 := $add.i64($i1378, 24);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p1380 := $i2p.i64.ref($i1379);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i1381 := $p2i.ref.i64($p0);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i1382 := $add.i64($i1381, 16);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p1383 := $i2p.i64.ref($i1382);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} list_add_tail($p1380, $p1383);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i1384 := $p2i.ref.i64($p1324);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i1385 := $add.i64($i1384, 120);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p1386 := $i2p.i64.ref($i1385);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} INIT_LIST_HEAD($p1386);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i1387 := $p2i.ref.i64($p0);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i1388 := $add.i64($i1387, 1224);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p1389 := $i2p.i64.ref($i1388);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p1390 := $bitcast.ref.ref($p1389);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p1391 := $add.ref($p1390, $mul.ref(18, 152));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i1392 := $p2i.ref.i64($p1391);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i1393 := $add.i64($i1392, 96);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p1394 := $i2p.i64.ref($i1393);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1394, $p0);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($p1390, $mul.ref(18, 152)), $mul.ref(136, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i1396 := $load.i8($M.1, $p1395);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i1397 := $and.i8($i1396, $sub.i8(0, 65));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i1398 := $or.i8($i1397, 64);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1395, $i1398);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i1399 := $p2i.ref.i64($p1391);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i1400 := $add.i64($i1399, 136);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p1401 := $i2p.i64.ref($i1400);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1401, 9);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p1402 := $add.ref($add.ref($p1390, $mul.ref(18, 152)), $mul.ref(136, 1));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i1403 := $load.i8($M.1, $p1402);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i1404 := $and.i8($i1403, $sub.i8(0, 33));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i1405 := $or.i8($i1404, 32);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1402, $i1405);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i1406 := $p2i.ref.i64($p1391);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i1407 := $add.i64($i1406, 8);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $p1408 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i1409 := $p2i.ref.i64($p1408);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i1410 := $add.i64($i1409, 144);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p1411 := $i2p.i64.ref($i1410);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p1412 := $load.ref($M.1, $p1411);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p1413 := $i2p.i64.ref($i1407);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1413, $p1412);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i1414 := $p2i.ref.i64($p1391);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i1415 := $add.i64($i1414, 16);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p1416 := $i2p.i64.ref($i1415);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1416, pch_udc_ep_ops);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p1417 := $bitcast.ref.ref($p1391);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p1418 := $add.ref($p1417, $mul.ref(136, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i1419 := $load.i8($M.1, $p1418);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i1420 := $zext.i8.i32($i1419);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i1421 := $ne.i32($i1420, 0);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1421} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i1421 == 1);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i1422 := $p2i.ref.i64($p1391);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i1423 := $add.i64($i1422, 104);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i1424 := $p2i.ref.i64($p1391);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i1425 := $add.i64($i1424, 136);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p1426 := $i2p.i64.ref($i1425);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i1427 := $load.i8($M.1, $p1426);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i1428 := $zext.i8.i32($i1427);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i1429 := $add.i32($i1428, 16);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i1430 := $mul.i32($i1429, 32);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i1431 := $sext.i32.i64($i1430);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p1432 := $i2p.i64.ref($i1423);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1432, $i1431);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i1443 := $p2i.ref.i64($p1391);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i1444 := $add.i64($i1443, 40);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p1445 := $i2p.i64.ref($i1444);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1445, 512);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i1446 := $p2i.ref.i64($p1391);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i1447 := $add.i64($i1446, 24);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p1448 := $i2p.i64.ref($i1447);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i1449 := $p2i.ref.i64($p0);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i1450 := $add.i64($i1449, 16);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p1451 := $i2p.i64.ref($i1450);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} list_add_tail($p1448, $p1451);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i1452 := $p2i.ref.i64($p1391);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i1453 := $add.i64($i1452, 120);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p1454 := $i2p.i64.ref($i1453);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} INIT_LIST_HEAD($p1454);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i1455 := $p2i.ref.i64($p0);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i1456 := $add.i64($i1455, 1224);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p1457 := $i2p.i64.ref($i1456);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $p1458 := $bitcast.ref.ref($p1457);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p1459 := $add.ref($p1458, $mul.ref(19, 152));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i1460 := $p2i.ref.i64($p1459);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i1461 := $add.i64($i1460, 96);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p1462 := $i2p.i64.ref($i1461);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1462, $p0);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p1463 := $add.ref($add.ref($p1458, $mul.ref(19, 152)), $mul.ref(136, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i1464 := $load.i8($M.1, $p1463);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i1465 := $and.i8($i1464, $sub.i8(0, 65));
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i1466 := $or.i8($i1465, 64);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1463, $i1466);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i1467 := $p2i.ref.i64($p1459);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i1468 := $add.i64($i1467, 136);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p1469 := $i2p.i64.ref($i1468);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1469, 9);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p1470 := $add.ref($add.ref($p1458, $mul.ref(19, 152)), $mul.ref(136, 1));
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i1471 := $load.i8($M.1, $p1470);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i1472 := $and.i8($i1471, $sub.i8(0, 33));
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1470, $i1472);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i1473 := $p2i.ref.i64($p1459);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i1474 := $add.i64($i1473, 8);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p1475 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i1476 := $p2i.ref.i64($p1475);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i1477 := $add.i64($i1476, 152);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p1478 := $i2p.i64.ref($i1477);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p1479 := $load.ref($M.1, $p1478);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $p1480 := $i2p.i64.ref($i1474);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1480, $p1479);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i1481 := $p2i.ref.i64($p1459);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i1482 := $add.i64($i1481, 16);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p1483 := $i2p.i64.ref($i1482);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1483, pch_udc_ep_ops);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p1484 := $bitcast.ref.ref($p1459);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($p1484, $mul.ref(136, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i1486 := $load.i8($M.1, $p1485);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i1487 := $zext.i8.i32($i1486);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i1488 := $ne.i32($i1487, 0);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1488} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i1488 == 1);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i1489 := $p2i.ref.i64($p1459);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i1490 := $add.i64($i1489, 104);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i1491 := $p2i.ref.i64($p1459);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i1492 := $add.i64($i1491, 136);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p1493 := $i2p.i64.ref($i1492);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i1494 := $load.i8($M.1, $p1493);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i1495 := $zext.i8.i32($i1494);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i1496 := $add.i32($i1495, 16);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i1497 := $mul.i32($i1496, 32);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i1498 := $sext.i32.i64($i1497);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $p1499 := $i2p.i64.ref($i1490);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1499, $i1498);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i1510 := $p2i.ref.i64($p1459);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i1511 := $add.i64($i1510, 40);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $p1512 := $i2p.i64.ref($i1511);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1512, 512);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i1513 := $p2i.ref.i64($p1459);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i1514 := $add.i64($i1513, 24);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p1515 := $i2p.i64.ref($i1514);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i1516 := $p2i.ref.i64($p0);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i1517 := $add.i64($i1516, 16);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p1518 := $i2p.i64.ref($i1517);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} list_add_tail($p1515, $p1518);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i1519 := $p2i.ref.i64($p1459);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i1520 := $add.i64($i1519, 120);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p1521 := $i2p.i64.ref($i1520);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} INIT_LIST_HEAD($p1521);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i1522 := $p2i.ref.i64($p0);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i1523 := $add.i64($i1522, 1224);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p1524 := $i2p.i64.ref($i1523);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p1525 := $bitcast.ref.ref($p1524);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($p1525, $mul.ref(20, 152));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i1527 := $p2i.ref.i64($p1526);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i1528 := $add.i64($i1527, 96);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $p1529 := $i2p.i64.ref($i1528);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1529, $p0);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p1530 := $add.ref($add.ref($p1525, $mul.ref(20, 152)), $mul.ref(136, 1));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i1531 := $load.i8($M.1, $p1530);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i1532 := $and.i8($i1531, $sub.i8(0, 65));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i1533 := $or.i8($i1532, 64);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1530, $i1533);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i1534 := $p2i.ref.i64($p1526);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i1535 := $add.i64($i1534, 136);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p1536 := $i2p.i64.ref($i1535);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1536, 10);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($p1525, $mul.ref(20, 152)), $mul.ref(136, 1));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i1538 := $load.i8($M.1, $p1537);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i1539 := $and.i8($i1538, $sub.i8(0, 33));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i1540 := $or.i8($i1539, 32);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1537, $i1540);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i1541 := $p2i.ref.i64($p1526);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i1542 := $add.i64($i1541, 8);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p1543 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i1544 := $p2i.ref.i64($p1543);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i1545 := $add.i64($i1544, 160);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p1546 := $i2p.i64.ref($i1545);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p1547 := $load.ref($M.1, $p1546);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p1548 := $i2p.i64.ref($i1542);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1548, $p1547);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i1549 := $p2i.ref.i64($p1526);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i1550 := $add.i64($i1549, 16);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $p1551 := $i2p.i64.ref($i1550);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1551, pch_udc_ep_ops);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $p1552 := $bitcast.ref.ref($p1526);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p1553 := $add.ref($p1552, $mul.ref(136, 1));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i1554 := $load.i8($M.1, $p1553);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i1555 := $zext.i8.i32($i1554);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i1556 := $ne.i32($i1555, 0);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1556} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i1556 == 1);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i1557 := $p2i.ref.i64($p1526);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i1558 := $add.i64($i1557, 104);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i1559 := $p2i.ref.i64($p1526);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i1560 := $add.i64($i1559, 136);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p1561 := $i2p.i64.ref($i1560);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i1562 := $load.i8($M.1, $p1561);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i1563 := $zext.i8.i32($i1562);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i1564 := $add.i32($i1563, 16);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i1565 := $mul.i32($i1564, 32);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i1566 := $sext.i32.i64($i1565);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p1567 := $i2p.i64.ref($i1558);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1567, $i1566);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i1578 := $p2i.ref.i64($p1526);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i1579 := $add.i64($i1578, 40);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p1580 := $i2p.i64.ref($i1579);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1580, 512);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i1581 := $p2i.ref.i64($p1526);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i1582 := $add.i64($i1581, 24);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p1583 := $i2p.i64.ref($i1582);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i1584 := $p2i.ref.i64($p0);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i1585 := $add.i64($i1584, 16);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p1586 := $i2p.i64.ref($i1585);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} list_add_tail($p1583, $p1586);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i1587 := $p2i.ref.i64($p1526);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i1588 := $add.i64($i1587, 120);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p1589 := $i2p.i64.ref($i1588);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} INIT_LIST_HEAD($p1589);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i1590 := $p2i.ref.i64($p0);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i1591 := $add.i64($i1590, 1224);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p1592 := $i2p.i64.ref($i1591);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p1593 := $bitcast.ref.ref($p1592);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p1594 := $add.ref($p1593, $mul.ref(21, 152));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i1595 := $p2i.ref.i64($p1594);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i1596 := $add.i64($i1595, 96);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p1597 := $i2p.i64.ref($i1596);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1597, $p0);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p1598 := $add.ref($add.ref($p1593, $mul.ref(21, 152)), $mul.ref(136, 1));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i1599 := $load.i8($M.1, $p1598);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i1600 := $and.i8($i1599, $sub.i8(0, 65));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i1601 := $or.i8($i1600, 64);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1598, $i1601);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i1602 := $p2i.ref.i64($p1594);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i1603 := $add.i64($i1602, 136);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p1604 := $i2p.i64.ref($i1603);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1604, 10);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p1605 := $add.ref($add.ref($p1593, $mul.ref(21, 152)), $mul.ref(136, 1));
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i1606 := $load.i8($M.1, $p1605);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i1607 := $and.i8($i1606, $sub.i8(0, 33));
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1605, $i1607);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i1608 := $p2i.ref.i64($p1594);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i1609 := $add.i64($i1608, 8);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p1610 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i1611 := $p2i.ref.i64($p1610);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i1612 := $add.i64($i1611, 168);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p1613 := $i2p.i64.ref($i1612);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p1614 := $load.ref($M.1, $p1613);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p1615 := $i2p.i64.ref($i1609);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1615, $p1614);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i1616 := $p2i.ref.i64($p1594);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i1617 := $add.i64($i1616, 16);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $p1618 := $i2p.i64.ref($i1617);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1618, pch_udc_ep_ops);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p1619 := $bitcast.ref.ref($p1594);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p1620 := $add.ref($p1619, $mul.ref(136, 1));
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i1621 := $load.i8($M.1, $p1620);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i1622 := $zext.i8.i32($i1621);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i1623 := $ne.i32($i1622, 0);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1623} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i1623 == 1);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i1624 := $p2i.ref.i64($p1594);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i1625 := $add.i64($i1624, 104);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i1626 := $p2i.ref.i64($p1594);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i1627 := $add.i64($i1626, 136);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p1628 := $i2p.i64.ref($i1627);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i1629 := $load.i8($M.1, $p1628);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i1630 := $zext.i8.i32($i1629);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i1631 := $add.i32($i1630, 16);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i1632 := $mul.i32($i1631, 32);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i1633 := $sext.i32.i64($i1632);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p1634 := $i2p.i64.ref($i1625);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1634, $i1633);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i1645 := $p2i.ref.i64($p1594);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i1646 := $add.i64($i1645, 40);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p1647 := $i2p.i64.ref($i1646);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1647, 512);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i1648 := $p2i.ref.i64($p1594);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i1649 := $add.i64($i1648, 24);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p1650 := $i2p.i64.ref($i1649);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i1651 := $p2i.ref.i64($p0);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i1652 := $add.i64($i1651, 16);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p1653 := $i2p.i64.ref($i1652);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} list_add_tail($p1650, $p1653);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i1654 := $p2i.ref.i64($p1594);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i1655 := $add.i64($i1654, 120);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $p1656 := $i2p.i64.ref($i1655);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} INIT_LIST_HEAD($p1656);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i1657 := $p2i.ref.i64($p0);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i1658 := $add.i64($i1657, 1224);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p1659 := $i2p.i64.ref($i1658);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p1660 := $bitcast.ref.ref($p1659);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $p1661 := $add.ref($p1660, $mul.ref(22, 152));
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i1662 := $p2i.ref.i64($p1661);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i1663 := $add.i64($i1662, 96);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p1664 := $i2p.i64.ref($i1663);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1664, $p0);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p1665 := $add.ref($add.ref($p1660, $mul.ref(22, 152)), $mul.ref(136, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i1666 := $load.i8($M.1, $p1665);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i1667 := $and.i8($i1666, $sub.i8(0, 65));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i1668 := $or.i8($i1667, 64);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1665, $i1668);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i1669 := $p2i.ref.i64($p1661);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i1670 := $add.i64($i1669, 136);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p1671 := $i2p.i64.ref($i1670);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1671, 11);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p1672 := $add.ref($add.ref($p1660, $mul.ref(22, 152)), $mul.ref(136, 1));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i1673 := $load.i8($M.1, $p1672);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i1674 := $and.i8($i1673, $sub.i8(0, 33));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i1675 := $or.i8($i1674, 32);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1672, $i1675);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i1676 := $p2i.ref.i64($p1661);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i1677 := $add.i64($i1676, 8);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p1678 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i1679 := $p2i.ref.i64($p1678);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i1680 := $add.i64($i1679, 176);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p1681 := $i2p.i64.ref($i1680);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p1682 := $load.ref($M.1, $p1681);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p1683 := $i2p.i64.ref($i1677);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1683, $p1682);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i1684 := $p2i.ref.i64($p1661);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i1685 := $add.i64($i1684, 16);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p1686 := $i2p.i64.ref($i1685);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1686, pch_udc_ep_ops);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $p1687 := $bitcast.ref.ref($p1661);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p1688 := $add.ref($p1687, $mul.ref(136, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i1689 := $load.i8($M.1, $p1688);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i1690 := $zext.i8.i32($i1689);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i1691 := $ne.i32($i1690, 0);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1691} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i1691 == 1);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i1692 := $p2i.ref.i64($p1661);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i1693 := $add.i64($i1692, 104);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i1694 := $p2i.ref.i64($p1661);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i1695 := $add.i64($i1694, 136);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $p1696 := $i2p.i64.ref($i1695);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i1697 := $load.i8($M.1, $p1696);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i1698 := $zext.i8.i32($i1697);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i1699 := $add.i32($i1698, 16);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i1700 := $mul.i32($i1699, 32);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i1701 := $sext.i32.i64($i1700);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $p1702 := $i2p.i64.ref($i1693);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1702, $i1701);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i1713 := $p2i.ref.i64($p1661);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i1714 := $add.i64($i1713, 40);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p1715 := $i2p.i64.ref($i1714);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1715, 512);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i1716 := $p2i.ref.i64($p1661);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i1717 := $add.i64($i1716, 24);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p1718 := $i2p.i64.ref($i1717);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i1719 := $p2i.ref.i64($p0);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i1720 := $add.i64($i1719, 16);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p1721 := $i2p.i64.ref($i1720);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} list_add_tail($p1718, $p1721);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i1722 := $p2i.ref.i64($p1661);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i1723 := $add.i64($i1722, 120);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p1724 := $i2p.i64.ref($i1723);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} INIT_LIST_HEAD($p1724);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i1725 := $p2i.ref.i64($p0);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i1726 := $add.i64($i1725, 1224);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p1727 := $i2p.i64.ref($i1726);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $p1728 := $bitcast.ref.ref($p1727);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p1729 := $add.ref($p1728, $mul.ref(23, 152));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i1730 := $p2i.ref.i64($p1729);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i1731 := $add.i64($i1730, 96);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p1732 := $i2p.i64.ref($i1731);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1732, $p0);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $p1733 := $add.ref($add.ref($p1728, $mul.ref(23, 152)), $mul.ref(136, 1));
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i1734 := $load.i8($M.1, $p1733);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i1735 := $and.i8($i1734, $sub.i8(0, 65));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i1736 := $or.i8($i1735, 64);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1733, $i1736);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i1737 := $p2i.ref.i64($p1729);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i1738 := $add.i64($i1737, 136);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p1739 := $i2p.i64.ref($i1738);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1739, 11);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p1740 := $add.ref($add.ref($p1728, $mul.ref(23, 152)), $mul.ref(136, 1));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i1741 := $load.i8($M.1, $p1740);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i1742 := $and.i8($i1741, $sub.i8(0, 33));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1740, $i1742);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i1743 := $p2i.ref.i64($p1729);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i1744 := $add.i64($i1743, 8);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p1745 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i1746 := $p2i.ref.i64($p1745);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i1747 := $add.i64($i1746, 184);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p1748 := $i2p.i64.ref($i1747);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $p1749 := $load.ref($M.1, $p1748);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p1750 := $i2p.i64.ref($i1744);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1750, $p1749);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i1751 := $p2i.ref.i64($p1729);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i1752 := $add.i64($i1751, 16);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p1753 := $i2p.i64.ref($i1752);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1753, pch_udc_ep_ops);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p1754 := $bitcast.ref.ref($p1729);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $p1755 := $add.ref($p1754, $mul.ref(136, 1));
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i1756 := $load.i8($M.1, $p1755);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i1757 := $zext.i8.i32($i1756);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i1758 := $ne.i32($i1757, 0);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1758} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i1758 == 1);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i1759 := $p2i.ref.i64($p1729);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i1760 := $add.i64($i1759, 104);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i1761 := $p2i.ref.i64($p1729);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i1762 := $add.i64($i1761, 136);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p1763 := $i2p.i64.ref($i1762);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i1764 := $load.i8($M.1, $p1763);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i1765 := $zext.i8.i32($i1764);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i1766 := $add.i32($i1765, 16);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i1767 := $mul.i32($i1766, 32);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i1768 := $sext.i32.i64($i1767);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p1769 := $i2p.i64.ref($i1760);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1769, $i1768);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i1780 := $p2i.ref.i64($p1729);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i1781 := $add.i64($i1780, 40);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p1782 := $i2p.i64.ref($i1781);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1782, 512);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i1783 := $p2i.ref.i64($p1729);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i1784 := $add.i64($i1783, 24);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p1785 := $i2p.i64.ref($i1784);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i1786 := $p2i.ref.i64($p0);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i1787 := $add.i64($i1786, 16);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p1788 := $i2p.i64.ref($i1787);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} list_add_tail($p1785, $p1788);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i1789 := $p2i.ref.i64($p1729);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i1790 := $add.i64($i1789, 120);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p1791 := $i2p.i64.ref($i1790);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} INIT_LIST_HEAD($p1791);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i1792 := $p2i.ref.i64($p0);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i1793 := $add.i64($i1792, 1224);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p1794 := $i2p.i64.ref($i1793);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p1795 := $bitcast.ref.ref($p1794);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p1796 := $add.ref($p1795, $mul.ref(24, 152));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i1797 := $p2i.ref.i64($p1796);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i1798 := $add.i64($i1797, 96);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p1799 := $i2p.i64.ref($i1798);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1799, $p0);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $p1800 := $add.ref($add.ref($p1795, $mul.ref(24, 152)), $mul.ref(136, 1));
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i1801 := $load.i8($M.1, $p1800);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i1802 := $and.i8($i1801, $sub.i8(0, 65));
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i1803 := $or.i8($i1802, 64);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1800, $i1803);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i1804 := $p2i.ref.i64($p1796);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i1805 := $add.i64($i1804, 136);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $p1806 := $i2p.i64.ref($i1805);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1806, 12);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p1807 := $add.ref($add.ref($p1795, $mul.ref(24, 152)), $mul.ref(136, 1));
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i1808 := $load.i8($M.1, $p1807);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i1809 := $and.i8($i1808, $sub.i8(0, 33));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i1810 := $or.i8($i1809, 32);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1807, $i1810);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i1811 := $p2i.ref.i64($p1796);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i1812 := $add.i64($i1811, 8);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p1813 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i1814 := $p2i.ref.i64($p1813);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i1815 := $add.i64($i1814, 192);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $p1816 := $i2p.i64.ref($i1815);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p1817 := $load.ref($M.1, $p1816);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p1818 := $i2p.i64.ref($i1812);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1818, $p1817);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i1819 := $p2i.ref.i64($p1796);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i1820 := $add.i64($i1819, 16);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p1821 := $i2p.i64.ref($i1820);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1821, pch_udc_ep_ops);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p1822 := $bitcast.ref.ref($p1796);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $p1823 := $add.ref($p1822, $mul.ref(136, 1));
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i1824 := $load.i8($M.1, $p1823);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i1825 := $zext.i8.i32($i1824);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i1826 := $ne.i32($i1825, 0);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1826} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i1826 == 1);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i1827 := $p2i.ref.i64($p1796);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i1828 := $add.i64($i1827, 104);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i1829 := $p2i.ref.i64($p1796);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i1830 := $add.i64($i1829, 136);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p1831 := $i2p.i64.ref($i1830);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i1832 := $load.i8($M.1, $p1831);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i1833 := $zext.i8.i32($i1832);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i1834 := $add.i32($i1833, 16);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i1835 := $mul.i32($i1834, 32);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i1836 := $sext.i32.i64($i1835);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p1837 := $i2p.i64.ref($i1828);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1837, $i1836);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i1848 := $p2i.ref.i64($p1796);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i1849 := $add.i64($i1848, 40);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p1850 := $i2p.i64.ref($i1849);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1850, 512);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i1851 := $p2i.ref.i64($p1796);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i1852 := $add.i64($i1851, 24);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p1853 := $i2p.i64.ref($i1852);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i1854 := $p2i.ref.i64($p0);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i1855 := $add.i64($i1854, 16);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p1856 := $i2p.i64.ref($i1855);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} list_add_tail($p1853, $p1856);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i1857 := $p2i.ref.i64($p1796);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i1858 := $add.i64($i1857, 120);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $p1859 := $i2p.i64.ref($i1858);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} INIT_LIST_HEAD($p1859);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i1860 := $p2i.ref.i64($p0);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i1861 := $add.i64($i1860, 1224);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p1862 := $i2p.i64.ref($i1861);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p1863 := $bitcast.ref.ref($p1862);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p1864 := $add.ref($p1863, $mul.ref(25, 152));
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i1865 := $p2i.ref.i64($p1864);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i1866 := $add.i64($i1865, 96);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p1867 := $i2p.i64.ref($i1866);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1867, $p0);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p1868 := $add.ref($add.ref($p1863, $mul.ref(25, 152)), $mul.ref(136, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i1869 := $load.i8($M.1, $p1868);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i1870 := $and.i8($i1869, $sub.i8(0, 65));
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i1871 := $or.i8($i1870, 64);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1868, $i1871);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i1872 := $p2i.ref.i64($p1864);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i1873 := $add.i64($i1872, 136);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p1874 := $i2p.i64.ref($i1873);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1874, 12);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p1875 := $add.ref($add.ref($p1863, $mul.ref(25, 152)), $mul.ref(136, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i1876 := $load.i8($M.1, $p1875);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i1877 := $and.i8($i1876, $sub.i8(0, 33));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1875, $i1877);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i1878 := $p2i.ref.i64($p1864);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i1879 := $add.i64($i1878, 8);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p1880 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i1881 := $p2i.ref.i64($p1880);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i1882 := $add.i64($i1881, 200);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p1883 := $i2p.i64.ref($i1882);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p1884 := $load.ref($M.1, $p1883);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $p1885 := $i2p.i64.ref($i1879);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1885, $p1884);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i1886 := $p2i.ref.i64($p1864);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i1887 := $add.i64($i1886, 16);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p1888 := $i2p.i64.ref($i1887);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1888, pch_udc_ep_ops);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $p1889 := $bitcast.ref.ref($p1864);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $p1890 := $add.ref($p1889, $mul.ref(136, 1));
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i1891 := $load.i8($M.1, $p1890);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i1892 := $zext.i8.i32($i1891);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i1893 := $ne.i32($i1892, 0);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1893} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i1893 == 1);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i1894 := $p2i.ref.i64($p1864);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i1895 := $add.i64($i1894, 104);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i1896 := $p2i.ref.i64($p1864);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i1897 := $add.i64($i1896, 136);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $p1898 := $i2p.i64.ref($i1897);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i1899 := $load.i8($M.1, $p1898);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i1900 := $zext.i8.i32($i1899);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i1901 := $add.i32($i1900, 16);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i1902 := $mul.i32($i1901, 32);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i1903 := $sext.i32.i64($i1902);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p1904 := $i2p.i64.ref($i1895);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1904, $i1903);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i1915 := $p2i.ref.i64($p1864);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i1916 := $add.i64($i1915, 40);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p1917 := $i2p.i64.ref($i1916);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1917, 512);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i1918 := $p2i.ref.i64($p1864);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i1919 := $add.i64($i1918, 24);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p1920 := $i2p.i64.ref($i1919);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i1921 := $p2i.ref.i64($p0);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i1922 := $add.i64($i1921, 16);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p1923 := $i2p.i64.ref($i1922);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} list_add_tail($p1920, $p1923);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i1924 := $p2i.ref.i64($p1864);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i1925 := $add.i64($i1924, 120);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p1926 := $i2p.i64.ref($i1925);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} INIT_LIST_HEAD($p1926);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i1927 := $p2i.ref.i64($p0);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i1928 := $add.i64($i1927, 1224);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p1929 := $i2p.i64.ref($i1928);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p1930 := $bitcast.ref.ref($p1929);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p1931 := $add.ref($p1930, $mul.ref(26, 152));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i1932 := $p2i.ref.i64($p1931);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i1933 := $add.i64($i1932, 96);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p1934 := $i2p.i64.ref($i1933);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1934, $p0);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p1935 := $add.ref($add.ref($p1930, $mul.ref(26, 152)), $mul.ref(136, 1));
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i1936 := $load.i8($M.1, $p1935);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i1937 := $and.i8($i1936, $sub.i8(0, 65));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i1938 := $or.i8($i1937, 64);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1935, $i1938);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i1939 := $p2i.ref.i64($p1931);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i1940 := $add.i64($i1939, 136);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p1941 := $i2p.i64.ref($i1940);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1941, 13);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p1942 := $add.ref($add.ref($p1930, $mul.ref(26, 152)), $mul.ref(136, 1));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i1943 := $load.i8($M.1, $p1942);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i1944 := $and.i8($i1943, $sub.i8(0, 33));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i1945 := $or.i8($i1944, 32);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1942, $i1945);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i1946 := $p2i.ref.i64($p1931);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $i1947 := $add.i64($i1946, 8);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p1948 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i1949 := $p2i.ref.i64($p1948);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i1950 := $add.i64($i1949, 208);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p1951 := $i2p.i64.ref($i1950);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p1952 := $load.ref($M.1, $p1951);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p1953 := $i2p.i64.ref($i1947);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1953, $p1952);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i1954 := $p2i.ref.i64($p1931);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i1955 := $add.i64($i1954, 16);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p1956 := $i2p.i64.ref($i1955);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1956, pch_udc_ep_ops);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p1957 := $bitcast.ref.ref($p1931);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $p1958 := $add.ref($p1957, $mul.ref(136, 1));
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i1959 := $load.i8($M.1, $p1958);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i1960 := $zext.i8.i32($i1959);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i1961 := $ne.i32($i1960, 0);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1961} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i1961 == 1);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i1962 := $p2i.ref.i64($p1931);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i1963 := $add.i64($i1962, 104);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i1964 := $p2i.ref.i64($p1931);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i1965 := $add.i64($i1964, 136);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p1966 := $i2p.i64.ref($i1965);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i1967 := $load.i8($M.1, $p1966);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i1968 := $zext.i8.i32($i1967);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i1969 := $add.i32($i1968, 16);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i1970 := $mul.i32($i1969, 32);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i1971 := $sext.i32.i64($i1970);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $p1972 := $i2p.i64.ref($i1963);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1972, $i1971);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i1983 := $p2i.ref.i64($p1931);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i1984 := $add.i64($i1983, 40);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p1985 := $i2p.i64.ref($i1984);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1985, 512);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i1986 := $p2i.ref.i64($p1931);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i1987 := $add.i64($i1986, 24);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p1988 := $i2p.i64.ref($i1987);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i1989 := $p2i.ref.i64($p0);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i1990 := $add.i64($i1989, 16);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p1991 := $i2p.i64.ref($i1990);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} list_add_tail($p1988, $p1991);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i1992 := $p2i.ref.i64($p1931);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i1993 := $add.i64($i1992, 120);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p1994 := $i2p.i64.ref($i1993);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} INIT_LIST_HEAD($p1994);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i1995 := $p2i.ref.i64($p0);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $i1996 := $add.i64($i1995, 1224);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p1997 := $i2p.i64.ref($i1996);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p1998 := $bitcast.ref.ref($p1997);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p1999 := $add.ref($p1998, $mul.ref(27, 152));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i2000 := $p2i.ref.i64($p1999);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i2001 := $add.i64($i2000, 96);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p2002 := $i2p.i64.ref($i2001);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2002, $p0);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p2003 := $add.ref($add.ref($p1998, $mul.ref(27, 152)), $mul.ref(136, 1));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i2004 := $load.i8($M.1, $p2003);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i2005 := $and.i8($i2004, $sub.i8(0, 65));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i2006 := $or.i8($i2005, 64);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2003, $i2006);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i2007 := $p2i.ref.i64($p1999);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i2008 := $add.i64($i2007, 136);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p2009 := $i2p.i64.ref($i2008);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2009, 13);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p2010 := $add.ref($add.ref($p1998, $mul.ref(27, 152)), $mul.ref(136, 1));
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i2011 := $load.i8($M.1, $p2010);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i2012 := $and.i8($i2011, $sub.i8(0, 33));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2010, $i2012);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i2013 := $p2i.ref.i64($p1999);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i2014 := $add.i64($i2013, 8);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p2015 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $i2016 := $p2i.ref.i64($p2015);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i2017 := $add.i64($i2016, 216);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p2018 := $i2p.i64.ref($i2017);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p2019 := $load.ref($M.1, $p2018);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p2020 := $i2p.i64.ref($i2014);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2020, $p2019);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i2021 := $p2i.ref.i64($p1999);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i2022 := $add.i64($i2021, 16);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p2023 := $i2p.i64.ref($i2022);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2023, pch_udc_ep_ops);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p2024 := $bitcast.ref.ref($p1999);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p2025 := $add.ref($p2024, $mul.ref(136, 1));
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i2026 := $load.i8($M.1, $p2025);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i2027 := $zext.i8.i32($i2026);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i2028 := $ne.i32($i2027, 0);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2028} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i2028 == 1);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i2029 := $p2i.ref.i64($p1999);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i2030 := $add.i64($i2029, 104);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i2031 := $p2i.ref.i64($p1999);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i2032 := $add.i64($i2031, 136);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p2033 := $i2p.i64.ref($i2032);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i2034 := $load.i8($M.1, $p2033);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i2035 := $zext.i8.i32($i2034);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i2036 := $add.i32($i2035, 16);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i2037 := $mul.i32($i2036, 32);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i2038 := $sext.i32.i64($i2037);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p2039 := $i2p.i64.ref($i2030);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2039, $i2038);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i2050 := $p2i.ref.i64($p1999);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i2051 := $add.i64($i2050, 40);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p2052 := $i2p.i64.ref($i2051);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2052, 512);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i2053 := $p2i.ref.i64($p1999);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i2054 := $add.i64($i2053, 24);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p2055 := $i2p.i64.ref($i2054);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i2056 := $p2i.ref.i64($p0);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i2057 := $add.i64($i2056, 16);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p2058 := $i2p.i64.ref($i2057);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} list_add_tail($p2055, $p2058);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i2059 := $p2i.ref.i64($p1999);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i2060 := $add.i64($i2059, 120);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p2061 := $i2p.i64.ref($i2060);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} INIT_LIST_HEAD($p2061);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i2062 := $p2i.ref.i64($p0);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i2063 := $add.i64($i2062, 1224);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p2064 := $i2p.i64.ref($i2063);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p2065 := $bitcast.ref.ref($p2064);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p2066 := $add.ref($p2065, $mul.ref(28, 152));
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i2067 := $p2i.ref.i64($p2066);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i2068 := $add.i64($i2067, 96);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p2069 := $i2p.i64.ref($i2068);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2069, $p0);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p2070 := $add.ref($add.ref($p2065, $mul.ref(28, 152)), $mul.ref(136, 1));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i2071 := $load.i8($M.1, $p2070);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i2072 := $and.i8($i2071, $sub.i8(0, 65));
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i2073 := $or.i8($i2072, 64);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2070, $i2073);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i2074 := $p2i.ref.i64($p2066);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i2075 := $add.i64($i2074, 136);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p2076 := $i2p.i64.ref($i2075);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2076, 14);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p2077 := $add.ref($add.ref($p2065, $mul.ref(28, 152)), $mul.ref(136, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i2078 := $load.i8($M.1, $p2077);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i2079 := $and.i8($i2078, $sub.i8(0, 33));
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i2080 := $or.i8($i2079, 32);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2077, $i2080);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i2081 := $p2i.ref.i64($p2066);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i2082 := $add.i64($i2081, 8);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p2083 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i2084 := $p2i.ref.i64($p2083);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i2085 := $add.i64($i2084, 224);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $p2086 := $i2p.i64.ref($i2085);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p2087 := $load.ref($M.1, $p2086);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p2088 := $i2p.i64.ref($i2082);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2088, $p2087);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i2089 := $p2i.ref.i64($p2066);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i2090 := $add.i64($i2089, 16);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p2091 := $i2p.i64.ref($i2090);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2091, pch_udc_ep_ops);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p2092 := $bitcast.ref.ref($p2066);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $p2093 := $add.ref($p2092, $mul.ref(136, 1));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i2094 := $load.i8($M.1, $p2093);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i2095 := $zext.i8.i32($i2094);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i2096 := $ne.i32($i2095, 0);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2096} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i2096 == 1);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i2097 := $p2i.ref.i64($p2066);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i2098 := $add.i64($i2097, 104);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i2099 := $p2i.ref.i64($p2066);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i2100 := $add.i64($i2099, 136);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p2101 := $i2p.i64.ref($i2100);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i2102 := $load.i8($M.1, $p2101);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i2103 := $zext.i8.i32($i2102);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $i2104 := $add.i32($i2103, 16);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i2105 := $mul.i32($i2104, 32);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i2106 := $sext.i32.i64($i2105);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p2107 := $i2p.i64.ref($i2098);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2107, $i2106);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i2118 := $p2i.ref.i64($p2066);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i2119 := $add.i64($i2118, 40);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p2120 := $i2p.i64.ref($i2119);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2120, 512);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i2121 := $p2i.ref.i64($p2066);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i2122 := $add.i64($i2121, 24);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $p2123 := $i2p.i64.ref($i2122);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i2124 := $p2i.ref.i64($p0);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i2125 := $add.i64($i2124, 16);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p2126 := $i2p.i64.ref($i2125);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} list_add_tail($p2123, $p2126);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $i2127 := $p2i.ref.i64($p2066);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i2128 := $add.i64($i2127, 120);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p2129 := $i2p.i64.ref($i2128);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} INIT_LIST_HEAD($p2129);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i2130 := $p2i.ref.i64($p0);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i2131 := $add.i64($i2130, 1224);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p2132 := $i2p.i64.ref($i2131);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p2133 := $bitcast.ref.ref($p2132);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $p2134 := $add.ref($p2133, $mul.ref(29, 152));
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i2135 := $p2i.ref.i64($p2134);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i2136 := $add.i64($i2135, 96);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p2137 := $i2p.i64.ref($i2136);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2137, $p0);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p2138 := $add.ref($add.ref($p2133, $mul.ref(29, 152)), $mul.ref(136, 1));
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i2139 := $load.i8($M.1, $p2138);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i2140 := $and.i8($i2139, $sub.i8(0, 65));
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i2141 := $or.i8($i2140, 64);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2138, $i2141);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i2142 := $p2i.ref.i64($p2134);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i2143 := $add.i64($i2142, 136);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p2144 := $i2p.i64.ref($i2143);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2144, 14);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p2145 := $add.ref($add.ref($p2133, $mul.ref(29, 152)), $mul.ref(136, 1));
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i2146 := $load.i8($M.1, $p2145);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i2147 := $and.i8($i2146, $sub.i8(0, 33));
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2145, $i2147);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i2148 := $p2i.ref.i64($p2134);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $i2149 := $add.i64($i2148, 8);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $p2150 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i2151 := $p2i.ref.i64($p2150);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i2152 := $add.i64($i2151, 232);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p2153 := $i2p.i64.ref($i2152);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p2154 := $load.ref($M.1, $p2153);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p2155 := $i2p.i64.ref($i2149);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2155, $p2154);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i2156 := $p2i.ref.i64($p2134);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i2157 := $add.i64($i2156, 16);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p2158 := $i2p.i64.ref($i2157);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2158, pch_udc_ep_ops);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p2159 := $bitcast.ref.ref($p2134);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p2160 := $add.ref($p2159, $mul.ref(136, 1));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i2161 := $load.i8($M.1, $p2160);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i2162 := $zext.i8.i32($i2161);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i2163 := $ne.i32($i2162, 0);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2163} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i2163 == 1);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i2164 := $p2i.ref.i64($p2134);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i2165 := $add.i64($i2164, 104);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i2166 := $p2i.ref.i64($p2134);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i2167 := $add.i64($i2166, 136);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p2168 := $i2p.i64.ref($i2167);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i2169 := $load.i8($M.1, $p2168);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i2170 := $zext.i8.i32($i2169);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i2171 := $add.i32($i2170, 16);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i2172 := $mul.i32($i2171, 32);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i2173 := $sext.i32.i64($i2172);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p2174 := $i2p.i64.ref($i2165);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2174, $i2173);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i2185 := $p2i.ref.i64($p2134);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i2186 := $add.i64($i2185, 40);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p2187 := $i2p.i64.ref($i2186);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2187, 512);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i2188 := $p2i.ref.i64($p2134);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i2189 := $add.i64($i2188, 24);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p2190 := $i2p.i64.ref($i2189);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i2191 := $p2i.ref.i64($p0);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i2192 := $add.i64($i2191, 16);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p2193 := $i2p.i64.ref($i2192);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} list_add_tail($p2190, $p2193);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i2194 := $p2i.ref.i64($p2134);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i2195 := $add.i64($i2194, 120);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p2196 := $i2p.i64.ref($i2195);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} INIT_LIST_HEAD($p2196);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i2197 := $p2i.ref.i64($p0);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i2198 := $add.i64($i2197, 1224);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p2199 := $i2p.i64.ref($i2198);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p2200 := $bitcast.ref.ref($p2199);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p2201 := $add.ref($p2200, $mul.ref(30, 152));
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i2202 := $p2i.ref.i64($p2201);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $i2203 := $add.i64($i2202, 96);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p2204 := $i2p.i64.ref($i2203);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2204, $p0);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p2205 := $add.ref($add.ref($p2200, $mul.ref(30, 152)), $mul.ref(136, 1));
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i2206 := $load.i8($M.1, $p2205);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i2207 := $and.i8($i2206, $sub.i8(0, 65));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i2208 := $or.i8($i2207, 64);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2205, $i2208);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i2209 := $p2i.ref.i64($p2201);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i2210 := $add.i64($i2209, 136);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $p2211 := $i2p.i64.ref($i2210);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2211, 15);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p2212 := $add.ref($add.ref($p2200, $mul.ref(30, 152)), $mul.ref(136, 1));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i2213 := $load.i8($M.1, $p2212);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i2214 := $and.i8($i2213, $sub.i8(0, 33));
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i2215 := $or.i8($i2214, 32);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2212, $i2215);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i2216 := $p2i.ref.i64($p2201);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i2217 := $add.i64($i2216, 8);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $p2218 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i2219 := $p2i.ref.i64($p2218);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i2220 := $add.i64($i2219, 240);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $p2221 := $i2p.i64.ref($i2220);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p2222 := $load.ref($M.1, $p2221);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $p2223 := $i2p.i64.ref($i2217);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2223, $p2222);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $i2224 := $p2i.ref.i64($p2201);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i2225 := $add.i64($i2224, 16);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p2226 := $i2p.i64.ref($i2225);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2226, pch_udc_ep_ops);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $p2227 := $bitcast.ref.ref($p2201);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p2228 := $add.ref($p2227, $mul.ref(136, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i2229 := $load.i8($M.1, $p2228);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i2230 := $zext.i8.i32($i2229);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i2231 := $ne.i32($i2230, 0);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2231} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i2231 == 1);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i2232 := $p2i.ref.i64($p2201);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i2233 := $add.i64($i2232, 104);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i2234 := $p2i.ref.i64($p2201);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i2235 := $add.i64($i2234, 136);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $p2236 := $i2p.i64.ref($i2235);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i2237 := $load.i8($M.1, $p2236);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i2238 := $zext.i8.i32($i2237);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i2239 := $add.i32($i2238, 16);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i2240 := $mul.i32($i2239, 32);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i2241 := $sext.i32.i64($i2240);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $p2242 := $i2p.i64.ref($i2233);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2242, $i2241);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i2253 := $p2i.ref.i64($p2201);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i2254 := $add.i64($i2253, 40);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $p2255 := $i2p.i64.ref($i2254);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2255, 512);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i2256 := $p2i.ref.i64($p2201);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i2257 := $add.i64($i2256, 24);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p2258 := $i2p.i64.ref($i2257);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i2259 := $p2i.ref.i64($p0);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i2260 := $add.i64($i2259, 16);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p2261 := $i2p.i64.ref($i2260);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} list_add_tail($p2258, $p2261);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i2262 := $p2i.ref.i64($p2201);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i2263 := $add.i64($i2262, 120);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $p2264 := $i2p.i64.ref($i2263);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} INIT_LIST_HEAD($p2264);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i2265 := $p2i.ref.i64($p0);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i2266 := $add.i64($i2265, 1224);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $p2267 := $i2p.i64.ref($i2266);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p2268 := $bitcast.ref.ref($p2267);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $p2269 := $add.ref($p2268, $mul.ref(31, 152));
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i2270 := $p2i.ref.i64($p2269);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i2271 := $add.i64($i2270, 96);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p2272 := $i2p.i64.ref($i2271);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2272, $p0);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p2273 := $add.ref($add.ref($p2268, $mul.ref(31, 152)), $mul.ref(136, 1));
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i2274 := $load.i8($M.1, $p2273);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i2275 := $and.i8($i2274, $sub.i8(0, 65));
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i2276 := $or.i8($i2275, 64);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2273, $i2276);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i2277 := $p2i.ref.i64($p2269);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i2278 := $add.i64($i2277, 136);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p2279 := $i2p.i64.ref($i2278);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2279, 15);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $p2280 := $add.ref($add.ref($p2268, $mul.ref(31, 152)), $mul.ref(136, 1));
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i2281 := $load.i8($M.1, $p2280);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i2282 := $and.i8($i2281, $sub.i8(0, 33));
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2280, $i2282);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i2283 := $p2i.ref.i64($p2269);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i2284 := $add.i64($i2283, 8);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p2285 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i2286 := $p2i.ref.i64($p2285);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i2287 := $add.i64($i2286, 248);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p2288 := $i2p.i64.ref($i2287);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p2289 := $load.ref($M.1, $p2288);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $p2290 := $i2p.i64.ref($i2284);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2290, $p2289);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i2291 := $p2i.ref.i64($p2269);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $i2292 := $add.i64($i2291, 16);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p2293 := $i2p.i64.ref($i2292);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2293, pch_udc_ep_ops);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $p2294 := $bitcast.ref.ref($p2269);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p2295 := $add.ref($p2294, $mul.ref(136, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i2296 := $load.i8($M.1, $p2295);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i2297 := $zext.i8.i32($i2296);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i2298 := $ne.i32($i2297, 0);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2298} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i2298 == 1);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i2299 := $p2i.ref.i64($p2269);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i2300 := $add.i64($i2299, 104);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i2301 := $p2i.ref.i64($p2269);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i2302 := $add.i64($i2301, 136);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p2303 := $i2p.i64.ref($i2302);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i2304 := $load.i8($M.1, $p2303);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i2305 := $zext.i8.i32($i2304);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i2306 := $add.i32($i2305, 16);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i2307 := $mul.i32($i2306, 32);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i2308 := $sext.i32.i64($i2307);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p2309 := $i2p.i64.ref($i2300);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2309, $i2308);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i2320 := $p2i.ref.i64($p2269);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $i2321 := $add.i64($i2320, 40);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p2322 := $i2p.i64.ref($i2321);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2322, 512);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i2323 := $p2i.ref.i64($p2269);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i2324 := $add.i64($i2323, 24);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $p2325 := $i2p.i64.ref($i2324);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $i2326 := $p2i.ref.i64($p0);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i2327 := $add.i64($i2326, 16);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p2328 := $i2p.i64.ref($i2327);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} list_add_tail($p2325, $p2328);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i2329 := $p2i.ref.i64($p2269);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $i2330 := $add.i64($i2329, 120);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $p2331 := $i2p.i64.ref($i2330);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} INIT_LIST_HEAD($p2331);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i206 := $add.i64(0, 40);
    call {:si_unique_call 2854} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i206);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i207 := $add.i64(1224, $i206);
    call {:si_unique_call 2855} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i207);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i208 := $p2i.ref.i64($p0);
    call {:si_unique_call 2856} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i208);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i209 := $add.i64($i208, $i207);
    call {:si_unique_call 2857} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i209);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p210 := $i2p.i64.ref($i209);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p210, 64);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i211 := $add.i64(152, 40);
    call {:si_unique_call 2858} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i211);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i212 := $add.i64(1224, $i211);
    call {:si_unique_call 2859} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i212);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p0);
    call {:si_unique_call 2860} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i213);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i214 := $add.i64($i213, $i212);
    call {:si_unique_call 2861} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i214);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p215 := $i2p.i64.ref($i214);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p215, 64);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i216 := $add.i64(0, 24);
    call {:si_unique_call 2862} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i216);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i217 := $add.i64(1224, $i216);
    call {:si_unique_call 2863} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i217);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p0);
    call {:si_unique_call 2864} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i218);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i219 := $add.i64($i218, $i217);
    call {:si_unique_call 2865} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i219);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p220 := $i2p.i64.ref($i219);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} list_del_init($p220);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i221 := $add.i64(152, 24);
    call {:si_unique_call 2867} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i221);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i222 := $add.i64(1224, $i221);
    call {:si_unique_call 2868} {:cexpr "__cil_tmp155"} boogie_si_record_i64($i222);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p0);
    call {:si_unique_call 2869} {:cexpr "__cil_tmp156"} boogie_si_record_i64($i223);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i224 := $add.i64($i223, $i222);
    call {:si_unique_call 2870} {:cexpr "__cil_tmp157"} boogie_si_record_i64($i224);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p225 := $i2p.i64.ref($i224);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} list_del_init($p225);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p0);
    call {:si_unique_call 2872} {:cexpr "__cil_tmp160"} boogie_si_record_i64($i226);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i227 := $add.i64($i226, 8);
    call {:si_unique_call 2873} {:cexpr "__cil_tmp161"} boogie_si_record_i64($i227);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i228 := $add.i64(1224, 0);
    call {:si_unique_call 2874} {:cexpr "__cil_tmp163"} boogie_si_record_i64($i228);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i229 := $p2i.ref.i64($p0);
    call {:si_unique_call 2875} {:cexpr "__cil_tmp164"} boogie_si_record_i64($i229);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i230 := $add.i64($i229, $i228);
    call {:si_unique_call 2876} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i230);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p231 := $i2p.i64.ref($i230);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p232 := $i2p.i64.ref($i227);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p232, $p231);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p0);
    call {:si_unique_call 2877} {:cexpr "__cil_tmp167"} boogie_si_record_i64($i233);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i234 := $add.i64($i233, 8);
    call {:si_unique_call 2878} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i234);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p235 := $i2p.i64.ref($i234);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.1, $p235);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p236);
    call {:si_unique_call 2879} {:cexpr "__cil_tmp170"} boogie_si_record_i64($i237);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i238 := $add.i64($i237, 24);
    call {:si_unique_call 2880} {:cexpr "__cil_tmp171"} boogie_si_record_i64($i238);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p239 := $i2p.i64.ref($i238);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} INIT_LIST_HEAD($p239);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    return;

  $bb128:
    assume $i2298 == 1;
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $i2310 := $p2i.ref.i64($p2269);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i2311 := $add.i64($i2310, 104);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i2312 := $p2i.ref.i64($p2269);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i2313 := $add.i64($i2312, 136);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $p2314 := $i2p.i64.ref($i2313);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i2315 := $load.i8($M.1, $p2314);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i2316 := $zext.i8.i32($i2315);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i2317 := $mul.i32($i2316, 32);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i2318 := $sext.i32.i64($i2317);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p2319 := $i2p.i64.ref($i2311);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2319, $i2318);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb124:
    assume $i2231 == 1;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i2243 := $p2i.ref.i64($p2201);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i2244 := $add.i64($i2243, 104);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i2245 := $p2i.ref.i64($p2201);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i2246 := $add.i64($i2245, 136);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p2247 := $i2p.i64.ref($i2246);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i2248 := $load.i8($M.1, $p2247);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i2249 := $zext.i8.i32($i2248);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i2250 := $mul.i32($i2249, 32);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i2251 := $sext.i32.i64($i2250);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p2252 := $i2p.i64.ref($i2244);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2252, $i2251);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb120:
    assume $i2163 == 1;
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $i2175 := $p2i.ref.i64($p2134);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i2176 := $add.i64($i2175, 104);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i2177 := $p2i.ref.i64($p2134);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i2178 := $add.i64($i2177, 136);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $p2179 := $i2p.i64.ref($i2178);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i2180 := $load.i8($M.1, $p2179);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i2181 := $zext.i8.i32($i2180);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i2182 := $mul.i32($i2181, 32);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i2183 := $sext.i32.i64($i2182);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p2184 := $i2p.i64.ref($i2176);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2184, $i2183);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb116:
    assume $i2096 == 1;
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i2108 := $p2i.ref.i64($p2066);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i2109 := $add.i64($i2108, 104);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i2110 := $p2i.ref.i64($p2066);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i2111 := $add.i64($i2110, 136);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $p2112 := $i2p.i64.ref($i2111);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i2113 := $load.i8($M.1, $p2112);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $i2114 := $zext.i8.i32($i2113);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i2115 := $mul.i32($i2114, 32);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $i2116 := $sext.i32.i64($i2115);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p2117 := $i2p.i64.ref($i2109);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2117, $i2116);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb112:
    assume $i2028 == 1;
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i2040 := $p2i.ref.i64($p1999);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i2041 := $add.i64($i2040, 104);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i2042 := $p2i.ref.i64($p1999);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i2043 := $add.i64($i2042, 136);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p2044 := $i2p.i64.ref($i2043);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i2045 := $load.i8($M.1, $p2044);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i2046 := $zext.i8.i32($i2045);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i2047 := $mul.i32($i2046, 32);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i2048 := $sext.i32.i64($i2047);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p2049 := $i2p.i64.ref($i2041);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2049, $i2048);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb108:
    assume $i1961 == 1;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i1973 := $p2i.ref.i64($p1931);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i1974 := $add.i64($i1973, 104);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i1975 := $p2i.ref.i64($p1931);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i1976 := $add.i64($i1975, 136);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p1977 := $i2p.i64.ref($i1976);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i1978 := $load.i8($M.1, $p1977);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i1979 := $zext.i8.i32($i1978);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i1980 := $mul.i32($i1979, 32);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i1981 := $sext.i32.i64($i1980);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p1982 := $i2p.i64.ref($i1974);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1982, $i1981);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb104:
    assume $i1893 == 1;
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i1905 := $p2i.ref.i64($p1864);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i1906 := $add.i64($i1905, 104);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i1907 := $p2i.ref.i64($p1864);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i1908 := $add.i64($i1907, 136);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p1909 := $i2p.i64.ref($i1908);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i1910 := $load.i8($M.1, $p1909);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i1911 := $zext.i8.i32($i1910);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i1912 := $mul.i32($i1911, 32);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i1913 := $sext.i32.i64($i1912);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p1914 := $i2p.i64.ref($i1906);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1914, $i1913);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb100:
    assume $i1826 == 1;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i1838 := $p2i.ref.i64($p1796);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i1839 := $add.i64($i1838, 104);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i1840 := $p2i.ref.i64($p1796);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i1841 := $add.i64($i1840, 136);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $p1842 := $i2p.i64.ref($i1841);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i1843 := $load.i8($M.1, $p1842);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i1844 := $zext.i8.i32($i1843);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i1845 := $mul.i32($i1844, 32);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i1846 := $sext.i32.i64($i1845);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $p1847 := $i2p.i64.ref($i1839);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1847, $i1846);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb96:
    assume $i1758 == 1;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i1770 := $p2i.ref.i64($p1729);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i1771 := $add.i64($i1770, 104);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i1772 := $p2i.ref.i64($p1729);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i1773 := $add.i64($i1772, 136);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p1774 := $i2p.i64.ref($i1773);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i1775 := $load.i8($M.1, $p1774);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i1776 := $zext.i8.i32($i1775);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i1777 := $mul.i32($i1776, 32);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i1778 := $sext.i32.i64($i1777);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p1779 := $i2p.i64.ref($i1771);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1779, $i1778);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb92:
    assume $i1691 == 1;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i1703 := $p2i.ref.i64($p1661);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i1704 := $add.i64($i1703, 104);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i1705 := $p2i.ref.i64($p1661);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i1706 := $add.i64($i1705, 136);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $p1707 := $i2p.i64.ref($i1706);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i1708 := $load.i8($M.1, $p1707);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i1709 := $zext.i8.i32($i1708);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i1710 := $mul.i32($i1709, 32);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i1711 := $sext.i32.i64($i1710);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $p1712 := $i2p.i64.ref($i1704);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1712, $i1711);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb88:
    assume $i1623 == 1;
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i1635 := $p2i.ref.i64($p1594);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i1636 := $add.i64($i1635, 104);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i1637 := $p2i.ref.i64($p1594);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i1638 := $add.i64($i1637, 136);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p1639 := $i2p.i64.ref($i1638);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i1640 := $load.i8($M.1, $p1639);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i1641 := $zext.i8.i32($i1640);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i1642 := $mul.i32($i1641, 32);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i1643 := $sext.i32.i64($i1642);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p1644 := $i2p.i64.ref($i1636);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1644, $i1643);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i1556 == 1;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i1568 := $p2i.ref.i64($p1526);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i1569 := $add.i64($i1568, 104);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i1570 := $p2i.ref.i64($p1526);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i1571 := $add.i64($i1570, 136);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p1572 := $i2p.i64.ref($i1571);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i1573 := $load.i8($M.1, $p1572);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i1574 := $zext.i8.i32($i1573);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i1575 := $mul.i32($i1574, 32);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i1576 := $sext.i32.i64($i1575);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p1577 := $i2p.i64.ref($i1569);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1577, $i1576);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb80:
    assume $i1488 == 1;
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i1500 := $p2i.ref.i64($p1459);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i1501 := $add.i64($i1500, 104);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i1502 := $p2i.ref.i64($p1459);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i1503 := $add.i64($i1502, 136);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p1504 := $i2p.i64.ref($i1503);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i1505 := $load.i8($M.1, $p1504);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i1506 := $zext.i8.i32($i1505);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i1507 := $mul.i32($i1506, 32);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i1508 := $sext.i32.i64($i1507);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $p1509 := $i2p.i64.ref($i1501);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1509, $i1508);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume $i1421 == 1;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i1433 := $p2i.ref.i64($p1391);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i1434 := $add.i64($i1433, 104);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i1435 := $p2i.ref.i64($p1391);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i1436 := $add.i64($i1435, 136);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p1437 := $i2p.i64.ref($i1436);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i1438 := $load.i8($M.1, $p1437);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i1439 := $zext.i8.i32($i1438);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i1440 := $mul.i32($i1439, 32);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i1441 := $sext.i32.i64($i1440);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p1442 := $i2p.i64.ref($i1434);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1442, $i1441);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume $i1353 == 1;
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i1365 := $p2i.ref.i64($p1324);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i1366 := $add.i64($i1365, 104);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i1367 := $p2i.ref.i64($p1324);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i1368 := $add.i64($i1367, 136);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p1369 := $i2p.i64.ref($i1368);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i1370 := $load.i8($M.1, $p1369);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i1371 := $zext.i8.i32($i1370);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i1372 := $mul.i32($i1371, 32);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i1373 := $sext.i32.i64($i1372);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p1374 := $i2p.i64.ref($i1366);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1374, $i1373);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i1286 == 1;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i1298 := $p2i.ref.i64($p1256);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i1299 := $add.i64($i1298, 104);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i1300 := $p2i.ref.i64($p1256);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i1301 := $add.i64($i1300, 136);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p1302 := $i2p.i64.ref($i1301);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i1303 := $load.i8($M.1, $p1302);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i1304 := $zext.i8.i32($i1303);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i1305 := $mul.i32($i1304, 32);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i1306 := $sext.i32.i64($i1305);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p1307 := $i2p.i64.ref($i1299);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1307, $i1306);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume $i1218 == 1;
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i1230 := $p2i.ref.i64($p1189);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i1231 := $add.i64($i1230, 104);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i1232 := $p2i.ref.i64($p1189);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i1233 := $add.i64($i1232, 136);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p1234 := $i2p.i64.ref($i1233);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i1235 := $load.i8($M.1, $p1234);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i1236 := $zext.i8.i32($i1235);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i1237 := $mul.i32($i1236, 32);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i1238 := $sext.i32.i64($i1237);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p1239 := $i2p.i64.ref($i1231);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1239, $i1238);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i1151 == 1;
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i1163 := $p2i.ref.i64($p1121);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i1164 := $add.i64($i1163, 104);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i1165 := $p2i.ref.i64($p1121);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i1166 := $add.i64($i1165, 136);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p1167 := $i2p.i64.ref($i1166);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i1168 := $load.i8($M.1, $p1167);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i1169 := $zext.i8.i32($i1168);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i1170 := $mul.i32($i1169, 32);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i1171 := $sext.i32.i64($i1170);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p1172 := $i2p.i64.ref($i1164);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1172, $i1171);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume $i1083 == 1;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i1095 := $p2i.ref.i64($p1054);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i1096 := $add.i64($i1095, 104);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i1097 := $p2i.ref.i64($p1054);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i1098 := $add.i64($i1097, 136);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $p1099 := $i2p.i64.ref($i1098);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i1100 := $load.i8($M.1, $p1099);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i1101 := $zext.i8.i32($i1100);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i1102 := $mul.i32($i1101, 32);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i1103 := $sext.i32.i64($i1102);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p1104 := $i2p.i64.ref($i1096);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1104, $i1103);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i1016 == 1;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i1028 := $p2i.ref.i64($p986);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i1029 := $add.i64($i1028, 104);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i1030 := $p2i.ref.i64($p986);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i1031 := $add.i64($i1030, 136);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p1032 := $i2p.i64.ref($i1031);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i1033 := $load.i8($M.1, $p1032);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i1034 := $zext.i8.i32($i1033);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i1035 := $mul.i32($i1034, 32);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i1036 := $sext.i32.i64($i1035);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p1037 := $i2p.i64.ref($i1029);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1037, $i1036);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i948 == 1;
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i960 := $p2i.ref.i64($p919);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i961 := $add.i64($i960, 104);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i962 := $p2i.ref.i64($p919);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i963 := $add.i64($i962, 136);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p964 := $i2p.i64.ref($i963);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i965 := $load.i8($M.1, $p964);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i966 := $zext.i8.i32($i965);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i967 := $mul.i32($i966, 32);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i968 := $sext.i32.i64($i967);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p969 := $i2p.i64.ref($i961);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p969, $i968);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i881 == 1;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i893 := $p2i.ref.i64($p851);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i894 := $add.i64($i893, 104);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i895 := $p2i.ref.i64($p851);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i896 := $add.i64($i895, 136);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p897 := $i2p.i64.ref($i896);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i898 := $load.i8($M.1, $p897);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i899 := $zext.i8.i32($i898);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i900 := $mul.i32($i899, 32);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i901 := $sext.i32.i64($i900);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p902 := $i2p.i64.ref($i894);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p902, $i901);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i813 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i825 := $p2i.ref.i64($p784);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i826 := $add.i64($i825, 104);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i827 := $p2i.ref.i64($p784);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i828 := $add.i64($i827, 136);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p829 := $i2p.i64.ref($i828);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i830 := $load.i8($M.1, $p829);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i831 := $zext.i8.i32($i830);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i832 := $mul.i32($i831, 32);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i833 := $sext.i32.i64($i832);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p834 := $i2p.i64.ref($i826);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p834, $i833);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i746 == 1;
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i758 := $p2i.ref.i64($p716);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i759 := $add.i64($i758, 104);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i760 := $p2i.ref.i64($p716);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i761 := $add.i64($i760, 136);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p762 := $i2p.i64.ref($i761);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i763 := $load.i8($M.1, $p762);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i764 := $zext.i8.i32($i763);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i765 := $mul.i32($i764, 32);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i766 := $sext.i32.i64($i765);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p767 := $i2p.i64.ref($i759);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p767, $i766);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i678 == 1;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i690 := $p2i.ref.i64($p649);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i691 := $add.i64($i690, 104);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i692 := $p2i.ref.i64($p649);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i693 := $add.i64($i692, 136);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p694 := $i2p.i64.ref($i693);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i695 := $load.i8($M.1, $p694);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i696 := $zext.i8.i32($i695);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i697 := $mul.i32($i696, 32);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i698 := $sext.i32.i64($i697);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p699 := $i2p.i64.ref($i691);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p699, $i698);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i611 == 1;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i623 := $p2i.ref.i64($p581);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i624 := $add.i64($i623, 104);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i625 := $p2i.ref.i64($p581);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i626 := $add.i64($i625, 136);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p627 := $i2p.i64.ref($i626);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i628 := $load.i8($M.1, $p627);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i629 := $zext.i8.i32($i628);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i630 := $mul.i32($i629, 32);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i631 := $sext.i32.i64($i630);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p632 := $i2p.i64.ref($i624);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p632, $i631);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i543 == 1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i555 := $p2i.ref.i64($p514);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i556 := $add.i64($i555, 104);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i557 := $p2i.ref.i64($p514);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i558 := $add.i64($i557, 136);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p559 := $i2p.i64.ref($i558);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i560 := $load.i8($M.1, $p559);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i561 := $zext.i8.i32($i560);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i562 := $mul.i32($i561, 32);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i563 := $sext.i32.i64($i562);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p564 := $i2p.i64.ref($i556);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p564, $i563);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i476 == 1;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i488 := $p2i.ref.i64($p446);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i489 := $add.i64($i488, 104);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i490 := $p2i.ref.i64($p446);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i491 := $add.i64($i490, 136);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p492 := $i2p.i64.ref($i491);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i493 := $load.i8($M.1, $p492);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i494 := $zext.i8.i32($i493);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i495 := $mul.i32($i494, 32);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i496 := $sext.i32.i64($i495);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $p497 := $i2p.i64.ref($i489);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p497, $i496);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i408 == 1;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i420 := $p2i.ref.i64($p379);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i421 := $add.i64($i420, 104);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i422 := $p2i.ref.i64($p379);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i423 := $add.i64($i422, 136);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p424 := $i2p.i64.ref($i423);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i425 := $load.i8($M.1, $p424);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i426 := $zext.i8.i32($i425);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i427 := $mul.i32($i426, 32);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i428 := $sext.i32.i64($i427);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p429 := $i2p.i64.ref($i421);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p429, $i428);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i341 == 1;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p311);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i354 := $add.i64($i353, 104);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i355 := $p2i.ref.i64($p311);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i356 := $add.i64($i355, 136);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p357 := $i2p.i64.ref($i356);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.1, $p357);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i359 := $zext.i8.i32($i358);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i360 := $mul.i32($i359, 32);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i361 := $sext.i32.i64($i360);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p362 := $i2p.i64.ref($i354);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p362, $i361);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i273 == 1;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p244);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i286 := $add.i64($i285, 104);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p244);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i288 := $add.i64($i287, 136);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p289 := $i2p.i64.ref($i288);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i290 := $load.i8($M.1, $p289);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i291 := $zext.i8.i32($i290);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i292 := $mul.i32($i291, 32);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i293 := $sext.i32.i64($i292);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p294 := $i2p.i64.ref($i286);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p294, $i293);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i172 == 1;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p143);
    call {:si_unique_call 2829} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i173);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i174 := $add.i64($i173, 104);
    call {:si_unique_call 2830} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i174);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p143);
    call {:si_unique_call 2831} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i175);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i176 := $add.i64($i175, 136);
    call {:si_unique_call 2832} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i176);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p177 := $i2p.i64.ref($i176);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.1, $p177);
    call {:si_unique_call 2833} {:cexpr "__cil_tmp108"} boogie_si_record_i8($i178);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    call {:si_unique_call 2834} {:cexpr "__cil_tmp109"} boogie_si_record_i32($i179);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i180 := $mul.i32($i179, 32);
    call {:si_unique_call 2835} {:cexpr "__cil_tmp110"} boogie_si_record_i32($i180);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i181 := $sext.i32.i64($i180);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p182 := $i2p.i64.ref($i174);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p182, $i181);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_vbus_gpio_init: ref;

axiom pch_vbus_gpio_init == $sub.ref(0, 304212);

procedure pch_vbus_gpio_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation pch_vbus_gpio_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i11: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2946} {:cexpr "pch_vbus_gpio_init:arg:vbus_gpio_port___0"} boogie_si_record_i32($i1);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 2947} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i4);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 6240);
    call {:si_unique_call 2948} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 0);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 2949} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i7);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 6244);
    call {:si_unique_call 2950} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i8);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 0);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 0);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} $i12 := gpio_is_valid($i1);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 2952} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 2953} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call {:si_unique_call 2955} {:cexpr "pch_vbus_gpio_init:arg:__cil_tmp15"} boogie_si_record_i32($i1);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} $i18 := gpio_request($i1, .str.62);
    call {:si_unique_call 2957} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 2959} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 6240);
    call {:si_unique_call 2960} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, $i1);
    call {:si_unique_call 2961} {:cexpr "pch_vbus_gpio_init:arg:__cil_tmp18"} boogie_si_record_i32($i1);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} vslice_dummy_var_84 := gpio_direction_input($i1);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    call {:si_unique_call 2963} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i25);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 6248);
    call {:si_unique_call 2964} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i26);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} __init_work($p27, 0);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 2966} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 6248);
    call {:si_unique_call 2967} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i29);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p31, 2097664);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i32 := $add.i64(6240, 40);
    call {:si_unique_call 2968} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    call {:si_unique_call 2969} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i33);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, $i32);
    call {:si_unique_call 2970} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i34);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} lockdep_init_map($p35, .str.64, $p2, 0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i36 := $add.i64(6240, 16);
    call {:si_unique_call 2972} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i36);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 2973} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i37);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $i36);
    call {:si_unique_call 2974} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i38);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} INIT_LIST_HEAD($p39);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i40 := $add.i64(6240, 32);
    call {:si_unique_call 2976} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    call {:si_unique_call 2977} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, $i40);
    call {:si_unique_call 2978} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i42);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, pch_vbus_gpio_work_fall);
    call {:si_unique_call 2979} {:cexpr "pch_vbus_gpio_init:arg:__cil_tmp40"} boogie_si_record_i32($i1);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} $i44 := gpio_to_irq($i1);
    call {:si_unique_call 2981} {:cexpr "irq_num"} boogie_si_record_i32($i44);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} vslice_dummy_var_85 := irq_set_irq_type($i44, 3);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} $i48 := request_irq($i44, pch_vbus_gpio_irq, 0, .str.65, $p47);
    call {:si_unique_call 2984} {:cexpr "err"} boogie_si_record_i32($i48);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i49 == 1);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} vslice_dummy_var_86 := printk.ref.ref.i32.i32(.str.67, .str.61, $i44, $i48);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i49 == 1;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    call {:si_unique_call 2985} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i50);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 6244);
    call {:si_unique_call 2986} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i51);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, $i44);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p0);
    call {:si_unique_call 2987} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i53);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 6328);
    call {:si_unique_call 2988} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i54);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} __init_work($p55, 0);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p0);
    call {:si_unique_call 2990} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i56);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 6328);
    call {:si_unique_call 2991} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i57);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p59, 2097664);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i60 := $add.i64(6240, 120);
    call {:si_unique_call 2992} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i60);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p0);
    call {:si_unique_call 2993} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i61);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, $i60);
    call {:si_unique_call 2994} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i62);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} lockdep_init_map($p63, .str.66, $p3, 0);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i64 := $add.i64(6240, 96);
    call {:si_unique_call 2996} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i64);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p0);
    call {:si_unique_call 2997} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i65);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, $i64);
    call {:si_unique_call 2998} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i66);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} INIT_LIST_HEAD($p67);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i68 := $add.i64(6240, 112);
    call {:si_unique_call 3000} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i68);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p0);
    call {:si_unique_call 3001} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i69);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, $i68);
    call {:si_unique_call 3002} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i70);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p71, pch_vbus_gpio_work_rise);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} vslice_dummy_var_83 := printk.ref.ref.i32.i32(.str.63, .str.61, $i1, $i18);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} vslice_dummy_var_82 := printk.ref.ref.i32(.str.60, .str.61, $i1);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const gpio_is_valid: ref;

axiom gpio_is_valid == $sub.ref(0, 305244);

procedure gpio_is_valid($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation gpio_is_valid($i0: i32) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} {:cexpr "gpio_is_valid:arg:number"} boogie_si_record_i32($i0);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, 0);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i0, 255);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb6;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb5;
}



const gpio_request: ref;

axiom gpio_request == $sub.ref(0, 306276);

procedure gpio_request($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_request($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3005} {:cexpr "gpio_request:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3006} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3007} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gpio_direction_input: ref;

axiom gpio_direction_input == $sub.ref(0, 307308);

procedure gpio_direction_input($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_direction_input($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3008} {:cexpr "gpio_direction_input:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3009} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 3010} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 308340);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 309372);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    return;
}



const pch_vbus_gpio_work_fall: ref;

axiom pch_vbus_gpio_work_fall == $sub.ref(0, 310404);

procedure pch_vbus_gpio_work_fall($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.1, $CurrAddr;



implementation pch_vbus_gpio_work_fall($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i32;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i1;
  var $i202: i32;
  var $i203: i1;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i1;
  var $i211: i32;
  var $i212: i1;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i222: i1;
  var $i223: i32;
  var $i224: i1;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $i237: i1;
  var $i238: i32;
  var $i239: i1;
  var $i240: i1;
  var $i241: i32;
  var $i242: i1;
  var $i243: i1;
  var $i244: i32;
  var $i245: i1;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i1;
  var $i250: i32;
  var $i251: i1;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $i255: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i1;
  var $i268: i32;
  var $i269: i1;
  var $i270: i1;
  var $i271: i32;
  var $i272: i1;
  var $i273: i1;
  var $i274: i32;
  var $i275: i1;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i279: i1;
  var $i280: i32;
  var $i281: i1;
  var $i282: i1;
  var $i283: i32;
  var $i284: i1;
  var $i285: i1;
  var $i286: i32;
  var $i287: i1;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i1;
  var $i292: i32;
  var $i293: i1;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i1;
  var $i298: i32;
  var $i299: i1;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i327: i1;
  var $i328: i32;
  var $i329: i1;
  var $i330: i1;
  var $i331: i32;
  var $i332: i1;
  var $i333: i1;
  var $i334: i32;
  var $i335: i1;
  var $i336: i1;
  var $i337: i32;
  var $i338: i1;
  var $i339: i1;
  var $i340: i32;
  var $i341: i1;
  var $i342: i1;
  var $i343: i32;
  var $i344: i1;
  var $i345: i1;
  var $i346: i32;
  var $i347: i1;
  var $i348: i1;
  var $i349: i32;
  var $i350: i1;
  var $i351: i1;
  var $i352: i32;
  var $i353: i1;
  var $i354: i1;
  var $i355: i32;
  var $i356: i1;
  var $i357: i1;
  var $i358: i32;
  var $i359: i1;
  var $i360: i1;
  var $i361: i32;
  var $i362: i1;
  var $i363: i1;
  var $i364: i32;
  var $i365: i1;
  var $i366: i1;
  var $i367: i32;
  var $i368: i1;
  var $i369: i1;
  var $i370: i32;
  var $i371: i1;
  var $i372: i1;
  var $i373: i32;
  var $i374: i1;
  var $i375: i1;
  var $i376: i32;
  var $i377: i1;
  var $i378: i1;
  var $i379: i32;
  var $i380: i1;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $i384: i1;
  var $i385: i32;
  var $i386: i1;
  var $i387: i1;
  var $i388: i32;
  var $i389: i1;
  var $i390: i1;
  var $i391: i32;
  var $i392: i1;
  var $i393: i1;
  var $i394: i32;
  var $i395: i1;
  var $i396: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i1;
  var $i400: i32;
  var $i401: i1;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i1;
  var $i406: i32;
  var $i407: i1;
  var $i408: i1;
  var $i409: i32;
  var $i410: i1;
  var $i411: i1;
  var $i412: i32;
  var $i413: i1;
  var $i414: i1;
  var $i415: i32;
  var $i416: i1;
  var $i417: i1;
  var $i418: i32;
  var $i419: i1;
  var $i420: i1;
  var $i421: i32;
  var $i422: i1;
  var $i423: i1;
  var $i424: i32;
  var $i425: i1;
  var $i426: i1;
  var $i427: i32;
  var $i428: i1;
  var $i429: i1;
  var $i430: i32;
  var $i431: i1;
  var $i432: i1;
  var $i433: i32;
  var $i434: i1;
  var $i435: i1;
  var $i436: i32;
  var $i437: i1;
  var $i438: i1;
  var $i439: i32;
  var $i440: i1;
  var $i441: i1;
  var $i442: i32;
  var $i443: i1;
  var $i444: i1;
  var $i445: i32;
  var $i446: i1;
  var $i447: i1;
  var $i448: i32;
  var $i449: i1;
  var $i450: i1;
  var $i451: i32;
  var $i452: i1;
  var $i453: i1;
  var $i454: i32;
  var $i455: i1;
  var $i456: i1;
  var $i457: i32;
  var $i458: i1;
  var $i459: i1;
  var $i460: i32;
  var $i461: i1;
  var $i462: i1;
  var $i463: i32;
  var $i464: i1;
  var $i465: i1;
  var $i466: i32;
  var $i467: i1;
  var $i468: i1;
  var $i469: i32;
  var $i470: i1;
  var $i471: i1;
  var $i472: i32;
  var $i473: i1;
  var $i474: i1;
  var $i475: i32;
  var $i476: i1;
  var $i477: i1;
  var $i478: i32;
  var $i479: i1;
  var $i480: i1;
  var $i481: i32;
  var $i482: i1;
  var $i483: i1;
  var $i484: i32;
  var $i485: i1;
  var $i486: i1;
  var $i487: i32;
  var $i488: i1;
  var $i489: i1;
  var $i490: i32;
  var $i491: i1;
  var $i492: i1;
  var $i493: i32;
  var $i494: i1;
  var $i495: i1;
  var $i496: i32;
  var $i497: i1;
  var $i498: i1;
  var $i499: i32;
  var $i500: i1;
  var $i501: i1;
  var $i502: i32;
  var $i503: i1;
  var $i504: i1;
  var $i505: i32;
  var $i506: i1;
  var $i507: i1;
  var $i508: i32;
  var $i509: i1;
  var $i510: i1;
  var $i511: i32;
  var $i512: i1;
  var $i513: i1;
  var $i514: i32;
  var $i515: i1;
  var $i516: i1;
  var $i517: i32;
  var $i518: i1;
  var $i519: i1;
  var $i520: i32;
  var $i521: i1;
  var $i522: i1;
  var $i523: i32;
  var $i524: i1;
  var $i525: i1;
  var $i526: i32;
  var $i527: i1;
  var $i528: i1;
  var $i529: i32;
  var $i530: i1;
  var $i531: i1;
  var $i532: i32;
  var $i533: i1;
  var $i534: i1;
  var $i535: i32;
  var $i536: i1;
  var $i537: i1;
  var $i538: i32;
  var $i539: i1;
  var $i540: i1;
  var $i541: i32;
  var $i542: i1;
  var $i543: i1;
  var $i544: i32;
  var $i545: i1;
  var $i546: i1;
  var $i547: i32;
  var $i548: i1;
  var $i549: i1;
  var $i550: i32;
  var $i551: i1;
  var $i552: i1;
  var $i553: i32;
  var $i554: i1;
  var $i555: i1;
  var $i556: i32;
  var $i557: i1;
  var $i558: i1;
  var $i559: i32;
  var $i560: i1;
  var $i561: i1;
  var $i562: i32;
  var $i563: i1;
  var $i564: i1;
  var $i565: i32;
  var $i566: i1;
  var $i567: i1;
  var $i568: i32;
  var $i569: i1;
  var $i570: i1;
  var $i571: i32;
  var $i572: i1;
  var $i573: i1;
  var $i574: i32;
  var $i575: i1;
  var $i576: i1;
  var $i577: i32;
  var $i578: i1;
  var $i579: i1;
  var $i580: i32;
  var $i581: i1;
  var $i582: i1;
  var $i583: i32;
  var $i584: i1;
  var $i585: i1;
  var $i586: i32;
  var $i587: i1;
  var $i588: i1;
  var $i589: i32;
  var $i590: i1;
  var $i591: i1;
  var $i592: i32;
  var $i593: i1;
  var $i594: i1;
  var $i595: i32;
  var $i596: i1;
  var $i597: i1;
  var $i598: i32;
  var $i599: i1;
  var $i600: i1;
  var $i601: i32;
  var $i602: i1;
  var $i603: i1;
  var $i604: i32;
  var $i605: i1;
  var $i606: i1;
  var $i607: i32;
  var $i608: i1;
  var $i609: i1;
  var $i610: i32;
  var $i611: i1;
  var $i612: i1;
  var $i613: i32;
  var $i614: i1;
  var $i615: i1;
  var $i616: i32;
  var $i617: i1;
  var $i618: i1;
  var $i619: i32;
  var $i620: i1;
  var $i621: i1;
  var $i622: i32;
  var $i623: i1;
  var $i624: i1;
  var $i625: i32;
  var $i626: i1;
  var $i627: i1;
  var $i628: i32;
  var $i629: i1;
  var $i630: i1;
  var $i631: i32;
  var $i632: i1;
  var $i633: i1;
  var $i634: i32;
  var $i635: i1;
  var $i636: i1;
  var $i637: i32;
  var $i638: i1;
  var $i639: i1;
  var $i640: i32;
  var $i641: i1;
  var $i642: i1;
  var $i643: i32;
  var $i644: i1;
  var $i645: i1;
  var $i646: i32;
  var $i647: i1;
  var $i648: i1;
  var $i649: i32;
  var $i650: i1;
  var $i651: i1;
  var $i652: i32;
  var $i653: i1;
  var $i654: i1;
  var $i655: i32;
  var $i656: i1;
  var $i657: i1;
  var $i658: i32;
  var $i659: i1;
  var $i660: i1;
  var $i661: i32;
  var $i662: i1;
  var $i663: i1;
  var $i664: i32;
  var $i665: i1;
  var $i666: i1;
  var $i667: i32;
  var $i668: i1;
  var $i669: i1;
  var $i670: i32;
  var $i671: i1;
  var $i672: i1;
  var $i673: i32;
  var $i674: i1;
  var $i675: i1;
  var $i676: i32;
  var $i677: i1;
  var $i678: i1;
  var $i679: i32;
  var $i680: i1;
  var $i681: i1;
  var $i682: i32;
  var $i683: i1;
  var $i684: i1;
  var $i685: i32;
  var $i686: i1;
  var $i687: i1;
  var $i688: i32;
  var $i689: i1;
  var $i690: i1;
  var $i691: i32;
  var $i692: i1;
  var $i693: i1;
  var $i694: i32;
  var $i695: i1;
  var $i696: i1;
  var $i697: i32;
  var $i698: i1;
  var $i699: i1;
  var $i700: i32;
  var $i701: i1;
  var $i702: i1;
  var $i703: i32;
  var $i704: i1;
  var $i705: i1;
  var $i706: i32;
  var $i707: i1;
  var $i708: i1;
  var $i709: i32;
  var $i710: i1;
  var $i711: i1;
  var $i712: i32;
  var $i713: i1;
  var $i714: i1;
  var $i715: i32;
  var $i716: i1;
  var $i717: i1;
  var $i718: i32;
  var $i719: i1;
  var $i720: i1;
  var $i721: i32;
  var $i722: i1;
  var $i723: i1;
  var $i724: i32;
  var $i725: i1;
  var $i726: i1;
  var $i727: i32;
  var $i728: i1;
  var $i729: i1;
  var $i730: i32;
  var $i731: i1;
  var $i732: i1;
  var $i733: i32;
  var $i734: i1;
  var $i735: i1;
  var $i736: i32;
  var $i737: i1;
  var $i738: i1;
  var $i739: i32;
  var $i740: i1;
  var $i741: i1;
  var $i742: i32;
  var $i743: i1;
  var $i744: i1;
  var $i745: i32;
  var $i746: i1;
  var $i747: i1;
  var $i748: i32;
  var $i749: i1;
  var $i750: i1;
  var $i751: i32;
  var $i752: i1;
  var $i753: i1;
  var $i754: i32;
  var $i755: i1;
  var $i756: i1;
  var $i757: i32;
  var $i758: i1;
  var $i759: i1;
  var $i760: i32;
  var $i761: i1;
  var $i762: i1;
  var $i763: i32;
  var $i764: i1;
  var $i765: i1;
  var $i766: i32;
  var $i767: i1;
  var $i768: i1;
  var $i769: i32;
  var $i770: i1;
  var $i771: i1;
  var $i772: i32;
  var $i773: i1;
  var $i774: i1;
  var $i775: i32;
  var $i776: i1;
  var $i777: i1;
  var $i778: i32;
  var $i779: i1;
  var $i780: i1;
  var $i781: i32;
  var $i782: i1;
  var $i783: i1;
  var $i784: i32;
  var $i785: i1;
  var $i786: i1;
  var $i787: i32;
  var $i788: i1;
  var $i789: i1;
  var $i790: i32;
  var $i791: i1;
  var $i792: i1;
  var $i793: i32;
  var $i794: i1;
  var $i795: i1;
  var $i796: i32;
  var $i797: i1;
  var $i798: i1;
  var $i799: i32;
  var $i800: i1;
  var $i801: i1;
  var $i802: i32;
  var $i803: i1;
  var $i804: i1;
  var $i805: i32;
  var $i806: i1;
  var $i807: i1;
  var $i808: i32;
  var $i809: i1;
  var $i810: i1;
  var $i811: i32;
  var $i812: i1;
  var $i813: i1;
  var $i814: i32;
  var $i815: i1;
  var $i816: i1;
  var $i817: i32;
  var $i818: i1;
  var $i819: i1;
  var $i820: i32;
  var $i821: i1;
  var $i822: i1;
  var $i823: i32;
  var $i824: i1;
  var $i825: i1;
  var $i826: i32;
  var $i827: i1;
  var $i828: i1;
  var $i829: i32;
  var $i830: i1;
  var $i831: i1;
  var $i832: i32;
  var $i833: i1;
  var $i834: i1;
  var $i835: i32;
  var $i836: i1;
  var $i837: i1;
  var $i838: i32;
  var $i839: i1;
  var $i840: i1;
  var $i841: i32;
  var $i842: i1;
  var $i843: i1;
  var $i844: i32;
  var $i845: i1;
  var $i846: i1;
  var $i847: i32;
  var $i848: i1;
  var $i849: i1;
  var $i850: i32;
  var $i851: i1;
  var $i852: i1;
  var $i853: i32;
  var $i854: i1;
  var $i855: i1;
  var $i856: i32;
  var $i857: i1;
  var $i858: i1;
  var $i859: i32;
  var $i860: i1;
  var $i861: i1;
  var $i862: i32;
  var $i863: i1;
  var $i864: i1;
  var $i865: i32;
  var $i866: i1;
  var $i867: i1;
  var $i868: i32;
  var $i869: i1;
  var $i870: i1;
  var $i871: i32;
  var $i872: i1;
  var $i873: i1;
  var $i874: i32;
  var $i875: i1;
  var $i876: i1;
  var $i877: i32;
  var $i878: i1;
  var $i879: i1;
  var $i880: i32;
  var $i881: i1;
  var $i882: i1;
  var $i883: i32;
  var $i884: i1;
  var $i885: i1;
  var $i886: i32;
  var $i887: i1;
  var $i888: i1;
  var $i889: i32;
  var $i890: i1;
  var $i891: i1;
  var $i892: i32;
  var $i893: i1;
  var $i894: i1;
  var $i895: i32;
  var $i896: i1;
  var $i897: i1;
  var $i898: i32;
  var $i899: i1;
  var $i900: i1;
  var $i901: i32;
  var $i902: i1;
  var $i903: i1;
  var $i904: i32;
  var $i905: i1;
  var $i906: i1;
  var $i907: i32;
  var $i908: i1;
  var $i909: i1;
  var $i910: i32;
  var $i911: i1;
  var $i912: i1;
  var $i913: i32;
  var $i914: i1;
  var $i915: i1;
  var $i916: i32;
  var $i917: i1;
  var $i918: i1;
  var $i919: i32;
  var $i920: i1;
  var $i921: i1;
  var $i922: i32;
  var $i923: i1;
  var $i924: i1;
  var $i925: i32;
  var $i926: i1;
  var $i927: i1;
  var $i928: i32;
  var $i929: i1;
  var $i930: i1;
  var $i931: i32;
  var $i932: i1;
  var $i933: i1;
  var $i934: i32;
  var $i935: i1;
  var $i936: i1;
  var $i937: i32;
  var $i938: i1;
  var $i939: i1;
  var $i940: i32;
  var $i941: i1;
  var $i942: i1;
  var $i943: i32;
  var $i944: i1;
  var $i945: i1;
  var $i946: i32;
  var $i947: i1;
  var $i948: i1;
  var $i949: i32;
  var $i950: i1;
  var $i951: i1;
  var $i952: i32;
  var $i953: i1;
  var $i954: i1;
  var $i955: i32;
  var $i956: i1;
  var $i957: i1;
  var $i958: i32;
  var $i959: i1;
  var $i960: i1;
  var $i961: i32;
  var $i962: i1;
  var $i963: i1;
  var $i964: i32;
  var $i965: i1;
  var $i966: i1;
  var $i967: i32;
  var $i968: i1;
  var $i969: i1;
  var $i970: i32;
  var $i971: i1;
  var $i972: i1;
  var $i973: i32;
  var $i974: i1;
  var $i975: i1;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 168));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 6240), 6408));
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 3014} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i6);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 6240);
    call {:si_unique_call 3015} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i7);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    call {:si_unique_call 3016} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i9);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} $i11 := pch_vbus_gpio_get_value($p5);
    call {:si_unique_call 3018} {:cexpr "vbus"} boogie_si_record_i32($i11);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($sub.i32(0, 1), $i11);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} ___udelay(4295000);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} ___udelay(4295000);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} ___udelay(4295000);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} ___udelay(4295000);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} ___udelay(4295000);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} ___udelay(4295000);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} ___udelay(4295000);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} ___udelay(4295000);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} ___udelay(4295000);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} ___udelay(4295000);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} $i79 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i11, $i79);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} ___udelay(4295000);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} ___udelay(4295000);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} ___udelay(4295000);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} ___udelay(4295000);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} ___udelay(4295000);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} ___udelay(4295000);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} ___udelay(4295000);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} ___udelay(4295000);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} ___udelay(4295000);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} ___udelay(4295000);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} $i82 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i79, $i82);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3077} ___udelay(4295000);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} ___udelay(4295000);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} ___udelay(4295000);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} ___udelay(4295000);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} ___udelay(4295000);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} ___udelay(4295000);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3083} ___udelay(4295000);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} ___udelay(4295000);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} ___udelay(4295000);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} ___udelay(4295000);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} $i85 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i82, $i85);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} ___udelay(4295000);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3089} ___udelay(4295000);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} ___udelay(4295000);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} ___udelay(4295000);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} ___udelay(4295000);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3093} ___udelay(4295000);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} ___udelay(4295000);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3095} ___udelay(4295000);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} ___udelay(4295000);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} ___udelay(4295000);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3098} $i88 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i85, $i88);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} ___udelay(4295000);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} ___udelay(4295000);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} ___udelay(4295000);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} ___udelay(4295000);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3103} ___udelay(4295000);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} ___udelay(4295000);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} ___udelay(4295000);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} ___udelay(4295000);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} ___udelay(4295000);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} ___udelay(4295000);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} $i91 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i88, $i91);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} ___udelay(4295000);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3111} ___udelay(4295000);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} ___udelay(4295000);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} ___udelay(4295000);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} ___udelay(4295000);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} ___udelay(4295000);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} ___udelay(4295000);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} ___udelay(4295000);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3118} ___udelay(4295000);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} ___udelay(4295000);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3120} $i94 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i91, $i94);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3121} ___udelay(4295000);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} ___udelay(4295000);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3123} ___udelay(4295000);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} ___udelay(4295000);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} ___udelay(4295000);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3126} ___udelay(4295000);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} ___udelay(4295000);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} ___udelay(4295000);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} ___udelay(4295000);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} ___udelay(4295000);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} $i97 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i94, $i97);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} ___udelay(4295000);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} ___udelay(4295000);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} ___udelay(4295000);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} ___udelay(4295000);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} ___udelay(4295000);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} ___udelay(4295000);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} ___udelay(4295000);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} ___udelay(4295000);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} ___udelay(4295000);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3141} ___udelay(4295000);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} $i100 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i97, $i100);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} ___udelay(4295000);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3144} ___udelay(4295000);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} ___udelay(4295000);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} ___udelay(4295000);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} ___udelay(4295000);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} ___udelay(4295000);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} ___udelay(4295000);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3150} ___udelay(4295000);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} ___udelay(4295000);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3152} ___udelay(4295000);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} $i103 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i100, $i103);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} ___udelay(4295000);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} ___udelay(4295000);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3156} ___udelay(4295000);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} ___udelay(4295000);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} ___udelay(4295000);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3159} ___udelay(4295000);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3160} ___udelay(4295000);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} ___udelay(4295000);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} ___udelay(4295000);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} ___udelay(4295000);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} $i106 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i103, $i106);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} ___udelay(4295000);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3166} ___udelay(4295000);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3167} ___udelay(4295000);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} ___udelay(4295000);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} ___udelay(4295000);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} ___udelay(4295000);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} ___udelay(4295000);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} ___udelay(4295000);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} ___udelay(4295000);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} ___udelay(4295000);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} $i109 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i106, $i109);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3176} ___udelay(4295000);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} ___udelay(4295000);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3178} ___udelay(4295000);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} ___udelay(4295000);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3180} ___udelay(4295000);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3181} ___udelay(4295000);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3182} ___udelay(4295000);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} ___udelay(4295000);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3184} ___udelay(4295000);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3185} ___udelay(4295000);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} $i112 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i109, $i112);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3187} ___udelay(4295000);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} ___udelay(4295000);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} ___udelay(4295000);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3190} ___udelay(4295000);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} ___udelay(4295000);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} ___udelay(4295000);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} ___udelay(4295000);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} ___udelay(4295000);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} ___udelay(4295000);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} ___udelay(4295000);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} $i115 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i112, $i115);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} ___udelay(4295000);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} ___udelay(4295000);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} ___udelay(4295000);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3201} ___udelay(4295000);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} ___udelay(4295000);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} ___udelay(4295000);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} ___udelay(4295000);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} ___udelay(4295000);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3206} ___udelay(4295000);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} ___udelay(4295000);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3208} $i118 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i115, $i118);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} ___udelay(4295000);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} ___udelay(4295000);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} ___udelay(4295000);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} ___udelay(4295000);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3213} ___udelay(4295000);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} ___udelay(4295000);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} ___udelay(4295000);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3216} ___udelay(4295000);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} ___udelay(4295000);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} ___udelay(4295000);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3219} $i121 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i118, $i121);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3220} ___udelay(4295000);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} ___udelay(4295000);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} ___udelay(4295000);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} ___udelay(4295000);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} ___udelay(4295000);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} ___udelay(4295000);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} ___udelay(4295000);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} ___udelay(4295000);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} ___udelay(4295000);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} ___udelay(4295000);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} $i124 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i121, $i124);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} ___udelay(4295000);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} ___udelay(4295000);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} ___udelay(4295000);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} ___udelay(4295000);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} ___udelay(4295000);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} ___udelay(4295000);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} ___udelay(4295000);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} ___udelay(4295000);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} ___udelay(4295000);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} ___udelay(4295000);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} $i127 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i124, $i127);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} ___udelay(4295000);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} ___udelay(4295000);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} ___udelay(4295000);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} ___udelay(4295000);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} ___udelay(4295000);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} ___udelay(4295000);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} ___udelay(4295000);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} ___udelay(4295000);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} ___udelay(4295000);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3251} ___udelay(4295000);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} $i130 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i127, $i130);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} ___udelay(4295000);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} ___udelay(4295000);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} ___udelay(4295000);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} ___udelay(4295000);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} ___udelay(4295000);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} ___udelay(4295000);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} ___udelay(4295000);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} ___udelay(4295000);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} ___udelay(4295000);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} ___udelay(4295000);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} $i133 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i130, $i133);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} ___udelay(4295000);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} ___udelay(4295000);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} ___udelay(4295000);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} ___udelay(4295000);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} ___udelay(4295000);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} ___udelay(4295000);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} ___udelay(4295000);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3271} ___udelay(4295000);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} ___udelay(4295000);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} ___udelay(4295000);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} $i136 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i133, $i136);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} ___udelay(4295000);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} ___udelay(4295000);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} ___udelay(4295000);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} ___udelay(4295000);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} ___udelay(4295000);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} ___udelay(4295000);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} ___udelay(4295000);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} ___udelay(4295000);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} ___udelay(4295000);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} ___udelay(4295000);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} $i139 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i136, $i139);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} ___udelay(4295000);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} ___udelay(4295000);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} ___udelay(4295000);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} ___udelay(4295000);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} ___udelay(4295000);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} ___udelay(4295000);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} ___udelay(4295000);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} ___udelay(4295000);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} ___udelay(4295000);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} ___udelay(4295000);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} $i142 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i139, $i142);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} ___udelay(4295000);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} ___udelay(4295000);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} ___udelay(4295000);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3300} ___udelay(4295000);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} ___udelay(4295000);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} ___udelay(4295000);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} ___udelay(4295000);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3304} ___udelay(4295000);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3305} ___udelay(4295000);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} ___udelay(4295000);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} $i145 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i142, $i145);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} ___udelay(4295000);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} ___udelay(4295000);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} ___udelay(4295000);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} ___udelay(4295000);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} ___udelay(4295000);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} ___udelay(4295000);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} ___udelay(4295000);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} ___udelay(4295000);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} ___udelay(4295000);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} ___udelay(4295000);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} $i148 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i145, $i148);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} ___udelay(4295000);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} ___udelay(4295000);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} ___udelay(4295000);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} ___udelay(4295000);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} ___udelay(4295000);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} ___udelay(4295000);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} ___udelay(4295000);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} ___udelay(4295000);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} ___udelay(4295000);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} ___udelay(4295000);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} $i151 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i148, $i151);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} ___udelay(4295000);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} ___udelay(4295000);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} ___udelay(4295000);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} ___udelay(4295000);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} ___udelay(4295000);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} ___udelay(4295000);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} ___udelay(4295000);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} ___udelay(4295000);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} ___udelay(4295000);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3339} ___udelay(4295000);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} $i154 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i151, $i154);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} ___udelay(4295000);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} ___udelay(4295000);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3343} ___udelay(4295000);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} ___udelay(4295000);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} ___udelay(4295000);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} ___udelay(4295000);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} ___udelay(4295000);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} ___udelay(4295000);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} ___udelay(4295000);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} ___udelay(4295000);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} $i157 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i154, $i157);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb534, $bb535;

  $bb535:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} ___udelay(4295000);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} ___udelay(4295000);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} ___udelay(4295000);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} ___udelay(4295000);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} ___udelay(4295000);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} ___udelay(4295000);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} ___udelay(4295000);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} ___udelay(4295000);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} ___udelay(4295000);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} ___udelay(4295000);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} $i160 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i157, $i160);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} ___udelay(4295000);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} ___udelay(4295000);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} ___udelay(4295000);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3366} ___udelay(4295000);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3367} ___udelay(4295000);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} ___udelay(4295000);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} ___udelay(4295000);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3370} ___udelay(4295000);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3371} ___udelay(4295000);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3372} ___udelay(4295000);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} $i163 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i160, $i163);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb572, $bb573;

  $bb573:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3374} ___udelay(4295000);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3375} ___udelay(4295000);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3376} ___udelay(4295000);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} ___udelay(4295000);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3378} ___udelay(4295000);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} ___udelay(4295000);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} ___udelay(4295000);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3381} ___udelay(4295000);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3382} ___udelay(4295000);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} ___udelay(4295000);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3384} $i166 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i163, $i166);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3385} ___udelay(4295000);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3386} ___udelay(4295000);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3387} ___udelay(4295000);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3388} ___udelay(4295000);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3389} ___udelay(4295000);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3390} ___udelay(4295000);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3391} ___udelay(4295000);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3392} ___udelay(4295000);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3393} ___udelay(4295000);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3394} ___udelay(4295000);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3395} $i169 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i166, $i169);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb610, $bb611;

  $bb611:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3396} ___udelay(4295000);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3397} ___udelay(4295000);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} ___udelay(4295000);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3399} ___udelay(4295000);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} ___udelay(4295000);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} ___udelay(4295000);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} ___udelay(4295000);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3403} ___udelay(4295000);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3404} ___udelay(4295000);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} ___udelay(4295000);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3406} $i172 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i169, $i172);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb629, $bb630;

  $bb630:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3407} ___udelay(4295000);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3408} ___udelay(4295000);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3409} ___udelay(4295000);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} ___udelay(4295000);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} ___udelay(4295000);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3412} ___udelay(4295000);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3413} ___udelay(4295000);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} ___udelay(4295000);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3415} ___udelay(4295000);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} ___udelay(4295000);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3417} $i175 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i172, $i175);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb648, $bb649;

  $bb649:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3418} ___udelay(4295000);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3419} ___udelay(4295000);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3420} ___udelay(4295000);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} ___udelay(4295000);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} ___udelay(4295000);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} ___udelay(4295000);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3424} ___udelay(4295000);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} ___udelay(4295000);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3426} ___udelay(4295000);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} ___udelay(4295000);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3428} $i178 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i175, $i178);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb667, $bb668;

  $bb668:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} ___udelay(4295000);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3430} ___udelay(4295000);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3431} ___udelay(4295000);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3432} ___udelay(4295000);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} ___udelay(4295000);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3434} ___udelay(4295000);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3435} ___udelay(4295000);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3436} ___udelay(4295000);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3437} ___udelay(4295000);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3438} ___udelay(4295000);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3439} $i181 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i178, $i181);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb686, $bb687;

  $bb687:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} ___udelay(4295000);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} ___udelay(4295000);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3442} ___udelay(4295000);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3443} ___udelay(4295000);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3444} ___udelay(4295000);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} ___udelay(4295000);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3446} ___udelay(4295000);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} ___udelay(4295000);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3448} ___udelay(4295000);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} ___udelay(4295000);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3450} $i184 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i181, $i184);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb705, $bb706;

  $bb706:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3451} ___udelay(4295000);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3452} ___udelay(4295000);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} ___udelay(4295000);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3454} ___udelay(4295000);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3455} ___udelay(4295000);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} ___udelay(4295000);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3457} ___udelay(4295000);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} ___udelay(4295000);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3459} ___udelay(4295000);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} ___udelay(4295000);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3461} $i187 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i184, $i187);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} ___udelay(4295000);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3463} ___udelay(4295000);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} ___udelay(4295000);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3465} ___udelay(4295000);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3466} ___udelay(4295000);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3467} ___udelay(4295000);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3468} ___udelay(4295000);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3469} ___udelay(4295000);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3470} ___udelay(4295000);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3471} ___udelay(4295000);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3472} $i190 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i187, $i190);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb743, $bb744;

  $bb744:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3473} ___udelay(4295000);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3474} ___udelay(4295000);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} ___udelay(4295000);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3476} ___udelay(4295000);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3477} ___udelay(4295000);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3478} ___udelay(4295000);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3479} ___udelay(4295000);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3480} ___udelay(4295000);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3481} ___udelay(4295000);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3482} ___udelay(4295000);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3483} $i193 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i190, $i193);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb762, $bb763;

  $bb763:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3484} ___udelay(4295000);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3485} ___udelay(4295000);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3486} ___udelay(4295000);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3487} ___udelay(4295000);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3488} ___udelay(4295000);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3489} ___udelay(4295000);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3490} ___udelay(4295000);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3491} ___udelay(4295000);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3492} ___udelay(4295000);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3493} ___udelay(4295000);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} $i196 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i193, $i196);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb781, $bb782;

  $bb782:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3495} ___udelay(4295000);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3496} ___udelay(4295000);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3497} ___udelay(4295000);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3498} ___udelay(4295000);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3499} ___udelay(4295000);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3500} ___udelay(4295000);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3501} ___udelay(4295000);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3502} ___udelay(4295000);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3503} ___udelay(4295000);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3504} ___udelay(4295000);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3505} $i199 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i196, $i199);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb800, $bb801;

  $bb801:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3506} ___udelay(4295000);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3507} ___udelay(4295000);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} ___udelay(4295000);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3509} ___udelay(4295000);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3510} ___udelay(4295000);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} ___udelay(4295000);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3512} ___udelay(4295000);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} ___udelay(4295000);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} ___udelay(4295000);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3515} ___udelay(4295000);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} $i202 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i199, $i202);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb819, $bb820;

  $bb820:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} ___udelay(4295000);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3518} ___udelay(4295000);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} ___udelay(4295000);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3520} ___udelay(4295000);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3521} ___udelay(4295000);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3522} ___udelay(4295000);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} ___udelay(4295000);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} ___udelay(4295000);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3525} ___udelay(4295000);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} ___udelay(4295000);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} $i205 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i202, $i205);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb838, $bb839;

  $bb839:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3528} ___udelay(4295000);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3529} ___udelay(4295000);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3530} ___udelay(4295000);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3531} ___udelay(4295000);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3532} ___udelay(4295000);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3533} ___udelay(4295000);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3534} ___udelay(4295000);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3535} ___udelay(4295000);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3536} ___udelay(4295000);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3537} ___udelay(4295000);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb855:
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3538} $i208 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i205, $i208);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb857, $bb858;

  $bb858:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3539} ___udelay(4295000);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} ___udelay(4295000);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} ___udelay(4295000);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3542} ___udelay(4295000);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3543} ___udelay(4295000);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3544} ___udelay(4295000);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3545} ___udelay(4295000);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3546} ___udelay(4295000);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3547} ___udelay(4295000);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3548} ___udelay(4295000);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3549} $i211 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i208, $i211);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb876, $bb877;

  $bb877:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3550} ___udelay(4295000);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3551} ___udelay(4295000);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3552} ___udelay(4295000);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3553} ___udelay(4295000);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} ___udelay(4295000);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3555} ___udelay(4295000);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3556} ___udelay(4295000);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3557} ___udelay(4295000);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} ___udelay(4295000);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} ___udelay(4295000);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3560} $i214 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i211, $i214);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb895, $bb896;

  $bb896:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} ___udelay(4295000);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3562} ___udelay(4295000);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3563} ___udelay(4295000);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3564} ___udelay(4295000);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} ___udelay(4295000);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3566} ___udelay(4295000);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} ___udelay(4295000);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3568} ___udelay(4295000);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3569} ___udelay(4295000);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3570} ___udelay(4295000);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} $i217 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i214, $i217);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb914, $bb915;

  $bb915:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} ___udelay(4295000);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3573} ___udelay(4295000);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3574} ___udelay(4295000);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} ___udelay(4295000);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} ___udelay(4295000);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3577} ___udelay(4295000);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3578} ___udelay(4295000);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} ___udelay(4295000);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} ___udelay(4295000);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3581} ___udelay(4295000);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} $i220 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i217, $i220);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb933, $bb934;

  $bb934:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3583} ___udelay(4295000);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} ___udelay(4295000);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} ___udelay(4295000);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} ___udelay(4295000);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3587} ___udelay(4295000);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} ___udelay(4295000);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} ___udelay(4295000);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} ___udelay(4295000);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} ___udelay(4295000);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3592} ___udelay(4295000);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3593} $i223 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i220, $i223);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb952, $bb953;

  $bb953:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3594} ___udelay(4295000);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3595} ___udelay(4295000);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3596} ___udelay(4295000);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3597} ___udelay(4295000);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3598} ___udelay(4295000);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3599} ___udelay(4295000);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3600} ___udelay(4295000);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3601} ___udelay(4295000);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3602} ___udelay(4295000);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3603} ___udelay(4295000);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3604} $i226 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i223, $i226);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb971, $bb972;

  $bb972:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb973;

  $bb973:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3605} ___udelay(4295000);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} ___udelay(4295000);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3607} ___udelay(4295000);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3608} ___udelay(4295000);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} ___udelay(4295000);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3610} ___udelay(4295000);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3611} ___udelay(4295000);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3612} ___udelay(4295000);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3613} ___udelay(4295000);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3614} ___udelay(4295000);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3615} $i229 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i226, $i229);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb990, $bb991;

  $bb991:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3616} ___udelay(4295000);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3617} ___udelay(4295000);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3618} ___udelay(4295000);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3619} ___udelay(4295000);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3620} ___udelay(4295000);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3621} ___udelay(4295000);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3622} ___udelay(4295000);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3623} ___udelay(4295000);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3624} ___udelay(4295000);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3625} ___udelay(4295000);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3626} $i232 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i229, $i232);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb1009, $bb1010;

  $bb1010:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    goto $bb1015;

  $bb1015:
    assume {:verifier.code 0} true;
    goto $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3627} ___udelay(4295000);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3628} ___udelay(4295000);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3629} ___udelay(4295000);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} ___udelay(4295000);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3631} ___udelay(4295000);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    goto $bb1021;

  $bb1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3632} ___udelay(4295000);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    goto $bb1022;

  $bb1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3633} ___udelay(4295000);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    goto $bb1023;

  $bb1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3634} ___udelay(4295000);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    goto $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3635} ___udelay(4295000);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3636} ___udelay(4295000);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    goto $bb1026;

  $bb1026:
    assume {:verifier.code 0} true;
    goto $bb1027;

  $bb1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3637} $i235 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i232, $i235);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb1028, $bb1029;

  $bb1029:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb1030;

  $bb1030:
    assume {:verifier.code 0} true;
    goto $bb1034;

  $bb1034:
    assume {:verifier.code 0} true;
    goto $bb1035;

  $bb1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3638} ___udelay(4295000);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    goto $bb1036;

  $bb1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3639} ___udelay(4295000);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    goto $bb1037;

  $bb1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3640} ___udelay(4295000);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    goto $bb1038;

  $bb1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} ___udelay(4295000);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    goto $bb1039;

  $bb1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3642} ___udelay(4295000);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    goto $bb1040;

  $bb1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3643} ___udelay(4295000);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    goto $bb1041;

  $bb1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3644} ___udelay(4295000);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    goto $bb1042;

  $bb1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3645} ___udelay(4295000);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    goto $bb1043;

  $bb1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3646} ___udelay(4295000);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    goto $bb1044;

  $bb1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3647} ___udelay(4295000);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    goto $bb1045;

  $bb1045:
    assume {:verifier.code 0} true;
    goto $bb1046;

  $bb1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3648} $i238 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i235, $i238);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb1047, $bb1048;

  $bb1048:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb1049;

  $bb1049:
    assume {:verifier.code 0} true;
    goto $bb1053;

  $bb1053:
    assume {:verifier.code 0} true;
    goto $bb1054;

  $bb1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} ___udelay(4295000);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    goto $bb1055;

  $bb1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3650} ___udelay(4295000);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    goto $bb1056;

  $bb1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3651} ___udelay(4295000);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    goto $bb1057;

  $bb1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3652} ___udelay(4295000);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    goto $bb1058;

  $bb1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3653} ___udelay(4295000);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    goto $bb1059;

  $bb1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3654} ___udelay(4295000);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    goto $bb1060;

  $bb1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3655} ___udelay(4295000);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    goto $bb1061;

  $bb1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3656} ___udelay(4295000);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    goto $bb1062;

  $bb1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3657} ___udelay(4295000);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    goto $bb1063;

  $bb1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3658} ___udelay(4295000);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    goto $bb1064;

  $bb1064:
    assume {:verifier.code 0} true;
    goto $bb1065;

  $bb1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3659} $i241 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i238, $i241);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb1066, $bb1067;

  $bb1067:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb1068;

  $bb1068:
    assume {:verifier.code 0} true;
    goto $bb1072;

  $bb1072:
    assume {:verifier.code 0} true;
    goto $bb1073;

  $bb1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3660} ___udelay(4295000);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    goto $bb1074;

  $bb1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3661} ___udelay(4295000);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    goto $bb1075;

  $bb1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3662} ___udelay(4295000);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    goto $bb1076;

  $bb1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3663} ___udelay(4295000);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    goto $bb1077;

  $bb1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3664} ___udelay(4295000);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    goto $bb1078;

  $bb1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3665} ___udelay(4295000);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    goto $bb1079;

  $bb1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3666} ___udelay(4295000);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    goto $bb1080;

  $bb1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3667} ___udelay(4295000);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    goto $bb1081;

  $bb1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3668} ___udelay(4295000);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    goto $bb1082;

  $bb1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3669} ___udelay(4295000);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    goto $bb1083;

  $bb1083:
    assume {:verifier.code 0} true;
    goto $bb1084;

  $bb1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3670} $i244 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i241, $i244);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb1085, $bb1086;

  $bb1086:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb1087;

  $bb1087:
    assume {:verifier.code 0} true;
    goto $bb1091;

  $bb1091:
    assume {:verifier.code 0} true;
    goto $bb1092;

  $bb1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3671} ___udelay(4295000);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    goto $bb1093;

  $bb1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3672} ___udelay(4295000);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    goto $bb1094;

  $bb1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} ___udelay(4295000);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    goto $bb1095;

  $bb1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3674} ___udelay(4295000);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    goto $bb1096;

  $bb1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3675} ___udelay(4295000);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    goto $bb1097;

  $bb1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3676} ___udelay(4295000);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3677} ___udelay(4295000);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    goto $bb1099;

  $bb1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3678} ___udelay(4295000);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    goto $bb1100;

  $bb1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3679} ___udelay(4295000);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    goto $bb1101;

  $bb1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3680} ___udelay(4295000);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    goto $bb1102;

  $bb1102:
    assume {:verifier.code 0} true;
    goto $bb1103;

  $bb1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3681} $i247 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i244, $i247);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb1104, $bb1105;

  $bb1105:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb1106;

  $bb1106:
    assume {:verifier.code 0} true;
    goto $bb1110;

  $bb1110:
    assume {:verifier.code 0} true;
    goto $bb1111;

  $bb1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3682} ___udelay(4295000);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    goto $bb1112;

  $bb1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} ___udelay(4295000);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    goto $bb1113;

  $bb1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3684} ___udelay(4295000);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    goto $bb1114;

  $bb1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3685} ___udelay(4295000);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    goto $bb1115;

  $bb1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3686} ___udelay(4295000);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    goto $bb1116;

  $bb1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3687} ___udelay(4295000);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    goto $bb1117;

  $bb1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3688} ___udelay(4295000);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    goto $bb1118;

  $bb1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3689} ___udelay(4295000);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    goto $bb1119;

  $bb1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} ___udelay(4295000);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    goto $bb1120;

  $bb1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3691} ___udelay(4295000);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    goto $bb1121;

  $bb1121:
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3692} $i250 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i247, $i250);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb1123, $bb1124;

  $bb1124:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb1125;

  $bb1125:
    assume {:verifier.code 0} true;
    goto $bb1129;

  $bb1129:
    assume {:verifier.code 0} true;
    goto $bb1130;

  $bb1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3693} ___udelay(4295000);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    goto $bb1131;

  $bb1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3694} ___udelay(4295000);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    goto $bb1132;

  $bb1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3695} ___udelay(4295000);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    goto $bb1133;

  $bb1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3696} ___udelay(4295000);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    goto $bb1134;

  $bb1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3697} ___udelay(4295000);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    goto $bb1135;

  $bb1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3698} ___udelay(4295000);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    goto $bb1136;

  $bb1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3699} ___udelay(4295000);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    goto $bb1137;

  $bb1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} ___udelay(4295000);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    goto $bb1138;

  $bb1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3701} ___udelay(4295000);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    goto $bb1139;

  $bb1139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3702} ___udelay(4295000);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    goto $bb1140;

  $bb1140:
    assume {:verifier.code 0} true;
    goto $bb1141;

  $bb1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} $i253 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i250, $i253);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb1142, $bb1143;

  $bb1143:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb1144;

  $bb1144:
    assume {:verifier.code 0} true;
    goto $bb1148;

  $bb1148:
    assume {:verifier.code 0} true;
    goto $bb1149;

  $bb1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3704} ___udelay(4295000);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    goto $bb1150;

  $bb1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3705} ___udelay(4295000);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    goto $bb1151;

  $bb1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3706} ___udelay(4295000);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    goto $bb1152;

  $bb1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} ___udelay(4295000);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    goto $bb1153;

  $bb1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3708} ___udelay(4295000);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    goto $bb1154;

  $bb1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3709} ___udelay(4295000);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    goto $bb1155;

  $bb1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3710} ___udelay(4295000);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    goto $bb1156;

  $bb1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3711} ___udelay(4295000);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    goto $bb1157;

  $bb1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3712} ___udelay(4295000);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    goto $bb1158;

  $bb1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} ___udelay(4295000);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    goto $bb1159;

  $bb1159:
    assume {:verifier.code 0} true;
    goto $bb1160;

  $bb1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3714} $i256 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i253, $i256);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb1161, $bb1162;

  $bb1162:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb1163;

  $bb1163:
    assume {:verifier.code 0} true;
    goto $bb1167;

  $bb1167:
    assume {:verifier.code 0} true;
    goto $bb1168;

  $bb1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3715} ___udelay(4295000);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    goto $bb1169;

  $bb1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3716} ___udelay(4295000);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    goto $bb1170;

  $bb1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} ___udelay(4295000);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    goto $bb1171;

  $bb1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3718} ___udelay(4295000);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    goto $bb1172;

  $bb1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3719} ___udelay(4295000);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    goto $bb1173;

  $bb1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3720} ___udelay(4295000);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    goto $bb1174;

  $bb1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3721} ___udelay(4295000);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    goto $bb1175;

  $bb1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3722} ___udelay(4295000);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    goto $bb1176;

  $bb1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} ___udelay(4295000);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    goto $bb1177;

  $bb1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3724} ___udelay(4295000);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    goto $bb1178;

  $bb1178:
    assume {:verifier.code 0} true;
    goto $bb1179;

  $bb1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3725} $i259 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i256, $i259);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb1180, $bb1181;

  $bb1181:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb1182;

  $bb1182:
    assume {:verifier.code 0} true;
    goto $bb1186;

  $bb1186:
    assume {:verifier.code 0} true;
    goto $bb1187;

  $bb1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} ___udelay(4295000);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    goto $bb1188;

  $bb1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3727} ___udelay(4295000);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    goto $bb1189;

  $bb1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3728} ___udelay(4295000);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    goto $bb1190;

  $bb1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3729} ___udelay(4295000);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    goto $bb1191;

  $bb1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} ___udelay(4295000);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    goto $bb1192;

  $bb1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3731} ___udelay(4295000);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    goto $bb1193;

  $bb1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3732} ___udelay(4295000);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    goto $bb1194;

  $bb1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3733} ___udelay(4295000);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    goto $bb1195;

  $bb1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3734} ___udelay(4295000);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    goto $bb1196;

  $bb1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3735} ___udelay(4295000);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    goto $bb1197;

  $bb1197:
    assume {:verifier.code 0} true;
    goto $bb1198;

  $bb1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3736} $i262 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i259, $i262);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb1199, $bb1200;

  $bb1200:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb1201;

  $bb1201:
    assume {:verifier.code 0} true;
    goto $bb1205;

  $bb1205:
    assume {:verifier.code 0} true;
    goto $bb1206;

  $bb1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3737} ___udelay(4295000);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    goto $bb1207;

  $bb1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3738} ___udelay(4295000);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    goto $bb1208;

  $bb1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3739} ___udelay(4295000);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    goto $bb1209;

  $bb1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3740} ___udelay(4295000);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    goto $bb1210;

  $bb1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3741} ___udelay(4295000);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    goto $bb1211;

  $bb1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3742} ___udelay(4295000);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    goto $bb1212;

  $bb1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3743} ___udelay(4295000);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    goto $bb1213;

  $bb1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3744} ___udelay(4295000);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    goto $bb1214;

  $bb1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3745} ___udelay(4295000);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    goto $bb1215;

  $bb1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3746} ___udelay(4295000);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    goto $bb1216;

  $bb1216:
    assume {:verifier.code 0} true;
    goto $bb1217;

  $bb1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3747} $i265 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i262, $i265);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb1218, $bb1219;

  $bb1219:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb1220;

  $bb1220:
    assume {:verifier.code 0} true;
    goto $bb1224;

  $bb1224:
    assume {:verifier.code 0} true;
    goto $bb1225;

  $bb1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3748} ___udelay(4295000);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    goto $bb1226;

  $bb1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3749} ___udelay(4295000);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    goto $bb1227;

  $bb1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3750} ___udelay(4295000);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    goto $bb1228;

  $bb1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3751} ___udelay(4295000);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    goto $bb1229;

  $bb1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3752} ___udelay(4295000);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    goto $bb1230;

  $bb1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} ___udelay(4295000);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    goto $bb1231;

  $bb1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3754} ___udelay(4295000);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    goto $bb1232;

  $bb1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3755} ___udelay(4295000);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    goto $bb1233;

  $bb1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3756} ___udelay(4295000);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    goto $bb1234;

  $bb1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3757} ___udelay(4295000);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    goto $bb1235;

  $bb1235:
    assume {:verifier.code 0} true;
    goto $bb1236;

  $bb1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3758} $i268 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i265, $i268);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb1237, $bb1238;

  $bb1238:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb1239;

  $bb1239:
    assume {:verifier.code 0} true;
    goto $bb1243;

  $bb1243:
    assume {:verifier.code 0} true;
    goto $bb1244;

  $bb1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3759} ___udelay(4295000);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    goto $bb1245;

  $bb1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3760} ___udelay(4295000);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    goto $bb1246;

  $bb1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3761} ___udelay(4295000);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    goto $bb1247;

  $bb1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3762} ___udelay(4295000);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    goto $bb1248;

  $bb1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3763} ___udelay(4295000);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    goto $bb1249;

  $bb1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3764} ___udelay(4295000);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    goto $bb1250;

  $bb1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3765} ___udelay(4295000);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    goto $bb1251;

  $bb1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3766} ___udelay(4295000);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    goto $bb1252;

  $bb1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3767} ___udelay(4295000);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    goto $bb1253;

  $bb1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} ___udelay(4295000);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    goto $bb1254;

  $bb1254:
    assume {:verifier.code 0} true;
    goto $bb1255;

  $bb1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3769} $i271 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i268, $i271);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb1256, $bb1257;

  $bb1257:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb1258;

  $bb1258:
    assume {:verifier.code 0} true;
    goto $bb1262;

  $bb1262:
    assume {:verifier.code 0} true;
    goto $bb1263;

  $bb1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3770} ___udelay(4295000);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    goto $bb1264;

  $bb1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3771} ___udelay(4295000);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb1265;

  $bb1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3772} ___udelay(4295000);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    goto $bb1266;

  $bb1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3773} ___udelay(4295000);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    goto $bb1267;

  $bb1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3774} ___udelay(4295000);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    goto $bb1268;

  $bb1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3775} ___udelay(4295000);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    goto $bb1269;

  $bb1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3776} ___udelay(4295000);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb1270;

  $bb1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3777} ___udelay(4295000);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb1271;

  $bb1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3778} ___udelay(4295000);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    goto $bb1272;

  $bb1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3779} ___udelay(4295000);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    goto $bb1273;

  $bb1273:
    assume {:verifier.code 0} true;
    goto $bb1274;

  $bb1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} $i274 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i271, $i274);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb1275, $bb1276;

  $bb1276:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb1277;

  $bb1277:
    assume {:verifier.code 0} true;
    goto $bb1281;

  $bb1281:
    assume {:verifier.code 0} true;
    goto $bb1282;

  $bb1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3781} ___udelay(4295000);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    goto $bb1283;

  $bb1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3782} ___udelay(4295000);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    goto $bb1284;

  $bb1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3783} ___udelay(4295000);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    goto $bb1285;

  $bb1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3784} ___udelay(4295000);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    goto $bb1286;

  $bb1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3785} ___udelay(4295000);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    goto $bb1287;

  $bb1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3786} ___udelay(4295000);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    goto $bb1288;

  $bb1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3787} ___udelay(4295000);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    goto $bb1289;

  $bb1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3788} ___udelay(4295000);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    goto $bb1290;

  $bb1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3789} ___udelay(4295000);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    goto $bb1291;

  $bb1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3790} ___udelay(4295000);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    goto $bb1292;

  $bb1292:
    assume {:verifier.code 0} true;
    goto $bb1293;

  $bb1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3791} $i277 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i274, $i277);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb1294, $bb1295;

  $bb1295:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb1296;

  $bb1296:
    assume {:verifier.code 0} true;
    goto $bb1300;

  $bb1300:
    assume {:verifier.code 0} true;
    goto $bb1301;

  $bb1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3792} ___udelay(4295000);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    goto $bb1302;

  $bb1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3793} ___udelay(4295000);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    goto $bb1303;

  $bb1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3794} ___udelay(4295000);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    goto $bb1304;

  $bb1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3795} ___udelay(4295000);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    goto $bb1305;

  $bb1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3796} ___udelay(4295000);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    goto $bb1306;

  $bb1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3797} ___udelay(4295000);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    goto $bb1307;

  $bb1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3798} ___udelay(4295000);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    goto $bb1308;

  $bb1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3799} ___udelay(4295000);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    goto $bb1309;

  $bb1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3800} ___udelay(4295000);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    goto $bb1310;

  $bb1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3801} ___udelay(4295000);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    goto $bb1311;

  $bb1311:
    assume {:verifier.code 0} true;
    goto $bb1312;

  $bb1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3802} $i280 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i277, $i280);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb1313, $bb1314;

  $bb1314:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb1315;

  $bb1315:
    assume {:verifier.code 0} true;
    goto $bb1319;

  $bb1319:
    assume {:verifier.code 0} true;
    goto $bb1320;

  $bb1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3803} ___udelay(4295000);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    goto $bb1321;

  $bb1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3804} ___udelay(4295000);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    goto $bb1322;

  $bb1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3805} ___udelay(4295000);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    goto $bb1323;

  $bb1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3806} ___udelay(4295000);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    goto $bb1324;

  $bb1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3807} ___udelay(4295000);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    goto $bb1325;

  $bb1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3808} ___udelay(4295000);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    goto $bb1326;

  $bb1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3809} ___udelay(4295000);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    goto $bb1327;

  $bb1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3810} ___udelay(4295000);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    goto $bb1328;

  $bb1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3811} ___udelay(4295000);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    goto $bb1329;

  $bb1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3812} ___udelay(4295000);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    goto $bb1330;

  $bb1330:
    assume {:verifier.code 0} true;
    goto $bb1331;

  $bb1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3813} $i283 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i280, $i283);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb1332, $bb1333;

  $bb1333:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb1334;

  $bb1334:
    assume {:verifier.code 0} true;
    goto $bb1338;

  $bb1338:
    assume {:verifier.code 0} true;
    goto $bb1339;

  $bb1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3814} ___udelay(4295000);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    goto $bb1340;

  $bb1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3815} ___udelay(4295000);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    goto $bb1341;

  $bb1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} ___udelay(4295000);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb1342;

  $bb1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3817} ___udelay(4295000);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    goto $bb1343;

  $bb1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3818} ___udelay(4295000);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    goto $bb1344;

  $bb1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3819} ___udelay(4295000);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    goto $bb1345;

  $bb1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3820} ___udelay(4295000);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    goto $bb1346;

  $bb1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3821} ___udelay(4295000);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    goto $bb1347;

  $bb1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3822} ___udelay(4295000);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    goto $bb1348;

  $bb1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3823} ___udelay(4295000);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    goto $bb1349;

  $bb1349:
    assume {:verifier.code 0} true;
    goto $bb1350;

  $bb1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3824} $i286 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i283, $i286);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb1351, $bb1352;

  $bb1352:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb1353;

  $bb1353:
    assume {:verifier.code 0} true;
    goto $bb1357;

  $bb1357:
    assume {:verifier.code 0} true;
    goto $bb1358;

  $bb1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3825} ___udelay(4295000);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    goto $bb1359;

  $bb1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} ___udelay(4295000);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    goto $bb1360;

  $bb1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3827} ___udelay(4295000);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    goto $bb1361;

  $bb1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3828} ___udelay(4295000);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    goto $bb1362;

  $bb1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3829} ___udelay(4295000);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    goto $bb1363;

  $bb1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3830} ___udelay(4295000);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    goto $bb1364;

  $bb1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3831} ___udelay(4295000);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    goto $bb1365;

  $bb1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3832} ___udelay(4295000);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    goto $bb1366;

  $bb1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3833} ___udelay(4295000);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    goto $bb1367;

  $bb1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} ___udelay(4295000);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    goto $bb1368;

  $bb1368:
    assume {:verifier.code 0} true;
    goto $bb1369;

  $bb1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3835} $i289 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i286, $i289);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb1370, $bb1371;

  $bb1371:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb1372;

  $bb1372:
    assume {:verifier.code 0} true;
    goto $bb1376;

  $bb1376:
    assume {:verifier.code 0} true;
    goto $bb1377;

  $bb1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3836} ___udelay(4295000);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    goto $bb1378;

  $bb1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3837} ___udelay(4295000);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    goto $bb1379;

  $bb1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3838} ___udelay(4295000);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    goto $bb1380;

  $bb1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3839} ___udelay(4295000);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    goto $bb1381;

  $bb1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3840} ___udelay(4295000);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    goto $bb1382;

  $bb1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3841} ___udelay(4295000);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    goto $bb1383;

  $bb1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3842} ___udelay(4295000);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    goto $bb1384;

  $bb1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3843} ___udelay(4295000);
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    goto $bb1385;

  $bb1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3844} ___udelay(4295000);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    goto $bb1386;

  $bb1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3845} ___udelay(4295000);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    goto $bb1387;

  $bb1387:
    assume {:verifier.code 0} true;
    goto $bb1388;

  $bb1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3846} $i292 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i289, $i292);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb1389, $bb1390;

  $bb1390:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb1391;

  $bb1391:
    assume {:verifier.code 0} true;
    goto $bb1395;

  $bb1395:
    assume {:verifier.code 0} true;
    goto $bb1396;

  $bb1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3847} ___udelay(4295000);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    goto $bb1397;

  $bb1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3848} ___udelay(4295000);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    goto $bb1398;

  $bb1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3849} ___udelay(4295000);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    goto $bb1399;

  $bb1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3850} ___udelay(4295000);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    goto $bb1400;

  $bb1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3851} ___udelay(4295000);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    goto $bb1401;

  $bb1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3852} ___udelay(4295000);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    goto $bb1402;

  $bb1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3853} ___udelay(4295000);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    goto $bb1403;

  $bb1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3854} ___udelay(4295000);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    goto $bb1404;

  $bb1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3855} ___udelay(4295000);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    goto $bb1405;

  $bb1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} ___udelay(4295000);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    goto $bb1406;

  $bb1406:
    assume {:verifier.code 0} true;
    goto $bb1407;

  $bb1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3857} $i295 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i292, $i295);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb1408, $bb1409;

  $bb1409:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb1410;

  $bb1410:
    assume {:verifier.code 0} true;
    goto $bb1414;

  $bb1414:
    assume {:verifier.code 0} true;
    goto $bb1415;

  $bb1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3858} ___udelay(4295000);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    goto $bb1416;

  $bb1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3859} ___udelay(4295000);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    goto $bb1417;

  $bb1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3860} ___udelay(4295000);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    goto $bb1418;

  $bb1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3861} ___udelay(4295000);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    goto $bb1419;

  $bb1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} ___udelay(4295000);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    goto $bb1420;

  $bb1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3863} ___udelay(4295000);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    goto $bb1421;

  $bb1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3864} ___udelay(4295000);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    goto $bb1422;

  $bb1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3865} ___udelay(4295000);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    goto $bb1423;

  $bb1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3866} ___udelay(4295000);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    goto $bb1424;

  $bb1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3867} ___udelay(4295000);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    goto $bb1425;

  $bb1425:
    assume {:verifier.code 0} true;
    goto $bb1426;

  $bb1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3868} $i298 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i295, $i298);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb1427, $bb1428;

  $bb1428:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb1429;

  $bb1429:
    assume {:verifier.code 0} true;
    goto $bb1433;

  $bb1433:
    assume {:verifier.code 0} true;
    goto $bb1434;

  $bb1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3869} ___udelay(4295000);
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    goto $bb1435;

  $bb1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3870} ___udelay(4295000);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    goto $bb1436;

  $bb1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3871} ___udelay(4295000);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    goto $bb1437;

  $bb1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3872} ___udelay(4295000);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    goto $bb1438;

  $bb1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3873} ___udelay(4295000);
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    goto $bb1439;

  $bb1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3874} ___udelay(4295000);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    goto $bb1440;

  $bb1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3875} ___udelay(4295000);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    goto $bb1441;

  $bb1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3876} ___udelay(4295000);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    goto $bb1442;

  $bb1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3877} ___udelay(4295000);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    goto $bb1443;

  $bb1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3878} ___udelay(4295000);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    goto $bb1444;

  $bb1444:
    assume {:verifier.code 0} true;
    goto $bb1445;

  $bb1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3879} $i301 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i298, $i301);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb1446, $bb1447;

  $bb1447:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb1448;

  $bb1448:
    assume {:verifier.code 0} true;
    goto $bb1452;

  $bb1452:
    assume {:verifier.code 0} true;
    goto $bb1453;

  $bb1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3880} ___udelay(4295000);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    goto $bb1454;

  $bb1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3881} ___udelay(4295000);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    goto $bb1455;

  $bb1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3882} ___udelay(4295000);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    goto $bb1456;

  $bb1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3883} ___udelay(4295000);
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    goto $bb1457;

  $bb1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3884} ___udelay(4295000);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    goto $bb1458;

  $bb1458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3885} ___udelay(4295000);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb1459;

  $bb1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3886} ___udelay(4295000);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    goto $bb1460;

  $bb1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3887} ___udelay(4295000);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    goto $bb1461;

  $bb1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3888} ___udelay(4295000);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    goto $bb1462;

  $bb1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3889} ___udelay(4295000);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    goto $bb1463;

  $bb1463:
    assume {:verifier.code 0} true;
    goto $bb1464;

  $bb1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3890} $i304 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i301, $i304);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb1465, $bb1466;

  $bb1466:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb1467;

  $bb1467:
    assume {:verifier.code 0} true;
    goto $bb1471;

  $bb1471:
    assume {:verifier.code 0} true;
    goto $bb1472;

  $bb1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3891} ___udelay(4295000);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    goto $bb1473;

  $bb1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3892} ___udelay(4295000);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    goto $bb1474;

  $bb1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3893} ___udelay(4295000);
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    goto $bb1475;

  $bb1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3894} ___udelay(4295000);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    goto $bb1476;

  $bb1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3895} ___udelay(4295000);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    goto $bb1477;

  $bb1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3896} ___udelay(4295000);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    goto $bb1478;

  $bb1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3897} ___udelay(4295000);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    goto $bb1479;

  $bb1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3898} ___udelay(4295000);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    goto $bb1480;

  $bb1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3899} ___udelay(4295000);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    goto $bb1481;

  $bb1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3900} ___udelay(4295000);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    goto $bb1482;

  $bb1482:
    assume {:verifier.code 0} true;
    goto $bb1483;

  $bb1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3901} $i307 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i304, $i307);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb1484, $bb1485;

  $bb1485:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb1486;

  $bb1486:
    assume {:verifier.code 0} true;
    goto $bb1490;

  $bb1490:
    assume {:verifier.code 0} true;
    goto $bb1491;

  $bb1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} ___udelay(4295000);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    goto $bb1492;

  $bb1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} ___udelay(4295000);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    goto $bb1493;

  $bb1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3904} ___udelay(4295000);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    goto $bb1494;

  $bb1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3905} ___udelay(4295000);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    goto $bb1495;

  $bb1495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} ___udelay(4295000);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    goto $bb1496;

  $bb1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} ___udelay(4295000);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    goto $bb1497;

  $bb1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3908} ___udelay(4295000);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    goto $bb1498;

  $bb1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3909} ___udelay(4295000);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    goto $bb1499;

  $bb1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3910} ___udelay(4295000);
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    goto $bb1500;

  $bb1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3911} ___udelay(4295000);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    goto $bb1501;

  $bb1501:
    assume {:verifier.code 0} true;
    goto $bb1502;

  $bb1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3912} $i310 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i307, $i310);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb1503, $bb1504;

  $bb1504:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb1505;

  $bb1505:
    assume {:verifier.code 0} true;
    goto $bb1509;

  $bb1509:
    assume {:verifier.code 0} true;
    goto $bb1510;

  $bb1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3913} ___udelay(4295000);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    goto $bb1511;

  $bb1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3914} ___udelay(4295000);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    goto $bb1512;

  $bb1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3915} ___udelay(4295000);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    goto $bb1513;

  $bb1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3916} ___udelay(4295000);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    goto $bb1514;

  $bb1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3917} ___udelay(4295000);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    goto $bb1515;

  $bb1515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3918} ___udelay(4295000);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    goto $bb1516;

  $bb1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3919} ___udelay(4295000);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    goto $bb1517;

  $bb1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3920} ___udelay(4295000);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb1518;

  $bb1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3921} ___udelay(4295000);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    goto $bb1519;

  $bb1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3922} ___udelay(4295000);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    goto $bb1520;

  $bb1520:
    assume {:verifier.code 0} true;
    goto $bb1521;

  $bb1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3923} $i313 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i310, $i313);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb1522, $bb1523;

  $bb1523:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb1524;

  $bb1524:
    assume {:verifier.code 0} true;
    goto $bb1528;

  $bb1528:
    assume {:verifier.code 0} true;
    goto $bb1529;

  $bb1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3924} ___udelay(4295000);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    goto $bb1530;

  $bb1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3925} ___udelay(4295000);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    goto $bb1531;

  $bb1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3926} ___udelay(4295000);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    goto $bb1532;

  $bb1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3927} ___udelay(4295000);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    goto $bb1533;

  $bb1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3928} ___udelay(4295000);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    goto $bb1534;

  $bb1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3929} ___udelay(4295000);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    goto $bb1535;

  $bb1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3930} ___udelay(4295000);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    goto $bb1536;

  $bb1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3931} ___udelay(4295000);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    goto $bb1537;

  $bb1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3932} ___udelay(4295000);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    goto $bb1538;

  $bb1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3933} ___udelay(4295000);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    goto $bb1539;

  $bb1539:
    assume {:verifier.code 0} true;
    goto $bb1540;

  $bb1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3934} $i316 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i313, $i316);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb1541, $bb1542;

  $bb1542:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb1543;

  $bb1543:
    assume {:verifier.code 0} true;
    goto $bb1547;

  $bb1547:
    assume {:verifier.code 0} true;
    goto $bb1548;

  $bb1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3935} ___udelay(4295000);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    goto $bb1549;

  $bb1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3936} ___udelay(4295000);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    goto $bb1550;

  $bb1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3937} ___udelay(4295000);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    goto $bb1551;

  $bb1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3938} ___udelay(4295000);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    goto $bb1552;

  $bb1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3939} ___udelay(4295000);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    goto $bb1553;

  $bb1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3940} ___udelay(4295000);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    goto $bb1554;

  $bb1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3941} ___udelay(4295000);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    goto $bb1555;

  $bb1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3942} ___udelay(4295000);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    goto $bb1556;

  $bb1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3943} ___udelay(4295000);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    goto $bb1557;

  $bb1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3944} ___udelay(4295000);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    goto $bb1558;

  $bb1558:
    assume {:verifier.code 0} true;
    goto $bb1559;

  $bb1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3945} $i319 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i316, $i319);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb1560, $bb1561;

  $bb1561:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb1562;

  $bb1562:
    assume {:verifier.code 0} true;
    goto $bb1566;

  $bb1566:
    assume {:verifier.code 0} true;
    goto $bb1567;

  $bb1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3946} ___udelay(4295000);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    goto $bb1568;

  $bb1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3947} ___udelay(4295000);
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    goto $bb1569;

  $bb1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3948} ___udelay(4295000);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    goto $bb1570;

  $bb1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3949} ___udelay(4295000);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    goto $bb1571;

  $bb1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3950} ___udelay(4295000);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    goto $bb1572;

  $bb1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3951} ___udelay(4295000);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    goto $bb1573;

  $bb1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3952} ___udelay(4295000);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    goto $bb1574;

  $bb1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3953} ___udelay(4295000);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    goto $bb1575;

  $bb1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3954} ___udelay(4295000);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    goto $bb1576;

  $bb1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3955} ___udelay(4295000);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    goto $bb1577;

  $bb1577:
    assume {:verifier.code 0} true;
    goto $bb1578;

  $bb1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3956} $i322 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i319, $i322);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb1579, $bb1580;

  $bb1580:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb1581;

  $bb1581:
    assume {:verifier.code 0} true;
    goto $bb1585;

  $bb1585:
    assume {:verifier.code 0} true;
    goto $bb1586;

  $bb1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3957} ___udelay(4295000);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    goto $bb1587;

  $bb1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3958} ___udelay(4295000);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    goto $bb1588;

  $bb1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3959} ___udelay(4295000);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    goto $bb1589;

  $bb1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3960} ___udelay(4295000);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    goto $bb1590;

  $bb1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3961} ___udelay(4295000);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    goto $bb1591;

  $bb1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3962} ___udelay(4295000);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    goto $bb1592;

  $bb1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3963} ___udelay(4295000);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    goto $bb1593;

  $bb1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3964} ___udelay(4295000);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    goto $bb1594;

  $bb1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3965} ___udelay(4295000);
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    goto $bb1595;

  $bb1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3966} ___udelay(4295000);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    goto $bb1596;

  $bb1596:
    assume {:verifier.code 0} true;
    goto $bb1597;

  $bb1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3967} $i325 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i322, $i325);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb1598, $bb1599;

  $bb1599:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb1600;

  $bb1600:
    assume {:verifier.code 0} true;
    goto $bb1604;

  $bb1604:
    assume {:verifier.code 0} true;
    goto $bb1605;

  $bb1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3968} ___udelay(4295000);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    goto $bb1606;

  $bb1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3969} ___udelay(4295000);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    goto $bb1607;

  $bb1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3970} ___udelay(4295000);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    goto $bb1608;

  $bb1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3971} ___udelay(4295000);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    goto $bb1609;

  $bb1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3972} ___udelay(4295000);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    goto $bb1610;

  $bb1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3973} ___udelay(4295000);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    goto $bb1611;

  $bb1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3974} ___udelay(4295000);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    goto $bb1612;

  $bb1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3975} ___udelay(4295000);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    goto $bb1613;

  $bb1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3976} ___udelay(4295000);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    goto $bb1614;

  $bb1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3977} ___udelay(4295000);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    goto $bb1615;

  $bb1615:
    assume {:verifier.code 0} true;
    goto $bb1616;

  $bb1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3978} $i328 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i325, $i328);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb1617, $bb1618;

  $bb1618:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb1619;

  $bb1619:
    assume {:verifier.code 0} true;
    goto $bb1623;

  $bb1623:
    assume {:verifier.code 0} true;
    goto $bb1624;

  $bb1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3979} ___udelay(4295000);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    goto $bb1625;

  $bb1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3980} ___udelay(4295000);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    goto $bb1626;

  $bb1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3981} ___udelay(4295000);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    goto $bb1627;

  $bb1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3982} ___udelay(4295000);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    goto $bb1628;

  $bb1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3983} ___udelay(4295000);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    goto $bb1629;

  $bb1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3984} ___udelay(4295000);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    goto $bb1630;

  $bb1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3985} ___udelay(4295000);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    goto $bb1631;

  $bb1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3986} ___udelay(4295000);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    goto $bb1632;

  $bb1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3987} ___udelay(4295000);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    goto $bb1633;

  $bb1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3988} ___udelay(4295000);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    goto $bb1634;

  $bb1634:
    assume {:verifier.code 0} true;
    goto $bb1635;

  $bb1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3989} $i331 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i328, $i331);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb1636, $bb1637;

  $bb1637:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb1638;

  $bb1638:
    assume {:verifier.code 0} true;
    goto $bb1642;

  $bb1642:
    assume {:verifier.code 0} true;
    goto $bb1643;

  $bb1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3990} ___udelay(4295000);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    goto $bb1644;

  $bb1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3991} ___udelay(4295000);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    goto $bb1645;

  $bb1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3992} ___udelay(4295000);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    goto $bb1646;

  $bb1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3993} ___udelay(4295000);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    goto $bb1647;

  $bb1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3994} ___udelay(4295000);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    goto $bb1648;

  $bb1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3995} ___udelay(4295000);
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    goto $bb1649;

  $bb1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3996} ___udelay(4295000);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    goto $bb1650;

  $bb1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3997} ___udelay(4295000);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    goto $bb1651;

  $bb1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3998} ___udelay(4295000);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    goto $bb1652;

  $bb1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3999} ___udelay(4295000);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    goto $bb1653;

  $bb1653:
    assume {:verifier.code 0} true;
    goto $bb1654;

  $bb1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4000} $i334 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i331, $i334);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb1655, $bb1656;

  $bb1656:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb1657;

  $bb1657:
    assume {:verifier.code 0} true;
    goto $bb1661;

  $bb1661:
    assume {:verifier.code 0} true;
    goto $bb1662;

  $bb1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4001} ___udelay(4295000);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    goto $bb1663;

  $bb1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4002} ___udelay(4295000);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    goto $bb1664;

  $bb1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4003} ___udelay(4295000);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    goto $bb1665;

  $bb1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4004} ___udelay(4295000);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    goto $bb1666;

  $bb1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4005} ___udelay(4295000);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    goto $bb1667;

  $bb1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4006} ___udelay(4295000);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    goto $bb1668;

  $bb1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4007} ___udelay(4295000);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    goto $bb1669;

  $bb1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4008} ___udelay(4295000);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    goto $bb1670;

  $bb1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4009} ___udelay(4295000);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    goto $bb1671;

  $bb1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4010} ___udelay(4295000);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    goto $bb1672;

  $bb1672:
    assume {:verifier.code 0} true;
    goto $bb1673;

  $bb1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4011} $i337 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i334, $i337);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb1674, $bb1675;

  $bb1675:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb1676;

  $bb1676:
    assume {:verifier.code 0} true;
    goto $bb1680;

  $bb1680:
    assume {:verifier.code 0} true;
    goto $bb1681;

  $bb1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4012} ___udelay(4295000);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    goto $bb1682;

  $bb1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4013} ___udelay(4295000);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    goto $bb1683;

  $bb1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4014} ___udelay(4295000);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    goto $bb1684;

  $bb1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4015} ___udelay(4295000);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    goto $bb1685;

  $bb1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4016} ___udelay(4295000);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    goto $bb1686;

  $bb1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4017} ___udelay(4295000);
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    goto $bb1687;

  $bb1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4018} ___udelay(4295000);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    goto $bb1688;

  $bb1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4019} ___udelay(4295000);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    goto $bb1689;

  $bb1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4020} ___udelay(4295000);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    goto $bb1690;

  $bb1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4021} ___udelay(4295000);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    goto $bb1691;

  $bb1691:
    assume {:verifier.code 0} true;
    goto $bb1692;

  $bb1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4022} $i340 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i337, $i340);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb1693, $bb1694;

  $bb1694:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb1695;

  $bb1695:
    assume {:verifier.code 0} true;
    goto $bb1699;

  $bb1699:
    assume {:verifier.code 0} true;
    goto $bb1700;

  $bb1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4023} ___udelay(4295000);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    goto $bb1701;

  $bb1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4024} ___udelay(4295000);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    goto $bb1702;

  $bb1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4025} ___udelay(4295000);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    goto $bb1703;

  $bb1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4026} ___udelay(4295000);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    goto $bb1704;

  $bb1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4027} ___udelay(4295000);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    goto $bb1705;

  $bb1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4028} ___udelay(4295000);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    goto $bb1706;

  $bb1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4029} ___udelay(4295000);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    goto $bb1707;

  $bb1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4030} ___udelay(4295000);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    goto $bb1708;

  $bb1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4031} ___udelay(4295000);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    goto $bb1709;

  $bb1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4032} ___udelay(4295000);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    goto $bb1710;

  $bb1710:
    assume {:verifier.code 0} true;
    goto $bb1711;

  $bb1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4033} $i343 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i340, $i343);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb1712, $bb1713;

  $bb1713:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb1714;

  $bb1714:
    assume {:verifier.code 0} true;
    goto $bb1718;

  $bb1718:
    assume {:verifier.code 0} true;
    goto $bb1719;

  $bb1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4034} ___udelay(4295000);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    goto $bb1720;

  $bb1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4035} ___udelay(4295000);
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    goto $bb1721;

  $bb1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4036} ___udelay(4295000);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    goto $bb1722;

  $bb1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4037} ___udelay(4295000);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    goto $bb1723;

  $bb1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4038} ___udelay(4295000);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb1724;

  $bb1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4039} ___udelay(4295000);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    goto $bb1725;

  $bb1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4040} ___udelay(4295000);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    goto $bb1726;

  $bb1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4041} ___udelay(4295000);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb1727;

  $bb1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4042} ___udelay(4295000);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    goto $bb1728;

  $bb1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4043} ___udelay(4295000);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    goto $bb1729;

  $bb1729:
    assume {:verifier.code 0} true;
    goto $bb1730;

  $bb1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4044} $i346 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i343, $i346);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb1731, $bb1732;

  $bb1732:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb1733;

  $bb1733:
    assume {:verifier.code 0} true;
    goto $bb1737;

  $bb1737:
    assume {:verifier.code 0} true;
    goto $bb1738;

  $bb1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4045} ___udelay(4295000);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb1739;

  $bb1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4046} ___udelay(4295000);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    goto $bb1740;

  $bb1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4047} ___udelay(4295000);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    goto $bb1741;

  $bb1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4048} ___udelay(4295000);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    goto $bb1742;

  $bb1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4049} ___udelay(4295000);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    goto $bb1743;

  $bb1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4050} ___udelay(4295000);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    goto $bb1744;

  $bb1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4051} ___udelay(4295000);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    goto $bb1745;

  $bb1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4052} ___udelay(4295000);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    goto $bb1746;

  $bb1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4053} ___udelay(4295000);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    goto $bb1747;

  $bb1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4054} ___udelay(4295000);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb1748;

  $bb1748:
    assume {:verifier.code 0} true;
    goto $bb1749;

  $bb1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4055} $i349 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i346, $i349);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb1750, $bb1751;

  $bb1751:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb1752;

  $bb1752:
    assume {:verifier.code 0} true;
    goto $bb1756;

  $bb1756:
    assume {:verifier.code 0} true;
    goto $bb1757;

  $bb1757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4056} ___udelay(4295000);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    goto $bb1758;

  $bb1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4057} ___udelay(4295000);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    goto $bb1759;

  $bb1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4058} ___udelay(4295000);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    goto $bb1760;

  $bb1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4059} ___udelay(4295000);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    goto $bb1761;

  $bb1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4060} ___udelay(4295000);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    goto $bb1762;

  $bb1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4061} ___udelay(4295000);
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    goto $bb1763;

  $bb1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4062} ___udelay(4295000);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    goto $bb1764;

  $bb1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4063} ___udelay(4295000);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    goto $bb1765;

  $bb1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4064} ___udelay(4295000);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    goto $bb1766;

  $bb1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4065} ___udelay(4295000);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    goto $bb1767;

  $bb1767:
    assume {:verifier.code 0} true;
    goto $bb1768;

  $bb1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4066} $i352 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i349, $i352);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb1769, $bb1770;

  $bb1770:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb1771;

  $bb1771:
    assume {:verifier.code 0} true;
    goto $bb1775;

  $bb1775:
    assume {:verifier.code 0} true;
    goto $bb1776;

  $bb1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4067} ___udelay(4295000);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    goto $bb1777;

  $bb1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4068} ___udelay(4295000);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    goto $bb1778;

  $bb1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4069} ___udelay(4295000);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    goto $bb1779;

  $bb1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4070} ___udelay(4295000);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    goto $bb1780;

  $bb1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4071} ___udelay(4295000);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    goto $bb1781;

  $bb1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4072} ___udelay(4295000);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    goto $bb1782;

  $bb1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4073} ___udelay(4295000);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    goto $bb1783;

  $bb1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4074} ___udelay(4295000);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    goto $bb1784;

  $bb1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4075} ___udelay(4295000);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    goto $bb1785;

  $bb1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4076} ___udelay(4295000);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    goto $bb1786;

  $bb1786:
    assume {:verifier.code 0} true;
    goto $bb1787;

  $bb1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4077} $i355 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i352, $i355);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb1788, $bb1789;

  $bb1789:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb1790;

  $bb1790:
    assume {:verifier.code 0} true;
    goto $bb1794;

  $bb1794:
    assume {:verifier.code 0} true;
    goto $bb1795;

  $bb1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4078} ___udelay(4295000);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    goto $bb1796;

  $bb1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4079} ___udelay(4295000);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    goto $bb1797;

  $bb1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4080} ___udelay(4295000);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    goto $bb1798;

  $bb1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4081} ___udelay(4295000);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    goto $bb1799;

  $bb1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4082} ___udelay(4295000);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    goto $bb1800;

  $bb1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4083} ___udelay(4295000);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    goto $bb1801;

  $bb1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4084} ___udelay(4295000);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    goto $bb1802;

  $bb1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4085} ___udelay(4295000);
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    goto $bb1803;

  $bb1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4086} ___udelay(4295000);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    goto $bb1804;

  $bb1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4087} ___udelay(4295000);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    goto $bb1805;

  $bb1805:
    assume {:verifier.code 0} true;
    goto $bb1806;

  $bb1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4088} $i358 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i355, $i358);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb1807, $bb1808;

  $bb1808:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb1809;

  $bb1809:
    assume {:verifier.code 0} true;
    goto $bb1813;

  $bb1813:
    assume {:verifier.code 0} true;
    goto $bb1814;

  $bb1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4089} ___udelay(4295000);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    goto $bb1815;

  $bb1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4090} ___udelay(4295000);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    goto $bb1816;

  $bb1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4091} ___udelay(4295000);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    goto $bb1817;

  $bb1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4092} ___udelay(4295000);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    goto $bb1818;

  $bb1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4093} ___udelay(4295000);
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    goto $bb1819;

  $bb1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4094} ___udelay(4295000);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    goto $bb1820;

  $bb1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4095} ___udelay(4295000);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    goto $bb1821;

  $bb1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4096} ___udelay(4295000);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    goto $bb1822;

  $bb1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4097} ___udelay(4295000);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    goto $bb1823;

  $bb1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4098} ___udelay(4295000);
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    goto $bb1824;

  $bb1824:
    assume {:verifier.code 0} true;
    goto $bb1825;

  $bb1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4099} $i361 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i358, $i361);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i362} true;
    goto $bb1826, $bb1827;

  $bb1827:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb1828;

  $bb1828:
    assume {:verifier.code 0} true;
    goto $bb1832;

  $bb1832:
    assume {:verifier.code 0} true;
    goto $bb1833;

  $bb1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4100} ___udelay(4295000);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    goto $bb1834;

  $bb1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4101} ___udelay(4295000);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    goto $bb1835;

  $bb1835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4102} ___udelay(4295000);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    goto $bb1836;

  $bb1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4103} ___udelay(4295000);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    goto $bb1837;

  $bb1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4104} ___udelay(4295000);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    goto $bb1838;

  $bb1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4105} ___udelay(4295000);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    goto $bb1839;

  $bb1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4106} ___udelay(4295000);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    goto $bb1840;

  $bb1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4107} ___udelay(4295000);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    goto $bb1841;

  $bb1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4108} ___udelay(4295000);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    goto $bb1842;

  $bb1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4109} ___udelay(4295000);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    goto $bb1843;

  $bb1843:
    assume {:verifier.code 0} true;
    goto $bb1844;

  $bb1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4110} $i364 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i361, $i364);
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb1845, $bb1846;

  $bb1846:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb1847;

  $bb1847:
    assume {:verifier.code 0} true;
    goto $bb1851;

  $bb1851:
    assume {:verifier.code 0} true;
    goto $bb1852;

  $bb1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4111} ___udelay(4295000);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    goto $bb1853;

  $bb1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4112} ___udelay(4295000);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    goto $bb1854;

  $bb1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4113} ___udelay(4295000);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    goto $bb1855;

  $bb1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4114} ___udelay(4295000);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    goto $bb1856;

  $bb1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4115} ___udelay(4295000);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    goto $bb1857;

  $bb1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4116} ___udelay(4295000);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    goto $bb1858;

  $bb1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4117} ___udelay(4295000);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    goto $bb1859;

  $bb1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4118} ___udelay(4295000);
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    goto $bb1860;

  $bb1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4119} ___udelay(4295000);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    goto $bb1861;

  $bb1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4120} ___udelay(4295000);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    goto $bb1862;

  $bb1862:
    assume {:verifier.code 0} true;
    goto $bb1863;

  $bb1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4121} $i367 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i364, $i367);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb1864, $bb1865;

  $bb1865:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb1866;

  $bb1866:
    assume {:verifier.code 0} true;
    goto $bb1870;

  $bb1870:
    assume {:verifier.code 0} true;
    goto $bb1871;

  $bb1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4122} ___udelay(4295000);
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    goto $bb1872;

  $bb1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4123} ___udelay(4295000);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    goto $bb1873;

  $bb1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4124} ___udelay(4295000);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    goto $bb1874;

  $bb1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4125} ___udelay(4295000);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    goto $bb1875;

  $bb1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4126} ___udelay(4295000);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    goto $bb1876;

  $bb1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4127} ___udelay(4295000);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    goto $bb1877;

  $bb1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4128} ___udelay(4295000);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    goto $bb1878;

  $bb1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4129} ___udelay(4295000);
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    goto $bb1879;

  $bb1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4130} ___udelay(4295000);
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    goto $bb1880;

  $bb1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4131} ___udelay(4295000);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    goto $bb1881;

  $bb1881:
    assume {:verifier.code 0} true;
    goto $bb1882;

  $bb1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4132} $i370 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i367, $i370);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb1883, $bb1884;

  $bb1884:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb1885;

  $bb1885:
    assume {:verifier.code 0} true;
    goto $bb1889;

  $bb1889:
    assume {:verifier.code 0} true;
    goto $bb1890;

  $bb1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4133} ___udelay(4295000);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    goto $bb1891;

  $bb1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4134} ___udelay(4295000);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    goto $bb1892;

  $bb1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4135} ___udelay(4295000);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    goto $bb1893;

  $bb1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4136} ___udelay(4295000);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    goto $bb1894;

  $bb1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4137} ___udelay(4295000);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    goto $bb1895;

  $bb1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4138} ___udelay(4295000);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    goto $bb1896;

  $bb1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4139} ___udelay(4295000);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    goto $bb1897;

  $bb1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4140} ___udelay(4295000);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    goto $bb1898;

  $bb1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4141} ___udelay(4295000);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    goto $bb1899;

  $bb1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4142} ___udelay(4295000);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    goto $bb1900;

  $bb1900:
    assume {:verifier.code 0} true;
    goto $bb1901;

  $bb1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4143} $i373 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i370, $i373);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb1902, $bb1903;

  $bb1903:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb1904;

  $bb1904:
    assume {:verifier.code 0} true;
    goto $bb1908;

  $bb1908:
    assume {:verifier.code 0} true;
    goto $bb1909;

  $bb1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4144} ___udelay(4295000);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    goto $bb1910;

  $bb1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4145} ___udelay(4295000);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    goto $bb1911;

  $bb1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4146} ___udelay(4295000);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    goto $bb1912;

  $bb1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4147} ___udelay(4295000);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    goto $bb1913;

  $bb1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4148} ___udelay(4295000);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    goto $bb1914;

  $bb1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4149} ___udelay(4295000);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    goto $bb1915;

  $bb1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4150} ___udelay(4295000);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    goto $bb1916;

  $bb1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4151} ___udelay(4295000);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    goto $bb1917;

  $bb1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4152} ___udelay(4295000);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    goto $bb1918;

  $bb1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4153} ___udelay(4295000);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    goto $bb1919;

  $bb1919:
    assume {:verifier.code 0} true;
    goto $bb1920;

  $bb1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4154} $i376 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i373, $i376);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i377} true;
    goto $bb1921, $bb1922;

  $bb1922:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb1923;

  $bb1923:
    assume {:verifier.code 0} true;
    goto $bb1927;

  $bb1927:
    assume {:verifier.code 0} true;
    goto $bb1928;

  $bb1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4155} ___udelay(4295000);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    goto $bb1929;

  $bb1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4156} ___udelay(4295000);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    goto $bb1930;

  $bb1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4157} ___udelay(4295000);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    goto $bb1931;

  $bb1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4158} ___udelay(4295000);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    goto $bb1932;

  $bb1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4159} ___udelay(4295000);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    goto $bb1933;

  $bb1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4160} ___udelay(4295000);
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    goto $bb1934;

  $bb1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4161} ___udelay(4295000);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    goto $bb1935;

  $bb1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4162} ___udelay(4295000);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    goto $bb1936;

  $bb1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4163} ___udelay(4295000);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    goto $bb1937;

  $bb1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4164} ___udelay(4295000);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    goto $bb1938;

  $bb1938:
    assume {:verifier.code 0} true;
    goto $bb1939;

  $bb1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4165} $i379 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i376, $i379);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb1940, $bb1941;

  $bb1941:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb1942;

  $bb1942:
    assume {:verifier.code 0} true;
    goto $bb1946;

  $bb1946:
    assume {:verifier.code 0} true;
    goto $bb1947;

  $bb1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4166} ___udelay(4295000);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    goto $bb1948;

  $bb1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4167} ___udelay(4295000);
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    goto $bb1949;

  $bb1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4168} ___udelay(4295000);
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    goto $bb1950;

  $bb1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4169} ___udelay(4295000);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    goto $bb1951;

  $bb1951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4170} ___udelay(4295000);
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    goto $bb1952;

  $bb1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4171} ___udelay(4295000);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    goto $bb1953;

  $bb1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4172} ___udelay(4295000);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    goto $bb1954;

  $bb1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4173} ___udelay(4295000);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    goto $bb1955;

  $bb1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4174} ___udelay(4295000);
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    goto $bb1956;

  $bb1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4175} ___udelay(4295000);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    goto $bb1957;

  $bb1957:
    assume {:verifier.code 0} true;
    goto $bb1958;

  $bb1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4176} $i382 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i379, $i382);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i383} true;
    goto $bb1959, $bb1960;

  $bb1960:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb1961;

  $bb1961:
    assume {:verifier.code 0} true;
    goto $bb1965;

  $bb1965:
    assume {:verifier.code 0} true;
    goto $bb1966;

  $bb1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4177} ___udelay(4295000);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    goto $bb1967;

  $bb1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4178} ___udelay(4295000);
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    goto $bb1968;

  $bb1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4179} ___udelay(4295000);
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    goto $bb1969;

  $bb1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4180} ___udelay(4295000);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto $bb1970;

  $bb1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4181} ___udelay(4295000);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    goto $bb1971;

  $bb1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4182} ___udelay(4295000);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    goto $bb1972;

  $bb1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4183} ___udelay(4295000);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    goto $bb1973;

  $bb1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4184} ___udelay(4295000);
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    goto $bb1974;

  $bb1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4185} ___udelay(4295000);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    goto $bb1975;

  $bb1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4186} ___udelay(4295000);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    goto $bb1976;

  $bb1976:
    assume {:verifier.code 0} true;
    goto $bb1977;

  $bb1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4187} $i385 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i382, $i385);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb1978, $bb1979;

  $bb1979:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb1980;

  $bb1980:
    assume {:verifier.code 0} true;
    goto $bb1984;

  $bb1984:
    assume {:verifier.code 0} true;
    goto $bb1985;

  $bb1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4188} ___udelay(4295000);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    goto $bb1986;

  $bb1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4189} ___udelay(4295000);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    goto $bb1987;

  $bb1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4190} ___udelay(4295000);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    goto $bb1988;

  $bb1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4191} ___udelay(4295000);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    goto $bb1989;

  $bb1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4192} ___udelay(4295000);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    goto $bb1990;

  $bb1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4193} ___udelay(4295000);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    goto $bb1991;

  $bb1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4194} ___udelay(4295000);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    goto $bb1992;

  $bb1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4195} ___udelay(4295000);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    goto $bb1993;

  $bb1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4196} ___udelay(4295000);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    goto $bb1994;

  $bb1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4197} ___udelay(4295000);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    goto $bb1995;

  $bb1995:
    assume {:verifier.code 0} true;
    goto $bb1996;

  $bb1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4198} $i388 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i385, $i388);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb1997, $bb1998;

  $bb1998:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb1999;

  $bb1999:
    assume {:verifier.code 0} true;
    goto $bb2003;

  $bb2003:
    assume {:verifier.code 0} true;
    goto $bb2004;

  $bb2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4199} ___udelay(4295000);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    goto $bb2005;

  $bb2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4200} ___udelay(4295000);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    goto $bb2006;

  $bb2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4201} ___udelay(4295000);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    goto $bb2007;

  $bb2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4202} ___udelay(4295000);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    goto $bb2008;

  $bb2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4203} ___udelay(4295000);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    goto $bb2009;

  $bb2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4204} ___udelay(4295000);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    goto $bb2010;

  $bb2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4205} ___udelay(4295000);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb2011;

  $bb2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4206} ___udelay(4295000);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    goto $bb2012;

  $bb2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4207} ___udelay(4295000);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    goto $bb2013;

  $bb2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4208} ___udelay(4295000);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    goto $bb2014;

  $bb2014:
    assume {:verifier.code 0} true;
    goto $bb2015;

  $bb2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4209} $i391 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i388, $i391);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb2016, $bb2017;

  $bb2017:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb2018;

  $bb2018:
    assume {:verifier.code 0} true;
    goto $bb2022;

  $bb2022:
    assume {:verifier.code 0} true;
    goto $bb2023;

  $bb2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4210} ___udelay(4295000);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    goto $bb2024;

  $bb2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4211} ___udelay(4295000);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    goto $bb2025;

  $bb2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4212} ___udelay(4295000);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    goto $bb2026;

  $bb2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4213} ___udelay(4295000);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    goto $bb2027;

  $bb2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4214} ___udelay(4295000);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    goto $bb2028;

  $bb2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4215} ___udelay(4295000);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    goto $bb2029;

  $bb2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4216} ___udelay(4295000);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    goto $bb2030;

  $bb2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4217} ___udelay(4295000);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    goto $bb2031;

  $bb2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4218} ___udelay(4295000);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    goto $bb2032;

  $bb2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4219} ___udelay(4295000);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    goto $bb2033;

  $bb2033:
    assume {:verifier.code 0} true;
    goto $bb2034;

  $bb2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4220} $i394 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i391, $i394);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb2035, $bb2036;

  $bb2036:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb2037;

  $bb2037:
    assume {:verifier.code 0} true;
    goto $bb2041;

  $bb2041:
    assume {:verifier.code 0} true;
    goto $bb2042;

  $bb2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4221} ___udelay(4295000);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    goto $bb2043;

  $bb2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4222} ___udelay(4295000);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    goto $bb2044;

  $bb2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4223} ___udelay(4295000);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    goto $bb2045;

  $bb2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4224} ___udelay(4295000);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    goto $bb2046;

  $bb2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4225} ___udelay(4295000);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    goto $bb2047;

  $bb2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4226} ___udelay(4295000);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    goto $bb2048;

  $bb2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4227} ___udelay(4295000);
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    goto $bb2049;

  $bb2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4228} ___udelay(4295000);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    goto $bb2050;

  $bb2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4229} ___udelay(4295000);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    goto $bb2051;

  $bb2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4230} ___udelay(4295000);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    goto $bb2052;

  $bb2052:
    assume {:verifier.code 0} true;
    goto $bb2053;

  $bb2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4231} $i397 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i394, $i397);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb2054, $bb2055;

  $bb2055:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb2056;

  $bb2056:
    assume {:verifier.code 0} true;
    goto $bb2060;

  $bb2060:
    assume {:verifier.code 0} true;
    goto $bb2061;

  $bb2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4232} ___udelay(4295000);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    goto $bb2062;

  $bb2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4233} ___udelay(4295000);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    goto $bb2063;

  $bb2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4234} ___udelay(4295000);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    goto $bb2064;

  $bb2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4235} ___udelay(4295000);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    goto $bb2065;

  $bb2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4236} ___udelay(4295000);
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    goto $bb2066;

  $bb2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4237} ___udelay(4295000);
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    goto $bb2067;

  $bb2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4238} ___udelay(4295000);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    goto $bb2068;

  $bb2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4239} ___udelay(4295000);
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    goto $bb2069;

  $bb2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4240} ___udelay(4295000);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    goto $bb2070;

  $bb2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4241} ___udelay(4295000);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    goto $bb2071;

  $bb2071:
    assume {:verifier.code 0} true;
    goto $bb2072;

  $bb2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4242} $i400 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i397, $i400);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb2073, $bb2074;

  $bb2074:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb2075;

  $bb2075:
    assume {:verifier.code 0} true;
    goto $bb2079;

  $bb2079:
    assume {:verifier.code 0} true;
    goto $bb2080;

  $bb2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4243} ___udelay(4295000);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    goto $bb2081;

  $bb2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4244} ___udelay(4295000);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    goto $bb2082;

  $bb2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4245} ___udelay(4295000);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    goto $bb2083;

  $bb2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4246} ___udelay(4295000);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    goto $bb2084;

  $bb2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4247} ___udelay(4295000);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    goto $bb2085;

  $bb2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4248} ___udelay(4295000);
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    goto $bb2086;

  $bb2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4249} ___udelay(4295000);
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    goto $bb2087;

  $bb2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4250} ___udelay(4295000);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    goto $bb2088;

  $bb2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4251} ___udelay(4295000);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    goto $bb2089;

  $bb2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4252} ___udelay(4295000);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    goto $bb2090;

  $bb2090:
    assume {:verifier.code 0} true;
    goto $bb2091;

  $bb2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4253} $i403 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i400, $i403);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb2092, $bb2093;

  $bb2093:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb2094;

  $bb2094:
    assume {:verifier.code 0} true;
    goto $bb2098;

  $bb2098:
    assume {:verifier.code 0} true;
    goto $bb2099;

  $bb2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4254} ___udelay(4295000);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    goto $bb2100;

  $bb2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4255} ___udelay(4295000);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    goto $bb2101;

  $bb2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4256} ___udelay(4295000);
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    goto $bb2102;

  $bb2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4257} ___udelay(4295000);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    goto $bb2103;

  $bb2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4258} ___udelay(4295000);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    goto $bb2104;

  $bb2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4259} ___udelay(4295000);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    goto $bb2105;

  $bb2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4260} ___udelay(4295000);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    goto $bb2106;

  $bb2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4261} ___udelay(4295000);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    goto $bb2107;

  $bb2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4262} ___udelay(4295000);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    goto $bb2108;

  $bb2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4263} ___udelay(4295000);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    goto $bb2109;

  $bb2109:
    assume {:verifier.code 0} true;
    goto $bb2110;

  $bb2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4264} $i406 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i403, $i406);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb2111, $bb2112;

  $bb2112:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb2113;

  $bb2113:
    assume {:verifier.code 0} true;
    goto $bb2117;

  $bb2117:
    assume {:verifier.code 0} true;
    goto $bb2118;

  $bb2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4265} ___udelay(4295000);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    goto $bb2119;

  $bb2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4266} ___udelay(4295000);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    goto $bb2120;

  $bb2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4267} ___udelay(4295000);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    goto $bb2121;

  $bb2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4268} ___udelay(4295000);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    goto $bb2122;

  $bb2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4269} ___udelay(4295000);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    goto $bb2123;

  $bb2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4270} ___udelay(4295000);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    goto $bb2124;

  $bb2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4271} ___udelay(4295000);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    goto $bb2125;

  $bb2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4272} ___udelay(4295000);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    goto $bb2126;

  $bb2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4273} ___udelay(4295000);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    goto $bb2127;

  $bb2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4274} ___udelay(4295000);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    goto $bb2128;

  $bb2128:
    assume {:verifier.code 0} true;
    goto $bb2129;

  $bb2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4275} $i409 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i406, $i409);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i410} true;
    goto $bb2130, $bb2131;

  $bb2131:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb2132;

  $bb2132:
    assume {:verifier.code 0} true;
    goto $bb2136;

  $bb2136:
    assume {:verifier.code 0} true;
    goto $bb2137;

  $bb2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4276} ___udelay(4295000);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    goto $bb2138;

  $bb2138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4277} ___udelay(4295000);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    goto $bb2139;

  $bb2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4278} ___udelay(4295000);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    goto $bb2140;

  $bb2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4279} ___udelay(4295000);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    goto $bb2141;

  $bb2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4280} ___udelay(4295000);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    goto $bb2142;

  $bb2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4281} ___udelay(4295000);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    goto $bb2143;

  $bb2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4282} ___udelay(4295000);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    goto $bb2144;

  $bb2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4283} ___udelay(4295000);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    goto $bb2145;

  $bb2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4284} ___udelay(4295000);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    goto $bb2146;

  $bb2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4285} ___udelay(4295000);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    goto $bb2147;

  $bb2147:
    assume {:verifier.code 0} true;
    goto $bb2148;

  $bb2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4286} $i412 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i409, $i412);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb2149, $bb2150;

  $bb2150:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb2151;

  $bb2151:
    assume {:verifier.code 0} true;
    goto $bb2155;

  $bb2155:
    assume {:verifier.code 0} true;
    goto $bb2156;

  $bb2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4287} ___udelay(4295000);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    goto $bb2157;

  $bb2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4288} ___udelay(4295000);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    goto $bb2158;

  $bb2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4289} ___udelay(4295000);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    goto $bb2159;

  $bb2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4290} ___udelay(4295000);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    goto $bb2160;

  $bb2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4291} ___udelay(4295000);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    goto $bb2161;

  $bb2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4292} ___udelay(4295000);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    goto $bb2162;

  $bb2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4293} ___udelay(4295000);
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    goto $bb2163;

  $bb2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4294} ___udelay(4295000);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    goto $bb2164;

  $bb2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4295} ___udelay(4295000);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    goto $bb2165;

  $bb2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4296} ___udelay(4295000);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    goto $bb2166;

  $bb2166:
    assume {:verifier.code 0} true;
    goto $bb2167;

  $bb2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4297} $i415 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i412, $i415);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb2168, $bb2169;

  $bb2169:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb2170;

  $bb2170:
    assume {:verifier.code 0} true;
    goto $bb2174;

  $bb2174:
    assume {:verifier.code 0} true;
    goto $bb2175;

  $bb2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4298} ___udelay(4295000);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    goto $bb2176;

  $bb2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4299} ___udelay(4295000);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    goto $bb2177;

  $bb2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4300} ___udelay(4295000);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    goto $bb2178;

  $bb2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4301} ___udelay(4295000);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    goto $bb2179;

  $bb2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4302} ___udelay(4295000);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    goto $bb2180;

  $bb2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4303} ___udelay(4295000);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    goto $bb2181;

  $bb2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4304} ___udelay(4295000);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    goto $bb2182;

  $bb2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4305} ___udelay(4295000);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    goto $bb2183;

  $bb2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4306} ___udelay(4295000);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    goto $bb2184;

  $bb2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4307} ___udelay(4295000);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    goto $bb2185;

  $bb2185:
    assume {:verifier.code 0} true;
    goto $bb2186;

  $bb2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4308} $i418 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i415, $i418);
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb2187, $bb2188;

  $bb2188:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb2189;

  $bb2189:
    assume {:verifier.code 0} true;
    goto $bb2193;

  $bb2193:
    assume {:verifier.code 0} true;
    goto $bb2194;

  $bb2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4309} ___udelay(4295000);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    goto $bb2195;

  $bb2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4310} ___udelay(4295000);
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    goto $bb2196;

  $bb2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4311} ___udelay(4295000);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    goto $bb2197;

  $bb2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4312} ___udelay(4295000);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    goto $bb2198;

  $bb2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4313} ___udelay(4295000);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    goto $bb2199;

  $bb2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4314} ___udelay(4295000);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    goto $bb2200;

  $bb2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4315} ___udelay(4295000);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    goto $bb2201;

  $bb2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4316} ___udelay(4295000);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    goto $bb2202;

  $bb2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4317} ___udelay(4295000);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    goto $bb2203;

  $bb2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4318} ___udelay(4295000);
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    goto $bb2204;

  $bb2204:
    assume {:verifier.code 0} true;
    goto $bb2205;

  $bb2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4319} $i421 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i418, $i421);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb2206, $bb2207;

  $bb2207:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb2208;

  $bb2208:
    assume {:verifier.code 0} true;
    goto $bb2212;

  $bb2212:
    assume {:verifier.code 0} true;
    goto $bb2213;

  $bb2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4320} ___udelay(4295000);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    goto $bb2214;

  $bb2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4321} ___udelay(4295000);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    goto $bb2215;

  $bb2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4322} ___udelay(4295000);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    goto $bb2216;

  $bb2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4323} ___udelay(4295000);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    goto $bb2217;

  $bb2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4324} ___udelay(4295000);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    goto $bb2218;

  $bb2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4325} ___udelay(4295000);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    goto $bb2219;

  $bb2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4326} ___udelay(4295000);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    goto $bb2220;

  $bb2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4327} ___udelay(4295000);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    goto $bb2221;

  $bb2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4328} ___udelay(4295000);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    goto $bb2222;

  $bb2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4329} ___udelay(4295000);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    goto $bb2223;

  $bb2223:
    assume {:verifier.code 0} true;
    goto $bb2224;

  $bb2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4330} $i424 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i421, $i424);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb2225, $bb2226;

  $bb2226:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb2227;

  $bb2227:
    assume {:verifier.code 0} true;
    goto $bb2231;

  $bb2231:
    assume {:verifier.code 0} true;
    goto $bb2232;

  $bb2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4331} ___udelay(4295000);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    goto $bb2233;

  $bb2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4332} ___udelay(4295000);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    goto $bb2234;

  $bb2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4333} ___udelay(4295000);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    goto $bb2235;

  $bb2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4334} ___udelay(4295000);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    goto $bb2236;

  $bb2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4335} ___udelay(4295000);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    goto $bb2237;

  $bb2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4336} ___udelay(4295000);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    goto $bb2238;

  $bb2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4337} ___udelay(4295000);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    goto $bb2239;

  $bb2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4338} ___udelay(4295000);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    goto $bb2240;

  $bb2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4339} ___udelay(4295000);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    goto $bb2241;

  $bb2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4340} ___udelay(4295000);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    goto $bb2242;

  $bb2242:
    assume {:verifier.code 0} true;
    goto $bb2243;

  $bb2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4341} $i427 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i424, $i427);
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb2244, $bb2245;

  $bb2245:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb2246;

  $bb2246:
    assume {:verifier.code 0} true;
    goto $bb2250;

  $bb2250:
    assume {:verifier.code 0} true;
    goto $bb2251;

  $bb2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4342} ___udelay(4295000);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    goto $bb2252;

  $bb2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4343} ___udelay(4295000);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    goto $bb2253;

  $bb2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4344} ___udelay(4295000);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    goto $bb2254;

  $bb2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4345} ___udelay(4295000);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    goto $bb2255;

  $bb2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4346} ___udelay(4295000);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    goto $bb2256;

  $bb2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4347} ___udelay(4295000);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    goto $bb2257;

  $bb2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4348} ___udelay(4295000);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    goto $bb2258;

  $bb2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4349} ___udelay(4295000);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    goto $bb2259;

  $bb2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4350} ___udelay(4295000);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    goto $bb2260;

  $bb2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4351} ___udelay(4295000);
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    goto $bb2261;

  $bb2261:
    assume {:verifier.code 0} true;
    goto $bb2262;

  $bb2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4352} $i430 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i427, $i430);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb2263, $bb2264;

  $bb2264:
    assume !($i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb2265;

  $bb2265:
    assume {:verifier.code 0} true;
    goto $bb2269;

  $bb2269:
    assume {:verifier.code 0} true;
    goto $bb2270;

  $bb2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4353} ___udelay(4295000);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    goto $bb2271;

  $bb2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4354} ___udelay(4295000);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    goto $bb2272;

  $bb2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4355} ___udelay(4295000);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    goto $bb2273;

  $bb2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4356} ___udelay(4295000);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    goto $bb2274;

  $bb2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4357} ___udelay(4295000);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    goto $bb2275;

  $bb2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4358} ___udelay(4295000);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    goto $bb2276;

  $bb2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4359} ___udelay(4295000);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    goto $bb2277;

  $bb2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4360} ___udelay(4295000);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    goto $bb2278;

  $bb2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4361} ___udelay(4295000);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    goto $bb2279;

  $bb2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4362} ___udelay(4295000);
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    goto $bb2280;

  $bb2280:
    assume {:verifier.code 0} true;
    goto $bb2281;

  $bb2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4363} $i433 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i430, $i433);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb2282, $bb2283;

  $bb2283:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb2284;

  $bb2284:
    assume {:verifier.code 0} true;
    goto $bb2288;

  $bb2288:
    assume {:verifier.code 0} true;
    goto $bb2289;

  $bb2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4364} ___udelay(4295000);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    goto $bb2290;

  $bb2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4365} ___udelay(4295000);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    goto $bb2291;

  $bb2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4366} ___udelay(4295000);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    goto $bb2292;

  $bb2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4367} ___udelay(4295000);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    goto $bb2293;

  $bb2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4368} ___udelay(4295000);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    goto $bb2294;

  $bb2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4369} ___udelay(4295000);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    goto $bb2295;

  $bb2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4370} ___udelay(4295000);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    goto $bb2296;

  $bb2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4371} ___udelay(4295000);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    goto $bb2297;

  $bb2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4372} ___udelay(4295000);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    goto $bb2298;

  $bb2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4373} ___udelay(4295000);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    goto $bb2299;

  $bb2299:
    assume {:verifier.code 0} true;
    goto $bb2300;

  $bb2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4374} $i436 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i433, $i436);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb2301, $bb2302;

  $bb2302:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb2303;

  $bb2303:
    assume {:verifier.code 0} true;
    goto $bb2307;

  $bb2307:
    assume {:verifier.code 0} true;
    goto $bb2308;

  $bb2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4375} ___udelay(4295000);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    goto $bb2309;

  $bb2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4376} ___udelay(4295000);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    goto $bb2310;

  $bb2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4377} ___udelay(4295000);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    goto $bb2311;

  $bb2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4378} ___udelay(4295000);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    goto $bb2312;

  $bb2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4379} ___udelay(4295000);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    goto $bb2313;

  $bb2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4380} ___udelay(4295000);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    goto $bb2314;

  $bb2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4381} ___udelay(4295000);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    goto $bb2315;

  $bb2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4382} ___udelay(4295000);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    goto $bb2316;

  $bb2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4383} ___udelay(4295000);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    goto $bb2317;

  $bb2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4384} ___udelay(4295000);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    goto $bb2318;

  $bb2318:
    assume {:verifier.code 0} true;
    goto $bb2319;

  $bb2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4385} $i439 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i436, $i439);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb2320, $bb2321;

  $bb2321:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb2322;

  $bb2322:
    assume {:verifier.code 0} true;
    goto $bb2326;

  $bb2326:
    assume {:verifier.code 0} true;
    goto $bb2327;

  $bb2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4386} ___udelay(4295000);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    goto $bb2328;

  $bb2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4387} ___udelay(4295000);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    goto $bb2329;

  $bb2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4388} ___udelay(4295000);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    goto $bb2330;

  $bb2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4389} ___udelay(4295000);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    goto $bb2331;

  $bb2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4390} ___udelay(4295000);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    goto $bb2332;

  $bb2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4391} ___udelay(4295000);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    goto $bb2333;

  $bb2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4392} ___udelay(4295000);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    goto $bb2334;

  $bb2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4393} ___udelay(4295000);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    goto $bb2335;

  $bb2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4394} ___udelay(4295000);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    goto $bb2336;

  $bb2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4395} ___udelay(4295000);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    goto $bb2337;

  $bb2337:
    assume {:verifier.code 0} true;
    goto $bb2338;

  $bb2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4396} $i442 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i439, $i442);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb2339, $bb2340;

  $bb2340:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb2341;

  $bb2341:
    assume {:verifier.code 0} true;
    goto $bb2345;

  $bb2345:
    assume {:verifier.code 0} true;
    goto $bb2346;

  $bb2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4397} ___udelay(4295000);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    goto $bb2347;

  $bb2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4398} ___udelay(4295000);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    goto $bb2348;

  $bb2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4399} ___udelay(4295000);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    goto $bb2349;

  $bb2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4400} ___udelay(4295000);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    goto $bb2350;

  $bb2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4401} ___udelay(4295000);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    goto $bb2351;

  $bb2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4402} ___udelay(4295000);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    goto $bb2352;

  $bb2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4403} ___udelay(4295000);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    goto $bb2353;

  $bb2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4404} ___udelay(4295000);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    goto $bb2354;

  $bb2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4405} ___udelay(4295000);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    goto $bb2355;

  $bb2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4406} ___udelay(4295000);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    goto $bb2356;

  $bb2356:
    assume {:verifier.code 0} true;
    goto $bb2357;

  $bb2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4407} $i445 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i442, $i445);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i446} true;
    goto $bb2358, $bb2359;

  $bb2359:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb2360;

  $bb2360:
    assume {:verifier.code 0} true;
    goto $bb2364;

  $bb2364:
    assume {:verifier.code 0} true;
    goto $bb2365;

  $bb2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4408} ___udelay(4295000);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    goto $bb2366;

  $bb2366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4409} ___udelay(4295000);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    goto $bb2367;

  $bb2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4410} ___udelay(4295000);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    goto $bb2368;

  $bb2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4411} ___udelay(4295000);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    goto $bb2369;

  $bb2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4412} ___udelay(4295000);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    goto $bb2370;

  $bb2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4413} ___udelay(4295000);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    goto $bb2371;

  $bb2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4414} ___udelay(4295000);
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    goto $bb2372;

  $bb2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4415} ___udelay(4295000);
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    goto $bb2373;

  $bb2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4416} ___udelay(4295000);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    goto $bb2374;

  $bb2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4417} ___udelay(4295000);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    goto $bb2375;

  $bb2375:
    assume {:verifier.code 0} true;
    goto $bb2376;

  $bb2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4418} $i448 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i445, $i448);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb2377, $bb2378;

  $bb2378:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb2379;

  $bb2379:
    assume {:verifier.code 0} true;
    goto $bb2383;

  $bb2383:
    assume {:verifier.code 0} true;
    goto $bb2384;

  $bb2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4419} ___udelay(4295000);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    goto $bb2385;

  $bb2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4420} ___udelay(4295000);
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    goto $bb2386;

  $bb2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4421} ___udelay(4295000);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    goto $bb2387;

  $bb2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4422} ___udelay(4295000);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    goto $bb2388;

  $bb2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4423} ___udelay(4295000);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    goto $bb2389;

  $bb2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4424} ___udelay(4295000);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    goto $bb2390;

  $bb2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4425} ___udelay(4295000);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    goto $bb2391;

  $bb2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4426} ___udelay(4295000);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    goto $bb2392;

  $bb2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4427} ___udelay(4295000);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    goto $bb2393;

  $bb2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4428} ___udelay(4295000);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    goto $bb2394;

  $bb2394:
    assume {:verifier.code 0} true;
    goto $bb2395;

  $bb2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4429} $i451 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i448, $i451);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb2396, $bb2397;

  $bb2397:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb2398;

  $bb2398:
    assume {:verifier.code 0} true;
    goto $bb2402;

  $bb2402:
    assume {:verifier.code 0} true;
    goto $bb2403;

  $bb2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4430} ___udelay(4295000);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    goto $bb2404;

  $bb2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4431} ___udelay(4295000);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    goto $bb2405;

  $bb2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4432} ___udelay(4295000);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    goto $bb2406;

  $bb2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4433} ___udelay(4295000);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    goto $bb2407;

  $bb2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4434} ___udelay(4295000);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    goto $bb2408;

  $bb2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4435} ___udelay(4295000);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    goto $bb2409;

  $bb2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4436} ___udelay(4295000);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    goto $bb2410;

  $bb2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4437} ___udelay(4295000);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    goto $bb2411;

  $bb2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4438} ___udelay(4295000);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    goto $bb2412;

  $bb2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4439} ___udelay(4295000);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    goto $bb2413;

  $bb2413:
    assume {:verifier.code 0} true;
    goto $bb2414;

  $bb2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4440} $i454 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i451, $i454);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb2415, $bb2416;

  $bb2416:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb2417;

  $bb2417:
    assume {:verifier.code 0} true;
    goto $bb2421;

  $bb2421:
    assume {:verifier.code 0} true;
    goto $bb2422;

  $bb2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4441} ___udelay(4295000);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    goto $bb2423;

  $bb2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4442} ___udelay(4295000);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    goto $bb2424;

  $bb2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4443} ___udelay(4295000);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    goto $bb2425;

  $bb2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4444} ___udelay(4295000);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    goto $bb2426;

  $bb2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4445} ___udelay(4295000);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    goto $bb2427;

  $bb2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4446} ___udelay(4295000);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    goto $bb2428;

  $bb2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4447} ___udelay(4295000);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    goto $bb2429;

  $bb2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4448} ___udelay(4295000);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    goto $bb2430;

  $bb2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4449} ___udelay(4295000);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    goto $bb2431;

  $bb2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4450} ___udelay(4295000);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    goto $bb2432;

  $bb2432:
    assume {:verifier.code 0} true;
    goto $bb2433;

  $bb2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4451} $i457 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i454, $i457);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb2434, $bb2435;

  $bb2435:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb2436;

  $bb2436:
    assume {:verifier.code 0} true;
    goto $bb2440;

  $bb2440:
    assume {:verifier.code 0} true;
    goto $bb2441;

  $bb2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4452} ___udelay(4295000);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    goto $bb2442;

  $bb2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4453} ___udelay(4295000);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb2443;

  $bb2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4454} ___udelay(4295000);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    goto $bb2444;

  $bb2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4455} ___udelay(4295000);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    goto $bb2445;

  $bb2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4456} ___udelay(4295000);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    goto $bb2446;

  $bb2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4457} ___udelay(4295000);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    goto $bb2447;

  $bb2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4458} ___udelay(4295000);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    goto $bb2448;

  $bb2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4459} ___udelay(4295000);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    goto $bb2449;

  $bb2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4460} ___udelay(4295000);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    goto $bb2450;

  $bb2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4461} ___udelay(4295000);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    goto $bb2451;

  $bb2451:
    assume {:verifier.code 0} true;
    goto $bb2452;

  $bb2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4462} $i460 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i457, $i460);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb2453, $bb2454;

  $bb2454:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb2455;

  $bb2455:
    assume {:verifier.code 0} true;
    goto $bb2459;

  $bb2459:
    assume {:verifier.code 0} true;
    goto $bb2460;

  $bb2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4463} ___udelay(4295000);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    goto $bb2461;

  $bb2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4464} ___udelay(4295000);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    goto $bb2462;

  $bb2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4465} ___udelay(4295000);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    goto $bb2463;

  $bb2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4466} ___udelay(4295000);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    goto $bb2464;

  $bb2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4467} ___udelay(4295000);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    goto $bb2465;

  $bb2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4468} ___udelay(4295000);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    goto $bb2466;

  $bb2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4469} ___udelay(4295000);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    goto $bb2467;

  $bb2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4470} ___udelay(4295000);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    goto $bb2468;

  $bb2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4471} ___udelay(4295000);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    goto $bb2469;

  $bb2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4472} ___udelay(4295000);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    goto $bb2470;

  $bb2470:
    assume {:verifier.code 0} true;
    goto $bb2471;

  $bb2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4473} $i463 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i464 := $eq.i32($i460, $i463);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i464} true;
    goto $bb2472, $bb2473;

  $bb2473:
    assume !($i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb2474;

  $bb2474:
    assume {:verifier.code 0} true;
    goto $bb2478;

  $bb2478:
    assume {:verifier.code 0} true;
    goto $bb2479;

  $bb2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4474} ___udelay(4295000);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    goto $bb2480;

  $bb2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4475} ___udelay(4295000);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    goto $bb2481;

  $bb2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4476} ___udelay(4295000);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    goto $bb2482;

  $bb2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4477} ___udelay(4295000);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    goto $bb2483;

  $bb2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4478} ___udelay(4295000);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    goto $bb2484;

  $bb2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4479} ___udelay(4295000);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    goto $bb2485;

  $bb2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4480} ___udelay(4295000);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    goto $bb2486;

  $bb2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4481} ___udelay(4295000);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    goto $bb2487;

  $bb2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4482} ___udelay(4295000);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    goto $bb2488;

  $bb2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4483} ___udelay(4295000);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    goto $bb2489;

  $bb2489:
    assume {:verifier.code 0} true;
    goto $bb2490;

  $bb2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4484} $i466 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i463, $i466);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb2491, $bb2492;

  $bb2492:
    assume !($i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb2493;

  $bb2493:
    assume {:verifier.code 0} true;
    goto $bb2497;

  $bb2497:
    assume {:verifier.code 0} true;
    goto $bb2498;

  $bb2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4485} ___udelay(4295000);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    goto $bb2499;

  $bb2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4486} ___udelay(4295000);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    goto $bb2500;

  $bb2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4487} ___udelay(4295000);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    goto $bb2501;

  $bb2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4488} ___udelay(4295000);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    goto $bb2502;

  $bb2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4489} ___udelay(4295000);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    goto $bb2503;

  $bb2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4490} ___udelay(4295000);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    goto $bb2504;

  $bb2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4491} ___udelay(4295000);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    goto $bb2505;

  $bb2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4492} ___udelay(4295000);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    goto $bb2506;

  $bb2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4493} ___udelay(4295000);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    goto $bb2507;

  $bb2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4494} ___udelay(4295000);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    goto $bb2508;

  $bb2508:
    assume {:verifier.code 0} true;
    goto $bb2509;

  $bb2509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4495} $i469 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i466, $i469);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i470} true;
    goto $bb2510, $bb2511;

  $bb2511:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb2512;

  $bb2512:
    assume {:verifier.code 0} true;
    goto $bb2516;

  $bb2516:
    assume {:verifier.code 0} true;
    goto $bb2517;

  $bb2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4496} ___udelay(4295000);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    goto $bb2518;

  $bb2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4497} ___udelay(4295000);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    goto $bb2519;

  $bb2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4498} ___udelay(4295000);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    goto $bb2520;

  $bb2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4499} ___udelay(4295000);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    goto $bb2521;

  $bb2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4500} ___udelay(4295000);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    goto $bb2522;

  $bb2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4501} ___udelay(4295000);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    goto $bb2523;

  $bb2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4502} ___udelay(4295000);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    goto $bb2524;

  $bb2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4503} ___udelay(4295000);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    goto $bb2525;

  $bb2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4504} ___udelay(4295000);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    goto $bb2526;

  $bb2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4505} ___udelay(4295000);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    goto $bb2527;

  $bb2527:
    assume {:verifier.code 0} true;
    goto $bb2528;

  $bb2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4506} $i472 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i469, $i472);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i473} true;
    goto $bb2529, $bb2530;

  $bb2530:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb2531;

  $bb2531:
    assume {:verifier.code 0} true;
    goto $bb2535;

  $bb2535:
    assume {:verifier.code 0} true;
    goto $bb2536;

  $bb2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4507} ___udelay(4295000);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    goto $bb2537;

  $bb2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4508} ___udelay(4295000);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    goto $bb2538;

  $bb2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4509} ___udelay(4295000);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    goto $bb2539;

  $bb2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4510} ___udelay(4295000);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    goto $bb2540;

  $bb2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4511} ___udelay(4295000);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    goto $bb2541;

  $bb2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4512} ___udelay(4295000);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    goto $bb2542;

  $bb2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4513} ___udelay(4295000);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    goto $bb2543;

  $bb2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4514} ___udelay(4295000);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    goto $bb2544;

  $bb2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4515} ___udelay(4295000);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    goto $bb2545;

  $bb2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4516} ___udelay(4295000);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    goto $bb2546;

  $bb2546:
    assume {:verifier.code 0} true;
    goto $bb2547;

  $bb2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4517} $i475 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i472, $i475);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb2548, $bb2549;

  $bb2549:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb2550;

  $bb2550:
    assume {:verifier.code 0} true;
    goto $bb2554;

  $bb2554:
    assume {:verifier.code 0} true;
    goto $bb2555;

  $bb2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4518} ___udelay(4295000);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    goto $bb2556;

  $bb2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4519} ___udelay(4295000);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    goto $bb2557;

  $bb2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4520} ___udelay(4295000);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    goto $bb2558;

  $bb2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4521} ___udelay(4295000);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    goto $bb2559;

  $bb2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4522} ___udelay(4295000);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    goto $bb2560;

  $bb2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4523} ___udelay(4295000);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    goto $bb2561;

  $bb2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4524} ___udelay(4295000);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    goto $bb2562;

  $bb2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4525} ___udelay(4295000);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    goto $bb2563;

  $bb2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4526} ___udelay(4295000);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    goto $bb2564;

  $bb2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4527} ___udelay(4295000);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    goto $bb2565;

  $bb2565:
    assume {:verifier.code 0} true;
    goto $bb2566;

  $bb2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4528} $i478 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i475, $i478);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb2567, $bb2568;

  $bb2568:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb2569;

  $bb2569:
    assume {:verifier.code 0} true;
    goto $bb2573;

  $bb2573:
    assume {:verifier.code 0} true;
    goto $bb2574;

  $bb2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4529} ___udelay(4295000);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    goto $bb2575;

  $bb2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4530} ___udelay(4295000);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    goto $bb2576;

  $bb2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4531} ___udelay(4295000);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    goto $bb2577;

  $bb2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4532} ___udelay(4295000);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    goto $bb2578;

  $bb2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4533} ___udelay(4295000);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    goto $bb2579;

  $bb2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4534} ___udelay(4295000);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    goto $bb2580;

  $bb2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4535} ___udelay(4295000);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    goto $bb2581;

  $bb2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4536} ___udelay(4295000);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    goto $bb2582;

  $bb2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4537} ___udelay(4295000);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    goto $bb2583;

  $bb2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4538} ___udelay(4295000);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    goto $bb2584;

  $bb2584:
    assume {:verifier.code 0} true;
    goto $bb2585;

  $bb2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4539} $i481 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i478, $i481);
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i482} true;
    goto $bb2586, $bb2587;

  $bb2587:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb2588;

  $bb2588:
    assume {:verifier.code 0} true;
    goto $bb2592;

  $bb2592:
    assume {:verifier.code 0} true;
    goto $bb2593;

  $bb2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4540} ___udelay(4295000);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    goto $bb2594;

  $bb2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4541} ___udelay(4295000);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    goto $bb2595;

  $bb2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4542} ___udelay(4295000);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    goto $bb2596;

  $bb2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4543} ___udelay(4295000);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    goto $bb2597;

  $bb2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4544} ___udelay(4295000);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    goto $bb2598;

  $bb2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4545} ___udelay(4295000);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    goto $bb2599;

  $bb2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4546} ___udelay(4295000);
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    goto $bb2600;

  $bb2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4547} ___udelay(4295000);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    goto $bb2601;

  $bb2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4548} ___udelay(4295000);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    goto $bb2602;

  $bb2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4549} ___udelay(4295000);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    goto $bb2603;

  $bb2603:
    assume {:verifier.code 0} true;
    goto $bb2604;

  $bb2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4550} $i484 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i481, $i484);
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb2605, $bb2606;

  $bb2606:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb2607;

  $bb2607:
    assume {:verifier.code 0} true;
    goto $bb2611;

  $bb2611:
    assume {:verifier.code 0} true;
    goto $bb2612;

  $bb2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4551} ___udelay(4295000);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    goto $bb2613;

  $bb2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4552} ___udelay(4295000);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    goto $bb2614;

  $bb2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4553} ___udelay(4295000);
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    goto $bb2615;

  $bb2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4554} ___udelay(4295000);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    goto $bb2616;

  $bb2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4555} ___udelay(4295000);
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    goto $bb2617;

  $bb2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4556} ___udelay(4295000);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    goto $bb2618;

  $bb2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4557} ___udelay(4295000);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    goto $bb2619;

  $bb2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4558} ___udelay(4295000);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    goto $bb2620;

  $bb2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4559} ___udelay(4295000);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    goto $bb2621;

  $bb2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4560} ___udelay(4295000);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    goto $bb2622;

  $bb2622:
    assume {:verifier.code 0} true;
    goto $bb2623;

  $bb2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4561} $i487 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i484, $i487);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i488} true;
    goto $bb2624, $bb2625;

  $bb2625:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb2626;

  $bb2626:
    assume {:verifier.code 0} true;
    goto $bb2630;

  $bb2630:
    assume {:verifier.code 0} true;
    goto $bb2631;

  $bb2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4562} ___udelay(4295000);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    goto $bb2632;

  $bb2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4563} ___udelay(4295000);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    goto $bb2633;

  $bb2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4564} ___udelay(4295000);
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    goto $bb2634;

  $bb2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4565} ___udelay(4295000);
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    goto $bb2635;

  $bb2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4566} ___udelay(4295000);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    goto $bb2636;

  $bb2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4567} ___udelay(4295000);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    goto $bb2637;

  $bb2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4568} ___udelay(4295000);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    goto $bb2638;

  $bb2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4569} ___udelay(4295000);
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    goto $bb2639;

  $bb2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4570} ___udelay(4295000);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    goto $bb2640;

  $bb2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4571} ___udelay(4295000);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    goto $bb2641;

  $bb2641:
    assume {:verifier.code 0} true;
    goto $bb2642;

  $bb2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4572} $i490 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    $i491 := $eq.i32($i487, $i490);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i491} true;
    goto $bb2643, $bb2644;

  $bb2644:
    assume !($i491 == 1);
    assume {:verifier.code 0} true;
    goto $bb2645;

  $bb2645:
    assume {:verifier.code 0} true;
    goto $bb2649;

  $bb2649:
    assume {:verifier.code 0} true;
    goto $bb2650;

  $bb2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4573} ___udelay(4295000);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    goto $bb2651;

  $bb2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4574} ___udelay(4295000);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    goto $bb2652;

  $bb2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4575} ___udelay(4295000);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    goto $bb2653;

  $bb2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4576} ___udelay(4295000);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    goto $bb2654;

  $bb2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4577} ___udelay(4295000);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    goto $bb2655;

  $bb2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4578} ___udelay(4295000);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    goto $bb2656;

  $bb2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4579} ___udelay(4295000);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    goto $bb2657;

  $bb2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4580} ___udelay(4295000);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    goto $bb2658;

  $bb2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4581} ___udelay(4295000);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    goto $bb2659;

  $bb2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4582} ___udelay(4295000);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    goto $bb2660;

  $bb2660:
    assume {:verifier.code 0} true;
    goto $bb2661;

  $bb2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4583} $i493 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i490, $i493);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb2662, $bb2663;

  $bb2663:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb2664;

  $bb2664:
    assume {:verifier.code 0} true;
    goto $bb2668;

  $bb2668:
    assume {:verifier.code 0} true;
    goto $bb2669;

  $bb2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4584} ___udelay(4295000);
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    goto $bb2670;

  $bb2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4585} ___udelay(4295000);
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    goto $bb2671;

  $bb2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4586} ___udelay(4295000);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    goto $bb2672;

  $bb2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4587} ___udelay(4295000);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    goto $bb2673;

  $bb2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4588} ___udelay(4295000);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    goto $bb2674;

  $bb2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4589} ___udelay(4295000);
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    goto $bb2675;

  $bb2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4590} ___udelay(4295000);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    goto $bb2676;

  $bb2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4591} ___udelay(4295000);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    goto $bb2677;

  $bb2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4592} ___udelay(4295000);
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    goto $bb2678;

  $bb2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4593} ___udelay(4295000);
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    goto $bb2679;

  $bb2679:
    assume {:verifier.code 0} true;
    goto $bb2680;

  $bb2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4594} $i496 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i493, $i496);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb2681, $bb2682;

  $bb2682:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb2683;

  $bb2683:
    assume {:verifier.code 0} true;
    goto $bb2687;

  $bb2687:
    assume {:verifier.code 0} true;
    goto $bb2688;

  $bb2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4595} ___udelay(4295000);
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    goto $bb2689;

  $bb2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4596} ___udelay(4295000);
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    goto $bb2690;

  $bb2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4597} ___udelay(4295000);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    goto $bb2691;

  $bb2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4598} ___udelay(4295000);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    goto $bb2692;

  $bb2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4599} ___udelay(4295000);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    goto $bb2693;

  $bb2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4600} ___udelay(4295000);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    goto $bb2694;

  $bb2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4601} ___udelay(4295000);
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    goto $bb2695;

  $bb2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4602} ___udelay(4295000);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    goto $bb2696;

  $bb2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4603} ___udelay(4295000);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    goto $bb2697;

  $bb2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4604} ___udelay(4295000);
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    goto $bb2698;

  $bb2698:
    assume {:verifier.code 0} true;
    goto $bb2699;

  $bb2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4605} $i499 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i496, $i499);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb2700, $bb2701;

  $bb2701:
    assume !($i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb2702;

  $bb2702:
    assume {:verifier.code 0} true;
    goto $bb2706;

  $bb2706:
    assume {:verifier.code 0} true;
    goto $bb2707;

  $bb2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4606} ___udelay(4295000);
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    goto $bb2708;

  $bb2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4607} ___udelay(4295000);
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    goto $bb2709;

  $bb2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4608} ___udelay(4295000);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    goto $bb2710;

  $bb2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4609} ___udelay(4295000);
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    goto $bb2711;

  $bb2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4610} ___udelay(4295000);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    goto $bb2712;

  $bb2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4611} ___udelay(4295000);
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    goto $bb2713;

  $bb2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4612} ___udelay(4295000);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    goto $bb2714;

  $bb2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4613} ___udelay(4295000);
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    goto $bb2715;

  $bb2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4614} ___udelay(4295000);
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    goto $bb2716;

  $bb2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4615} ___udelay(4295000);
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    goto $bb2717;

  $bb2717:
    assume {:verifier.code 0} true;
    goto $bb2718;

  $bb2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4616} $i502 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $i503 := $eq.i32($i499, $i502);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i503} true;
    goto $bb2719, $bb2720;

  $bb2720:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb2721;

  $bb2721:
    assume {:verifier.code 0} true;
    goto $bb2725;

  $bb2725:
    assume {:verifier.code 0} true;
    goto $bb2726;

  $bb2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4617} ___udelay(4295000);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    goto $bb2727;

  $bb2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4618} ___udelay(4295000);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    goto $bb2728;

  $bb2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4619} ___udelay(4295000);
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    goto $bb2729;

  $bb2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4620} ___udelay(4295000);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    goto $bb2730;

  $bb2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4621} ___udelay(4295000);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    goto $bb2731;

  $bb2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4622} ___udelay(4295000);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    goto $bb2732;

  $bb2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4623} ___udelay(4295000);
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    goto $bb2733;

  $bb2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4624} ___udelay(4295000);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    goto $bb2734;

  $bb2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4625} ___udelay(4295000);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    goto $bb2735;

  $bb2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4626} ___udelay(4295000);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    goto $bb2736;

  $bb2736:
    assume {:verifier.code 0} true;
    goto $bb2737;

  $bb2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4627} $i505 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i502, $i505);
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i506} true;
    goto $bb2738, $bb2739;

  $bb2739:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb2740;

  $bb2740:
    assume {:verifier.code 0} true;
    goto $bb2744;

  $bb2744:
    assume {:verifier.code 0} true;
    goto $bb2745;

  $bb2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4628} ___udelay(4295000);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    goto $bb2746;

  $bb2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4629} ___udelay(4295000);
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    goto $bb2747;

  $bb2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4630} ___udelay(4295000);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    goto $bb2748;

  $bb2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4631} ___udelay(4295000);
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    goto $bb2749;

  $bb2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4632} ___udelay(4295000);
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    goto $bb2750;

  $bb2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4633} ___udelay(4295000);
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    goto $bb2751;

  $bb2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4634} ___udelay(4295000);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    goto $bb2752;

  $bb2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4635} ___udelay(4295000);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    goto $bb2753;

  $bb2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4636} ___udelay(4295000);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    goto $bb2754;

  $bb2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4637} ___udelay(4295000);
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    goto $bb2755;

  $bb2755:
    assume {:verifier.code 0} true;
    goto $bb2756;

  $bb2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4638} $i508 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i505, $i508);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i509} true;
    goto $bb2757, $bb2758;

  $bb2758:
    assume !($i509 == 1);
    assume {:verifier.code 0} true;
    goto $bb2759;

  $bb2759:
    assume {:verifier.code 0} true;
    goto $bb2763;

  $bb2763:
    assume {:verifier.code 0} true;
    goto $bb2764;

  $bb2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4639} ___udelay(4295000);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    goto $bb2765;

  $bb2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4640} ___udelay(4295000);
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    goto $bb2766;

  $bb2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4641} ___udelay(4295000);
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    goto $bb2767;

  $bb2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4642} ___udelay(4295000);
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    goto $bb2768;

  $bb2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4643} ___udelay(4295000);
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    goto $bb2769;

  $bb2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4644} ___udelay(4295000);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    goto $bb2770;

  $bb2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4645} ___udelay(4295000);
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    goto $bb2771;

  $bb2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4646} ___udelay(4295000);
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    goto $bb2772;

  $bb2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4647} ___udelay(4295000);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    goto $bb2773;

  $bb2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4648} ___udelay(4295000);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    goto $bb2774;

  $bb2774:
    assume {:verifier.code 0} true;
    goto $bb2775;

  $bb2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4649} $i511 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i508, $i511);
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb2776, $bb2777;

  $bb2777:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb2778;

  $bb2778:
    assume {:verifier.code 0} true;
    goto $bb2782;

  $bb2782:
    assume {:verifier.code 0} true;
    goto $bb2783;

  $bb2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4650} ___udelay(4295000);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    goto $bb2784;

  $bb2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4651} ___udelay(4295000);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    goto $bb2785;

  $bb2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4652} ___udelay(4295000);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    goto $bb2786;

  $bb2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4653} ___udelay(4295000);
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    goto $bb2787;

  $bb2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4654} ___udelay(4295000);
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    goto $bb2788;

  $bb2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4655} ___udelay(4295000);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    goto $bb2789;

  $bb2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4656} ___udelay(4295000);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    goto $bb2790;

  $bb2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4657} ___udelay(4295000);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    goto $bb2791;

  $bb2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4658} ___udelay(4295000);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    goto $bb2792;

  $bb2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4659} ___udelay(4295000);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    goto $bb2793;

  $bb2793:
    assume {:verifier.code 0} true;
    goto $bb2794;

  $bb2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4660} $i514 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i511, $i514);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i515} true;
    goto $bb2795, $bb2796;

  $bb2796:
    assume !($i515 == 1);
    assume {:verifier.code 0} true;
    goto $bb2797;

  $bb2797:
    assume {:verifier.code 0} true;
    goto $bb2801;

  $bb2801:
    assume {:verifier.code 0} true;
    goto $bb2802;

  $bb2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4661} ___udelay(4295000);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    goto $bb2803;

  $bb2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4662} ___udelay(4295000);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    goto $bb2804;

  $bb2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4663} ___udelay(4295000);
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    goto $bb2805;

  $bb2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4664} ___udelay(4295000);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    goto $bb2806;

  $bb2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4665} ___udelay(4295000);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    goto $bb2807;

  $bb2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4666} ___udelay(4295000);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    goto $bb2808;

  $bb2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4667} ___udelay(4295000);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    goto $bb2809;

  $bb2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4668} ___udelay(4295000);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    goto $bb2810;

  $bb2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4669} ___udelay(4295000);
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    goto $bb2811;

  $bb2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4670} ___udelay(4295000);
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    goto $bb2812;

  $bb2812:
    assume {:verifier.code 0} true;
    goto $bb2813;

  $bb2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4671} $i517 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i514, $i517);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i518} true;
    goto $bb2814, $bb2815;

  $bb2815:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb2816;

  $bb2816:
    assume {:verifier.code 0} true;
    goto $bb2820;

  $bb2820:
    assume {:verifier.code 0} true;
    goto $bb2821;

  $bb2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4672} ___udelay(4295000);
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    goto $bb2822;

  $bb2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4673} ___udelay(4295000);
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    goto $bb2823;

  $bb2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4674} ___udelay(4295000);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    goto $bb2824;

  $bb2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4675} ___udelay(4295000);
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    goto $bb2825;

  $bb2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4676} ___udelay(4295000);
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    goto $bb2826;

  $bb2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4677} ___udelay(4295000);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    goto $bb2827;

  $bb2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4678} ___udelay(4295000);
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    goto $bb2828;

  $bb2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4679} ___udelay(4295000);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    goto $bb2829;

  $bb2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4680} ___udelay(4295000);
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    goto $bb2830;

  $bb2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4681} ___udelay(4295000);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    goto $bb2831;

  $bb2831:
    assume {:verifier.code 0} true;
    goto $bb2832;

  $bb2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4682} $i520 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $i521 := $eq.i32($i517, $i520);
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb2833, $bb2834;

  $bb2834:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb2835;

  $bb2835:
    assume {:verifier.code 0} true;
    goto $bb2839;

  $bb2839:
    assume {:verifier.code 0} true;
    goto $bb2840;

  $bb2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4683} ___udelay(4295000);
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    goto $bb2841;

  $bb2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4684} ___udelay(4295000);
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    goto $bb2842;

  $bb2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4685} ___udelay(4295000);
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    goto $bb2843;

  $bb2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4686} ___udelay(4295000);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    goto $bb2844;

  $bb2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4687} ___udelay(4295000);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    goto $bb2845;

  $bb2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4688} ___udelay(4295000);
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    goto $bb2846;

  $bb2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4689} ___udelay(4295000);
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    goto $bb2847;

  $bb2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4690} ___udelay(4295000);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    goto $bb2848;

  $bb2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4691} ___udelay(4295000);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    goto $bb2849;

  $bb2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4692} ___udelay(4295000);
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    goto $bb2850;

  $bb2850:
    assume {:verifier.code 0} true;
    goto $bb2851;

  $bb2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4693} $i523 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $i524 := $eq.i32($i520, $i523);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i524} true;
    goto $bb2852, $bb2853;

  $bb2853:
    assume !($i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb2854;

  $bb2854:
    assume {:verifier.code 0} true;
    goto $bb2858;

  $bb2858:
    assume {:verifier.code 0} true;
    goto $bb2859;

  $bb2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4694} ___udelay(4295000);
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    goto $bb2860;

  $bb2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4695} ___udelay(4295000);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    goto $bb2861;

  $bb2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4696} ___udelay(4295000);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    goto $bb2862;

  $bb2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4697} ___udelay(4295000);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    goto $bb2863;

  $bb2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4698} ___udelay(4295000);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    goto $bb2864;

  $bb2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4699} ___udelay(4295000);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    goto $bb2865;

  $bb2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4700} ___udelay(4295000);
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    goto $bb2866;

  $bb2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4701} ___udelay(4295000);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    goto $bb2867;

  $bb2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4702} ___udelay(4295000);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    goto $bb2868;

  $bb2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4703} ___udelay(4295000);
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    goto $bb2869;

  $bb2869:
    assume {:verifier.code 0} true;
    goto $bb2870;

  $bb2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4704} $i526 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i523, $i526);
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i527} true;
    goto $bb2871, $bb2872;

  $bb2872:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb2873;

  $bb2873:
    assume {:verifier.code 0} true;
    goto $bb2877;

  $bb2877:
    assume {:verifier.code 0} true;
    goto $bb2878;

  $bb2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4705} ___udelay(4295000);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    goto $bb2879;

  $bb2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4706} ___udelay(4295000);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    goto $bb2880;

  $bb2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4707} ___udelay(4295000);
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    goto $bb2881;

  $bb2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4708} ___udelay(4295000);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    goto $bb2882;

  $bb2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4709} ___udelay(4295000);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    goto $bb2883;

  $bb2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4710} ___udelay(4295000);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    goto $bb2884;

  $bb2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4711} ___udelay(4295000);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    goto $bb2885;

  $bb2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4712} ___udelay(4295000);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    goto $bb2886;

  $bb2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4713} ___udelay(4295000);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    goto $bb2887;

  $bb2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4714} ___udelay(4295000);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    goto $bb2888;

  $bb2888:
    assume {:verifier.code 0} true;
    goto $bb2889;

  $bb2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4715} $i529 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i526, $i529);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i530} true;
    goto $bb2890, $bb2891;

  $bb2891:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb2892;

  $bb2892:
    assume {:verifier.code 0} true;
    goto $bb2896;

  $bb2896:
    assume {:verifier.code 0} true;
    goto $bb2897;

  $bb2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4716} ___udelay(4295000);
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    goto $bb2898;

  $bb2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4717} ___udelay(4295000);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    goto $bb2899;

  $bb2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4718} ___udelay(4295000);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    goto $bb2900;

  $bb2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4719} ___udelay(4295000);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    goto $bb2901;

  $bb2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4720} ___udelay(4295000);
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    goto $bb2902;

  $bb2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4721} ___udelay(4295000);
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    goto $bb2903;

  $bb2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4722} ___udelay(4295000);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    goto $bb2904;

  $bb2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4723} ___udelay(4295000);
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    goto $bb2905;

  $bb2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4724} ___udelay(4295000);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    goto $bb2906;

  $bb2906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4725} ___udelay(4295000);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    goto $bb2907;

  $bb2907:
    assume {:verifier.code 0} true;
    goto $bb2908;

  $bb2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4726} $i532 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    $i533 := $eq.i32($i529, $i532);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i533} true;
    goto $bb2909, $bb2910;

  $bb2910:
    assume !($i533 == 1);
    assume {:verifier.code 0} true;
    goto $bb2911;

  $bb2911:
    assume {:verifier.code 0} true;
    goto $bb2915;

  $bb2915:
    assume {:verifier.code 0} true;
    goto $bb2916;

  $bb2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4727} ___udelay(4295000);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    goto $bb2917;

  $bb2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4728} ___udelay(4295000);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    goto $bb2918;

  $bb2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4729} ___udelay(4295000);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    goto $bb2919;

  $bb2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4730} ___udelay(4295000);
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    goto $bb2920;

  $bb2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4731} ___udelay(4295000);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    goto $bb2921;

  $bb2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4732} ___udelay(4295000);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    goto $bb2922;

  $bb2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4733} ___udelay(4295000);
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    goto $bb2923;

  $bb2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4734} ___udelay(4295000);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    goto $bb2924;

  $bb2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4735} ___udelay(4295000);
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    goto $bb2925;

  $bb2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4736} ___udelay(4295000);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    goto $bb2926;

  $bb2926:
    assume {:verifier.code 0} true;
    goto $bb2927;

  $bb2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4737} $i535 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i532, $i535);
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb2928, $bb2929;

  $bb2929:
    assume !($i536 == 1);
    assume {:verifier.code 0} true;
    goto $bb2930;

  $bb2930:
    assume {:verifier.code 0} true;
    goto $bb2934;

  $bb2934:
    assume {:verifier.code 0} true;
    goto $bb2935;

  $bb2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4738} ___udelay(4295000);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    goto $bb2936;

  $bb2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4739} ___udelay(4295000);
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    goto $bb2937;

  $bb2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4740} ___udelay(4295000);
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    goto $bb2938;

  $bb2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4741} ___udelay(4295000);
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    goto $bb2939;

  $bb2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4742} ___udelay(4295000);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    goto $bb2940;

  $bb2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4743} ___udelay(4295000);
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    goto $bb2941;

  $bb2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4744} ___udelay(4295000);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    goto $bb2942;

  $bb2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4745} ___udelay(4295000);
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    goto $bb2943;

  $bb2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4746} ___udelay(4295000);
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    goto $bb2944;

  $bb2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4747} ___udelay(4295000);
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    goto $bb2945;

  $bb2945:
    assume {:verifier.code 0} true;
    goto $bb2946;

  $bb2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4748} $i538 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $i539 := $eq.i32($i535, $i538);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i539} true;
    goto $bb2947, $bb2948;

  $bb2948:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb2949;

  $bb2949:
    assume {:verifier.code 0} true;
    goto $bb2953;

  $bb2953:
    assume {:verifier.code 0} true;
    goto $bb2954;

  $bb2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4749} ___udelay(4295000);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    goto $bb2955;

  $bb2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4750} ___udelay(4295000);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    goto $bb2956;

  $bb2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4751} ___udelay(4295000);
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    goto $bb2957;

  $bb2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4752} ___udelay(4295000);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    goto $bb2958;

  $bb2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4753} ___udelay(4295000);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    goto $bb2959;

  $bb2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4754} ___udelay(4295000);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    goto $bb2960;

  $bb2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4755} ___udelay(4295000);
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    goto $bb2961;

  $bb2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4756} ___udelay(4295000);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    goto $bb2962;

  $bb2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4757} ___udelay(4295000);
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    goto $bb2963;

  $bb2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4758} ___udelay(4295000);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    goto $bb2964;

  $bb2964:
    assume {:verifier.code 0} true;
    goto $bb2965;

  $bb2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4759} $i541 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i538, $i541);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i542} true;
    goto $bb2966, $bb2967;

  $bb2967:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb2968;

  $bb2968:
    assume {:verifier.code 0} true;
    goto $bb2972;

  $bb2972:
    assume {:verifier.code 0} true;
    goto $bb2973;

  $bb2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4760} ___udelay(4295000);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    goto $bb2974;

  $bb2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4761} ___udelay(4295000);
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    goto $bb2975;

  $bb2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4762} ___udelay(4295000);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    goto $bb2976;

  $bb2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4763} ___udelay(4295000);
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    goto $bb2977;

  $bb2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4764} ___udelay(4295000);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    goto $bb2978;

  $bb2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4765} ___udelay(4295000);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    goto $bb2979;

  $bb2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4766} ___udelay(4295000);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    goto $bb2980;

  $bb2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4767} ___udelay(4295000);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    goto $bb2981;

  $bb2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4768} ___udelay(4295000);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    goto $bb2982;

  $bb2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4769} ___udelay(4295000);
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    goto $bb2983;

  $bb2983:
    assume {:verifier.code 0} true;
    goto $bb2984;

  $bb2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4770} $i544 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $i545 := $eq.i32($i541, $i544);
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb2985, $bb2986;

  $bb2986:
    assume !($i545 == 1);
    assume {:verifier.code 0} true;
    goto $bb2987;

  $bb2987:
    assume {:verifier.code 0} true;
    goto $bb2991;

  $bb2991:
    assume {:verifier.code 0} true;
    goto $bb2992;

  $bb2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4771} ___udelay(4295000);
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    goto $bb2993;

  $bb2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4772} ___udelay(4295000);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    goto $bb2994;

  $bb2994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4773} ___udelay(4295000);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    goto $bb2995;

  $bb2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4774} ___udelay(4295000);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    goto $bb2996;

  $bb2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4775} ___udelay(4295000);
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    goto $bb2997;

  $bb2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4776} ___udelay(4295000);
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    goto $bb2998;

  $bb2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4777} ___udelay(4295000);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    goto $bb2999;

  $bb2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4778} ___udelay(4295000);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    goto $bb3000;

  $bb3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4779} ___udelay(4295000);
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    goto $bb3001;

  $bb3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4780} ___udelay(4295000);
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    goto $bb3002;

  $bb3002:
    assume {:verifier.code 0} true;
    goto $bb3003;

  $bb3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4781} $i547 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $i548 := $eq.i32($i544, $i547);
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb3004, $bb3005;

  $bb3005:
    assume !($i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb3006;

  $bb3006:
    assume {:verifier.code 0} true;
    goto $bb3010;

  $bb3010:
    assume {:verifier.code 0} true;
    goto $bb3011;

  $bb3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4782} ___udelay(4295000);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    goto $bb3012;

  $bb3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4783} ___udelay(4295000);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    goto $bb3013;

  $bb3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4784} ___udelay(4295000);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    goto $bb3014;

  $bb3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4785} ___udelay(4295000);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    goto $bb3015;

  $bb3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4786} ___udelay(4295000);
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    goto $bb3016;

  $bb3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4787} ___udelay(4295000);
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    goto $bb3017;

  $bb3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4788} ___udelay(4295000);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    goto $bb3018;

  $bb3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4789} ___udelay(4295000);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    goto $bb3019;

  $bb3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4790} ___udelay(4295000);
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    goto $bb3020;

  $bb3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4791} ___udelay(4295000);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    goto $bb3021;

  $bb3021:
    assume {:verifier.code 0} true;
    goto $bb3022;

  $bb3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4792} $i550 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i547, $i550);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb3023, $bb3024;

  $bb3024:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb3025;

  $bb3025:
    assume {:verifier.code 0} true;
    goto $bb3029;

  $bb3029:
    assume {:verifier.code 0} true;
    goto $bb3030;

  $bb3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4793} ___udelay(4295000);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    goto $bb3031;

  $bb3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4794} ___udelay(4295000);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    goto $bb3032;

  $bb3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4795} ___udelay(4295000);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    goto $bb3033;

  $bb3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4796} ___udelay(4295000);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    goto $bb3034;

  $bb3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4797} ___udelay(4295000);
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    goto $bb3035;

  $bb3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4798} ___udelay(4295000);
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    goto $bb3036;

  $bb3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4799} ___udelay(4295000);
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    goto $bb3037;

  $bb3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4800} ___udelay(4295000);
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    goto $bb3038;

  $bb3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4801} ___udelay(4295000);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    goto $bb3039;

  $bb3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4802} ___udelay(4295000);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    goto $bb3040;

  $bb3040:
    assume {:verifier.code 0} true;
    goto $bb3041;

  $bb3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4803} $i553 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i550, $i553);
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i554} true;
    goto $bb3042, $bb3043;

  $bb3043:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb3044;

  $bb3044:
    assume {:verifier.code 0} true;
    goto $bb3048;

  $bb3048:
    assume {:verifier.code 0} true;
    goto $bb3049;

  $bb3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4804} ___udelay(4295000);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    goto $bb3050;

  $bb3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4805} ___udelay(4295000);
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    goto $bb3051;

  $bb3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4806} ___udelay(4295000);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    goto $bb3052;

  $bb3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4807} ___udelay(4295000);
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    goto $bb3053;

  $bb3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4808} ___udelay(4295000);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    goto $bb3054;

  $bb3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4809} ___udelay(4295000);
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    goto $bb3055;

  $bb3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4810} ___udelay(4295000);
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    goto $bb3056;

  $bb3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4811} ___udelay(4295000);
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    goto $bb3057;

  $bb3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4812} ___udelay(4295000);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    goto $bb3058;

  $bb3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4813} ___udelay(4295000);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    goto $bb3059;

  $bb3059:
    assume {:verifier.code 0} true;
    goto $bb3060;

  $bb3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4814} $i556 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    $i557 := $eq.i32($i553, $i556);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i557} true;
    goto $bb3061, $bb3062;

  $bb3062:
    assume !($i557 == 1);
    assume {:verifier.code 0} true;
    goto $bb3063;

  $bb3063:
    assume {:verifier.code 0} true;
    goto $bb3067;

  $bb3067:
    assume {:verifier.code 0} true;
    goto $bb3068;

  $bb3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4815} ___udelay(4295000);
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    goto $bb3069;

  $bb3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4816} ___udelay(4295000);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    goto $bb3070;

  $bb3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4817} ___udelay(4295000);
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    goto $bb3071;

  $bb3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4818} ___udelay(4295000);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    goto $bb3072;

  $bb3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4819} ___udelay(4295000);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    goto $bb3073;

  $bb3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4820} ___udelay(4295000);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    goto $bb3074;

  $bb3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4821} ___udelay(4295000);
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    goto $bb3075;

  $bb3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4822} ___udelay(4295000);
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    goto $bb3076;

  $bb3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4823} ___udelay(4295000);
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    goto $bb3077;

  $bb3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4824} ___udelay(4295000);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    goto $bb3078;

  $bb3078:
    assume {:verifier.code 0} true;
    goto $bb3079;

  $bb3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4825} $i559 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    $i560 := $eq.i32($i556, $i559);
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb3080, $bb3081;

  $bb3081:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    goto $bb3082;

  $bb3082:
    assume {:verifier.code 0} true;
    goto $bb3086;

  $bb3086:
    assume {:verifier.code 0} true;
    goto $bb3087;

  $bb3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4826} ___udelay(4295000);
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    goto $bb3088;

  $bb3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4827} ___udelay(4295000);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    goto $bb3089;

  $bb3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4828} ___udelay(4295000);
    goto corral_source_split_13758;

  corral_source_split_13758:
    assume {:verifier.code 0} true;
    goto $bb3090;

  $bb3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4829} ___udelay(4295000);
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    goto $bb3091;

  $bb3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4830} ___udelay(4295000);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    goto $bb3092;

  $bb3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4831} ___udelay(4295000);
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    goto $bb3093;

  $bb3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4832} ___udelay(4295000);
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    goto $bb3094;

  $bb3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4833} ___udelay(4295000);
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    goto $bb3095;

  $bb3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4834} ___udelay(4295000);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    goto $bb3096;

  $bb3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4835} ___udelay(4295000);
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    goto $bb3097;

  $bb3097:
    assume {:verifier.code 0} true;
    goto $bb3098;

  $bb3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4836} $i562 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    $i563 := $eq.i32($i559, $i562);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i563} true;
    goto $bb3099, $bb3100;

  $bb3100:
    assume !($i563 == 1);
    assume {:verifier.code 0} true;
    goto $bb3101;

  $bb3101:
    assume {:verifier.code 0} true;
    goto $bb3105;

  $bb3105:
    assume {:verifier.code 0} true;
    goto $bb3106;

  $bb3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4837} ___udelay(4295000);
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    goto $bb3107;

  $bb3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4838} ___udelay(4295000);
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    goto $bb3108;

  $bb3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4839} ___udelay(4295000);
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    goto $bb3109;

  $bb3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4840} ___udelay(4295000);
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    goto $bb3110;

  $bb3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4841} ___udelay(4295000);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    goto $bb3111;

  $bb3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4842} ___udelay(4295000);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    goto $bb3112;

  $bb3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4843} ___udelay(4295000);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    goto $bb3113;

  $bb3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4844} ___udelay(4295000);
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    goto $bb3114;

  $bb3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4845} ___udelay(4295000);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    goto $bb3115;

  $bb3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4846} ___udelay(4295000);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    goto $bb3116;

  $bb3116:
    assume {:verifier.code 0} true;
    goto $bb3117;

  $bb3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4847} $i565 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i562, $i565);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb3118, $bb3119;

  $bb3119:
    assume !($i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb3120;

  $bb3120:
    assume {:verifier.code 0} true;
    goto $bb3124;

  $bb3124:
    assume {:verifier.code 0} true;
    goto $bb3125;

  $bb3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4848} ___udelay(4295000);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    goto $bb3126;

  $bb3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4849} ___udelay(4295000);
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    goto $bb3127;

  $bb3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4850} ___udelay(4295000);
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    goto $bb3128;

  $bb3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4851} ___udelay(4295000);
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    goto $bb3129;

  $bb3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4852} ___udelay(4295000);
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    goto $bb3130;

  $bb3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4853} ___udelay(4295000);
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    goto $bb3131;

  $bb3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4854} ___udelay(4295000);
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    goto $bb3132;

  $bb3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4855} ___udelay(4295000);
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    goto $bb3133;

  $bb3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4856} ___udelay(4295000);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    goto $bb3134;

  $bb3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4857} ___udelay(4295000);
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    goto $bb3135;

  $bb3135:
    assume {:verifier.code 0} true;
    goto $bb3136;

  $bb3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4858} $i568 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i565, $i568);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i569} true;
    goto $bb3137, $bb3138;

  $bb3138:
    assume !($i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb3139;

  $bb3139:
    assume {:verifier.code 0} true;
    goto $bb3143;

  $bb3143:
    assume {:verifier.code 0} true;
    goto $bb3144;

  $bb3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4859} ___udelay(4295000);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    goto $bb3145;

  $bb3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4860} ___udelay(4295000);
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    goto $bb3146;

  $bb3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4861} ___udelay(4295000);
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    goto $bb3147;

  $bb3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4862} ___udelay(4295000);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    goto $bb3148;

  $bb3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4863} ___udelay(4295000);
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    goto $bb3149;

  $bb3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4864} ___udelay(4295000);
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    goto $bb3150;

  $bb3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4865} ___udelay(4295000);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    goto $bb3151;

  $bb3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4866} ___udelay(4295000);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    goto $bb3152;

  $bb3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4867} ___udelay(4295000);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    goto $bb3153;

  $bb3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4868} ___udelay(4295000);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    goto $bb3154;

  $bb3154:
    assume {:verifier.code 0} true;
    goto $bb3155;

  $bb3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4869} $i571 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $i572 := $eq.i32($i568, $i571);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb3156, $bb3157;

  $bb3157:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb3158;

  $bb3158:
    assume {:verifier.code 0} true;
    goto $bb3162;

  $bb3162:
    assume {:verifier.code 0} true;
    goto $bb3163;

  $bb3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4870} ___udelay(4295000);
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    goto $bb3164;

  $bb3164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4871} ___udelay(4295000);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    goto $bb3165;

  $bb3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4872} ___udelay(4295000);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    goto $bb3166;

  $bb3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4873} ___udelay(4295000);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    goto $bb3167;

  $bb3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4874} ___udelay(4295000);
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    goto $bb3168;

  $bb3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4875} ___udelay(4295000);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    goto $bb3169;

  $bb3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4876} ___udelay(4295000);
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    goto $bb3170;

  $bb3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4877} ___udelay(4295000);
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    goto $bb3171;

  $bb3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4878} ___udelay(4295000);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    goto $bb3172;

  $bb3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4879} ___udelay(4295000);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    goto $bb3173;

  $bb3173:
    assume {:verifier.code 0} true;
    goto $bb3174;

  $bb3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4880} $i574 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $i575 := $eq.i32($i571, $i574);
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i575} true;
    goto $bb3175, $bb3176;

  $bb3176:
    assume !($i575 == 1);
    assume {:verifier.code 0} true;
    goto $bb3177;

  $bb3177:
    assume {:verifier.code 0} true;
    goto $bb3181;

  $bb3181:
    assume {:verifier.code 0} true;
    goto $bb3182;

  $bb3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4881} ___udelay(4295000);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    goto $bb3183;

  $bb3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4882} ___udelay(4295000);
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    goto $bb3184;

  $bb3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4883} ___udelay(4295000);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    goto $bb3185;

  $bb3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4884} ___udelay(4295000);
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    goto $bb3186;

  $bb3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4885} ___udelay(4295000);
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    goto $bb3187;

  $bb3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4886} ___udelay(4295000);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    goto $bb3188;

  $bb3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4887} ___udelay(4295000);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    goto $bb3189;

  $bb3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4888} ___udelay(4295000);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    goto $bb3190;

  $bb3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4889} ___udelay(4295000);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    goto $bb3191;

  $bb3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4890} ___udelay(4295000);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    goto $bb3192;

  $bb3192:
    assume {:verifier.code 0} true;
    goto $bb3193;

  $bb3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4891} $i577 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    $i578 := $eq.i32($i574, $i577);
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i578} true;
    goto $bb3194, $bb3195;

  $bb3195:
    assume !($i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb3196;

  $bb3196:
    assume {:verifier.code 0} true;
    goto $bb3200;

  $bb3200:
    assume {:verifier.code 0} true;
    goto $bb3201;

  $bb3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4892} ___udelay(4295000);
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    goto $bb3202;

  $bb3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4893} ___udelay(4295000);
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    goto $bb3203;

  $bb3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4894} ___udelay(4295000);
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    goto $bb3204;

  $bb3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4895} ___udelay(4295000);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    goto $bb3205;

  $bb3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4896} ___udelay(4295000);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    goto $bb3206;

  $bb3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4897} ___udelay(4295000);
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    goto $bb3207;

  $bb3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4898} ___udelay(4295000);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    goto $bb3208;

  $bb3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4899} ___udelay(4295000);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    goto $bb3209;

  $bb3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4900} ___udelay(4295000);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    goto $bb3210;

  $bb3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4901} ___udelay(4295000);
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    goto $bb3211;

  $bb3211:
    assume {:verifier.code 0} true;
    goto $bb3212;

  $bb3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4902} $i580 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    $i581 := $eq.i32($i577, $i580);
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb3213, $bb3214;

  $bb3214:
    assume !($i581 == 1);
    assume {:verifier.code 0} true;
    goto $bb3215;

  $bb3215:
    assume {:verifier.code 0} true;
    goto $bb3219;

  $bb3219:
    assume {:verifier.code 0} true;
    goto $bb3220;

  $bb3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4903} ___udelay(4295000);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    goto $bb3221;

  $bb3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4904} ___udelay(4295000);
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    goto $bb3222;

  $bb3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4905} ___udelay(4295000);
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    goto $bb3223;

  $bb3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4906} ___udelay(4295000);
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    goto $bb3224;

  $bb3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4907} ___udelay(4295000);
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    goto $bb3225;

  $bb3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4908} ___udelay(4295000);
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    goto $bb3226;

  $bb3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4909} ___udelay(4295000);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    goto $bb3227;

  $bb3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4910} ___udelay(4295000);
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    goto $bb3228;

  $bb3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4911} ___udelay(4295000);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    goto $bb3229;

  $bb3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4912} ___udelay(4295000);
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    goto $bb3230;

  $bb3230:
    assume {:verifier.code 0} true;
    goto $bb3231;

  $bb3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4913} $i583 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    $i584 := $eq.i32($i580, $i583);
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb3232, $bb3233;

  $bb3233:
    assume !($i584 == 1);
    assume {:verifier.code 0} true;
    goto $bb3234;

  $bb3234:
    assume {:verifier.code 0} true;
    goto $bb3238;

  $bb3238:
    assume {:verifier.code 0} true;
    goto $bb3239;

  $bb3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4914} ___udelay(4295000);
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    goto $bb3240;

  $bb3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4915} ___udelay(4295000);
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    goto $bb3241;

  $bb3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4916} ___udelay(4295000);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    goto $bb3242;

  $bb3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4917} ___udelay(4295000);
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    goto $bb3243;

  $bb3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4918} ___udelay(4295000);
    goto corral_source_split_13970;

  corral_source_split_13970:
    assume {:verifier.code 0} true;
    goto $bb3244;

  $bb3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4919} ___udelay(4295000);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    goto $bb3245;

  $bb3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4920} ___udelay(4295000);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    goto $bb3246;

  $bb3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4921} ___udelay(4295000);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    goto $bb3247;

  $bb3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4922} ___udelay(4295000);
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    goto $bb3248;

  $bb3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4923} ___udelay(4295000);
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    goto $bb3249;

  $bb3249:
    assume {:verifier.code 0} true;
    goto $bb3250;

  $bb3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4924} $i586 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i583, $i586);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i587} true;
    goto $bb3251, $bb3252;

  $bb3252:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb3253;

  $bb3253:
    assume {:verifier.code 0} true;
    goto $bb3257;

  $bb3257:
    assume {:verifier.code 0} true;
    goto $bb3258;

  $bb3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4925} ___udelay(4295000);
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    goto $bb3259;

  $bb3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4926} ___udelay(4295000);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    goto $bb3260;

  $bb3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4927} ___udelay(4295000);
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    goto $bb3261;

  $bb3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4928} ___udelay(4295000);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    goto $bb3262;

  $bb3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4929} ___udelay(4295000);
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    goto $bb3263;

  $bb3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4930} ___udelay(4295000);
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    goto $bb3264;

  $bb3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4931} ___udelay(4295000);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    goto $bb3265;

  $bb3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4932} ___udelay(4295000);
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    goto $bb3266;

  $bb3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4933} ___udelay(4295000);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    goto $bb3267;

  $bb3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4934} ___udelay(4295000);
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    goto $bb3268;

  $bb3268:
    assume {:verifier.code 0} true;
    goto $bb3269;

  $bb3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4935} $i589 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $i590 := $eq.i32($i586, $i589);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i590} true;
    goto $bb3270, $bb3271;

  $bb3271:
    assume !($i590 == 1);
    assume {:verifier.code 0} true;
    goto $bb3272;

  $bb3272:
    assume {:verifier.code 0} true;
    goto $bb3276;

  $bb3276:
    assume {:verifier.code 0} true;
    goto $bb3277;

  $bb3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4936} ___udelay(4295000);
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    goto $bb3278;

  $bb3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4937} ___udelay(4295000);
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    goto $bb3279;

  $bb3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4938} ___udelay(4295000);
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    goto $bb3280;

  $bb3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4939} ___udelay(4295000);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    goto $bb3281;

  $bb3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4940} ___udelay(4295000);
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    goto $bb3282;

  $bb3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4941} ___udelay(4295000);
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    goto $bb3283;

  $bb3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4942} ___udelay(4295000);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    goto $bb3284;

  $bb3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4943} ___udelay(4295000);
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    goto $bb3285;

  $bb3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4944} ___udelay(4295000);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    goto $bb3286;

  $bb3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4945} ___udelay(4295000);
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    goto $bb3287;

  $bb3287:
    assume {:verifier.code 0} true;
    goto $bb3288;

  $bb3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4946} $i592 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $i593 := $eq.i32($i589, $i592);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i593} true;
    goto $bb3289, $bb3290;

  $bb3290:
    assume !($i593 == 1);
    assume {:verifier.code 0} true;
    goto $bb3291;

  $bb3291:
    assume {:verifier.code 0} true;
    goto $bb3295;

  $bb3295:
    assume {:verifier.code 0} true;
    goto $bb3296;

  $bb3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4947} ___udelay(4295000);
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    goto $bb3297;

  $bb3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4948} ___udelay(4295000);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    goto $bb3298;

  $bb3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4949} ___udelay(4295000);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    goto $bb3299;

  $bb3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4950} ___udelay(4295000);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    goto $bb3300;

  $bb3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4951} ___udelay(4295000);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    goto $bb3301;

  $bb3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4952} ___udelay(4295000);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    goto $bb3302;

  $bb3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4953} ___udelay(4295000);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    goto $bb3303;

  $bb3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4954} ___udelay(4295000);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    goto $bb3304;

  $bb3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4955} ___udelay(4295000);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    goto $bb3305;

  $bb3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4956} ___udelay(4295000);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    goto $bb3306;

  $bb3306:
    assume {:verifier.code 0} true;
    goto $bb3307;

  $bb3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4957} $i595 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i592, $i595);
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb3308, $bb3309;

  $bb3309:
    assume !($i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb3310;

  $bb3310:
    assume {:verifier.code 0} true;
    goto $bb3314;

  $bb3314:
    assume {:verifier.code 0} true;
    goto $bb3315;

  $bb3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4958} ___udelay(4295000);
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    goto $bb3316;

  $bb3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4959} ___udelay(4295000);
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    goto $bb3317;

  $bb3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4960} ___udelay(4295000);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    goto $bb3318;

  $bb3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4961} ___udelay(4295000);
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    goto $bb3319;

  $bb3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4962} ___udelay(4295000);
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    goto $bb3320;

  $bb3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4963} ___udelay(4295000);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    goto $bb3321;

  $bb3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4964} ___udelay(4295000);
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    goto $bb3322;

  $bb3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4965} ___udelay(4295000);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    goto $bb3323;

  $bb3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4966} ___udelay(4295000);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    goto $bb3324;

  $bb3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4967} ___udelay(4295000);
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    goto $bb3325;

  $bb3325:
    assume {:verifier.code 0} true;
    goto $bb3326;

  $bb3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4968} $i598 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $i599 := $eq.i32($i595, $i598);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i599} true;
    goto $bb3327, $bb3328;

  $bb3328:
    assume !($i599 == 1);
    assume {:verifier.code 0} true;
    goto $bb3329;

  $bb3329:
    assume {:verifier.code 0} true;
    goto $bb3333;

  $bb3333:
    assume {:verifier.code 0} true;
    goto $bb3334;

  $bb3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4969} ___udelay(4295000);
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    goto $bb3335;

  $bb3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4970} ___udelay(4295000);
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    goto $bb3336;

  $bb3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4971} ___udelay(4295000);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    goto $bb3337;

  $bb3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4972} ___udelay(4295000);
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    goto $bb3338;

  $bb3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4973} ___udelay(4295000);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    goto $bb3339;

  $bb3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4974} ___udelay(4295000);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    goto $bb3340;

  $bb3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4975} ___udelay(4295000);
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    goto $bb3341;

  $bb3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4976} ___udelay(4295000);
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    goto $bb3342;

  $bb3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4977} ___udelay(4295000);
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    goto $bb3343;

  $bb3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4978} ___udelay(4295000);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    goto $bb3344;

  $bb3344:
    assume {:verifier.code 0} true;
    goto $bb3345;

  $bb3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4979} $i601 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i598, $i601);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb3346, $bb3347;

  $bb3347:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb3348;

  $bb3348:
    assume {:verifier.code 0} true;
    goto $bb3352;

  $bb3352:
    assume {:verifier.code 0} true;
    goto $bb3353;

  $bb3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4980} ___udelay(4295000);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    goto $bb3354;

  $bb3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4981} ___udelay(4295000);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    goto $bb3355;

  $bb3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4982} ___udelay(4295000);
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    goto $bb3356;

  $bb3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4983} ___udelay(4295000);
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    goto $bb3357;

  $bb3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4984} ___udelay(4295000);
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    goto $bb3358;

  $bb3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4985} ___udelay(4295000);
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    goto $bb3359;

  $bb3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4986} ___udelay(4295000);
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    goto $bb3360;

  $bb3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4987} ___udelay(4295000);
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    goto $bb3361;

  $bb3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4988} ___udelay(4295000);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    goto $bb3362;

  $bb3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4989} ___udelay(4295000);
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    goto $bb3363;

  $bb3363:
    assume {:verifier.code 0} true;
    goto $bb3364;

  $bb3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4990} $i604 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    $i605 := $eq.i32($i601, $i604);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb3365, $bb3366;

  $bb3366:
    assume !($i605 == 1);
    assume {:verifier.code 0} true;
    goto $bb3367;

  $bb3367:
    assume {:verifier.code 0} true;
    goto $bb3371;

  $bb3371:
    assume {:verifier.code 0} true;
    goto $bb3372;

  $bb3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4991} ___udelay(4295000);
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    goto $bb3373;

  $bb3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4992} ___udelay(4295000);
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    goto $bb3374;

  $bb3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4993} ___udelay(4295000);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    goto $bb3375;

  $bb3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4994} ___udelay(4295000);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    goto $bb3376;

  $bb3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4995} ___udelay(4295000);
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    goto $bb3377;

  $bb3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4996} ___udelay(4295000);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    goto $bb3378;

  $bb3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4997} ___udelay(4295000);
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    goto $bb3379;

  $bb3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4998} ___udelay(4295000);
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    goto $bb3380;

  $bb3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4999} ___udelay(4295000);
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    goto $bb3381;

  $bb3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5000} ___udelay(4295000);
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    goto $bb3382;

  $bb3382:
    assume {:verifier.code 0} true;
    goto $bb3383;

  $bb3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5001} $i607 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i604, $i607);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb3384, $bb3385;

  $bb3385:
    assume !($i608 == 1);
    assume {:verifier.code 0} true;
    goto $bb3386;

  $bb3386:
    assume {:verifier.code 0} true;
    goto $bb3390;

  $bb3390:
    assume {:verifier.code 0} true;
    goto $bb3391;

  $bb3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5002} ___udelay(4295000);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    goto $bb3392;

  $bb3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5003} ___udelay(4295000);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    goto $bb3393;

  $bb3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5004} ___udelay(4295000);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    goto $bb3394;

  $bb3394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5005} ___udelay(4295000);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    goto $bb3395;

  $bb3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5006} ___udelay(4295000);
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    goto $bb3396;

  $bb3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5007} ___udelay(4295000);
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    goto $bb3397;

  $bb3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5008} ___udelay(4295000);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    goto $bb3398;

  $bb3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5009} ___udelay(4295000);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    goto $bb3399;

  $bb3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5010} ___udelay(4295000);
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    goto $bb3400;

  $bb3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5011} ___udelay(4295000);
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    goto $bb3401;

  $bb3401:
    assume {:verifier.code 0} true;
    goto $bb3402;

  $bb3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5012} $i610 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    $i611 := $eq.i32($i607, $i610);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i611} true;
    goto $bb3403, $bb3404;

  $bb3404:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb3405;

  $bb3405:
    assume {:verifier.code 0} true;
    goto $bb3409;

  $bb3409:
    assume {:verifier.code 0} true;
    goto $bb3410;

  $bb3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5013} ___udelay(4295000);
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    goto $bb3411;

  $bb3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5014} ___udelay(4295000);
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    goto $bb3412;

  $bb3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5015} ___udelay(4295000);
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    goto $bb3413;

  $bb3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5016} ___udelay(4295000);
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    goto $bb3414;

  $bb3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5017} ___udelay(4295000);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    goto $bb3415;

  $bb3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5018} ___udelay(4295000);
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    goto $bb3416;

  $bb3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5019} ___udelay(4295000);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    goto $bb3417;

  $bb3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5020} ___udelay(4295000);
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    goto $bb3418;

  $bb3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5021} ___udelay(4295000);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    goto $bb3419;

  $bb3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5022} ___udelay(4295000);
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    goto $bb3420;

  $bb3420:
    assume {:verifier.code 0} true;
    goto $bb3421;

  $bb3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5023} $i613 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i610, $i613);
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i614} true;
    goto $bb3422, $bb3423;

  $bb3423:
    assume !($i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb3424;

  $bb3424:
    assume {:verifier.code 0} true;
    goto $bb3428;

  $bb3428:
    assume {:verifier.code 0} true;
    goto $bb3429;

  $bb3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5024} ___udelay(4295000);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    goto $bb3430;

  $bb3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5025} ___udelay(4295000);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    goto $bb3431;

  $bb3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5026} ___udelay(4295000);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    goto $bb3432;

  $bb3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5027} ___udelay(4295000);
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    goto $bb3433;

  $bb3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5028} ___udelay(4295000);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    goto $bb3434;

  $bb3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5029} ___udelay(4295000);
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    goto $bb3435;

  $bb3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5030} ___udelay(4295000);
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    goto $bb3436;

  $bb3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5031} ___udelay(4295000);
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    goto $bb3437;

  $bb3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5032} ___udelay(4295000);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    goto $bb3438;

  $bb3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5033} ___udelay(4295000);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    goto $bb3439;

  $bb3439:
    assume {:verifier.code 0} true;
    goto $bb3440;

  $bb3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5034} $i616 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    $i617 := $eq.i32($i613, $i616);
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i617} true;
    goto $bb3441, $bb3442;

  $bb3442:
    assume !($i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb3443;

  $bb3443:
    assume {:verifier.code 0} true;
    goto $bb3447;

  $bb3447:
    assume {:verifier.code 0} true;
    goto $bb3448;

  $bb3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5035} ___udelay(4295000);
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    goto $bb3449;

  $bb3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5036} ___udelay(4295000);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    goto $bb3450;

  $bb3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5037} ___udelay(4295000);
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    goto $bb3451;

  $bb3451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5038} ___udelay(4295000);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    goto $bb3452;

  $bb3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5039} ___udelay(4295000);
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    goto $bb3453;

  $bb3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5040} ___udelay(4295000);
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    goto $bb3454;

  $bb3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5041} ___udelay(4295000);
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    goto $bb3455;

  $bb3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5042} ___udelay(4295000);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    goto $bb3456;

  $bb3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5043} ___udelay(4295000);
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    goto $bb3457;

  $bb3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5044} ___udelay(4295000);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    goto $bb3458;

  $bb3458:
    assume {:verifier.code 0} true;
    goto $bb3459;

  $bb3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5045} $i619 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $i620 := $eq.i32($i616, $i619);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb3460, $bb3461;

  $bb3461:
    assume !($i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb3462;

  $bb3462:
    assume {:verifier.code 0} true;
    goto $bb3466;

  $bb3466:
    assume {:verifier.code 0} true;
    goto $bb3467;

  $bb3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5046} ___udelay(4295000);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    goto $bb3468;

  $bb3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5047} ___udelay(4295000);
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    goto $bb3469;

  $bb3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5048} ___udelay(4295000);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    goto $bb3470;

  $bb3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5049} ___udelay(4295000);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    goto $bb3471;

  $bb3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5050} ___udelay(4295000);
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    goto $bb3472;

  $bb3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5051} ___udelay(4295000);
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    goto $bb3473;

  $bb3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5052} ___udelay(4295000);
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    goto $bb3474;

  $bb3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5053} ___udelay(4295000);
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    goto $bb3475;

  $bb3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5054} ___udelay(4295000);
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    goto $bb3476;

  $bb3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5055} ___udelay(4295000);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    goto $bb3477;

  $bb3477:
    assume {:verifier.code 0} true;
    goto $bb3478;

  $bb3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5056} $i622 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    $i623 := $eq.i32($i619, $i622);
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb3479, $bb3480;

  $bb3480:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb3481;

  $bb3481:
    assume {:verifier.code 0} true;
    goto $bb3485;

  $bb3485:
    assume {:verifier.code 0} true;
    goto $bb3486;

  $bb3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5057} ___udelay(4295000);
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    goto $bb3487;

  $bb3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5058} ___udelay(4295000);
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    goto $bb3488;

  $bb3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5059} ___udelay(4295000);
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    goto $bb3489;

  $bb3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5060} ___udelay(4295000);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    goto $bb3490;

  $bb3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5061} ___udelay(4295000);
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    goto $bb3491;

  $bb3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5062} ___udelay(4295000);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    goto $bb3492;

  $bb3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5063} ___udelay(4295000);
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    goto $bb3493;

  $bb3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5064} ___udelay(4295000);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    goto $bb3494;

  $bb3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5065} ___udelay(4295000);
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    goto $bb3495;

  $bb3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5066} ___udelay(4295000);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    goto $bb3496;

  $bb3496:
    assume {:verifier.code 0} true;
    goto $bb3497;

  $bb3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5067} $i625 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $i626 := $eq.i32($i622, $i625);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i626} true;
    goto $bb3498, $bb3499;

  $bb3499:
    assume !($i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb3500;

  $bb3500:
    assume {:verifier.code 0} true;
    goto $bb3504;

  $bb3504:
    assume {:verifier.code 0} true;
    goto $bb3505;

  $bb3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5068} ___udelay(4295000);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    goto $bb3506;

  $bb3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5069} ___udelay(4295000);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    goto $bb3507;

  $bb3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5070} ___udelay(4295000);
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    goto $bb3508;

  $bb3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5071} ___udelay(4295000);
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    goto $bb3509;

  $bb3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5072} ___udelay(4295000);
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    goto $bb3510;

  $bb3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5073} ___udelay(4295000);
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    goto $bb3511;

  $bb3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5074} ___udelay(4295000);
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    goto $bb3512;

  $bb3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5075} ___udelay(4295000);
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    goto $bb3513;

  $bb3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5076} ___udelay(4295000);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    goto $bb3514;

  $bb3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5077} ___udelay(4295000);
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    goto $bb3515;

  $bb3515:
    assume {:verifier.code 0} true;
    goto $bb3516;

  $bb3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5078} $i628 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    $i629 := $eq.i32($i625, $i628);
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i629} true;
    goto $bb3517, $bb3518;

  $bb3518:
    assume !($i629 == 1);
    assume {:verifier.code 0} true;
    goto $bb3519;

  $bb3519:
    assume {:verifier.code 0} true;
    goto $bb3523;

  $bb3523:
    assume {:verifier.code 0} true;
    goto $bb3524;

  $bb3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5079} ___udelay(4295000);
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    goto $bb3525;

  $bb3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5080} ___udelay(4295000);
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    goto $bb3526;

  $bb3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5081} ___udelay(4295000);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    goto $bb3527;

  $bb3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5082} ___udelay(4295000);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    goto $bb3528;

  $bb3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5083} ___udelay(4295000);
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    goto $bb3529;

  $bb3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5084} ___udelay(4295000);
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    goto $bb3530;

  $bb3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5085} ___udelay(4295000);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    goto $bb3531;

  $bb3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5086} ___udelay(4295000);
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    goto $bb3532;

  $bb3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5087} ___udelay(4295000);
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    goto $bb3533;

  $bb3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5088} ___udelay(4295000);
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    goto $bb3534;

  $bb3534:
    assume {:verifier.code 0} true;
    goto $bb3535;

  $bb3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5089} $i631 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $i632 := $eq.i32($i628, $i631);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb3536, $bb3537;

  $bb3537:
    assume !($i632 == 1);
    assume {:verifier.code 0} true;
    goto $bb3538;

  $bb3538:
    assume {:verifier.code 0} true;
    goto $bb3542;

  $bb3542:
    assume {:verifier.code 0} true;
    goto $bb3543;

  $bb3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5090} ___udelay(4295000);
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    goto $bb3544;

  $bb3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5091} ___udelay(4295000);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    goto $bb3545;

  $bb3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5092} ___udelay(4295000);
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    goto $bb3546;

  $bb3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5093} ___udelay(4295000);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    goto $bb3547;

  $bb3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5094} ___udelay(4295000);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    goto $bb3548;

  $bb3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5095} ___udelay(4295000);
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    goto $bb3549;

  $bb3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5096} ___udelay(4295000);
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    goto $bb3550;

  $bb3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5097} ___udelay(4295000);
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    goto $bb3551;

  $bb3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5098} ___udelay(4295000);
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    goto $bb3552;

  $bb3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5099} ___udelay(4295000);
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    goto $bb3553;

  $bb3553:
    assume {:verifier.code 0} true;
    goto $bb3554;

  $bb3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5100} $i634 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $i635 := $eq.i32($i631, $i634);
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i635} true;
    goto $bb3555, $bb3556;

  $bb3556:
    assume !($i635 == 1);
    assume {:verifier.code 0} true;
    goto $bb3557;

  $bb3557:
    assume {:verifier.code 0} true;
    goto $bb3561;

  $bb3561:
    assume {:verifier.code 0} true;
    goto $bb3562;

  $bb3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5101} ___udelay(4295000);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    goto $bb3563;

  $bb3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5102} ___udelay(4295000);
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    goto $bb3564;

  $bb3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5103} ___udelay(4295000);
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    goto $bb3565;

  $bb3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5104} ___udelay(4295000);
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    goto $bb3566;

  $bb3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5105} ___udelay(4295000);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    goto $bb3567;

  $bb3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5106} ___udelay(4295000);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    goto $bb3568;

  $bb3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5107} ___udelay(4295000);
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    goto $bb3569;

  $bb3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5108} ___udelay(4295000);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    goto $bb3570;

  $bb3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5109} ___udelay(4295000);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    goto $bb3571;

  $bb3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5110} ___udelay(4295000);
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    goto $bb3572;

  $bb3572:
    assume {:verifier.code 0} true;
    goto $bb3573;

  $bb3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5111} $i637 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $i638 := $eq.i32($i634, $i637);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb3574, $bb3575;

  $bb3575:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb3576;

  $bb3576:
    assume {:verifier.code 0} true;
    goto $bb3580;

  $bb3580:
    assume {:verifier.code 0} true;
    goto $bb3581;

  $bb3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5112} ___udelay(4295000);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    goto $bb3582;

  $bb3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5113} ___udelay(4295000);
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    goto $bb3583;

  $bb3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5114} ___udelay(4295000);
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    goto $bb3584;

  $bb3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5115} ___udelay(4295000);
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    goto $bb3585;

  $bb3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5116} ___udelay(4295000);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    goto $bb3586;

  $bb3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5117} ___udelay(4295000);
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    goto $bb3587;

  $bb3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5118} ___udelay(4295000);
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    goto $bb3588;

  $bb3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5119} ___udelay(4295000);
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    goto $bb3589;

  $bb3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5120} ___udelay(4295000);
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    goto $bb3590;

  $bb3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5121} ___udelay(4295000);
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    goto $bb3591;

  $bb3591:
    assume {:verifier.code 0} true;
    goto $bb3592;

  $bb3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5122} $i640 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    $i641 := $eq.i32($i637, $i640);
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb3593, $bb3594;

  $bb3594:
    assume !($i641 == 1);
    assume {:verifier.code 0} true;
    goto $bb3595;

  $bb3595:
    assume {:verifier.code 0} true;
    goto $bb3599;

  $bb3599:
    assume {:verifier.code 0} true;
    goto $bb3600;

  $bb3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5123} ___udelay(4295000);
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    goto $bb3601;

  $bb3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5124} ___udelay(4295000);
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    goto $bb3602;

  $bb3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5125} ___udelay(4295000);
    goto corral_source_split_14460;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    goto $bb3603;

  $bb3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5126} ___udelay(4295000);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    goto $bb3604;

  $bb3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5127} ___udelay(4295000);
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    goto $bb3605;

  $bb3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5128} ___udelay(4295000);
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    goto $bb3606;

  $bb3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5129} ___udelay(4295000);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    goto $bb3607;

  $bb3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5130} ___udelay(4295000);
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    goto $bb3608;

  $bb3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5131} ___udelay(4295000);
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    goto $bb3609;

  $bb3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5132} ___udelay(4295000);
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    goto $bb3610;

  $bb3610:
    assume {:verifier.code 0} true;
    goto $bb3611;

  $bb3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5133} $i643 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    $i644 := $eq.i32($i640, $i643);
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i644} true;
    goto $bb3612, $bb3613;

  $bb3613:
    assume !($i644 == 1);
    assume {:verifier.code 0} true;
    goto $bb3614;

  $bb3614:
    assume {:verifier.code 0} true;
    goto $bb3618;

  $bb3618:
    assume {:verifier.code 0} true;
    goto $bb3619;

  $bb3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5134} ___udelay(4295000);
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    goto $bb3620;

  $bb3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5135} ___udelay(4295000);
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    goto $bb3621;

  $bb3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5136} ___udelay(4295000);
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    goto $bb3622;

  $bb3622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5137} ___udelay(4295000);
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    goto $bb3623;

  $bb3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5138} ___udelay(4295000);
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    goto $bb3624;

  $bb3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5139} ___udelay(4295000);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    goto $bb3625;

  $bb3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5140} ___udelay(4295000);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    goto $bb3626;

  $bb3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5141} ___udelay(4295000);
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    goto $bb3627;

  $bb3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5142} ___udelay(4295000);
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    goto $bb3628;

  $bb3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5143} ___udelay(4295000);
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    goto $bb3629;

  $bb3629:
    assume {:verifier.code 0} true;
    goto $bb3630;

  $bb3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5144} $i646 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $i647 := $eq.i32($i643, $i646);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i647} true;
    goto $bb3631, $bb3632;

  $bb3632:
    assume !($i647 == 1);
    assume {:verifier.code 0} true;
    goto $bb3633;

  $bb3633:
    assume {:verifier.code 0} true;
    goto $bb3637;

  $bb3637:
    assume {:verifier.code 0} true;
    goto $bb3638;

  $bb3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5145} ___udelay(4295000);
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    goto $bb3639;

  $bb3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5146} ___udelay(4295000);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    goto $bb3640;

  $bb3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5147} ___udelay(4295000);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    goto $bb3641;

  $bb3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5148} ___udelay(4295000);
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    goto $bb3642;

  $bb3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5149} ___udelay(4295000);
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    goto $bb3643;

  $bb3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5150} ___udelay(4295000);
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    goto $bb3644;

  $bb3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5151} ___udelay(4295000);
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    goto $bb3645;

  $bb3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5152} ___udelay(4295000);
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    goto $bb3646;

  $bb3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5153} ___udelay(4295000);
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    goto $bb3647;

  $bb3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5154} ___udelay(4295000);
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    goto $bb3648;

  $bb3648:
    assume {:verifier.code 0} true;
    goto $bb3649;

  $bb3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5155} $i649 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14528;

  corral_source_split_14528:
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i646, $i649);
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i650} true;
    goto $bb3650, $bb3651;

  $bb3651:
    assume !($i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb3652;

  $bb3652:
    assume {:verifier.code 0} true;
    goto $bb3656;

  $bb3656:
    assume {:verifier.code 0} true;
    goto $bb3657;

  $bb3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5156} ___udelay(4295000);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    goto $bb3658;

  $bb3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5157} ___udelay(4295000);
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    goto $bb3659;

  $bb3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5158} ___udelay(4295000);
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    goto $bb3660;

  $bb3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5159} ___udelay(4295000);
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    goto $bb3661;

  $bb3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5160} ___udelay(4295000);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    goto $bb3662;

  $bb3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5161} ___udelay(4295000);
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    goto $bb3663;

  $bb3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5162} ___udelay(4295000);
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    goto $bb3664;

  $bb3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5163} ___udelay(4295000);
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    goto $bb3665;

  $bb3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5164} ___udelay(4295000);
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    goto $bb3666;

  $bb3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5165} ___udelay(4295000);
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    goto $bb3667;

  $bb3667:
    assume {:verifier.code 0} true;
    goto $bb3668;

  $bb3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5166} $i652 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    $i653 := $eq.i32($i649, $i652);
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb3669, $bb3670;

  $bb3670:
    assume !($i653 == 1);
    assume {:verifier.code 0} true;
    goto $bb3671;

  $bb3671:
    assume {:verifier.code 0} true;
    goto $bb3675;

  $bb3675:
    assume {:verifier.code 0} true;
    goto $bb3676;

  $bb3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5167} ___udelay(4295000);
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    goto $bb3677;

  $bb3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5168} ___udelay(4295000);
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    goto $bb3678;

  $bb3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5169} ___udelay(4295000);
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    goto $bb3679;

  $bb3679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5170} ___udelay(4295000);
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    goto $bb3680;

  $bb3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5171} ___udelay(4295000);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    goto $bb3681;

  $bb3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5172} ___udelay(4295000);
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    goto $bb3682;

  $bb3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5173} ___udelay(4295000);
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    goto $bb3683;

  $bb3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5174} ___udelay(4295000);
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    goto $bb3684;

  $bb3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5175} ___udelay(4295000);
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    goto $bb3685;

  $bb3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5176} ___udelay(4295000);
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    goto $bb3686;

  $bb3686:
    assume {:verifier.code 0} true;
    goto $bb3687;

  $bb3687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5177} $i655 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    $i656 := $eq.i32($i652, $i655);
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb3688, $bb3689;

  $bb3689:
    assume !($i656 == 1);
    assume {:verifier.code 0} true;
    goto $bb3690;

  $bb3690:
    assume {:verifier.code 0} true;
    goto $bb3694;

  $bb3694:
    assume {:verifier.code 0} true;
    goto $bb3695;

  $bb3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5178} ___udelay(4295000);
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    goto $bb3696;

  $bb3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5179} ___udelay(4295000);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    goto $bb3697;

  $bb3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5180} ___udelay(4295000);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    goto $bb3698;

  $bb3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5181} ___udelay(4295000);
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    goto $bb3699;

  $bb3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5182} ___udelay(4295000);
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    goto $bb3700;

  $bb3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5183} ___udelay(4295000);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    goto $bb3701;

  $bb3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5184} ___udelay(4295000);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    goto $bb3702;

  $bb3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5185} ___udelay(4295000);
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    goto $bb3703;

  $bb3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5186} ___udelay(4295000);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    goto $bb3704;

  $bb3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5187} ___udelay(4295000);
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    goto $bb3705;

  $bb3705:
    assume {:verifier.code 0} true;
    goto $bb3706;

  $bb3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5188} $i658 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    $i659 := $eq.i32($i655, $i658);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb3707, $bb3708;

  $bb3708:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb3709;

  $bb3709:
    assume {:verifier.code 0} true;
    goto $bb3713;

  $bb3713:
    assume {:verifier.code 0} true;
    goto $bb3714;

  $bb3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5189} ___udelay(4295000);
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    goto $bb3715;

  $bb3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5190} ___udelay(4295000);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    goto $bb3716;

  $bb3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5191} ___udelay(4295000);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    goto $bb3717;

  $bb3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5192} ___udelay(4295000);
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    goto $bb3718;

  $bb3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5193} ___udelay(4295000);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    goto $bb3719;

  $bb3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5194} ___udelay(4295000);
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    goto $bb3720;

  $bb3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5195} ___udelay(4295000);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    goto $bb3721;

  $bb3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5196} ___udelay(4295000);
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    goto $bb3722;

  $bb3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5197} ___udelay(4295000);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    goto $bb3723;

  $bb3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5198} ___udelay(4295000);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    goto $bb3724;

  $bb3724:
    assume {:verifier.code 0} true;
    goto $bb3725;

  $bb3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5199} $i661 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $i662 := $eq.i32($i658, $i661);
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i662} true;
    goto $bb3726, $bb3727;

  $bb3727:
    assume !($i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb3728;

  $bb3728:
    assume {:verifier.code 0} true;
    goto $bb3732;

  $bb3732:
    assume {:verifier.code 0} true;
    goto $bb3733;

  $bb3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5200} ___udelay(4295000);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    goto $bb3734;

  $bb3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5201} ___udelay(4295000);
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    goto $bb3735;

  $bb3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5202} ___udelay(4295000);
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    goto $bb3736;

  $bb3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5203} ___udelay(4295000);
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    goto $bb3737;

  $bb3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5204} ___udelay(4295000);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    goto $bb3738;

  $bb3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5205} ___udelay(4295000);
    goto corral_source_split_14648;

  corral_source_split_14648:
    assume {:verifier.code 0} true;
    goto $bb3739;

  $bb3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5206} ___udelay(4295000);
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    goto $bb3740;

  $bb3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5207} ___udelay(4295000);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    goto $bb3741;

  $bb3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5208} ___udelay(4295000);
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    goto $bb3742;

  $bb3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5209} ___udelay(4295000);
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    goto $bb3743;

  $bb3743:
    assume {:verifier.code 0} true;
    goto $bb3744;

  $bb3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5210} $i664 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    $i665 := $eq.i32($i661, $i664);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb3745, $bb3746;

  $bb3746:
    assume !($i665 == 1);
    assume {:verifier.code 0} true;
    goto $bb3747;

  $bb3747:
    assume {:verifier.code 0} true;
    goto $bb3751;

  $bb3751:
    assume {:verifier.code 0} true;
    goto $bb3752;

  $bb3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5211} ___udelay(4295000);
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    goto $bb3753;

  $bb3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5212} ___udelay(4295000);
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    goto $bb3754;

  $bb3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5213} ___udelay(4295000);
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    goto $bb3755;

  $bb3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5214} ___udelay(4295000);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    goto $bb3756;

  $bb3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5215} ___udelay(4295000);
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    goto $bb3757;

  $bb3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5216} ___udelay(4295000);
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    goto $bb3758;

  $bb3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5217} ___udelay(4295000);
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    goto $bb3759;

  $bb3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5218} ___udelay(4295000);
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    goto $bb3760;

  $bb3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5219} ___udelay(4295000);
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    goto $bb3761;

  $bb3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5220} ___udelay(4295000);
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    goto $bb3762;

  $bb3762:
    assume {:verifier.code 0} true;
    goto $bb3763;

  $bb3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5221} $i667 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    $i668 := $eq.i32($i664, $i667);
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i668} true;
    goto $bb3764, $bb3765;

  $bb3765:
    assume !($i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb3766;

  $bb3766:
    assume {:verifier.code 0} true;
    goto $bb3770;

  $bb3770:
    assume {:verifier.code 0} true;
    goto $bb3771;

  $bb3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5222} ___udelay(4295000);
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    goto $bb3772;

  $bb3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5223} ___udelay(4295000);
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    goto $bb3773;

  $bb3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5224} ___udelay(4295000);
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    goto $bb3774;

  $bb3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5225} ___udelay(4295000);
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    goto $bb3775;

  $bb3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5226} ___udelay(4295000);
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    goto $bb3776;

  $bb3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5227} ___udelay(4295000);
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    goto $bb3777;

  $bb3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5228} ___udelay(4295000);
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    goto $bb3778;

  $bb3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5229} ___udelay(4295000);
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    goto $bb3779;

  $bb3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5230} ___udelay(4295000);
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    goto $bb3780;

  $bb3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5231} ___udelay(4295000);
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    goto $bb3781;

  $bb3781:
    assume {:verifier.code 0} true;
    goto $bb3782;

  $bb3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5232} $i670 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    $i671 := $eq.i32($i667, $i670);
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i671} true;
    goto $bb3783, $bb3784;

  $bb3784:
    assume !($i671 == 1);
    assume {:verifier.code 0} true;
    goto $bb3785;

  $bb3785:
    assume {:verifier.code 0} true;
    goto $bb3789;

  $bb3789:
    assume {:verifier.code 0} true;
    goto $bb3790;

  $bb3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5233} ___udelay(4295000);
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    goto $bb3791;

  $bb3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5234} ___udelay(4295000);
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    goto $bb3792;

  $bb3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5235} ___udelay(4295000);
    goto corral_source_split_14720;

  corral_source_split_14720:
    assume {:verifier.code 0} true;
    goto $bb3793;

  $bb3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5236} ___udelay(4295000);
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    goto $bb3794;

  $bb3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5237} ___udelay(4295000);
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    goto $bb3795;

  $bb3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5238} ___udelay(4295000);
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    goto $bb3796;

  $bb3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5239} ___udelay(4295000);
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    goto $bb3797;

  $bb3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5240} ___udelay(4295000);
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    goto $bb3798;

  $bb3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5241} ___udelay(4295000);
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    goto $bb3799;

  $bb3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5242} ___udelay(4295000);
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    goto $bb3800;

  $bb3800:
    assume {:verifier.code 0} true;
    goto $bb3801;

  $bb3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5243} $i673 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    $i674 := $eq.i32($i670, $i673);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i674} true;
    goto $bb3802, $bb3803;

  $bb3803:
    assume !($i674 == 1);
    assume {:verifier.code 0} true;
    goto $bb3804;

  $bb3804:
    assume {:verifier.code 0} true;
    goto $bb3808;

  $bb3808:
    assume {:verifier.code 0} true;
    goto $bb3809;

  $bb3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5244} ___udelay(4295000);
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    goto $bb3810;

  $bb3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5245} ___udelay(4295000);
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    goto $bb3811;

  $bb3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5246} ___udelay(4295000);
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    goto $bb3812;

  $bb3812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5247} ___udelay(4295000);
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    goto $bb3813;

  $bb3813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5248} ___udelay(4295000);
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    goto $bb3814;

  $bb3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5249} ___udelay(4295000);
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    goto $bb3815;

  $bb3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5250} ___udelay(4295000);
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    goto $bb3816;

  $bb3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5251} ___udelay(4295000);
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    goto $bb3817;

  $bb3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5252} ___udelay(4295000);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    goto $bb3818;

  $bb3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5253} ___udelay(4295000);
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    goto $bb3819;

  $bb3819:
    assume {:verifier.code 0} true;
    goto $bb3820;

  $bb3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5254} $i676 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    $i677 := $eq.i32($i673, $i676);
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i677} true;
    goto $bb3821, $bb3822;

  $bb3822:
    assume !($i677 == 1);
    assume {:verifier.code 0} true;
    goto $bb3823;

  $bb3823:
    assume {:verifier.code 0} true;
    goto $bb3827;

  $bb3827:
    assume {:verifier.code 0} true;
    goto $bb3828;

  $bb3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5255} ___udelay(4295000);
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    goto $bb3829;

  $bb3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5256} ___udelay(4295000);
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    goto $bb3830;

  $bb3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5257} ___udelay(4295000);
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    goto $bb3831;

  $bb3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5258} ___udelay(4295000);
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    goto $bb3832;

  $bb3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5259} ___udelay(4295000);
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    goto $bb3833;

  $bb3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5260} ___udelay(4295000);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    goto $bb3834;

  $bb3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5261} ___udelay(4295000);
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    goto $bb3835;

  $bb3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5262} ___udelay(4295000);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    goto $bb3836;

  $bb3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5263} ___udelay(4295000);
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    goto $bb3837;

  $bb3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5264} ___udelay(4295000);
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    goto $bb3838;

  $bb3838:
    assume {:verifier.code 0} true;
    goto $bb3839;

  $bb3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5265} $i679 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i676, $i679);
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i680} true;
    goto $bb3840, $bb3841;

  $bb3841:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb3842;

  $bb3842:
    assume {:verifier.code 0} true;
    goto $bb3846;

  $bb3846:
    assume {:verifier.code 0} true;
    goto $bb3847;

  $bb3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5266} ___udelay(4295000);
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    goto $bb3848;

  $bb3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5267} ___udelay(4295000);
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    goto $bb3849;

  $bb3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5268} ___udelay(4295000);
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    goto $bb3850;

  $bb3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5269} ___udelay(4295000);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    goto $bb3851;

  $bb3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5270} ___udelay(4295000);
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    goto $bb3852;

  $bb3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5271} ___udelay(4295000);
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    goto $bb3853;

  $bb3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5272} ___udelay(4295000);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    goto $bb3854;

  $bb3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5273} ___udelay(4295000);
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    goto $bb3855;

  $bb3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5274} ___udelay(4295000);
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    goto $bb3856;

  $bb3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5275} ___udelay(4295000);
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    goto $bb3857;

  $bb3857:
    assume {:verifier.code 0} true;
    goto $bb3858;

  $bb3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5276} $i682 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    $i683 := $eq.i32($i679, $i682);
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i683} true;
    goto $bb3859, $bb3860;

  $bb3860:
    assume !($i683 == 1);
    assume {:verifier.code 0} true;
    goto $bb3861;

  $bb3861:
    assume {:verifier.code 0} true;
    goto $bb3865;

  $bb3865:
    assume {:verifier.code 0} true;
    goto $bb3866;

  $bb3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5277} ___udelay(4295000);
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    goto $bb3867;

  $bb3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5278} ___udelay(4295000);
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    goto $bb3868;

  $bb3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5279} ___udelay(4295000);
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    goto $bb3869;

  $bb3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5280} ___udelay(4295000);
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    goto $bb3870;

  $bb3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5281} ___udelay(4295000);
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    goto $bb3871;

  $bb3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5282} ___udelay(4295000);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    goto $bb3872;

  $bb3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5283} ___udelay(4295000);
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    goto $bb3873;

  $bb3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5284} ___udelay(4295000);
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    goto $bb3874;

  $bb3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5285} ___udelay(4295000);
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    goto $bb3875;

  $bb3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5286} ___udelay(4295000);
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    goto $bb3876;

  $bb3876:
    assume {:verifier.code 0} true;
    goto $bb3877;

  $bb3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5287} $i685 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    $i686 := $eq.i32($i682, $i685);
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb3878, $bb3879;

  $bb3879:
    assume !($i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb3880;

  $bb3880:
    assume {:verifier.code 0} true;
    goto $bb3884;

  $bb3884:
    assume {:verifier.code 0} true;
    goto $bb3885;

  $bb3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5288} ___udelay(4295000);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    goto $bb3886;

  $bb3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5289} ___udelay(4295000);
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    goto $bb3887;

  $bb3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5290} ___udelay(4295000);
    goto corral_source_split_14850;

  corral_source_split_14850:
    assume {:verifier.code 0} true;
    goto $bb3888;

  $bb3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5291} ___udelay(4295000);
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    goto $bb3889;

  $bb3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5292} ___udelay(4295000);
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    goto $bb3890;

  $bb3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5293} ___udelay(4295000);
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    goto $bb3891;

  $bb3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5294} ___udelay(4295000);
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    goto $bb3892;

  $bb3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5295} ___udelay(4295000);
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    goto $bb3893;

  $bb3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5296} ___udelay(4295000);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    goto $bb3894;

  $bb3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5297} ___udelay(4295000);
    goto corral_source_split_14864;

  corral_source_split_14864:
    assume {:verifier.code 0} true;
    goto $bb3895;

  $bb3895:
    assume {:verifier.code 0} true;
    goto $bb3896;

  $bb3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5298} $i688 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $i689 := $eq.i32($i685, $i688);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i689} true;
    goto $bb3897, $bb3898;

  $bb3898:
    assume !($i689 == 1);
    assume {:verifier.code 0} true;
    goto $bb3899;

  $bb3899:
    assume {:verifier.code 0} true;
    goto $bb3903;

  $bb3903:
    assume {:verifier.code 0} true;
    goto $bb3904;

  $bb3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5299} ___udelay(4295000);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    goto $bb3905;

  $bb3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5300} ___udelay(4295000);
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    goto $bb3906;

  $bb3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5301} ___udelay(4295000);
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    goto $bb3907;

  $bb3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5302} ___udelay(4295000);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    goto $bb3908;

  $bb3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5303} ___udelay(4295000);
    goto corral_source_split_14880;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    goto $bb3909;

  $bb3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5304} ___udelay(4295000);
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    goto $bb3910;

  $bb3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5305} ___udelay(4295000);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    goto $bb3911;

  $bb3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5306} ___udelay(4295000);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    goto $bb3912;

  $bb3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5307} ___udelay(4295000);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    goto $bb3913;

  $bb3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5308} ___udelay(4295000);
    goto corral_source_split_14890;

  corral_source_split_14890:
    assume {:verifier.code 0} true;
    goto $bb3914;

  $bb3914:
    assume {:verifier.code 0} true;
    goto $bb3915;

  $bb3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5309} $i691 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $i692 := $eq.i32($i688, $i691);
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i692} true;
    goto $bb3916, $bb3917;

  $bb3917:
    assume !($i692 == 1);
    assume {:verifier.code 0} true;
    goto $bb3918;

  $bb3918:
    assume {:verifier.code 0} true;
    goto $bb3922;

  $bb3922:
    assume {:verifier.code 0} true;
    goto $bb3923;

  $bb3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5310} ___udelay(4295000);
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    goto $bb3924;

  $bb3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5311} ___udelay(4295000);
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    goto $bb3925;

  $bb3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5312} ___udelay(4295000);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    goto $bb3926;

  $bb3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5313} ___udelay(4295000);
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    goto $bb3927;

  $bb3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5314} ___udelay(4295000);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    goto $bb3928;

  $bb3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5315} ___udelay(4295000);
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    goto $bb3929;

  $bb3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5316} ___udelay(4295000);
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    goto $bb3930;

  $bb3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5317} ___udelay(4295000);
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    goto $bb3931;

  $bb3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5318} ___udelay(4295000);
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    goto $bb3932;

  $bb3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5319} ___udelay(4295000);
    goto corral_source_split_14916;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    goto $bb3933;

  $bb3933:
    assume {:verifier.code 0} true;
    goto $bb3934;

  $bb3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5320} $i694 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    $i695 := $eq.i32($i691, $i694);
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i695} true;
    goto $bb3935, $bb3936;

  $bb3936:
    assume !($i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb3937;

  $bb3937:
    assume {:verifier.code 0} true;
    goto $bb3941;

  $bb3941:
    assume {:verifier.code 0} true;
    goto $bb3942;

  $bb3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5321} ___udelay(4295000);
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    goto $bb3943;

  $bb3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5322} ___udelay(4295000);
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    goto $bb3944;

  $bb3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5323} ___udelay(4295000);
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    goto $bb3945;

  $bb3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5324} ___udelay(4295000);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    goto $bb3946;

  $bb3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5325} ___udelay(4295000);
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    goto $bb3947;

  $bb3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5326} ___udelay(4295000);
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    goto $bb3948;

  $bb3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5327} ___udelay(4295000);
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    goto $bb3949;

  $bb3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5328} ___udelay(4295000);
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    goto $bb3950;

  $bb3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5329} ___udelay(4295000);
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    goto $bb3951;

  $bb3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5330} ___udelay(4295000);
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    goto $bb3952;

  $bb3952:
    assume {:verifier.code 0} true;
    goto $bb3953;

  $bb3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5331} $i697 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    $i698 := $eq.i32($i694, $i697);
    goto corral_source_split_14945;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb3954, $bb3955;

  $bb3955:
    assume !($i698 == 1);
    assume {:verifier.code 0} true;
    goto $bb3956;

  $bb3956:
    assume {:verifier.code 0} true;
    goto $bb3960;

  $bb3960:
    assume {:verifier.code 0} true;
    goto $bb3961;

  $bb3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5332} ___udelay(4295000);
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    goto $bb3962;

  $bb3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5333} ___udelay(4295000);
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    goto $bb3963;

  $bb3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5334} ___udelay(4295000);
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    goto $bb3964;

  $bb3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5335} ___udelay(4295000);
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    goto $bb3965;

  $bb3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5336} ___udelay(4295000);
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    goto $bb3966;

  $bb3966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5337} ___udelay(4295000);
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 0} true;
    goto $bb3967;

  $bb3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5338} ___udelay(4295000);
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    goto $bb3968;

  $bb3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5339} ___udelay(4295000);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    goto $bb3969;

  $bb3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5340} ___udelay(4295000);
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    goto $bb3970;

  $bb3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5341} ___udelay(4295000);
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    goto $bb3971;

  $bb3971:
    assume {:verifier.code 0} true;
    goto $bb3972;

  $bb3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5342} $i700 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    $i701 := $eq.i32($i697, $i700);
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i701} true;
    goto $bb3973, $bb3974;

  $bb3974:
    assume !($i701 == 1);
    assume {:verifier.code 0} true;
    goto $bb3975;

  $bb3975:
    assume {:verifier.code 0} true;
    goto $bb3979;

  $bb3979:
    assume {:verifier.code 0} true;
    goto $bb3980;

  $bb3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5343} ___udelay(4295000);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    goto $bb3981;

  $bb3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5344} ___udelay(4295000);
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    goto $bb3982;

  $bb3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5345} ___udelay(4295000);
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    goto $bb3983;

  $bb3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5346} ___udelay(4295000);
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    goto $bb3984;

  $bb3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5347} ___udelay(4295000);
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    goto $bb3985;

  $bb3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5348} ___udelay(4295000);
    goto corral_source_split_14986;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    goto $bb3986;

  $bb3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5349} ___udelay(4295000);
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    goto $bb3987;

  $bb3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5350} ___udelay(4295000);
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    goto $bb3988;

  $bb3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5351} ___udelay(4295000);
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    goto $bb3989;

  $bb3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5352} ___udelay(4295000);
    goto corral_source_split_14994;

  corral_source_split_14994:
    assume {:verifier.code 0} true;
    goto $bb3990;

  $bb3990:
    assume {:verifier.code 0} true;
    goto $bb3991;

  $bb3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5353} $i703 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    $i704 := $eq.i32($i700, $i703);
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb3992, $bb3993;

  $bb3993:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb3994;

  $bb3994:
    assume {:verifier.code 0} true;
    goto $bb3998;

  $bb3998:
    assume {:verifier.code 0} true;
    goto $bb3999;

  $bb3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5354} ___udelay(4295000);
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    goto $bb4000;

  $bb4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5355} ___udelay(4295000);
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    goto $bb4001;

  $bb4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5356} ___udelay(4295000);
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    goto $bb4002;

  $bb4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5357} ___udelay(4295000);
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    goto $bb4003;

  $bb4003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5358} ___udelay(4295000);
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    goto $bb4004;

  $bb4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5359} ___udelay(4295000);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    goto $bb4005;

  $bb4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5360} ___udelay(4295000);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    goto $bb4006;

  $bb4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5361} ___udelay(4295000);
    goto corral_source_split_15016;

  corral_source_split_15016:
    assume {:verifier.code 0} true;
    goto $bb4007;

  $bb4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5362} ___udelay(4295000);
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    goto $bb4008;

  $bb4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5363} ___udelay(4295000);
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    goto $bb4009;

  $bb4009:
    assume {:verifier.code 0} true;
    goto $bb4010;

  $bb4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5364} $i706 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    $i707 := $eq.i32($i703, $i706);
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb4011, $bb4012;

  $bb4012:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb4013;

  $bb4013:
    assume {:verifier.code 0} true;
    goto $bb4017;

  $bb4017:
    assume {:verifier.code 0} true;
    goto $bb4018;

  $bb4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5365} ___udelay(4295000);
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    goto $bb4019;

  $bb4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5366} ___udelay(4295000);
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    goto $bb4020;

  $bb4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5367} ___udelay(4295000);
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    goto $bb4021;

  $bb4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5368} ___udelay(4295000);
    goto corral_source_split_15034;

  corral_source_split_15034:
    assume {:verifier.code 0} true;
    goto $bb4022;

  $bb4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5369} ___udelay(4295000);
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    goto $bb4023;

  $bb4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5370} ___udelay(4295000);
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    goto $bb4024;

  $bb4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5371} ___udelay(4295000);
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 0} true;
    goto $bb4025;

  $bb4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5372} ___udelay(4295000);
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    goto $bb4026;

  $bb4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5373} ___udelay(4295000);
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 0} true;
    goto $bb4027;

  $bb4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5374} ___udelay(4295000);
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    goto $bb4028;

  $bb4028:
    assume {:verifier.code 0} true;
    goto $bb4029;

  $bb4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5375} $i709 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $i710 := $eq.i32($i706, $i709);
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i710} true;
    goto $bb4030, $bb4031;

  $bb4031:
    assume !($i710 == 1);
    assume {:verifier.code 0} true;
    goto $bb4032;

  $bb4032:
    assume {:verifier.code 0} true;
    goto $bb4036;

  $bb4036:
    assume {:verifier.code 0} true;
    goto $bb4037;

  $bb4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5376} ___udelay(4295000);
    goto corral_source_split_15054;

  corral_source_split_15054:
    assume {:verifier.code 0} true;
    goto $bb4038;

  $bb4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5377} ___udelay(4295000);
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    goto $bb4039;

  $bb4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5378} ___udelay(4295000);
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    goto $bb4040;

  $bb4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5379} ___udelay(4295000);
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    goto $bb4041;

  $bb4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5380} ___udelay(4295000);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    goto $bb4042;

  $bb4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5381} ___udelay(4295000);
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 0} true;
    goto $bb4043;

  $bb4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5382} ___udelay(4295000);
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    goto $bb4044;

  $bb4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5383} ___udelay(4295000);
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 0} true;
    goto $bb4045;

  $bb4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5384} ___udelay(4295000);
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    goto $bb4046;

  $bb4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5385} ___udelay(4295000);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    goto $bb4047;

  $bb4047:
    assume {:verifier.code 0} true;
    goto $bb4048;

  $bb4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5386} $i712 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    $i713 := $eq.i32($i709, $i712);
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i713} true;
    goto $bb4049, $bb4050;

  $bb4050:
    assume !($i713 == 1);
    assume {:verifier.code 0} true;
    goto $bb4051;

  $bb4051:
    assume {:verifier.code 0} true;
    goto $bb4055;

  $bb4055:
    assume {:verifier.code 0} true;
    goto $bb4056;

  $bb4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5387} ___udelay(4295000);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    goto $bb4057;

  $bb4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5388} ___udelay(4295000);
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    goto $bb4058;

  $bb4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5389} ___udelay(4295000);
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    goto $bb4059;

  $bb4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5390} ___udelay(4295000);
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    goto $bb4060;

  $bb4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5391} ___udelay(4295000);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    goto $bb4061;

  $bb4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5392} ___udelay(4295000);
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    goto $bb4062;

  $bb4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5393} ___udelay(4295000);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    goto $bb4063;

  $bb4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5394} ___udelay(4295000);
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    goto $bb4064;

  $bb4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5395} ___udelay(4295000);
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 0} true;
    goto $bb4065;

  $bb4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5396} ___udelay(4295000);
    goto corral_source_split_15098;

  corral_source_split_15098:
    assume {:verifier.code 0} true;
    goto $bb4066;

  $bb4066:
    assume {:verifier.code 0} true;
    goto $bb4067;

  $bb4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5397} $i715 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    $i716 := $eq.i32($i712, $i715);
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i716} true;
    goto $bb4068, $bb4069;

  $bb4069:
    assume !($i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb4070;

  $bb4070:
    assume {:verifier.code 0} true;
    goto $bb4074;

  $bb4074:
    assume {:verifier.code 0} true;
    goto $bb4075;

  $bb4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5398} ___udelay(4295000);
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    goto $bb4076;

  $bb4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5399} ___udelay(4295000);
    goto corral_source_split_15108;

  corral_source_split_15108:
    assume {:verifier.code 0} true;
    goto $bb4077;

  $bb4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5400} ___udelay(4295000);
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    goto $bb4078;

  $bb4078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5401} ___udelay(4295000);
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    goto $bb4079;

  $bb4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5402} ___udelay(4295000);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    goto $bb4080;

  $bb4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5403} ___udelay(4295000);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    goto $bb4081;

  $bb4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5404} ___udelay(4295000);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    goto $bb4082;

  $bb4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5405} ___udelay(4295000);
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    goto $bb4083;

  $bb4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5406} ___udelay(4295000);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    goto $bb4084;

  $bb4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5407} ___udelay(4295000);
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 0} true;
    goto $bb4085;

  $bb4085:
    assume {:verifier.code 0} true;
    goto $bb4086;

  $bb4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5408} $i718 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    $i719 := $eq.i32($i715, $i718);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i719} true;
    goto $bb4087, $bb4088;

  $bb4088:
    assume !($i719 == 1);
    assume {:verifier.code 0} true;
    goto $bb4089;

  $bb4089:
    assume {:verifier.code 0} true;
    goto $bb4093;

  $bb4093:
    assume {:verifier.code 0} true;
    goto $bb4094;

  $bb4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5409} ___udelay(4295000);
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    goto $bb4095;

  $bb4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5410} ___udelay(4295000);
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    goto $bb4096;

  $bb4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5411} ___udelay(4295000);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    goto $bb4097;

  $bb4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5412} ___udelay(4295000);
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    goto $bb4098;

  $bb4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5413} ___udelay(4295000);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    goto $bb4099;

  $bb4099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5414} ___udelay(4295000);
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    goto $bb4100;

  $bb4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5415} ___udelay(4295000);
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    goto $bb4101;

  $bb4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5416} ___udelay(4295000);
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    goto $bb4102;

  $bb4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5417} ___udelay(4295000);
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    goto $bb4103;

  $bb4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5418} ___udelay(4295000);
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    goto $bb4104;

  $bb4104:
    assume {:verifier.code 0} true;
    goto $bb4105;

  $bb4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5419} $i721 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15152;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    $i722 := $eq.i32($i718, $i721);
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i722} true;
    goto $bb4106, $bb4107;

  $bb4107:
    assume !($i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb4108;

  $bb4108:
    assume {:verifier.code 0} true;
    goto $bb4112;

  $bb4112:
    assume {:verifier.code 0} true;
    goto $bb4113;

  $bb4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5420} ___udelay(4295000);
    goto corral_source_split_15158;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    goto $bb4114;

  $bb4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5421} ___udelay(4295000);
    goto corral_source_split_15160;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    goto $bb4115;

  $bb4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5422} ___udelay(4295000);
    goto corral_source_split_15162;

  corral_source_split_15162:
    assume {:verifier.code 0} true;
    goto $bb4116;

  $bb4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5423} ___udelay(4295000);
    goto corral_source_split_15164;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    goto $bb4117;

  $bb4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5424} ___udelay(4295000);
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    goto $bb4118;

  $bb4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5425} ___udelay(4295000);
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    goto $bb4119;

  $bb4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5426} ___udelay(4295000);
    goto corral_source_split_15170;

  corral_source_split_15170:
    assume {:verifier.code 0} true;
    goto $bb4120;

  $bb4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5427} ___udelay(4295000);
    goto corral_source_split_15172;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    goto $bb4121;

  $bb4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5428} ___udelay(4295000);
    goto corral_source_split_15174;

  corral_source_split_15174:
    assume {:verifier.code 0} true;
    goto $bb4122;

  $bb4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5429} ___udelay(4295000);
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    goto $bb4123;

  $bb4123:
    assume {:verifier.code 0} true;
    goto $bb4124;

  $bb4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5430} $i724 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15178;

  corral_source_split_15178:
    assume {:verifier.code 0} true;
    $i725 := $eq.i32($i721, $i724);
    goto corral_source_split_15179;

  corral_source_split_15179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i725} true;
    goto $bb4125, $bb4126;

  $bb4126:
    assume !($i725 == 1);
    assume {:verifier.code 0} true;
    goto $bb4127;

  $bb4127:
    assume {:verifier.code 0} true;
    goto $bb4131;

  $bb4131:
    assume {:verifier.code 0} true;
    goto $bb4132;

  $bb4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5431} ___udelay(4295000);
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    goto $bb4133;

  $bb4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5432} ___udelay(4295000);
    goto corral_source_split_15186;

  corral_source_split_15186:
    assume {:verifier.code 0} true;
    goto $bb4134;

  $bb4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5433} ___udelay(4295000);
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    goto $bb4135;

  $bb4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5434} ___udelay(4295000);
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    goto $bb4136;

  $bb4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5435} ___udelay(4295000);
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    goto $bb4137;

  $bb4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5436} ___udelay(4295000);
    goto corral_source_split_15194;

  corral_source_split_15194:
    assume {:verifier.code 0} true;
    goto $bb4138;

  $bb4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5437} ___udelay(4295000);
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    goto $bb4139;

  $bb4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5438} ___udelay(4295000);
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    goto $bb4140;

  $bb4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5439} ___udelay(4295000);
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    goto $bb4141;

  $bb4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5440} ___udelay(4295000);
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    goto $bb4142;

  $bb4142:
    assume {:verifier.code 0} true;
    goto $bb4143;

  $bb4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5441} $i727 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    $i728 := $eq.i32($i724, $i727);
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb4144, $bb4145;

  $bb4145:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb4146;

  $bb4146:
    assume {:verifier.code 0} true;
    goto $bb4150;

  $bb4150:
    assume {:verifier.code 0} true;
    goto $bb4151;

  $bb4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5442} ___udelay(4295000);
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    goto $bb4152;

  $bb4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5443} ___udelay(4295000);
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    goto $bb4153;

  $bb4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5444} ___udelay(4295000);
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    goto $bb4154;

  $bb4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5445} ___udelay(4295000);
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    goto $bb4155;

  $bb4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5446} ___udelay(4295000);
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    goto $bb4156;

  $bb4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5447} ___udelay(4295000);
    goto corral_source_split_15220;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    goto $bb4157;

  $bb4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5448} ___udelay(4295000);
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    goto $bb4158;

  $bb4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5449} ___udelay(4295000);
    goto corral_source_split_15224;

  corral_source_split_15224:
    assume {:verifier.code 0} true;
    goto $bb4159;

  $bb4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5450} ___udelay(4295000);
    goto corral_source_split_15226;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    goto $bb4160;

  $bb4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5451} ___udelay(4295000);
    goto corral_source_split_15228;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    goto $bb4161;

  $bb4161:
    assume {:verifier.code 0} true;
    goto $bb4162;

  $bb4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5452} $i730 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    $i731 := $eq.i32($i727, $i730);
    goto corral_source_split_15231;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb4163, $bb4164;

  $bb4164:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb4165;

  $bb4165:
    assume {:verifier.code 0} true;
    goto $bb4169;

  $bb4169:
    assume {:verifier.code 0} true;
    goto $bb4170;

  $bb4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5453} ___udelay(4295000);
    goto corral_source_split_15236;

  corral_source_split_15236:
    assume {:verifier.code 0} true;
    goto $bb4171;

  $bb4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5454} ___udelay(4295000);
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    goto $bb4172;

  $bb4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5455} ___udelay(4295000);
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    goto $bb4173;

  $bb4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5456} ___udelay(4295000);
    goto corral_source_split_15242;

  corral_source_split_15242:
    assume {:verifier.code 0} true;
    goto $bb4174;

  $bb4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5457} ___udelay(4295000);
    goto corral_source_split_15244;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    goto $bb4175;

  $bb4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5458} ___udelay(4295000);
    goto corral_source_split_15246;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    goto $bb4176;

  $bb4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5459} ___udelay(4295000);
    goto corral_source_split_15248;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    goto $bb4177;

  $bb4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5460} ___udelay(4295000);
    goto corral_source_split_15250;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    goto $bb4178;

  $bb4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5461} ___udelay(4295000);
    goto corral_source_split_15252;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    goto $bb4179;

  $bb4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5462} ___udelay(4295000);
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    goto $bb4180;

  $bb4180:
    assume {:verifier.code 0} true;
    goto $bb4181;

  $bb4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5463} $i733 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15256;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    $i734 := $eq.i32($i730, $i733);
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i734} true;
    goto $bb4182, $bb4183;

  $bb4183:
    assume !($i734 == 1);
    assume {:verifier.code 0} true;
    goto $bb4184;

  $bb4184:
    assume {:verifier.code 0} true;
    goto $bb4188;

  $bb4188:
    assume {:verifier.code 0} true;
    goto $bb4189;

  $bb4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5464} ___udelay(4295000);
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    goto $bb4190;

  $bb4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5465} ___udelay(4295000);
    goto corral_source_split_15264;

  corral_source_split_15264:
    assume {:verifier.code 0} true;
    goto $bb4191;

  $bb4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5466} ___udelay(4295000);
    goto corral_source_split_15266;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    goto $bb4192;

  $bb4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5467} ___udelay(4295000);
    goto corral_source_split_15268;

  corral_source_split_15268:
    assume {:verifier.code 0} true;
    goto $bb4193;

  $bb4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5468} ___udelay(4295000);
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    goto $bb4194;

  $bb4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5469} ___udelay(4295000);
    goto corral_source_split_15272;

  corral_source_split_15272:
    assume {:verifier.code 0} true;
    goto $bb4195;

  $bb4195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5470} ___udelay(4295000);
    goto corral_source_split_15274;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    goto $bb4196;

  $bb4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5471} ___udelay(4295000);
    goto corral_source_split_15276;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    goto $bb4197;

  $bb4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5472} ___udelay(4295000);
    goto corral_source_split_15278;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    goto $bb4198;

  $bb4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5473} ___udelay(4295000);
    goto corral_source_split_15280;

  corral_source_split_15280:
    assume {:verifier.code 0} true;
    goto $bb4199;

  $bb4199:
    assume {:verifier.code 0} true;
    goto $bb4200;

  $bb4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5474} $i736 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15282;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    $i737 := $eq.i32($i733, $i736);
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i737} true;
    goto $bb4201, $bb4202;

  $bb4202:
    assume !($i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb4203;

  $bb4203:
    assume {:verifier.code 0} true;
    goto $bb4207;

  $bb4207:
    assume {:verifier.code 0} true;
    goto $bb4208;

  $bb4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5475} ___udelay(4295000);
    goto corral_source_split_15288;

  corral_source_split_15288:
    assume {:verifier.code 0} true;
    goto $bb4209;

  $bb4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5476} ___udelay(4295000);
    goto corral_source_split_15290;

  corral_source_split_15290:
    assume {:verifier.code 0} true;
    goto $bb4210;

  $bb4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5477} ___udelay(4295000);
    goto corral_source_split_15292;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    goto $bb4211;

  $bb4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5478} ___udelay(4295000);
    goto corral_source_split_15294;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    goto $bb4212;

  $bb4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5479} ___udelay(4295000);
    goto corral_source_split_15296;

  corral_source_split_15296:
    assume {:verifier.code 0} true;
    goto $bb4213;

  $bb4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5480} ___udelay(4295000);
    goto corral_source_split_15298;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    goto $bb4214;

  $bb4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5481} ___udelay(4295000);
    goto corral_source_split_15300;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    goto $bb4215;

  $bb4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5482} ___udelay(4295000);
    goto corral_source_split_15302;

  corral_source_split_15302:
    assume {:verifier.code 0} true;
    goto $bb4216;

  $bb4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5483} ___udelay(4295000);
    goto corral_source_split_15304;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    goto $bb4217;

  $bb4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5484} ___udelay(4295000);
    goto corral_source_split_15306;

  corral_source_split_15306:
    assume {:verifier.code 0} true;
    goto $bb4218;

  $bb4218:
    assume {:verifier.code 0} true;
    goto $bb4219;

  $bb4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5485} $i739 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15308;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $i740 := $eq.i32($i736, $i739);
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i740} true;
    goto $bb4220, $bb4221;

  $bb4221:
    assume !($i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb4222;

  $bb4222:
    assume {:verifier.code 0} true;
    goto $bb4226;

  $bb4226:
    assume {:verifier.code 0} true;
    goto $bb4227;

  $bb4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5486} ___udelay(4295000);
    goto corral_source_split_15314;

  corral_source_split_15314:
    assume {:verifier.code 0} true;
    goto $bb4228;

  $bb4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5487} ___udelay(4295000);
    goto corral_source_split_15316;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    goto $bb4229;

  $bb4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5488} ___udelay(4295000);
    goto corral_source_split_15318;

  corral_source_split_15318:
    assume {:verifier.code 0} true;
    goto $bb4230;

  $bb4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5489} ___udelay(4295000);
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    goto $bb4231;

  $bb4231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5490} ___udelay(4295000);
    goto corral_source_split_15322;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    goto $bb4232;

  $bb4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5491} ___udelay(4295000);
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    goto $bb4233;

  $bb4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5492} ___udelay(4295000);
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    goto $bb4234;

  $bb4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5493} ___udelay(4295000);
    goto corral_source_split_15328;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    goto $bb4235;

  $bb4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5494} ___udelay(4295000);
    goto corral_source_split_15330;

  corral_source_split_15330:
    assume {:verifier.code 0} true;
    goto $bb4236;

  $bb4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5495} ___udelay(4295000);
    goto corral_source_split_15332;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    goto $bb4237;

  $bb4237:
    assume {:verifier.code 0} true;
    goto $bb4238;

  $bb4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5496} $i742 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15334;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    $i743 := $eq.i32($i739, $i742);
    goto corral_source_split_15335;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i743} true;
    goto $bb4239, $bb4240;

  $bb4240:
    assume !($i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb4241;

  $bb4241:
    assume {:verifier.code 0} true;
    goto $bb4245;

  $bb4245:
    assume {:verifier.code 0} true;
    goto $bb4246;

  $bb4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5497} ___udelay(4295000);
    goto corral_source_split_15340;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    goto $bb4247;

  $bb4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5498} ___udelay(4295000);
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    goto $bb4248;

  $bb4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5499} ___udelay(4295000);
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    goto $bb4249;

  $bb4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5500} ___udelay(4295000);
    goto corral_source_split_15346;

  corral_source_split_15346:
    assume {:verifier.code 0} true;
    goto $bb4250;

  $bb4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5501} ___udelay(4295000);
    goto corral_source_split_15348;

  corral_source_split_15348:
    assume {:verifier.code 0} true;
    goto $bb4251;

  $bb4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5502} ___udelay(4295000);
    goto corral_source_split_15350;

  corral_source_split_15350:
    assume {:verifier.code 0} true;
    goto $bb4252;

  $bb4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5503} ___udelay(4295000);
    goto corral_source_split_15352;

  corral_source_split_15352:
    assume {:verifier.code 0} true;
    goto $bb4253;

  $bb4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5504} ___udelay(4295000);
    goto corral_source_split_15354;

  corral_source_split_15354:
    assume {:verifier.code 0} true;
    goto $bb4254;

  $bb4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5505} ___udelay(4295000);
    goto corral_source_split_15356;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    goto $bb4255;

  $bb4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5506} ___udelay(4295000);
    goto corral_source_split_15358;

  corral_source_split_15358:
    assume {:verifier.code 0} true;
    goto $bb4256;

  $bb4256:
    assume {:verifier.code 0} true;
    goto $bb4257;

  $bb4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5507} $i745 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15360;

  corral_source_split_15360:
    assume {:verifier.code 0} true;
    $i746 := $eq.i32($i742, $i745);
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb4258, $bb4259;

  $bb4259:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb4260;

  $bb4260:
    assume {:verifier.code 0} true;
    goto $bb4264;

  $bb4264:
    assume {:verifier.code 0} true;
    goto $bb4265;

  $bb4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5508} ___udelay(4295000);
    goto corral_source_split_15366;

  corral_source_split_15366:
    assume {:verifier.code 0} true;
    goto $bb4266;

  $bb4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5509} ___udelay(4295000);
    goto corral_source_split_15368;

  corral_source_split_15368:
    assume {:verifier.code 0} true;
    goto $bb4267;

  $bb4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5510} ___udelay(4295000);
    goto corral_source_split_15370;

  corral_source_split_15370:
    assume {:verifier.code 0} true;
    goto $bb4268;

  $bb4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5511} ___udelay(4295000);
    goto corral_source_split_15372;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    goto $bb4269;

  $bb4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5512} ___udelay(4295000);
    goto corral_source_split_15374;

  corral_source_split_15374:
    assume {:verifier.code 0} true;
    goto $bb4270;

  $bb4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5513} ___udelay(4295000);
    goto corral_source_split_15376;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    goto $bb4271;

  $bb4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5514} ___udelay(4295000);
    goto corral_source_split_15378;

  corral_source_split_15378:
    assume {:verifier.code 0} true;
    goto $bb4272;

  $bb4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5515} ___udelay(4295000);
    goto corral_source_split_15380;

  corral_source_split_15380:
    assume {:verifier.code 0} true;
    goto $bb4273;

  $bb4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5516} ___udelay(4295000);
    goto corral_source_split_15382;

  corral_source_split_15382:
    assume {:verifier.code 0} true;
    goto $bb4274;

  $bb4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5517} ___udelay(4295000);
    goto corral_source_split_15384;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    goto $bb4275;

  $bb4275:
    assume {:verifier.code 0} true;
    goto $bb4276;

  $bb4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5518} $i748 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15386;

  corral_source_split_15386:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i745, $i748);
    goto corral_source_split_15387;

  corral_source_split_15387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb4277, $bb4278;

  $bb4278:
    assume !($i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb4279;

  $bb4279:
    assume {:verifier.code 0} true;
    goto $bb4283;

  $bb4283:
    assume {:verifier.code 0} true;
    goto $bb4284;

  $bb4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5519} ___udelay(4295000);
    goto corral_source_split_15392;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    goto $bb4285;

  $bb4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5520} ___udelay(4295000);
    goto corral_source_split_15394;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    goto $bb4286;

  $bb4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5521} ___udelay(4295000);
    goto corral_source_split_15396;

  corral_source_split_15396:
    assume {:verifier.code 0} true;
    goto $bb4287;

  $bb4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5522} ___udelay(4295000);
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    goto $bb4288;

  $bb4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5523} ___udelay(4295000);
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    goto $bb4289;

  $bb4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5524} ___udelay(4295000);
    goto corral_source_split_15402;

  corral_source_split_15402:
    assume {:verifier.code 0} true;
    goto $bb4290;

  $bb4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5525} ___udelay(4295000);
    goto corral_source_split_15404;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    goto $bb4291;

  $bb4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5526} ___udelay(4295000);
    goto corral_source_split_15406;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    goto $bb4292;

  $bb4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5527} ___udelay(4295000);
    goto corral_source_split_15408;

  corral_source_split_15408:
    assume {:verifier.code 0} true;
    goto $bb4293;

  $bb4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5528} ___udelay(4295000);
    goto corral_source_split_15410;

  corral_source_split_15410:
    assume {:verifier.code 0} true;
    goto $bb4294;

  $bb4294:
    assume {:verifier.code 0} true;
    goto $bb4295;

  $bb4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5529} $i751 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15412;

  corral_source_split_15412:
    assume {:verifier.code 0} true;
    $i752 := $eq.i32($i748, $i751);
    goto corral_source_split_15413;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i752} true;
    goto $bb4296, $bb4297;

  $bb4297:
    assume !($i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb4298;

  $bb4298:
    assume {:verifier.code 0} true;
    goto $bb4302;

  $bb4302:
    assume {:verifier.code 0} true;
    goto $bb4303;

  $bb4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5530} ___udelay(4295000);
    goto corral_source_split_15418;

  corral_source_split_15418:
    assume {:verifier.code 0} true;
    goto $bb4304;

  $bb4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5531} ___udelay(4295000);
    goto corral_source_split_15420;

  corral_source_split_15420:
    assume {:verifier.code 0} true;
    goto $bb4305;

  $bb4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5532} ___udelay(4295000);
    goto corral_source_split_15422;

  corral_source_split_15422:
    assume {:verifier.code 0} true;
    goto $bb4306;

  $bb4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5533} ___udelay(4295000);
    goto corral_source_split_15424;

  corral_source_split_15424:
    assume {:verifier.code 0} true;
    goto $bb4307;

  $bb4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5534} ___udelay(4295000);
    goto corral_source_split_15426;

  corral_source_split_15426:
    assume {:verifier.code 0} true;
    goto $bb4308;

  $bb4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5535} ___udelay(4295000);
    goto corral_source_split_15428;

  corral_source_split_15428:
    assume {:verifier.code 0} true;
    goto $bb4309;

  $bb4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5536} ___udelay(4295000);
    goto corral_source_split_15430;

  corral_source_split_15430:
    assume {:verifier.code 0} true;
    goto $bb4310;

  $bb4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5537} ___udelay(4295000);
    goto corral_source_split_15432;

  corral_source_split_15432:
    assume {:verifier.code 0} true;
    goto $bb4311;

  $bb4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5538} ___udelay(4295000);
    goto corral_source_split_15434;

  corral_source_split_15434:
    assume {:verifier.code 0} true;
    goto $bb4312;

  $bb4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5539} ___udelay(4295000);
    goto corral_source_split_15436;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    goto $bb4313;

  $bb4313:
    assume {:verifier.code 0} true;
    goto $bb4314;

  $bb4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5540} $i754 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15438;

  corral_source_split_15438:
    assume {:verifier.code 0} true;
    $i755 := $eq.i32($i751, $i754);
    goto corral_source_split_15439;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i755} true;
    goto $bb4315, $bb4316;

  $bb4316:
    assume !($i755 == 1);
    assume {:verifier.code 0} true;
    goto $bb4317;

  $bb4317:
    assume {:verifier.code 0} true;
    goto $bb4321;

  $bb4321:
    assume {:verifier.code 0} true;
    goto $bb4322;

  $bb4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5541} ___udelay(4295000);
    goto corral_source_split_15444;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    goto $bb4323;

  $bb4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5542} ___udelay(4295000);
    goto corral_source_split_15446;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    goto $bb4324;

  $bb4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5543} ___udelay(4295000);
    goto corral_source_split_15448;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    goto $bb4325;

  $bb4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5544} ___udelay(4295000);
    goto corral_source_split_15450;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    goto $bb4326;

  $bb4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5545} ___udelay(4295000);
    goto corral_source_split_15452;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    goto $bb4327;

  $bb4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5546} ___udelay(4295000);
    goto corral_source_split_15454;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    goto $bb4328;

  $bb4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5547} ___udelay(4295000);
    goto corral_source_split_15456;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    goto $bb4329;

  $bb4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5548} ___udelay(4295000);
    goto corral_source_split_15458;

  corral_source_split_15458:
    assume {:verifier.code 0} true;
    goto $bb4330;

  $bb4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5549} ___udelay(4295000);
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    goto $bb4331;

  $bb4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5550} ___udelay(4295000);
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    goto $bb4332;

  $bb4332:
    assume {:verifier.code 0} true;
    goto $bb4333;

  $bb4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5551} $i757 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15464;

  corral_source_split_15464:
    assume {:verifier.code 0} true;
    $i758 := $eq.i32($i754, $i757);
    goto corral_source_split_15465;

  corral_source_split_15465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i758} true;
    goto $bb4334, $bb4335;

  $bb4335:
    assume !($i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb4336;

  $bb4336:
    assume {:verifier.code 0} true;
    goto $bb4340;

  $bb4340:
    assume {:verifier.code 0} true;
    goto $bb4341;

  $bb4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5552} ___udelay(4295000);
    goto corral_source_split_15470;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    goto $bb4342;

  $bb4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5553} ___udelay(4295000);
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    goto $bb4343;

  $bb4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5554} ___udelay(4295000);
    goto corral_source_split_15474;

  corral_source_split_15474:
    assume {:verifier.code 0} true;
    goto $bb4344;

  $bb4344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5555} ___udelay(4295000);
    goto corral_source_split_15476;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    goto $bb4345;

  $bb4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5556} ___udelay(4295000);
    goto corral_source_split_15478;

  corral_source_split_15478:
    assume {:verifier.code 0} true;
    goto $bb4346;

  $bb4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5557} ___udelay(4295000);
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    goto $bb4347;

  $bb4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5558} ___udelay(4295000);
    goto corral_source_split_15482;

  corral_source_split_15482:
    assume {:verifier.code 0} true;
    goto $bb4348;

  $bb4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5559} ___udelay(4295000);
    goto corral_source_split_15484;

  corral_source_split_15484:
    assume {:verifier.code 0} true;
    goto $bb4349;

  $bb4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5560} ___udelay(4295000);
    goto corral_source_split_15486;

  corral_source_split_15486:
    assume {:verifier.code 0} true;
    goto $bb4350;

  $bb4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5561} ___udelay(4295000);
    goto corral_source_split_15488;

  corral_source_split_15488:
    assume {:verifier.code 0} true;
    goto $bb4351;

  $bb4351:
    assume {:verifier.code 0} true;
    goto $bb4352;

  $bb4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5562} $i760 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15490;

  corral_source_split_15490:
    assume {:verifier.code 0} true;
    $i761 := $eq.i32($i757, $i760);
    goto corral_source_split_15491;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i761} true;
    goto $bb4353, $bb4354;

  $bb4354:
    assume !($i761 == 1);
    assume {:verifier.code 0} true;
    goto $bb4355;

  $bb4355:
    assume {:verifier.code 0} true;
    goto $bb4359;

  $bb4359:
    assume {:verifier.code 0} true;
    goto $bb4360;

  $bb4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5563} ___udelay(4295000);
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    goto $bb4361;

  $bb4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5564} ___udelay(4295000);
    goto corral_source_split_15498;

  corral_source_split_15498:
    assume {:verifier.code 0} true;
    goto $bb4362;

  $bb4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5565} ___udelay(4295000);
    goto corral_source_split_15500;

  corral_source_split_15500:
    assume {:verifier.code 0} true;
    goto $bb4363;

  $bb4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5566} ___udelay(4295000);
    goto corral_source_split_15502;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    goto $bb4364;

  $bb4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5567} ___udelay(4295000);
    goto corral_source_split_15504;

  corral_source_split_15504:
    assume {:verifier.code 0} true;
    goto $bb4365;

  $bb4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5568} ___udelay(4295000);
    goto corral_source_split_15506;

  corral_source_split_15506:
    assume {:verifier.code 0} true;
    goto $bb4366;

  $bb4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5569} ___udelay(4295000);
    goto corral_source_split_15508;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    goto $bb4367;

  $bb4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5570} ___udelay(4295000);
    goto corral_source_split_15510;

  corral_source_split_15510:
    assume {:verifier.code 0} true;
    goto $bb4368;

  $bb4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5571} ___udelay(4295000);
    goto corral_source_split_15512;

  corral_source_split_15512:
    assume {:verifier.code 0} true;
    goto $bb4369;

  $bb4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5572} ___udelay(4295000);
    goto corral_source_split_15514;

  corral_source_split_15514:
    assume {:verifier.code 0} true;
    goto $bb4370;

  $bb4370:
    assume {:verifier.code 0} true;
    goto $bb4371;

  $bb4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5573} $i763 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15516;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    $i764 := $eq.i32($i760, $i763);
    goto corral_source_split_15517;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i764} true;
    goto $bb4372, $bb4373;

  $bb4373:
    assume !($i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb4374;

  $bb4374:
    assume {:verifier.code 0} true;
    goto $bb4378;

  $bb4378:
    assume {:verifier.code 0} true;
    goto $bb4379;

  $bb4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5574} ___udelay(4295000);
    goto corral_source_split_15522;

  corral_source_split_15522:
    assume {:verifier.code 0} true;
    goto $bb4380;

  $bb4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5575} ___udelay(4295000);
    goto corral_source_split_15524;

  corral_source_split_15524:
    assume {:verifier.code 0} true;
    goto $bb4381;

  $bb4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5576} ___udelay(4295000);
    goto corral_source_split_15526;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    goto $bb4382;

  $bb4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5577} ___udelay(4295000);
    goto corral_source_split_15528;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    goto $bb4383;

  $bb4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5578} ___udelay(4295000);
    goto corral_source_split_15530;

  corral_source_split_15530:
    assume {:verifier.code 0} true;
    goto $bb4384;

  $bb4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5579} ___udelay(4295000);
    goto corral_source_split_15532;

  corral_source_split_15532:
    assume {:verifier.code 0} true;
    goto $bb4385;

  $bb4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5580} ___udelay(4295000);
    goto corral_source_split_15534;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    goto $bb4386;

  $bb4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5581} ___udelay(4295000);
    goto corral_source_split_15536;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    goto $bb4387;

  $bb4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5582} ___udelay(4295000);
    goto corral_source_split_15538;

  corral_source_split_15538:
    assume {:verifier.code 0} true;
    goto $bb4388;

  $bb4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5583} ___udelay(4295000);
    goto corral_source_split_15540;

  corral_source_split_15540:
    assume {:verifier.code 0} true;
    goto $bb4389;

  $bb4389:
    assume {:verifier.code 0} true;
    goto $bb4390;

  $bb4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5584} $i766 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15542;

  corral_source_split_15542:
    assume {:verifier.code 0} true;
    $i767 := $eq.i32($i763, $i766);
    goto corral_source_split_15543;

  corral_source_split_15543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i767} true;
    goto $bb4391, $bb4392;

  $bb4392:
    assume !($i767 == 1);
    assume {:verifier.code 0} true;
    goto $bb4393;

  $bb4393:
    assume {:verifier.code 0} true;
    goto $bb4397;

  $bb4397:
    assume {:verifier.code 0} true;
    goto $bb4398;

  $bb4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5585} ___udelay(4295000);
    goto corral_source_split_15548;

  corral_source_split_15548:
    assume {:verifier.code 0} true;
    goto $bb4399;

  $bb4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5586} ___udelay(4295000);
    goto corral_source_split_15550;

  corral_source_split_15550:
    assume {:verifier.code 0} true;
    goto $bb4400;

  $bb4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5587} ___udelay(4295000);
    goto corral_source_split_15552;

  corral_source_split_15552:
    assume {:verifier.code 0} true;
    goto $bb4401;

  $bb4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5588} ___udelay(4295000);
    goto corral_source_split_15554;

  corral_source_split_15554:
    assume {:verifier.code 0} true;
    goto $bb4402;

  $bb4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5589} ___udelay(4295000);
    goto corral_source_split_15556;

  corral_source_split_15556:
    assume {:verifier.code 0} true;
    goto $bb4403;

  $bb4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5590} ___udelay(4295000);
    goto corral_source_split_15558;

  corral_source_split_15558:
    assume {:verifier.code 0} true;
    goto $bb4404;

  $bb4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5591} ___udelay(4295000);
    goto corral_source_split_15560;

  corral_source_split_15560:
    assume {:verifier.code 0} true;
    goto $bb4405;

  $bb4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5592} ___udelay(4295000);
    goto corral_source_split_15562;

  corral_source_split_15562:
    assume {:verifier.code 0} true;
    goto $bb4406;

  $bb4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5593} ___udelay(4295000);
    goto corral_source_split_15564;

  corral_source_split_15564:
    assume {:verifier.code 0} true;
    goto $bb4407;

  $bb4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5594} ___udelay(4295000);
    goto corral_source_split_15566;

  corral_source_split_15566:
    assume {:verifier.code 0} true;
    goto $bb4408;

  $bb4408:
    assume {:verifier.code 0} true;
    goto $bb4409;

  $bb4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5595} $i769 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15568;

  corral_source_split_15568:
    assume {:verifier.code 0} true;
    $i770 := $eq.i32($i766, $i769);
    goto corral_source_split_15569;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i770} true;
    goto $bb4410, $bb4411;

  $bb4411:
    assume !($i770 == 1);
    assume {:verifier.code 0} true;
    goto $bb4412;

  $bb4412:
    assume {:verifier.code 0} true;
    goto $bb4416;

  $bb4416:
    assume {:verifier.code 0} true;
    goto $bb4417;

  $bb4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5596} ___udelay(4295000);
    goto corral_source_split_15574;

  corral_source_split_15574:
    assume {:verifier.code 0} true;
    goto $bb4418;

  $bb4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5597} ___udelay(4295000);
    goto corral_source_split_15576;

  corral_source_split_15576:
    assume {:verifier.code 0} true;
    goto $bb4419;

  $bb4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5598} ___udelay(4295000);
    goto corral_source_split_15578;

  corral_source_split_15578:
    assume {:verifier.code 0} true;
    goto $bb4420;

  $bb4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5599} ___udelay(4295000);
    goto corral_source_split_15580;

  corral_source_split_15580:
    assume {:verifier.code 0} true;
    goto $bb4421;

  $bb4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5600} ___udelay(4295000);
    goto corral_source_split_15582;

  corral_source_split_15582:
    assume {:verifier.code 0} true;
    goto $bb4422;

  $bb4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5601} ___udelay(4295000);
    goto corral_source_split_15584;

  corral_source_split_15584:
    assume {:verifier.code 0} true;
    goto $bb4423;

  $bb4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5602} ___udelay(4295000);
    goto corral_source_split_15586;

  corral_source_split_15586:
    assume {:verifier.code 0} true;
    goto $bb4424;

  $bb4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5603} ___udelay(4295000);
    goto corral_source_split_15588;

  corral_source_split_15588:
    assume {:verifier.code 0} true;
    goto $bb4425;

  $bb4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5604} ___udelay(4295000);
    goto corral_source_split_15590;

  corral_source_split_15590:
    assume {:verifier.code 0} true;
    goto $bb4426;

  $bb4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5605} ___udelay(4295000);
    goto corral_source_split_15592;

  corral_source_split_15592:
    assume {:verifier.code 0} true;
    goto $bb4427;

  $bb4427:
    assume {:verifier.code 0} true;
    goto $bb4428;

  $bb4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5606} $i772 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15594;

  corral_source_split_15594:
    assume {:verifier.code 0} true;
    $i773 := $eq.i32($i769, $i772);
    goto corral_source_split_15595;

  corral_source_split_15595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i773} true;
    goto $bb4429, $bb4430;

  $bb4430:
    assume !($i773 == 1);
    assume {:verifier.code 0} true;
    goto $bb4431;

  $bb4431:
    assume {:verifier.code 0} true;
    goto $bb4435;

  $bb4435:
    assume {:verifier.code 0} true;
    goto $bb4436;

  $bb4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5607} ___udelay(4295000);
    goto corral_source_split_15600;

  corral_source_split_15600:
    assume {:verifier.code 0} true;
    goto $bb4437;

  $bb4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5608} ___udelay(4295000);
    goto corral_source_split_15602;

  corral_source_split_15602:
    assume {:verifier.code 0} true;
    goto $bb4438;

  $bb4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5609} ___udelay(4295000);
    goto corral_source_split_15604;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    goto $bb4439;

  $bb4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5610} ___udelay(4295000);
    goto corral_source_split_15606;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    goto $bb4440;

  $bb4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5611} ___udelay(4295000);
    goto corral_source_split_15608;

  corral_source_split_15608:
    assume {:verifier.code 0} true;
    goto $bb4441;

  $bb4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5612} ___udelay(4295000);
    goto corral_source_split_15610;

  corral_source_split_15610:
    assume {:verifier.code 0} true;
    goto $bb4442;

  $bb4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5613} ___udelay(4295000);
    goto corral_source_split_15612;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    goto $bb4443;

  $bb4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5614} ___udelay(4295000);
    goto corral_source_split_15614;

  corral_source_split_15614:
    assume {:verifier.code 0} true;
    goto $bb4444;

  $bb4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5615} ___udelay(4295000);
    goto corral_source_split_15616;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    goto $bb4445;

  $bb4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5616} ___udelay(4295000);
    goto corral_source_split_15618;

  corral_source_split_15618:
    assume {:verifier.code 0} true;
    goto $bb4446;

  $bb4446:
    assume {:verifier.code 0} true;
    goto $bb4447;

  $bb4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5617} $i775 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15620;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    $i776 := $eq.i32($i772, $i775);
    goto corral_source_split_15621;

  corral_source_split_15621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i776} true;
    goto $bb4448, $bb4449;

  $bb4449:
    assume !($i776 == 1);
    assume {:verifier.code 0} true;
    goto $bb4450;

  $bb4450:
    assume {:verifier.code 0} true;
    goto $bb4454;

  $bb4454:
    assume {:verifier.code 0} true;
    goto $bb4455;

  $bb4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5618} ___udelay(4295000);
    goto corral_source_split_15626;

  corral_source_split_15626:
    assume {:verifier.code 0} true;
    goto $bb4456;

  $bb4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5619} ___udelay(4295000);
    goto corral_source_split_15628;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    goto $bb4457;

  $bb4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5620} ___udelay(4295000);
    goto corral_source_split_15630;

  corral_source_split_15630:
    assume {:verifier.code 0} true;
    goto $bb4458;

  $bb4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5621} ___udelay(4295000);
    goto corral_source_split_15632;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    goto $bb4459;

  $bb4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5622} ___udelay(4295000);
    goto corral_source_split_15634;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    goto $bb4460;

  $bb4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5623} ___udelay(4295000);
    goto corral_source_split_15636;

  corral_source_split_15636:
    assume {:verifier.code 0} true;
    goto $bb4461;

  $bb4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5624} ___udelay(4295000);
    goto corral_source_split_15638;

  corral_source_split_15638:
    assume {:verifier.code 0} true;
    goto $bb4462;

  $bb4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5625} ___udelay(4295000);
    goto corral_source_split_15640;

  corral_source_split_15640:
    assume {:verifier.code 0} true;
    goto $bb4463;

  $bb4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5626} ___udelay(4295000);
    goto corral_source_split_15642;

  corral_source_split_15642:
    assume {:verifier.code 0} true;
    goto $bb4464;

  $bb4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5627} ___udelay(4295000);
    goto corral_source_split_15644;

  corral_source_split_15644:
    assume {:verifier.code 0} true;
    goto $bb4465;

  $bb4465:
    assume {:verifier.code 0} true;
    goto $bb4466;

  $bb4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5628} $i778 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15646;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    $i779 := $eq.i32($i775, $i778);
    goto corral_source_split_15647;

  corral_source_split_15647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i779} true;
    goto $bb4467, $bb4468;

  $bb4468:
    assume !($i779 == 1);
    assume {:verifier.code 0} true;
    goto $bb4469;

  $bb4469:
    assume {:verifier.code 0} true;
    goto $bb4473;

  $bb4473:
    assume {:verifier.code 0} true;
    goto $bb4474;

  $bb4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5629} ___udelay(4295000);
    goto corral_source_split_15652;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    goto $bb4475;

  $bb4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5630} ___udelay(4295000);
    goto corral_source_split_15654;

  corral_source_split_15654:
    assume {:verifier.code 0} true;
    goto $bb4476;

  $bb4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5631} ___udelay(4295000);
    goto corral_source_split_15656;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    goto $bb4477;

  $bb4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5632} ___udelay(4295000);
    goto corral_source_split_15658;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    goto $bb4478;

  $bb4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5633} ___udelay(4295000);
    goto corral_source_split_15660;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    goto $bb4479;

  $bb4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5634} ___udelay(4295000);
    goto corral_source_split_15662;

  corral_source_split_15662:
    assume {:verifier.code 0} true;
    goto $bb4480;

  $bb4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5635} ___udelay(4295000);
    goto corral_source_split_15664;

  corral_source_split_15664:
    assume {:verifier.code 0} true;
    goto $bb4481;

  $bb4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5636} ___udelay(4295000);
    goto corral_source_split_15666;

  corral_source_split_15666:
    assume {:verifier.code 0} true;
    goto $bb4482;

  $bb4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5637} ___udelay(4295000);
    goto corral_source_split_15668;

  corral_source_split_15668:
    assume {:verifier.code 0} true;
    goto $bb4483;

  $bb4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5638} ___udelay(4295000);
    goto corral_source_split_15670;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    goto $bb4484;

  $bb4484:
    assume {:verifier.code 0} true;
    goto $bb4485;

  $bb4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5639} $i781 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15672;

  corral_source_split_15672:
    assume {:verifier.code 0} true;
    $i782 := $eq.i32($i778, $i781);
    goto corral_source_split_15673;

  corral_source_split_15673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i782} true;
    goto $bb4486, $bb4487;

  $bb4487:
    assume !($i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb4488;

  $bb4488:
    assume {:verifier.code 0} true;
    goto $bb4492;

  $bb4492:
    assume {:verifier.code 0} true;
    goto $bb4493;

  $bb4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5640} ___udelay(4295000);
    goto corral_source_split_15678;

  corral_source_split_15678:
    assume {:verifier.code 0} true;
    goto $bb4494;

  $bb4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5641} ___udelay(4295000);
    goto corral_source_split_15680;

  corral_source_split_15680:
    assume {:verifier.code 0} true;
    goto $bb4495;

  $bb4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5642} ___udelay(4295000);
    goto corral_source_split_15682;

  corral_source_split_15682:
    assume {:verifier.code 0} true;
    goto $bb4496;

  $bb4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5643} ___udelay(4295000);
    goto corral_source_split_15684;

  corral_source_split_15684:
    assume {:verifier.code 0} true;
    goto $bb4497;

  $bb4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5644} ___udelay(4295000);
    goto corral_source_split_15686;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    goto $bb4498;

  $bb4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5645} ___udelay(4295000);
    goto corral_source_split_15688;

  corral_source_split_15688:
    assume {:verifier.code 0} true;
    goto $bb4499;

  $bb4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5646} ___udelay(4295000);
    goto corral_source_split_15690;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    goto $bb4500;

  $bb4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5647} ___udelay(4295000);
    goto corral_source_split_15692;

  corral_source_split_15692:
    assume {:verifier.code 0} true;
    goto $bb4501;

  $bb4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5648} ___udelay(4295000);
    goto corral_source_split_15694;

  corral_source_split_15694:
    assume {:verifier.code 0} true;
    goto $bb4502;

  $bb4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5649} ___udelay(4295000);
    goto corral_source_split_15696;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    goto $bb4503;

  $bb4503:
    assume {:verifier.code 0} true;
    goto $bb4504;

  $bb4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5650} $i784 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15698;

  corral_source_split_15698:
    assume {:verifier.code 0} true;
    $i785 := $eq.i32($i781, $i784);
    goto corral_source_split_15699;

  corral_source_split_15699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i785} true;
    goto $bb4505, $bb4506;

  $bb4506:
    assume !($i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb4507;

  $bb4507:
    assume {:verifier.code 0} true;
    goto $bb4511;

  $bb4511:
    assume {:verifier.code 0} true;
    goto $bb4512;

  $bb4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5651} ___udelay(4295000);
    goto corral_source_split_15704;

  corral_source_split_15704:
    assume {:verifier.code 0} true;
    goto $bb4513;

  $bb4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5652} ___udelay(4295000);
    goto corral_source_split_15706;

  corral_source_split_15706:
    assume {:verifier.code 0} true;
    goto $bb4514;

  $bb4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5653} ___udelay(4295000);
    goto corral_source_split_15708;

  corral_source_split_15708:
    assume {:verifier.code 0} true;
    goto $bb4515;

  $bb4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5654} ___udelay(4295000);
    goto corral_source_split_15710;

  corral_source_split_15710:
    assume {:verifier.code 0} true;
    goto $bb4516;

  $bb4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5655} ___udelay(4295000);
    goto corral_source_split_15712;

  corral_source_split_15712:
    assume {:verifier.code 0} true;
    goto $bb4517;

  $bb4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5656} ___udelay(4295000);
    goto corral_source_split_15714;

  corral_source_split_15714:
    assume {:verifier.code 0} true;
    goto $bb4518;

  $bb4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5657} ___udelay(4295000);
    goto corral_source_split_15716;

  corral_source_split_15716:
    assume {:verifier.code 0} true;
    goto $bb4519;

  $bb4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5658} ___udelay(4295000);
    goto corral_source_split_15718;

  corral_source_split_15718:
    assume {:verifier.code 0} true;
    goto $bb4520;

  $bb4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5659} ___udelay(4295000);
    goto corral_source_split_15720;

  corral_source_split_15720:
    assume {:verifier.code 0} true;
    goto $bb4521;

  $bb4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5660} ___udelay(4295000);
    goto corral_source_split_15722;

  corral_source_split_15722:
    assume {:verifier.code 0} true;
    goto $bb4522;

  $bb4522:
    assume {:verifier.code 0} true;
    goto $bb4523;

  $bb4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5661} $i787 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15724;

  corral_source_split_15724:
    assume {:verifier.code 0} true;
    $i788 := $eq.i32($i784, $i787);
    goto corral_source_split_15725;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i788} true;
    goto $bb4524, $bb4525;

  $bb4525:
    assume !($i788 == 1);
    assume {:verifier.code 0} true;
    goto $bb4526;

  $bb4526:
    assume {:verifier.code 0} true;
    goto $bb4530;

  $bb4530:
    assume {:verifier.code 0} true;
    goto $bb4531;

  $bb4531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5662} ___udelay(4295000);
    goto corral_source_split_15730;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    goto $bb4532;

  $bb4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5663} ___udelay(4295000);
    goto corral_source_split_15732;

  corral_source_split_15732:
    assume {:verifier.code 0} true;
    goto $bb4533;

  $bb4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5664} ___udelay(4295000);
    goto corral_source_split_15734;

  corral_source_split_15734:
    assume {:verifier.code 0} true;
    goto $bb4534;

  $bb4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5665} ___udelay(4295000);
    goto corral_source_split_15736;

  corral_source_split_15736:
    assume {:verifier.code 0} true;
    goto $bb4535;

  $bb4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5666} ___udelay(4295000);
    goto corral_source_split_15738;

  corral_source_split_15738:
    assume {:verifier.code 0} true;
    goto $bb4536;

  $bb4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5667} ___udelay(4295000);
    goto corral_source_split_15740;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    goto $bb4537;

  $bb4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5668} ___udelay(4295000);
    goto corral_source_split_15742;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    goto $bb4538;

  $bb4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5669} ___udelay(4295000);
    goto corral_source_split_15744;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    goto $bb4539;

  $bb4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5670} ___udelay(4295000);
    goto corral_source_split_15746;

  corral_source_split_15746:
    assume {:verifier.code 0} true;
    goto $bb4540;

  $bb4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5671} ___udelay(4295000);
    goto corral_source_split_15748;

  corral_source_split_15748:
    assume {:verifier.code 0} true;
    goto $bb4541;

  $bb4541:
    assume {:verifier.code 0} true;
    goto $bb4542;

  $bb4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5672} $i790 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15750;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    $i791 := $eq.i32($i787, $i790);
    goto corral_source_split_15751;

  corral_source_split_15751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i791} true;
    goto $bb4543, $bb4544;

  $bb4544:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb4545;

  $bb4545:
    assume {:verifier.code 0} true;
    goto $bb4549;

  $bb4549:
    assume {:verifier.code 0} true;
    goto $bb4550;

  $bb4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5673} ___udelay(4295000);
    goto corral_source_split_15756;

  corral_source_split_15756:
    assume {:verifier.code 0} true;
    goto $bb4551;

  $bb4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5674} ___udelay(4295000);
    goto corral_source_split_15758;

  corral_source_split_15758:
    assume {:verifier.code 0} true;
    goto $bb4552;

  $bb4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5675} ___udelay(4295000);
    goto corral_source_split_15760;

  corral_source_split_15760:
    assume {:verifier.code 0} true;
    goto $bb4553;

  $bb4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5676} ___udelay(4295000);
    goto corral_source_split_15762;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    goto $bb4554;

  $bb4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5677} ___udelay(4295000);
    goto corral_source_split_15764;

  corral_source_split_15764:
    assume {:verifier.code 0} true;
    goto $bb4555;

  $bb4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5678} ___udelay(4295000);
    goto corral_source_split_15766;

  corral_source_split_15766:
    assume {:verifier.code 0} true;
    goto $bb4556;

  $bb4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5679} ___udelay(4295000);
    goto corral_source_split_15768;

  corral_source_split_15768:
    assume {:verifier.code 0} true;
    goto $bb4557;

  $bb4557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5680} ___udelay(4295000);
    goto corral_source_split_15770;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    goto $bb4558;

  $bb4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5681} ___udelay(4295000);
    goto corral_source_split_15772;

  corral_source_split_15772:
    assume {:verifier.code 0} true;
    goto $bb4559;

  $bb4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5682} ___udelay(4295000);
    goto corral_source_split_15774;

  corral_source_split_15774:
    assume {:verifier.code 0} true;
    goto $bb4560;

  $bb4560:
    assume {:verifier.code 0} true;
    goto $bb4561;

  $bb4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5683} $i793 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15776;

  corral_source_split_15776:
    assume {:verifier.code 0} true;
    $i794 := $eq.i32($i790, $i793);
    goto corral_source_split_15777;

  corral_source_split_15777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i794} true;
    goto $bb4562, $bb4563;

  $bb4563:
    assume !($i794 == 1);
    assume {:verifier.code 0} true;
    goto $bb4564;

  $bb4564:
    assume {:verifier.code 0} true;
    goto $bb4568;

  $bb4568:
    assume {:verifier.code 0} true;
    goto $bb4569;

  $bb4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5684} ___udelay(4295000);
    goto corral_source_split_15782;

  corral_source_split_15782:
    assume {:verifier.code 0} true;
    goto $bb4570;

  $bb4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5685} ___udelay(4295000);
    goto corral_source_split_15784;

  corral_source_split_15784:
    assume {:verifier.code 0} true;
    goto $bb4571;

  $bb4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5686} ___udelay(4295000);
    goto corral_source_split_15786;

  corral_source_split_15786:
    assume {:verifier.code 0} true;
    goto $bb4572;

  $bb4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5687} ___udelay(4295000);
    goto corral_source_split_15788;

  corral_source_split_15788:
    assume {:verifier.code 0} true;
    goto $bb4573;

  $bb4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5688} ___udelay(4295000);
    goto corral_source_split_15790;

  corral_source_split_15790:
    assume {:verifier.code 0} true;
    goto $bb4574;

  $bb4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5689} ___udelay(4295000);
    goto corral_source_split_15792;

  corral_source_split_15792:
    assume {:verifier.code 0} true;
    goto $bb4575;

  $bb4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5690} ___udelay(4295000);
    goto corral_source_split_15794;

  corral_source_split_15794:
    assume {:verifier.code 0} true;
    goto $bb4576;

  $bb4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5691} ___udelay(4295000);
    goto corral_source_split_15796;

  corral_source_split_15796:
    assume {:verifier.code 0} true;
    goto $bb4577;

  $bb4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5692} ___udelay(4295000);
    goto corral_source_split_15798;

  corral_source_split_15798:
    assume {:verifier.code 0} true;
    goto $bb4578;

  $bb4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5693} ___udelay(4295000);
    goto corral_source_split_15800;

  corral_source_split_15800:
    assume {:verifier.code 0} true;
    goto $bb4579;

  $bb4579:
    assume {:verifier.code 0} true;
    goto $bb4580;

  $bb4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5694} $i796 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15802;

  corral_source_split_15802:
    assume {:verifier.code 0} true;
    $i797 := $eq.i32($i793, $i796);
    goto corral_source_split_15803;

  corral_source_split_15803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i797} true;
    goto $bb4581, $bb4582;

  $bb4582:
    assume !($i797 == 1);
    assume {:verifier.code 0} true;
    goto $bb4583;

  $bb4583:
    assume {:verifier.code 0} true;
    goto $bb4587;

  $bb4587:
    assume {:verifier.code 0} true;
    goto $bb4588;

  $bb4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5695} ___udelay(4295000);
    goto corral_source_split_15808;

  corral_source_split_15808:
    assume {:verifier.code 0} true;
    goto $bb4589;

  $bb4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5696} ___udelay(4295000);
    goto corral_source_split_15810;

  corral_source_split_15810:
    assume {:verifier.code 0} true;
    goto $bb4590;

  $bb4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5697} ___udelay(4295000);
    goto corral_source_split_15812;

  corral_source_split_15812:
    assume {:verifier.code 0} true;
    goto $bb4591;

  $bb4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5698} ___udelay(4295000);
    goto corral_source_split_15814;

  corral_source_split_15814:
    assume {:verifier.code 0} true;
    goto $bb4592;

  $bb4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5699} ___udelay(4295000);
    goto corral_source_split_15816;

  corral_source_split_15816:
    assume {:verifier.code 0} true;
    goto $bb4593;

  $bb4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5700} ___udelay(4295000);
    goto corral_source_split_15818;

  corral_source_split_15818:
    assume {:verifier.code 0} true;
    goto $bb4594;

  $bb4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5701} ___udelay(4295000);
    goto corral_source_split_15820;

  corral_source_split_15820:
    assume {:verifier.code 0} true;
    goto $bb4595;

  $bb4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5702} ___udelay(4295000);
    goto corral_source_split_15822;

  corral_source_split_15822:
    assume {:verifier.code 0} true;
    goto $bb4596;

  $bb4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5703} ___udelay(4295000);
    goto corral_source_split_15824;

  corral_source_split_15824:
    assume {:verifier.code 0} true;
    goto $bb4597;

  $bb4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5704} ___udelay(4295000);
    goto corral_source_split_15826;

  corral_source_split_15826:
    assume {:verifier.code 0} true;
    goto $bb4598;

  $bb4598:
    assume {:verifier.code 0} true;
    goto $bb4599;

  $bb4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5705} $i799 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15828;

  corral_source_split_15828:
    assume {:verifier.code 0} true;
    $i800 := $eq.i32($i796, $i799);
    goto corral_source_split_15829;

  corral_source_split_15829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i800} true;
    goto $bb4600, $bb4601;

  $bb4601:
    assume !($i800 == 1);
    assume {:verifier.code 0} true;
    goto $bb4602;

  $bb4602:
    assume {:verifier.code 0} true;
    goto $bb4606;

  $bb4606:
    assume {:verifier.code 0} true;
    goto $bb4607;

  $bb4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5706} ___udelay(4295000);
    goto corral_source_split_15834;

  corral_source_split_15834:
    assume {:verifier.code 0} true;
    goto $bb4608;

  $bb4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5707} ___udelay(4295000);
    goto corral_source_split_15836;

  corral_source_split_15836:
    assume {:verifier.code 0} true;
    goto $bb4609;

  $bb4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5708} ___udelay(4295000);
    goto corral_source_split_15838;

  corral_source_split_15838:
    assume {:verifier.code 0} true;
    goto $bb4610;

  $bb4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5709} ___udelay(4295000);
    goto corral_source_split_15840;

  corral_source_split_15840:
    assume {:verifier.code 0} true;
    goto $bb4611;

  $bb4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5710} ___udelay(4295000);
    goto corral_source_split_15842;

  corral_source_split_15842:
    assume {:verifier.code 0} true;
    goto $bb4612;

  $bb4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5711} ___udelay(4295000);
    goto corral_source_split_15844;

  corral_source_split_15844:
    assume {:verifier.code 0} true;
    goto $bb4613;

  $bb4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5712} ___udelay(4295000);
    goto corral_source_split_15846;

  corral_source_split_15846:
    assume {:verifier.code 0} true;
    goto $bb4614;

  $bb4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5713} ___udelay(4295000);
    goto corral_source_split_15848;

  corral_source_split_15848:
    assume {:verifier.code 0} true;
    goto $bb4615;

  $bb4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5714} ___udelay(4295000);
    goto corral_source_split_15850;

  corral_source_split_15850:
    assume {:verifier.code 0} true;
    goto $bb4616;

  $bb4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5715} ___udelay(4295000);
    goto corral_source_split_15852;

  corral_source_split_15852:
    assume {:verifier.code 0} true;
    goto $bb4617;

  $bb4617:
    assume {:verifier.code 0} true;
    goto $bb4618;

  $bb4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5716} $i802 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15854;

  corral_source_split_15854:
    assume {:verifier.code 0} true;
    $i803 := $eq.i32($i799, $i802);
    goto corral_source_split_15855;

  corral_source_split_15855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i803} true;
    goto $bb4619, $bb4620;

  $bb4620:
    assume !($i803 == 1);
    assume {:verifier.code 0} true;
    goto $bb4621;

  $bb4621:
    assume {:verifier.code 0} true;
    goto $bb4625;

  $bb4625:
    assume {:verifier.code 0} true;
    goto $bb4626;

  $bb4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5717} ___udelay(4295000);
    goto corral_source_split_15860;

  corral_source_split_15860:
    assume {:verifier.code 0} true;
    goto $bb4627;

  $bb4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5718} ___udelay(4295000);
    goto corral_source_split_15862;

  corral_source_split_15862:
    assume {:verifier.code 0} true;
    goto $bb4628;

  $bb4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5719} ___udelay(4295000);
    goto corral_source_split_15864;

  corral_source_split_15864:
    assume {:verifier.code 0} true;
    goto $bb4629;

  $bb4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5720} ___udelay(4295000);
    goto corral_source_split_15866;

  corral_source_split_15866:
    assume {:verifier.code 0} true;
    goto $bb4630;

  $bb4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5721} ___udelay(4295000);
    goto corral_source_split_15868;

  corral_source_split_15868:
    assume {:verifier.code 0} true;
    goto $bb4631;

  $bb4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5722} ___udelay(4295000);
    goto corral_source_split_15870;

  corral_source_split_15870:
    assume {:verifier.code 0} true;
    goto $bb4632;

  $bb4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5723} ___udelay(4295000);
    goto corral_source_split_15872;

  corral_source_split_15872:
    assume {:verifier.code 0} true;
    goto $bb4633;

  $bb4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5724} ___udelay(4295000);
    goto corral_source_split_15874;

  corral_source_split_15874:
    assume {:verifier.code 0} true;
    goto $bb4634;

  $bb4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5725} ___udelay(4295000);
    goto corral_source_split_15876;

  corral_source_split_15876:
    assume {:verifier.code 0} true;
    goto $bb4635;

  $bb4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5726} ___udelay(4295000);
    goto corral_source_split_15878;

  corral_source_split_15878:
    assume {:verifier.code 0} true;
    goto $bb4636;

  $bb4636:
    assume {:verifier.code 0} true;
    goto $bb4637;

  $bb4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5727} $i805 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15880;

  corral_source_split_15880:
    assume {:verifier.code 0} true;
    $i806 := $eq.i32($i802, $i805);
    goto corral_source_split_15881;

  corral_source_split_15881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i806} true;
    goto $bb4638, $bb4639;

  $bb4639:
    assume !($i806 == 1);
    assume {:verifier.code 0} true;
    goto $bb4640;

  $bb4640:
    assume {:verifier.code 0} true;
    goto $bb4644;

  $bb4644:
    assume {:verifier.code 0} true;
    goto $bb4645;

  $bb4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5728} ___udelay(4295000);
    goto corral_source_split_15886;

  corral_source_split_15886:
    assume {:verifier.code 0} true;
    goto $bb4646;

  $bb4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5729} ___udelay(4295000);
    goto corral_source_split_15888;

  corral_source_split_15888:
    assume {:verifier.code 0} true;
    goto $bb4647;

  $bb4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5730} ___udelay(4295000);
    goto corral_source_split_15890;

  corral_source_split_15890:
    assume {:verifier.code 0} true;
    goto $bb4648;

  $bb4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5731} ___udelay(4295000);
    goto corral_source_split_15892;

  corral_source_split_15892:
    assume {:verifier.code 0} true;
    goto $bb4649;

  $bb4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5732} ___udelay(4295000);
    goto corral_source_split_15894;

  corral_source_split_15894:
    assume {:verifier.code 0} true;
    goto $bb4650;

  $bb4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5733} ___udelay(4295000);
    goto corral_source_split_15896;

  corral_source_split_15896:
    assume {:verifier.code 0} true;
    goto $bb4651;

  $bb4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5734} ___udelay(4295000);
    goto corral_source_split_15898;

  corral_source_split_15898:
    assume {:verifier.code 0} true;
    goto $bb4652;

  $bb4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5735} ___udelay(4295000);
    goto corral_source_split_15900;

  corral_source_split_15900:
    assume {:verifier.code 0} true;
    goto $bb4653;

  $bb4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5736} ___udelay(4295000);
    goto corral_source_split_15902;

  corral_source_split_15902:
    assume {:verifier.code 0} true;
    goto $bb4654;

  $bb4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5737} ___udelay(4295000);
    goto corral_source_split_15904;

  corral_source_split_15904:
    assume {:verifier.code 0} true;
    goto $bb4655;

  $bb4655:
    assume {:verifier.code 0} true;
    goto $bb4656;

  $bb4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5738} $i808 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15906;

  corral_source_split_15906:
    assume {:verifier.code 0} true;
    $i809 := $eq.i32($i805, $i808);
    goto corral_source_split_15907;

  corral_source_split_15907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i809} true;
    goto $bb4657, $bb4658;

  $bb4658:
    assume !($i809 == 1);
    assume {:verifier.code 0} true;
    goto $bb4659;

  $bb4659:
    assume {:verifier.code 0} true;
    goto $bb4663;

  $bb4663:
    assume {:verifier.code 0} true;
    goto $bb4664;

  $bb4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5739} ___udelay(4295000);
    goto corral_source_split_15912;

  corral_source_split_15912:
    assume {:verifier.code 0} true;
    goto $bb4665;

  $bb4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5740} ___udelay(4295000);
    goto corral_source_split_15914;

  corral_source_split_15914:
    assume {:verifier.code 0} true;
    goto $bb4666;

  $bb4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5741} ___udelay(4295000);
    goto corral_source_split_15916;

  corral_source_split_15916:
    assume {:verifier.code 0} true;
    goto $bb4667;

  $bb4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5742} ___udelay(4295000);
    goto corral_source_split_15918;

  corral_source_split_15918:
    assume {:verifier.code 0} true;
    goto $bb4668;

  $bb4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5743} ___udelay(4295000);
    goto corral_source_split_15920;

  corral_source_split_15920:
    assume {:verifier.code 0} true;
    goto $bb4669;

  $bb4669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5744} ___udelay(4295000);
    goto corral_source_split_15922;

  corral_source_split_15922:
    assume {:verifier.code 0} true;
    goto $bb4670;

  $bb4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5745} ___udelay(4295000);
    goto corral_source_split_15924;

  corral_source_split_15924:
    assume {:verifier.code 0} true;
    goto $bb4671;

  $bb4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5746} ___udelay(4295000);
    goto corral_source_split_15926;

  corral_source_split_15926:
    assume {:verifier.code 0} true;
    goto $bb4672;

  $bb4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5747} ___udelay(4295000);
    goto corral_source_split_15928;

  corral_source_split_15928:
    assume {:verifier.code 0} true;
    goto $bb4673;

  $bb4673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5748} ___udelay(4295000);
    goto corral_source_split_15930;

  corral_source_split_15930:
    assume {:verifier.code 0} true;
    goto $bb4674;

  $bb4674:
    assume {:verifier.code 0} true;
    goto $bb4675;

  $bb4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5749} $i811 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15932;

  corral_source_split_15932:
    assume {:verifier.code 0} true;
    $i812 := $eq.i32($i808, $i811);
    goto corral_source_split_15933;

  corral_source_split_15933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i812} true;
    goto $bb4676, $bb4677;

  $bb4677:
    assume !($i812 == 1);
    assume {:verifier.code 0} true;
    goto $bb4678;

  $bb4678:
    assume {:verifier.code 0} true;
    goto $bb4682;

  $bb4682:
    assume {:verifier.code 0} true;
    goto $bb4683;

  $bb4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5750} ___udelay(4295000);
    goto corral_source_split_15938;

  corral_source_split_15938:
    assume {:verifier.code 0} true;
    goto $bb4684;

  $bb4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5751} ___udelay(4295000);
    goto corral_source_split_15940;

  corral_source_split_15940:
    assume {:verifier.code 0} true;
    goto $bb4685;

  $bb4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5752} ___udelay(4295000);
    goto corral_source_split_15942;

  corral_source_split_15942:
    assume {:verifier.code 0} true;
    goto $bb4686;

  $bb4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5753} ___udelay(4295000);
    goto corral_source_split_15944;

  corral_source_split_15944:
    assume {:verifier.code 0} true;
    goto $bb4687;

  $bb4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5754} ___udelay(4295000);
    goto corral_source_split_15946;

  corral_source_split_15946:
    assume {:verifier.code 0} true;
    goto $bb4688;

  $bb4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5755} ___udelay(4295000);
    goto corral_source_split_15948;

  corral_source_split_15948:
    assume {:verifier.code 0} true;
    goto $bb4689;

  $bb4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5756} ___udelay(4295000);
    goto corral_source_split_15950;

  corral_source_split_15950:
    assume {:verifier.code 0} true;
    goto $bb4690;

  $bb4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5757} ___udelay(4295000);
    goto corral_source_split_15952;

  corral_source_split_15952:
    assume {:verifier.code 0} true;
    goto $bb4691;

  $bb4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5758} ___udelay(4295000);
    goto corral_source_split_15954;

  corral_source_split_15954:
    assume {:verifier.code 0} true;
    goto $bb4692;

  $bb4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5759} ___udelay(4295000);
    goto corral_source_split_15956;

  corral_source_split_15956:
    assume {:verifier.code 0} true;
    goto $bb4693;

  $bb4693:
    assume {:verifier.code 0} true;
    goto $bb4694;

  $bb4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5760} $i814 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15958;

  corral_source_split_15958:
    assume {:verifier.code 0} true;
    $i815 := $eq.i32($i811, $i814);
    goto corral_source_split_15959;

  corral_source_split_15959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i815} true;
    goto $bb4695, $bb4696;

  $bb4696:
    assume !($i815 == 1);
    assume {:verifier.code 0} true;
    goto $bb4697;

  $bb4697:
    assume {:verifier.code 0} true;
    goto $bb4701;

  $bb4701:
    assume {:verifier.code 0} true;
    goto $bb4702;

  $bb4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5761} ___udelay(4295000);
    goto corral_source_split_15964;

  corral_source_split_15964:
    assume {:verifier.code 0} true;
    goto $bb4703;

  $bb4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5762} ___udelay(4295000);
    goto corral_source_split_15966;

  corral_source_split_15966:
    assume {:verifier.code 0} true;
    goto $bb4704;

  $bb4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5763} ___udelay(4295000);
    goto corral_source_split_15968;

  corral_source_split_15968:
    assume {:verifier.code 0} true;
    goto $bb4705;

  $bb4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5764} ___udelay(4295000);
    goto corral_source_split_15970;

  corral_source_split_15970:
    assume {:verifier.code 0} true;
    goto $bb4706;

  $bb4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5765} ___udelay(4295000);
    goto corral_source_split_15972;

  corral_source_split_15972:
    assume {:verifier.code 0} true;
    goto $bb4707;

  $bb4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5766} ___udelay(4295000);
    goto corral_source_split_15974;

  corral_source_split_15974:
    assume {:verifier.code 0} true;
    goto $bb4708;

  $bb4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5767} ___udelay(4295000);
    goto corral_source_split_15976;

  corral_source_split_15976:
    assume {:verifier.code 0} true;
    goto $bb4709;

  $bb4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5768} ___udelay(4295000);
    goto corral_source_split_15978;

  corral_source_split_15978:
    assume {:verifier.code 0} true;
    goto $bb4710;

  $bb4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5769} ___udelay(4295000);
    goto corral_source_split_15980;

  corral_source_split_15980:
    assume {:verifier.code 0} true;
    goto $bb4711;

  $bb4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5770} ___udelay(4295000);
    goto corral_source_split_15982;

  corral_source_split_15982:
    assume {:verifier.code 0} true;
    goto $bb4712;

  $bb4712:
    assume {:verifier.code 0} true;
    goto $bb4713;

  $bb4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5771} $i817 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_15984;

  corral_source_split_15984:
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i814, $i817);
    goto corral_source_split_15985;

  corral_source_split_15985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i818} true;
    goto $bb4714, $bb4715;

  $bb4715:
    assume !($i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb4716;

  $bb4716:
    assume {:verifier.code 0} true;
    goto $bb4720;

  $bb4720:
    assume {:verifier.code 0} true;
    goto $bb4721;

  $bb4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5772} ___udelay(4295000);
    goto corral_source_split_15990;

  corral_source_split_15990:
    assume {:verifier.code 0} true;
    goto $bb4722;

  $bb4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5773} ___udelay(4295000);
    goto corral_source_split_15992;

  corral_source_split_15992:
    assume {:verifier.code 0} true;
    goto $bb4723;

  $bb4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5774} ___udelay(4295000);
    goto corral_source_split_15994;

  corral_source_split_15994:
    assume {:verifier.code 0} true;
    goto $bb4724;

  $bb4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5775} ___udelay(4295000);
    goto corral_source_split_15996;

  corral_source_split_15996:
    assume {:verifier.code 0} true;
    goto $bb4725;

  $bb4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5776} ___udelay(4295000);
    goto corral_source_split_15998;

  corral_source_split_15998:
    assume {:verifier.code 0} true;
    goto $bb4726;

  $bb4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5777} ___udelay(4295000);
    goto corral_source_split_16000;

  corral_source_split_16000:
    assume {:verifier.code 0} true;
    goto $bb4727;

  $bb4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5778} ___udelay(4295000);
    goto corral_source_split_16002;

  corral_source_split_16002:
    assume {:verifier.code 0} true;
    goto $bb4728;

  $bb4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5779} ___udelay(4295000);
    goto corral_source_split_16004;

  corral_source_split_16004:
    assume {:verifier.code 0} true;
    goto $bb4729;

  $bb4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5780} ___udelay(4295000);
    goto corral_source_split_16006;

  corral_source_split_16006:
    assume {:verifier.code 0} true;
    goto $bb4730;

  $bb4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5781} ___udelay(4295000);
    goto corral_source_split_16008;

  corral_source_split_16008:
    assume {:verifier.code 0} true;
    goto $bb4731;

  $bb4731:
    assume {:verifier.code 0} true;
    goto $bb4732;

  $bb4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5782} $i820 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16010;

  corral_source_split_16010:
    assume {:verifier.code 0} true;
    $i821 := $eq.i32($i817, $i820);
    goto corral_source_split_16011;

  corral_source_split_16011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i821} true;
    goto $bb4733, $bb4734;

  $bb4734:
    assume !($i821 == 1);
    assume {:verifier.code 0} true;
    goto $bb4735;

  $bb4735:
    assume {:verifier.code 0} true;
    goto $bb4739;

  $bb4739:
    assume {:verifier.code 0} true;
    goto $bb4740;

  $bb4740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5783} ___udelay(4295000);
    goto corral_source_split_16016;

  corral_source_split_16016:
    assume {:verifier.code 0} true;
    goto $bb4741;

  $bb4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5784} ___udelay(4295000);
    goto corral_source_split_16018;

  corral_source_split_16018:
    assume {:verifier.code 0} true;
    goto $bb4742;

  $bb4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5785} ___udelay(4295000);
    goto corral_source_split_16020;

  corral_source_split_16020:
    assume {:verifier.code 0} true;
    goto $bb4743;

  $bb4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5786} ___udelay(4295000);
    goto corral_source_split_16022;

  corral_source_split_16022:
    assume {:verifier.code 0} true;
    goto $bb4744;

  $bb4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5787} ___udelay(4295000);
    goto corral_source_split_16024;

  corral_source_split_16024:
    assume {:verifier.code 0} true;
    goto $bb4745;

  $bb4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5788} ___udelay(4295000);
    goto corral_source_split_16026;

  corral_source_split_16026:
    assume {:verifier.code 0} true;
    goto $bb4746;

  $bb4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5789} ___udelay(4295000);
    goto corral_source_split_16028;

  corral_source_split_16028:
    assume {:verifier.code 0} true;
    goto $bb4747;

  $bb4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5790} ___udelay(4295000);
    goto corral_source_split_16030;

  corral_source_split_16030:
    assume {:verifier.code 0} true;
    goto $bb4748;

  $bb4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5791} ___udelay(4295000);
    goto corral_source_split_16032;

  corral_source_split_16032:
    assume {:verifier.code 0} true;
    goto $bb4749;

  $bb4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5792} ___udelay(4295000);
    goto corral_source_split_16034;

  corral_source_split_16034:
    assume {:verifier.code 0} true;
    goto $bb4750;

  $bb4750:
    assume {:verifier.code 0} true;
    goto $bb4751;

  $bb4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5793} $i823 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16036;

  corral_source_split_16036:
    assume {:verifier.code 0} true;
    $i824 := $eq.i32($i820, $i823);
    goto corral_source_split_16037;

  corral_source_split_16037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i824} true;
    goto $bb4752, $bb4753;

  $bb4753:
    assume !($i824 == 1);
    assume {:verifier.code 0} true;
    goto $bb4754;

  $bb4754:
    assume {:verifier.code 0} true;
    goto $bb4758;

  $bb4758:
    assume {:verifier.code 0} true;
    goto $bb4759;

  $bb4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5794} ___udelay(4295000);
    goto corral_source_split_16042;

  corral_source_split_16042:
    assume {:verifier.code 0} true;
    goto $bb4760;

  $bb4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5795} ___udelay(4295000);
    goto corral_source_split_16044;

  corral_source_split_16044:
    assume {:verifier.code 0} true;
    goto $bb4761;

  $bb4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5796} ___udelay(4295000);
    goto corral_source_split_16046;

  corral_source_split_16046:
    assume {:verifier.code 0} true;
    goto $bb4762;

  $bb4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5797} ___udelay(4295000);
    goto corral_source_split_16048;

  corral_source_split_16048:
    assume {:verifier.code 0} true;
    goto $bb4763;

  $bb4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5798} ___udelay(4295000);
    goto corral_source_split_16050;

  corral_source_split_16050:
    assume {:verifier.code 0} true;
    goto $bb4764;

  $bb4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5799} ___udelay(4295000);
    goto corral_source_split_16052;

  corral_source_split_16052:
    assume {:verifier.code 0} true;
    goto $bb4765;

  $bb4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5800} ___udelay(4295000);
    goto corral_source_split_16054;

  corral_source_split_16054:
    assume {:verifier.code 0} true;
    goto $bb4766;

  $bb4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5801} ___udelay(4295000);
    goto corral_source_split_16056;

  corral_source_split_16056:
    assume {:verifier.code 0} true;
    goto $bb4767;

  $bb4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5802} ___udelay(4295000);
    goto corral_source_split_16058;

  corral_source_split_16058:
    assume {:verifier.code 0} true;
    goto $bb4768;

  $bb4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5803} ___udelay(4295000);
    goto corral_source_split_16060;

  corral_source_split_16060:
    assume {:verifier.code 0} true;
    goto $bb4769;

  $bb4769:
    assume {:verifier.code 0} true;
    goto $bb4770;

  $bb4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5804} $i826 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16062;

  corral_source_split_16062:
    assume {:verifier.code 0} true;
    $i827 := $eq.i32($i823, $i826);
    goto corral_source_split_16063;

  corral_source_split_16063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i827} true;
    goto $bb4771, $bb4772;

  $bb4772:
    assume !($i827 == 1);
    assume {:verifier.code 0} true;
    goto $bb4773;

  $bb4773:
    assume {:verifier.code 0} true;
    goto $bb4777;

  $bb4777:
    assume {:verifier.code 0} true;
    goto $bb4778;

  $bb4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5805} ___udelay(4295000);
    goto corral_source_split_16068;

  corral_source_split_16068:
    assume {:verifier.code 0} true;
    goto $bb4779;

  $bb4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5806} ___udelay(4295000);
    goto corral_source_split_16070;

  corral_source_split_16070:
    assume {:verifier.code 0} true;
    goto $bb4780;

  $bb4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5807} ___udelay(4295000);
    goto corral_source_split_16072;

  corral_source_split_16072:
    assume {:verifier.code 0} true;
    goto $bb4781;

  $bb4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5808} ___udelay(4295000);
    goto corral_source_split_16074;

  corral_source_split_16074:
    assume {:verifier.code 0} true;
    goto $bb4782;

  $bb4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5809} ___udelay(4295000);
    goto corral_source_split_16076;

  corral_source_split_16076:
    assume {:verifier.code 0} true;
    goto $bb4783;

  $bb4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5810} ___udelay(4295000);
    goto corral_source_split_16078;

  corral_source_split_16078:
    assume {:verifier.code 0} true;
    goto $bb4784;

  $bb4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5811} ___udelay(4295000);
    goto corral_source_split_16080;

  corral_source_split_16080:
    assume {:verifier.code 0} true;
    goto $bb4785;

  $bb4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5812} ___udelay(4295000);
    goto corral_source_split_16082;

  corral_source_split_16082:
    assume {:verifier.code 0} true;
    goto $bb4786;

  $bb4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5813} ___udelay(4295000);
    goto corral_source_split_16084;

  corral_source_split_16084:
    assume {:verifier.code 0} true;
    goto $bb4787;

  $bb4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5814} ___udelay(4295000);
    goto corral_source_split_16086;

  corral_source_split_16086:
    assume {:verifier.code 0} true;
    goto $bb4788;

  $bb4788:
    assume {:verifier.code 0} true;
    goto $bb4789;

  $bb4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5815} $i829 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16088;

  corral_source_split_16088:
    assume {:verifier.code 0} true;
    $i830 := $eq.i32($i826, $i829);
    goto corral_source_split_16089;

  corral_source_split_16089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i830} true;
    goto $bb4790, $bb4791;

  $bb4791:
    assume !($i830 == 1);
    assume {:verifier.code 0} true;
    goto $bb4792;

  $bb4792:
    assume {:verifier.code 0} true;
    goto $bb4796;

  $bb4796:
    assume {:verifier.code 0} true;
    goto $bb4797;

  $bb4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5816} ___udelay(4295000);
    goto corral_source_split_16094;

  corral_source_split_16094:
    assume {:verifier.code 0} true;
    goto $bb4798;

  $bb4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5817} ___udelay(4295000);
    goto corral_source_split_16096;

  corral_source_split_16096:
    assume {:verifier.code 0} true;
    goto $bb4799;

  $bb4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5818} ___udelay(4295000);
    goto corral_source_split_16098;

  corral_source_split_16098:
    assume {:verifier.code 0} true;
    goto $bb4800;

  $bb4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5819} ___udelay(4295000);
    goto corral_source_split_16100;

  corral_source_split_16100:
    assume {:verifier.code 0} true;
    goto $bb4801;

  $bb4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5820} ___udelay(4295000);
    goto corral_source_split_16102;

  corral_source_split_16102:
    assume {:verifier.code 0} true;
    goto $bb4802;

  $bb4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5821} ___udelay(4295000);
    goto corral_source_split_16104;

  corral_source_split_16104:
    assume {:verifier.code 0} true;
    goto $bb4803;

  $bb4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5822} ___udelay(4295000);
    goto corral_source_split_16106;

  corral_source_split_16106:
    assume {:verifier.code 0} true;
    goto $bb4804;

  $bb4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5823} ___udelay(4295000);
    goto corral_source_split_16108;

  corral_source_split_16108:
    assume {:verifier.code 0} true;
    goto $bb4805;

  $bb4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5824} ___udelay(4295000);
    goto corral_source_split_16110;

  corral_source_split_16110:
    assume {:verifier.code 0} true;
    goto $bb4806;

  $bb4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5825} ___udelay(4295000);
    goto corral_source_split_16112;

  corral_source_split_16112:
    assume {:verifier.code 0} true;
    goto $bb4807;

  $bb4807:
    assume {:verifier.code 0} true;
    goto $bb4808;

  $bb4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5826} $i832 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16114;

  corral_source_split_16114:
    assume {:verifier.code 0} true;
    $i833 := $eq.i32($i829, $i832);
    goto corral_source_split_16115;

  corral_source_split_16115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i833} true;
    goto $bb4809, $bb4810;

  $bb4810:
    assume !($i833 == 1);
    assume {:verifier.code 0} true;
    goto $bb4811;

  $bb4811:
    assume {:verifier.code 0} true;
    goto $bb4815;

  $bb4815:
    assume {:verifier.code 0} true;
    goto $bb4816;

  $bb4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5827} ___udelay(4295000);
    goto corral_source_split_16120;

  corral_source_split_16120:
    assume {:verifier.code 0} true;
    goto $bb4817;

  $bb4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5828} ___udelay(4295000);
    goto corral_source_split_16122;

  corral_source_split_16122:
    assume {:verifier.code 0} true;
    goto $bb4818;

  $bb4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5829} ___udelay(4295000);
    goto corral_source_split_16124;

  corral_source_split_16124:
    assume {:verifier.code 0} true;
    goto $bb4819;

  $bb4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5830} ___udelay(4295000);
    goto corral_source_split_16126;

  corral_source_split_16126:
    assume {:verifier.code 0} true;
    goto $bb4820;

  $bb4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5831} ___udelay(4295000);
    goto corral_source_split_16128;

  corral_source_split_16128:
    assume {:verifier.code 0} true;
    goto $bb4821;

  $bb4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5832} ___udelay(4295000);
    goto corral_source_split_16130;

  corral_source_split_16130:
    assume {:verifier.code 0} true;
    goto $bb4822;

  $bb4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5833} ___udelay(4295000);
    goto corral_source_split_16132;

  corral_source_split_16132:
    assume {:verifier.code 0} true;
    goto $bb4823;

  $bb4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5834} ___udelay(4295000);
    goto corral_source_split_16134;

  corral_source_split_16134:
    assume {:verifier.code 0} true;
    goto $bb4824;

  $bb4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5835} ___udelay(4295000);
    goto corral_source_split_16136;

  corral_source_split_16136:
    assume {:verifier.code 0} true;
    goto $bb4825;

  $bb4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5836} ___udelay(4295000);
    goto corral_source_split_16138;

  corral_source_split_16138:
    assume {:verifier.code 0} true;
    goto $bb4826;

  $bb4826:
    assume {:verifier.code 0} true;
    goto $bb4827;

  $bb4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5837} $i835 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16140;

  corral_source_split_16140:
    assume {:verifier.code 0} true;
    $i836 := $eq.i32($i832, $i835);
    goto corral_source_split_16141;

  corral_source_split_16141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i836} true;
    goto $bb4828, $bb4829;

  $bb4829:
    assume !($i836 == 1);
    assume {:verifier.code 0} true;
    goto $bb4830;

  $bb4830:
    assume {:verifier.code 0} true;
    goto $bb4834;

  $bb4834:
    assume {:verifier.code 0} true;
    goto $bb4835;

  $bb4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5838} ___udelay(4295000);
    goto corral_source_split_16146;

  corral_source_split_16146:
    assume {:verifier.code 0} true;
    goto $bb4836;

  $bb4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5839} ___udelay(4295000);
    goto corral_source_split_16148;

  corral_source_split_16148:
    assume {:verifier.code 0} true;
    goto $bb4837;

  $bb4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5840} ___udelay(4295000);
    goto corral_source_split_16150;

  corral_source_split_16150:
    assume {:verifier.code 0} true;
    goto $bb4838;

  $bb4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5841} ___udelay(4295000);
    goto corral_source_split_16152;

  corral_source_split_16152:
    assume {:verifier.code 0} true;
    goto $bb4839;

  $bb4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5842} ___udelay(4295000);
    goto corral_source_split_16154;

  corral_source_split_16154:
    assume {:verifier.code 0} true;
    goto $bb4840;

  $bb4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5843} ___udelay(4295000);
    goto corral_source_split_16156;

  corral_source_split_16156:
    assume {:verifier.code 0} true;
    goto $bb4841;

  $bb4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5844} ___udelay(4295000);
    goto corral_source_split_16158;

  corral_source_split_16158:
    assume {:verifier.code 0} true;
    goto $bb4842;

  $bb4842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5845} ___udelay(4295000);
    goto corral_source_split_16160;

  corral_source_split_16160:
    assume {:verifier.code 0} true;
    goto $bb4843;

  $bb4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5846} ___udelay(4295000);
    goto corral_source_split_16162;

  corral_source_split_16162:
    assume {:verifier.code 0} true;
    goto $bb4844;

  $bb4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5847} ___udelay(4295000);
    goto corral_source_split_16164;

  corral_source_split_16164:
    assume {:verifier.code 0} true;
    goto $bb4845;

  $bb4845:
    assume {:verifier.code 0} true;
    goto $bb4846;

  $bb4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5848} $i838 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16166;

  corral_source_split_16166:
    assume {:verifier.code 0} true;
    $i839 := $eq.i32($i835, $i838);
    goto corral_source_split_16167;

  corral_source_split_16167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i839} true;
    goto $bb4847, $bb4848;

  $bb4848:
    assume !($i839 == 1);
    assume {:verifier.code 0} true;
    goto $bb4849;

  $bb4849:
    assume {:verifier.code 0} true;
    goto $bb4853;

  $bb4853:
    assume {:verifier.code 0} true;
    goto $bb4854;

  $bb4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5849} ___udelay(4295000);
    goto corral_source_split_16172;

  corral_source_split_16172:
    assume {:verifier.code 0} true;
    goto $bb4855;

  $bb4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5850} ___udelay(4295000);
    goto corral_source_split_16174;

  corral_source_split_16174:
    assume {:verifier.code 0} true;
    goto $bb4856;

  $bb4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5851} ___udelay(4295000);
    goto corral_source_split_16176;

  corral_source_split_16176:
    assume {:verifier.code 0} true;
    goto $bb4857;

  $bb4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5852} ___udelay(4295000);
    goto corral_source_split_16178;

  corral_source_split_16178:
    assume {:verifier.code 0} true;
    goto $bb4858;

  $bb4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5853} ___udelay(4295000);
    goto corral_source_split_16180;

  corral_source_split_16180:
    assume {:verifier.code 0} true;
    goto $bb4859;

  $bb4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5854} ___udelay(4295000);
    goto corral_source_split_16182;

  corral_source_split_16182:
    assume {:verifier.code 0} true;
    goto $bb4860;

  $bb4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5855} ___udelay(4295000);
    goto corral_source_split_16184;

  corral_source_split_16184:
    assume {:verifier.code 0} true;
    goto $bb4861;

  $bb4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5856} ___udelay(4295000);
    goto corral_source_split_16186;

  corral_source_split_16186:
    assume {:verifier.code 0} true;
    goto $bb4862;

  $bb4862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5857} ___udelay(4295000);
    goto corral_source_split_16188;

  corral_source_split_16188:
    assume {:verifier.code 0} true;
    goto $bb4863;

  $bb4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5858} ___udelay(4295000);
    goto corral_source_split_16190;

  corral_source_split_16190:
    assume {:verifier.code 0} true;
    goto $bb4864;

  $bb4864:
    assume {:verifier.code 0} true;
    goto $bb4865;

  $bb4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5859} $i841 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16192;

  corral_source_split_16192:
    assume {:verifier.code 0} true;
    $i842 := $eq.i32($i838, $i841);
    goto corral_source_split_16193;

  corral_source_split_16193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i842} true;
    goto $bb4866, $bb4867;

  $bb4867:
    assume !($i842 == 1);
    assume {:verifier.code 0} true;
    goto $bb4868;

  $bb4868:
    assume {:verifier.code 0} true;
    goto $bb4872;

  $bb4872:
    assume {:verifier.code 0} true;
    goto $bb4873;

  $bb4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5860} ___udelay(4295000);
    goto corral_source_split_16198;

  corral_source_split_16198:
    assume {:verifier.code 0} true;
    goto $bb4874;

  $bb4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5861} ___udelay(4295000);
    goto corral_source_split_16200;

  corral_source_split_16200:
    assume {:verifier.code 0} true;
    goto $bb4875;

  $bb4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5862} ___udelay(4295000);
    goto corral_source_split_16202;

  corral_source_split_16202:
    assume {:verifier.code 0} true;
    goto $bb4876;

  $bb4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5863} ___udelay(4295000);
    goto corral_source_split_16204;

  corral_source_split_16204:
    assume {:verifier.code 0} true;
    goto $bb4877;

  $bb4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5864} ___udelay(4295000);
    goto corral_source_split_16206;

  corral_source_split_16206:
    assume {:verifier.code 0} true;
    goto $bb4878;

  $bb4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5865} ___udelay(4295000);
    goto corral_source_split_16208;

  corral_source_split_16208:
    assume {:verifier.code 0} true;
    goto $bb4879;

  $bb4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5866} ___udelay(4295000);
    goto corral_source_split_16210;

  corral_source_split_16210:
    assume {:verifier.code 0} true;
    goto $bb4880;

  $bb4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5867} ___udelay(4295000);
    goto corral_source_split_16212;

  corral_source_split_16212:
    assume {:verifier.code 0} true;
    goto $bb4881;

  $bb4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5868} ___udelay(4295000);
    goto corral_source_split_16214;

  corral_source_split_16214:
    assume {:verifier.code 0} true;
    goto $bb4882;

  $bb4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5869} ___udelay(4295000);
    goto corral_source_split_16216;

  corral_source_split_16216:
    assume {:verifier.code 0} true;
    goto $bb4883;

  $bb4883:
    assume {:verifier.code 0} true;
    goto $bb4884;

  $bb4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5870} $i844 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16218;

  corral_source_split_16218:
    assume {:verifier.code 0} true;
    $i845 := $eq.i32($i841, $i844);
    goto corral_source_split_16219;

  corral_source_split_16219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i845} true;
    goto $bb4885, $bb4886;

  $bb4886:
    assume !($i845 == 1);
    assume {:verifier.code 0} true;
    goto $bb4887;

  $bb4887:
    assume {:verifier.code 0} true;
    goto $bb4891;

  $bb4891:
    assume {:verifier.code 0} true;
    goto $bb4892;

  $bb4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5871} ___udelay(4295000);
    goto corral_source_split_16224;

  corral_source_split_16224:
    assume {:verifier.code 0} true;
    goto $bb4893;

  $bb4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5872} ___udelay(4295000);
    goto corral_source_split_16226;

  corral_source_split_16226:
    assume {:verifier.code 0} true;
    goto $bb4894;

  $bb4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5873} ___udelay(4295000);
    goto corral_source_split_16228;

  corral_source_split_16228:
    assume {:verifier.code 0} true;
    goto $bb4895;

  $bb4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5874} ___udelay(4295000);
    goto corral_source_split_16230;

  corral_source_split_16230:
    assume {:verifier.code 0} true;
    goto $bb4896;

  $bb4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5875} ___udelay(4295000);
    goto corral_source_split_16232;

  corral_source_split_16232:
    assume {:verifier.code 0} true;
    goto $bb4897;

  $bb4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5876} ___udelay(4295000);
    goto corral_source_split_16234;

  corral_source_split_16234:
    assume {:verifier.code 0} true;
    goto $bb4898;

  $bb4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5877} ___udelay(4295000);
    goto corral_source_split_16236;

  corral_source_split_16236:
    assume {:verifier.code 0} true;
    goto $bb4899;

  $bb4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5878} ___udelay(4295000);
    goto corral_source_split_16238;

  corral_source_split_16238:
    assume {:verifier.code 0} true;
    goto $bb4900;

  $bb4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5879} ___udelay(4295000);
    goto corral_source_split_16240;

  corral_source_split_16240:
    assume {:verifier.code 0} true;
    goto $bb4901;

  $bb4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5880} ___udelay(4295000);
    goto corral_source_split_16242;

  corral_source_split_16242:
    assume {:verifier.code 0} true;
    goto $bb4902;

  $bb4902:
    assume {:verifier.code 0} true;
    goto $bb4903;

  $bb4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5881} $i847 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16244;

  corral_source_split_16244:
    assume {:verifier.code 0} true;
    $i848 := $eq.i32($i844, $i847);
    goto corral_source_split_16245;

  corral_source_split_16245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i848} true;
    goto $bb4904, $bb4905;

  $bb4905:
    assume !($i848 == 1);
    assume {:verifier.code 0} true;
    goto $bb4906;

  $bb4906:
    assume {:verifier.code 0} true;
    goto $bb4910;

  $bb4910:
    assume {:verifier.code 0} true;
    goto $bb4911;

  $bb4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5882} ___udelay(4295000);
    goto corral_source_split_16250;

  corral_source_split_16250:
    assume {:verifier.code 0} true;
    goto $bb4912;

  $bb4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5883} ___udelay(4295000);
    goto corral_source_split_16252;

  corral_source_split_16252:
    assume {:verifier.code 0} true;
    goto $bb4913;

  $bb4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5884} ___udelay(4295000);
    goto corral_source_split_16254;

  corral_source_split_16254:
    assume {:verifier.code 0} true;
    goto $bb4914;

  $bb4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5885} ___udelay(4295000);
    goto corral_source_split_16256;

  corral_source_split_16256:
    assume {:verifier.code 0} true;
    goto $bb4915;

  $bb4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5886} ___udelay(4295000);
    goto corral_source_split_16258;

  corral_source_split_16258:
    assume {:verifier.code 0} true;
    goto $bb4916;

  $bb4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5887} ___udelay(4295000);
    goto corral_source_split_16260;

  corral_source_split_16260:
    assume {:verifier.code 0} true;
    goto $bb4917;

  $bb4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5888} ___udelay(4295000);
    goto corral_source_split_16262;

  corral_source_split_16262:
    assume {:verifier.code 0} true;
    goto $bb4918;

  $bb4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5889} ___udelay(4295000);
    goto corral_source_split_16264;

  corral_source_split_16264:
    assume {:verifier.code 0} true;
    goto $bb4919;

  $bb4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5890} ___udelay(4295000);
    goto corral_source_split_16266;

  corral_source_split_16266:
    assume {:verifier.code 0} true;
    goto $bb4920;

  $bb4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5891} ___udelay(4295000);
    goto corral_source_split_16268;

  corral_source_split_16268:
    assume {:verifier.code 0} true;
    goto $bb4921;

  $bb4921:
    assume {:verifier.code 0} true;
    goto $bb4922;

  $bb4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5892} $i850 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16270;

  corral_source_split_16270:
    assume {:verifier.code 0} true;
    $i851 := $eq.i32($i847, $i850);
    goto corral_source_split_16271;

  corral_source_split_16271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i851} true;
    goto $bb4923, $bb4924;

  $bb4924:
    assume !($i851 == 1);
    assume {:verifier.code 0} true;
    goto $bb4925;

  $bb4925:
    assume {:verifier.code 0} true;
    goto $bb4929;

  $bb4929:
    assume {:verifier.code 0} true;
    goto $bb4930;

  $bb4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5893} ___udelay(4295000);
    goto corral_source_split_16276;

  corral_source_split_16276:
    assume {:verifier.code 0} true;
    goto $bb4931;

  $bb4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5894} ___udelay(4295000);
    goto corral_source_split_16278;

  corral_source_split_16278:
    assume {:verifier.code 0} true;
    goto $bb4932;

  $bb4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5895} ___udelay(4295000);
    goto corral_source_split_16280;

  corral_source_split_16280:
    assume {:verifier.code 0} true;
    goto $bb4933;

  $bb4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5896} ___udelay(4295000);
    goto corral_source_split_16282;

  corral_source_split_16282:
    assume {:verifier.code 0} true;
    goto $bb4934;

  $bb4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5897} ___udelay(4295000);
    goto corral_source_split_16284;

  corral_source_split_16284:
    assume {:verifier.code 0} true;
    goto $bb4935;

  $bb4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5898} ___udelay(4295000);
    goto corral_source_split_16286;

  corral_source_split_16286:
    assume {:verifier.code 0} true;
    goto $bb4936;

  $bb4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5899} ___udelay(4295000);
    goto corral_source_split_16288;

  corral_source_split_16288:
    assume {:verifier.code 0} true;
    goto $bb4937;

  $bb4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5900} ___udelay(4295000);
    goto corral_source_split_16290;

  corral_source_split_16290:
    assume {:verifier.code 0} true;
    goto $bb4938;

  $bb4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5901} ___udelay(4295000);
    goto corral_source_split_16292;

  corral_source_split_16292:
    assume {:verifier.code 0} true;
    goto $bb4939;

  $bb4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5902} ___udelay(4295000);
    goto corral_source_split_16294;

  corral_source_split_16294:
    assume {:verifier.code 0} true;
    goto $bb4940;

  $bb4940:
    assume {:verifier.code 0} true;
    goto $bb4941;

  $bb4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5903} $i853 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16296;

  corral_source_split_16296:
    assume {:verifier.code 0} true;
    $i854 := $eq.i32($i850, $i853);
    goto corral_source_split_16297;

  corral_source_split_16297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i854} true;
    goto $bb4942, $bb4943;

  $bb4943:
    assume !($i854 == 1);
    assume {:verifier.code 0} true;
    goto $bb4944;

  $bb4944:
    assume {:verifier.code 0} true;
    goto $bb4948;

  $bb4948:
    assume {:verifier.code 0} true;
    goto $bb4949;

  $bb4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5904} ___udelay(4295000);
    goto corral_source_split_16302;

  corral_source_split_16302:
    assume {:verifier.code 0} true;
    goto $bb4950;

  $bb4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5905} ___udelay(4295000);
    goto corral_source_split_16304;

  corral_source_split_16304:
    assume {:verifier.code 0} true;
    goto $bb4951;

  $bb4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5906} ___udelay(4295000);
    goto corral_source_split_16306;

  corral_source_split_16306:
    assume {:verifier.code 0} true;
    goto $bb4952;

  $bb4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5907} ___udelay(4295000);
    goto corral_source_split_16308;

  corral_source_split_16308:
    assume {:verifier.code 0} true;
    goto $bb4953;

  $bb4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5908} ___udelay(4295000);
    goto corral_source_split_16310;

  corral_source_split_16310:
    assume {:verifier.code 0} true;
    goto $bb4954;

  $bb4954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5909} ___udelay(4295000);
    goto corral_source_split_16312;

  corral_source_split_16312:
    assume {:verifier.code 0} true;
    goto $bb4955;

  $bb4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5910} ___udelay(4295000);
    goto corral_source_split_16314;

  corral_source_split_16314:
    assume {:verifier.code 0} true;
    goto $bb4956;

  $bb4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5911} ___udelay(4295000);
    goto corral_source_split_16316;

  corral_source_split_16316:
    assume {:verifier.code 0} true;
    goto $bb4957;

  $bb4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5912} ___udelay(4295000);
    goto corral_source_split_16318;

  corral_source_split_16318:
    assume {:verifier.code 0} true;
    goto $bb4958;

  $bb4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5913} ___udelay(4295000);
    goto corral_source_split_16320;

  corral_source_split_16320:
    assume {:verifier.code 0} true;
    goto $bb4959;

  $bb4959:
    assume {:verifier.code 0} true;
    goto $bb4960;

  $bb4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5914} $i856 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16322;

  corral_source_split_16322:
    assume {:verifier.code 0} true;
    $i857 := $eq.i32($i853, $i856);
    goto corral_source_split_16323;

  corral_source_split_16323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i857} true;
    goto $bb4961, $bb4962;

  $bb4962:
    assume !($i857 == 1);
    assume {:verifier.code 0} true;
    goto $bb4963;

  $bb4963:
    assume {:verifier.code 0} true;
    goto $bb4967;

  $bb4967:
    assume {:verifier.code 0} true;
    goto $bb4968;

  $bb4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5915} ___udelay(4295000);
    goto corral_source_split_16328;

  corral_source_split_16328:
    assume {:verifier.code 0} true;
    goto $bb4969;

  $bb4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5916} ___udelay(4295000);
    goto corral_source_split_16330;

  corral_source_split_16330:
    assume {:verifier.code 0} true;
    goto $bb4970;

  $bb4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5917} ___udelay(4295000);
    goto corral_source_split_16332;

  corral_source_split_16332:
    assume {:verifier.code 0} true;
    goto $bb4971;

  $bb4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5918} ___udelay(4295000);
    goto corral_source_split_16334;

  corral_source_split_16334:
    assume {:verifier.code 0} true;
    goto $bb4972;

  $bb4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5919} ___udelay(4295000);
    goto corral_source_split_16336;

  corral_source_split_16336:
    assume {:verifier.code 0} true;
    goto $bb4973;

  $bb4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5920} ___udelay(4295000);
    goto corral_source_split_16338;

  corral_source_split_16338:
    assume {:verifier.code 0} true;
    goto $bb4974;

  $bb4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5921} ___udelay(4295000);
    goto corral_source_split_16340;

  corral_source_split_16340:
    assume {:verifier.code 0} true;
    goto $bb4975;

  $bb4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5922} ___udelay(4295000);
    goto corral_source_split_16342;

  corral_source_split_16342:
    assume {:verifier.code 0} true;
    goto $bb4976;

  $bb4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5923} ___udelay(4295000);
    goto corral_source_split_16344;

  corral_source_split_16344:
    assume {:verifier.code 0} true;
    goto $bb4977;

  $bb4977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5924} ___udelay(4295000);
    goto corral_source_split_16346;

  corral_source_split_16346:
    assume {:verifier.code 0} true;
    goto $bb4978;

  $bb4978:
    assume {:verifier.code 0} true;
    goto $bb4979;

  $bb4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5925} $i859 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16348;

  corral_source_split_16348:
    assume {:verifier.code 0} true;
    $i860 := $eq.i32($i856, $i859);
    goto corral_source_split_16349;

  corral_source_split_16349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i860} true;
    goto $bb4980, $bb4981;

  $bb4981:
    assume !($i860 == 1);
    assume {:verifier.code 0} true;
    goto $bb4982;

  $bb4982:
    assume {:verifier.code 0} true;
    goto $bb4986;

  $bb4986:
    assume {:verifier.code 0} true;
    goto $bb4987;

  $bb4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5926} ___udelay(4295000);
    goto corral_source_split_16354;

  corral_source_split_16354:
    assume {:verifier.code 0} true;
    goto $bb4988;

  $bb4988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5927} ___udelay(4295000);
    goto corral_source_split_16356;

  corral_source_split_16356:
    assume {:verifier.code 0} true;
    goto $bb4989;

  $bb4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5928} ___udelay(4295000);
    goto corral_source_split_16358;

  corral_source_split_16358:
    assume {:verifier.code 0} true;
    goto $bb4990;

  $bb4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5929} ___udelay(4295000);
    goto corral_source_split_16360;

  corral_source_split_16360:
    assume {:verifier.code 0} true;
    goto $bb4991;

  $bb4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5930} ___udelay(4295000);
    goto corral_source_split_16362;

  corral_source_split_16362:
    assume {:verifier.code 0} true;
    goto $bb4992;

  $bb4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5931} ___udelay(4295000);
    goto corral_source_split_16364;

  corral_source_split_16364:
    assume {:verifier.code 0} true;
    goto $bb4993;

  $bb4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5932} ___udelay(4295000);
    goto corral_source_split_16366;

  corral_source_split_16366:
    assume {:verifier.code 0} true;
    goto $bb4994;

  $bb4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5933} ___udelay(4295000);
    goto corral_source_split_16368;

  corral_source_split_16368:
    assume {:verifier.code 0} true;
    goto $bb4995;

  $bb4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5934} ___udelay(4295000);
    goto corral_source_split_16370;

  corral_source_split_16370:
    assume {:verifier.code 0} true;
    goto $bb4996;

  $bb4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5935} ___udelay(4295000);
    goto corral_source_split_16372;

  corral_source_split_16372:
    assume {:verifier.code 0} true;
    goto $bb4997;

  $bb4997:
    assume {:verifier.code 0} true;
    goto $bb4998;

  $bb4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5936} $i862 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16374;

  corral_source_split_16374:
    assume {:verifier.code 0} true;
    $i863 := $eq.i32($i859, $i862);
    goto corral_source_split_16375;

  corral_source_split_16375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i863} true;
    goto $bb4999, $bb5000;

  $bb5000:
    assume !($i863 == 1);
    assume {:verifier.code 0} true;
    goto $bb5001;

  $bb5001:
    assume {:verifier.code 0} true;
    goto $bb5005;

  $bb5005:
    assume {:verifier.code 0} true;
    goto $bb5006;

  $bb5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5937} ___udelay(4295000);
    goto corral_source_split_16380;

  corral_source_split_16380:
    assume {:verifier.code 0} true;
    goto $bb5007;

  $bb5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5938} ___udelay(4295000);
    goto corral_source_split_16382;

  corral_source_split_16382:
    assume {:verifier.code 0} true;
    goto $bb5008;

  $bb5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5939} ___udelay(4295000);
    goto corral_source_split_16384;

  corral_source_split_16384:
    assume {:verifier.code 0} true;
    goto $bb5009;

  $bb5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5940} ___udelay(4295000);
    goto corral_source_split_16386;

  corral_source_split_16386:
    assume {:verifier.code 0} true;
    goto $bb5010;

  $bb5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5941} ___udelay(4295000);
    goto corral_source_split_16388;

  corral_source_split_16388:
    assume {:verifier.code 0} true;
    goto $bb5011;

  $bb5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5942} ___udelay(4295000);
    goto corral_source_split_16390;

  corral_source_split_16390:
    assume {:verifier.code 0} true;
    goto $bb5012;

  $bb5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5943} ___udelay(4295000);
    goto corral_source_split_16392;

  corral_source_split_16392:
    assume {:verifier.code 0} true;
    goto $bb5013;

  $bb5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5944} ___udelay(4295000);
    goto corral_source_split_16394;

  corral_source_split_16394:
    assume {:verifier.code 0} true;
    goto $bb5014;

  $bb5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5945} ___udelay(4295000);
    goto corral_source_split_16396;

  corral_source_split_16396:
    assume {:verifier.code 0} true;
    goto $bb5015;

  $bb5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5946} ___udelay(4295000);
    goto corral_source_split_16398;

  corral_source_split_16398:
    assume {:verifier.code 0} true;
    goto $bb5016;

  $bb5016:
    assume {:verifier.code 0} true;
    goto $bb5017;

  $bb5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5947} $i865 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16400;

  corral_source_split_16400:
    assume {:verifier.code 0} true;
    $i866 := $eq.i32($i862, $i865);
    goto corral_source_split_16401;

  corral_source_split_16401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i866} true;
    goto $bb5018, $bb5019;

  $bb5019:
    assume !($i866 == 1);
    assume {:verifier.code 0} true;
    goto $bb5020;

  $bb5020:
    assume {:verifier.code 0} true;
    goto $bb5024;

  $bb5024:
    assume {:verifier.code 0} true;
    goto $bb5025;

  $bb5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5948} ___udelay(4295000);
    goto corral_source_split_16406;

  corral_source_split_16406:
    assume {:verifier.code 0} true;
    goto $bb5026;

  $bb5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5949} ___udelay(4295000);
    goto corral_source_split_16408;

  corral_source_split_16408:
    assume {:verifier.code 0} true;
    goto $bb5027;

  $bb5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5950} ___udelay(4295000);
    goto corral_source_split_16410;

  corral_source_split_16410:
    assume {:verifier.code 0} true;
    goto $bb5028;

  $bb5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5951} ___udelay(4295000);
    goto corral_source_split_16412;

  corral_source_split_16412:
    assume {:verifier.code 0} true;
    goto $bb5029;

  $bb5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5952} ___udelay(4295000);
    goto corral_source_split_16414;

  corral_source_split_16414:
    assume {:verifier.code 0} true;
    goto $bb5030;

  $bb5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5953} ___udelay(4295000);
    goto corral_source_split_16416;

  corral_source_split_16416:
    assume {:verifier.code 0} true;
    goto $bb5031;

  $bb5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5954} ___udelay(4295000);
    goto corral_source_split_16418;

  corral_source_split_16418:
    assume {:verifier.code 0} true;
    goto $bb5032;

  $bb5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5955} ___udelay(4295000);
    goto corral_source_split_16420;

  corral_source_split_16420:
    assume {:verifier.code 0} true;
    goto $bb5033;

  $bb5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5956} ___udelay(4295000);
    goto corral_source_split_16422;

  corral_source_split_16422:
    assume {:verifier.code 0} true;
    goto $bb5034;

  $bb5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5957} ___udelay(4295000);
    goto corral_source_split_16424;

  corral_source_split_16424:
    assume {:verifier.code 0} true;
    goto $bb5035;

  $bb5035:
    assume {:verifier.code 0} true;
    goto $bb5036;

  $bb5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5958} $i868 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16426;

  corral_source_split_16426:
    assume {:verifier.code 0} true;
    $i869 := $eq.i32($i865, $i868);
    goto corral_source_split_16427;

  corral_source_split_16427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i869} true;
    goto $bb5037, $bb5038;

  $bb5038:
    assume !($i869 == 1);
    assume {:verifier.code 0} true;
    goto $bb5039;

  $bb5039:
    assume {:verifier.code 0} true;
    goto $bb5043;

  $bb5043:
    assume {:verifier.code 0} true;
    goto $bb5044;

  $bb5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5959} ___udelay(4295000);
    goto corral_source_split_16432;

  corral_source_split_16432:
    assume {:verifier.code 0} true;
    goto $bb5045;

  $bb5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5960} ___udelay(4295000);
    goto corral_source_split_16434;

  corral_source_split_16434:
    assume {:verifier.code 0} true;
    goto $bb5046;

  $bb5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5961} ___udelay(4295000);
    goto corral_source_split_16436;

  corral_source_split_16436:
    assume {:verifier.code 0} true;
    goto $bb5047;

  $bb5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5962} ___udelay(4295000);
    goto corral_source_split_16438;

  corral_source_split_16438:
    assume {:verifier.code 0} true;
    goto $bb5048;

  $bb5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5963} ___udelay(4295000);
    goto corral_source_split_16440;

  corral_source_split_16440:
    assume {:verifier.code 0} true;
    goto $bb5049;

  $bb5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5964} ___udelay(4295000);
    goto corral_source_split_16442;

  corral_source_split_16442:
    assume {:verifier.code 0} true;
    goto $bb5050;

  $bb5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5965} ___udelay(4295000);
    goto corral_source_split_16444;

  corral_source_split_16444:
    assume {:verifier.code 0} true;
    goto $bb5051;

  $bb5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5966} ___udelay(4295000);
    goto corral_source_split_16446;

  corral_source_split_16446:
    assume {:verifier.code 0} true;
    goto $bb5052;

  $bb5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5967} ___udelay(4295000);
    goto corral_source_split_16448;

  corral_source_split_16448:
    assume {:verifier.code 0} true;
    goto $bb5053;

  $bb5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5968} ___udelay(4295000);
    goto corral_source_split_16450;

  corral_source_split_16450:
    assume {:verifier.code 0} true;
    goto $bb5054;

  $bb5054:
    assume {:verifier.code 0} true;
    goto $bb5055;

  $bb5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5969} $i871 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16452;

  corral_source_split_16452:
    assume {:verifier.code 0} true;
    $i872 := $eq.i32($i868, $i871);
    goto corral_source_split_16453;

  corral_source_split_16453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i872} true;
    goto $bb5056, $bb5057;

  $bb5057:
    assume !($i872 == 1);
    assume {:verifier.code 0} true;
    goto $bb5058;

  $bb5058:
    assume {:verifier.code 0} true;
    goto $bb5062;

  $bb5062:
    assume {:verifier.code 0} true;
    goto $bb5063;

  $bb5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5970} ___udelay(4295000);
    goto corral_source_split_16458;

  corral_source_split_16458:
    assume {:verifier.code 0} true;
    goto $bb5064;

  $bb5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5971} ___udelay(4295000);
    goto corral_source_split_16460;

  corral_source_split_16460:
    assume {:verifier.code 0} true;
    goto $bb5065;

  $bb5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5972} ___udelay(4295000);
    goto corral_source_split_16462;

  corral_source_split_16462:
    assume {:verifier.code 0} true;
    goto $bb5066;

  $bb5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5973} ___udelay(4295000);
    goto corral_source_split_16464;

  corral_source_split_16464:
    assume {:verifier.code 0} true;
    goto $bb5067;

  $bb5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5974} ___udelay(4295000);
    goto corral_source_split_16466;

  corral_source_split_16466:
    assume {:verifier.code 0} true;
    goto $bb5068;

  $bb5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5975} ___udelay(4295000);
    goto corral_source_split_16468;

  corral_source_split_16468:
    assume {:verifier.code 0} true;
    goto $bb5069;

  $bb5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5976} ___udelay(4295000);
    goto corral_source_split_16470;

  corral_source_split_16470:
    assume {:verifier.code 0} true;
    goto $bb5070;

  $bb5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5977} ___udelay(4295000);
    goto corral_source_split_16472;

  corral_source_split_16472:
    assume {:verifier.code 0} true;
    goto $bb5071;

  $bb5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5978} ___udelay(4295000);
    goto corral_source_split_16474;

  corral_source_split_16474:
    assume {:verifier.code 0} true;
    goto $bb5072;

  $bb5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5979} ___udelay(4295000);
    goto corral_source_split_16476;

  corral_source_split_16476:
    assume {:verifier.code 0} true;
    goto $bb5073;

  $bb5073:
    assume {:verifier.code 0} true;
    goto $bb5074;

  $bb5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5980} $i874 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16478;

  corral_source_split_16478:
    assume {:verifier.code 0} true;
    $i875 := $eq.i32($i871, $i874);
    goto corral_source_split_16479;

  corral_source_split_16479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i875} true;
    goto $bb5075, $bb5076;

  $bb5076:
    assume !($i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb5077;

  $bb5077:
    assume {:verifier.code 0} true;
    goto $bb5081;

  $bb5081:
    assume {:verifier.code 0} true;
    goto $bb5082;

  $bb5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5981} ___udelay(4295000);
    goto corral_source_split_16484;

  corral_source_split_16484:
    assume {:verifier.code 0} true;
    goto $bb5083;

  $bb5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5982} ___udelay(4295000);
    goto corral_source_split_16486;

  corral_source_split_16486:
    assume {:verifier.code 0} true;
    goto $bb5084;

  $bb5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5983} ___udelay(4295000);
    goto corral_source_split_16488;

  corral_source_split_16488:
    assume {:verifier.code 0} true;
    goto $bb5085;

  $bb5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5984} ___udelay(4295000);
    goto corral_source_split_16490;

  corral_source_split_16490:
    assume {:verifier.code 0} true;
    goto $bb5086;

  $bb5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5985} ___udelay(4295000);
    goto corral_source_split_16492;

  corral_source_split_16492:
    assume {:verifier.code 0} true;
    goto $bb5087;

  $bb5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5986} ___udelay(4295000);
    goto corral_source_split_16494;

  corral_source_split_16494:
    assume {:verifier.code 0} true;
    goto $bb5088;

  $bb5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5987} ___udelay(4295000);
    goto corral_source_split_16496;

  corral_source_split_16496:
    assume {:verifier.code 0} true;
    goto $bb5089;

  $bb5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5988} ___udelay(4295000);
    goto corral_source_split_16498;

  corral_source_split_16498:
    assume {:verifier.code 0} true;
    goto $bb5090;

  $bb5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5989} ___udelay(4295000);
    goto corral_source_split_16500;

  corral_source_split_16500:
    assume {:verifier.code 0} true;
    goto $bb5091;

  $bb5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5990} ___udelay(4295000);
    goto corral_source_split_16502;

  corral_source_split_16502:
    assume {:verifier.code 0} true;
    goto $bb5092;

  $bb5092:
    assume {:verifier.code 0} true;
    goto $bb5093;

  $bb5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5991} $i877 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16504;

  corral_source_split_16504:
    assume {:verifier.code 0} true;
    $i878 := $eq.i32($i874, $i877);
    goto corral_source_split_16505;

  corral_source_split_16505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i878} true;
    goto $bb5094, $bb5095;

  $bb5095:
    assume !($i878 == 1);
    assume {:verifier.code 0} true;
    goto $bb5096;

  $bb5096:
    assume {:verifier.code 0} true;
    goto $bb5100;

  $bb5100:
    assume {:verifier.code 0} true;
    goto $bb5101;

  $bb5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5992} ___udelay(4295000);
    goto corral_source_split_16510;

  corral_source_split_16510:
    assume {:verifier.code 0} true;
    goto $bb5102;

  $bb5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5993} ___udelay(4295000);
    goto corral_source_split_16512;

  corral_source_split_16512:
    assume {:verifier.code 0} true;
    goto $bb5103;

  $bb5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5994} ___udelay(4295000);
    goto corral_source_split_16514;

  corral_source_split_16514:
    assume {:verifier.code 0} true;
    goto $bb5104;

  $bb5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5995} ___udelay(4295000);
    goto corral_source_split_16516;

  corral_source_split_16516:
    assume {:verifier.code 0} true;
    goto $bb5105;

  $bb5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5996} ___udelay(4295000);
    goto corral_source_split_16518;

  corral_source_split_16518:
    assume {:verifier.code 0} true;
    goto $bb5106;

  $bb5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5997} ___udelay(4295000);
    goto corral_source_split_16520;

  corral_source_split_16520:
    assume {:verifier.code 0} true;
    goto $bb5107;

  $bb5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5998} ___udelay(4295000);
    goto corral_source_split_16522;

  corral_source_split_16522:
    assume {:verifier.code 0} true;
    goto $bb5108;

  $bb5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5999} ___udelay(4295000);
    goto corral_source_split_16524;

  corral_source_split_16524:
    assume {:verifier.code 0} true;
    goto $bb5109;

  $bb5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6000} ___udelay(4295000);
    goto corral_source_split_16526;

  corral_source_split_16526:
    assume {:verifier.code 0} true;
    goto $bb5110;

  $bb5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6001} ___udelay(4295000);
    goto corral_source_split_16528;

  corral_source_split_16528:
    assume {:verifier.code 0} true;
    goto $bb5111;

  $bb5111:
    assume {:verifier.code 0} true;
    goto $bb5112;

  $bb5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6002} $i880 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16530;

  corral_source_split_16530:
    assume {:verifier.code 0} true;
    $i881 := $eq.i32($i877, $i880);
    goto corral_source_split_16531;

  corral_source_split_16531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i881} true;
    goto $bb5113, $bb5114;

  $bb5114:
    assume !($i881 == 1);
    assume {:verifier.code 0} true;
    goto $bb5115;

  $bb5115:
    assume {:verifier.code 0} true;
    goto $bb5119;

  $bb5119:
    assume {:verifier.code 0} true;
    goto $bb5120;

  $bb5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6003} ___udelay(4295000);
    goto corral_source_split_16536;

  corral_source_split_16536:
    assume {:verifier.code 0} true;
    goto $bb5121;

  $bb5121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6004} ___udelay(4295000);
    goto corral_source_split_16538;

  corral_source_split_16538:
    assume {:verifier.code 0} true;
    goto $bb5122;

  $bb5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6005} ___udelay(4295000);
    goto corral_source_split_16540;

  corral_source_split_16540:
    assume {:verifier.code 0} true;
    goto $bb5123;

  $bb5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6006} ___udelay(4295000);
    goto corral_source_split_16542;

  corral_source_split_16542:
    assume {:verifier.code 0} true;
    goto $bb5124;

  $bb5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6007} ___udelay(4295000);
    goto corral_source_split_16544;

  corral_source_split_16544:
    assume {:verifier.code 0} true;
    goto $bb5125;

  $bb5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6008} ___udelay(4295000);
    goto corral_source_split_16546;

  corral_source_split_16546:
    assume {:verifier.code 0} true;
    goto $bb5126;

  $bb5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6009} ___udelay(4295000);
    goto corral_source_split_16548;

  corral_source_split_16548:
    assume {:verifier.code 0} true;
    goto $bb5127;

  $bb5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6010} ___udelay(4295000);
    goto corral_source_split_16550;

  corral_source_split_16550:
    assume {:verifier.code 0} true;
    goto $bb5128;

  $bb5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6011} ___udelay(4295000);
    goto corral_source_split_16552;

  corral_source_split_16552:
    assume {:verifier.code 0} true;
    goto $bb5129;

  $bb5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6012} ___udelay(4295000);
    goto corral_source_split_16554;

  corral_source_split_16554:
    assume {:verifier.code 0} true;
    goto $bb5130;

  $bb5130:
    assume {:verifier.code 0} true;
    goto $bb5131;

  $bb5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6013} $i883 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16556;

  corral_source_split_16556:
    assume {:verifier.code 0} true;
    $i884 := $eq.i32($i880, $i883);
    goto corral_source_split_16557;

  corral_source_split_16557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i884} true;
    goto $bb5132, $bb5133;

  $bb5133:
    assume !($i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb5134;

  $bb5134:
    assume {:verifier.code 0} true;
    goto $bb5138;

  $bb5138:
    assume {:verifier.code 0} true;
    goto $bb5139;

  $bb5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6014} ___udelay(4295000);
    goto corral_source_split_16562;

  corral_source_split_16562:
    assume {:verifier.code 0} true;
    goto $bb5140;

  $bb5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6015} ___udelay(4295000);
    goto corral_source_split_16564;

  corral_source_split_16564:
    assume {:verifier.code 0} true;
    goto $bb5141;

  $bb5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6016} ___udelay(4295000);
    goto corral_source_split_16566;

  corral_source_split_16566:
    assume {:verifier.code 0} true;
    goto $bb5142;

  $bb5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6017} ___udelay(4295000);
    goto corral_source_split_16568;

  corral_source_split_16568:
    assume {:verifier.code 0} true;
    goto $bb5143;

  $bb5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6018} ___udelay(4295000);
    goto corral_source_split_16570;

  corral_source_split_16570:
    assume {:verifier.code 0} true;
    goto $bb5144;

  $bb5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6019} ___udelay(4295000);
    goto corral_source_split_16572;

  corral_source_split_16572:
    assume {:verifier.code 0} true;
    goto $bb5145;

  $bb5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6020} ___udelay(4295000);
    goto corral_source_split_16574;

  corral_source_split_16574:
    assume {:verifier.code 0} true;
    goto $bb5146;

  $bb5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6021} ___udelay(4295000);
    goto corral_source_split_16576;

  corral_source_split_16576:
    assume {:verifier.code 0} true;
    goto $bb5147;

  $bb5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6022} ___udelay(4295000);
    goto corral_source_split_16578;

  corral_source_split_16578:
    assume {:verifier.code 0} true;
    goto $bb5148;

  $bb5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6023} ___udelay(4295000);
    goto corral_source_split_16580;

  corral_source_split_16580:
    assume {:verifier.code 0} true;
    goto $bb5149;

  $bb5149:
    assume {:verifier.code 0} true;
    goto $bb5150;

  $bb5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6024} $i886 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16582;

  corral_source_split_16582:
    assume {:verifier.code 0} true;
    $i887 := $eq.i32($i883, $i886);
    goto corral_source_split_16583;

  corral_source_split_16583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i887} true;
    goto $bb5151, $bb5152;

  $bb5152:
    assume !($i887 == 1);
    assume {:verifier.code 0} true;
    goto $bb5153;

  $bb5153:
    assume {:verifier.code 0} true;
    goto $bb5157;

  $bb5157:
    assume {:verifier.code 0} true;
    goto $bb5158;

  $bb5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6025} ___udelay(4295000);
    goto corral_source_split_16588;

  corral_source_split_16588:
    assume {:verifier.code 0} true;
    goto $bb5159;

  $bb5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6026} ___udelay(4295000);
    goto corral_source_split_16590;

  corral_source_split_16590:
    assume {:verifier.code 0} true;
    goto $bb5160;

  $bb5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6027} ___udelay(4295000);
    goto corral_source_split_16592;

  corral_source_split_16592:
    assume {:verifier.code 0} true;
    goto $bb5161;

  $bb5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6028} ___udelay(4295000);
    goto corral_source_split_16594;

  corral_source_split_16594:
    assume {:verifier.code 0} true;
    goto $bb5162;

  $bb5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6029} ___udelay(4295000);
    goto corral_source_split_16596;

  corral_source_split_16596:
    assume {:verifier.code 0} true;
    goto $bb5163;

  $bb5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6030} ___udelay(4295000);
    goto corral_source_split_16598;

  corral_source_split_16598:
    assume {:verifier.code 0} true;
    goto $bb5164;

  $bb5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6031} ___udelay(4295000);
    goto corral_source_split_16600;

  corral_source_split_16600:
    assume {:verifier.code 0} true;
    goto $bb5165;

  $bb5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6032} ___udelay(4295000);
    goto corral_source_split_16602;

  corral_source_split_16602:
    assume {:verifier.code 0} true;
    goto $bb5166;

  $bb5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6033} ___udelay(4295000);
    goto corral_source_split_16604;

  corral_source_split_16604:
    assume {:verifier.code 0} true;
    goto $bb5167;

  $bb5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6034} ___udelay(4295000);
    goto corral_source_split_16606;

  corral_source_split_16606:
    assume {:verifier.code 0} true;
    goto $bb5168;

  $bb5168:
    assume {:verifier.code 0} true;
    goto $bb5169;

  $bb5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6035} $i889 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16608;

  corral_source_split_16608:
    assume {:verifier.code 0} true;
    $i890 := $eq.i32($i886, $i889);
    goto corral_source_split_16609;

  corral_source_split_16609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i890} true;
    goto $bb5170, $bb5171;

  $bb5171:
    assume !($i890 == 1);
    assume {:verifier.code 0} true;
    goto $bb5172;

  $bb5172:
    assume {:verifier.code 0} true;
    goto $bb5176;

  $bb5176:
    assume {:verifier.code 0} true;
    goto $bb5177;

  $bb5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6036} ___udelay(4295000);
    goto corral_source_split_16614;

  corral_source_split_16614:
    assume {:verifier.code 0} true;
    goto $bb5178;

  $bb5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6037} ___udelay(4295000);
    goto corral_source_split_16616;

  corral_source_split_16616:
    assume {:verifier.code 0} true;
    goto $bb5179;

  $bb5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6038} ___udelay(4295000);
    goto corral_source_split_16618;

  corral_source_split_16618:
    assume {:verifier.code 0} true;
    goto $bb5180;

  $bb5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6039} ___udelay(4295000);
    goto corral_source_split_16620;

  corral_source_split_16620:
    assume {:verifier.code 0} true;
    goto $bb5181;

  $bb5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6040} ___udelay(4295000);
    goto corral_source_split_16622;

  corral_source_split_16622:
    assume {:verifier.code 0} true;
    goto $bb5182;

  $bb5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6041} ___udelay(4295000);
    goto corral_source_split_16624;

  corral_source_split_16624:
    assume {:verifier.code 0} true;
    goto $bb5183;

  $bb5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6042} ___udelay(4295000);
    goto corral_source_split_16626;

  corral_source_split_16626:
    assume {:verifier.code 0} true;
    goto $bb5184;

  $bb5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6043} ___udelay(4295000);
    goto corral_source_split_16628;

  corral_source_split_16628:
    assume {:verifier.code 0} true;
    goto $bb5185;

  $bb5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6044} ___udelay(4295000);
    goto corral_source_split_16630;

  corral_source_split_16630:
    assume {:verifier.code 0} true;
    goto $bb5186;

  $bb5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6045} ___udelay(4295000);
    goto corral_source_split_16632;

  corral_source_split_16632:
    assume {:verifier.code 0} true;
    goto $bb5187;

  $bb5187:
    assume {:verifier.code 0} true;
    goto $bb5188;

  $bb5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6046} $i892 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16634;

  corral_source_split_16634:
    assume {:verifier.code 0} true;
    $i893 := $eq.i32($i889, $i892);
    goto corral_source_split_16635;

  corral_source_split_16635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i893} true;
    goto $bb5189, $bb5190;

  $bb5190:
    assume !($i893 == 1);
    assume {:verifier.code 0} true;
    goto $bb5191;

  $bb5191:
    assume {:verifier.code 0} true;
    goto $bb5195;

  $bb5195:
    assume {:verifier.code 0} true;
    goto $bb5196;

  $bb5196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6047} ___udelay(4295000);
    goto corral_source_split_16640;

  corral_source_split_16640:
    assume {:verifier.code 0} true;
    goto $bb5197;

  $bb5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6048} ___udelay(4295000);
    goto corral_source_split_16642;

  corral_source_split_16642:
    assume {:verifier.code 0} true;
    goto $bb5198;

  $bb5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6049} ___udelay(4295000);
    goto corral_source_split_16644;

  corral_source_split_16644:
    assume {:verifier.code 0} true;
    goto $bb5199;

  $bb5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6050} ___udelay(4295000);
    goto corral_source_split_16646;

  corral_source_split_16646:
    assume {:verifier.code 0} true;
    goto $bb5200;

  $bb5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6051} ___udelay(4295000);
    goto corral_source_split_16648;

  corral_source_split_16648:
    assume {:verifier.code 0} true;
    goto $bb5201;

  $bb5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6052} ___udelay(4295000);
    goto corral_source_split_16650;

  corral_source_split_16650:
    assume {:verifier.code 0} true;
    goto $bb5202;

  $bb5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6053} ___udelay(4295000);
    goto corral_source_split_16652;

  corral_source_split_16652:
    assume {:verifier.code 0} true;
    goto $bb5203;

  $bb5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6054} ___udelay(4295000);
    goto corral_source_split_16654;

  corral_source_split_16654:
    assume {:verifier.code 0} true;
    goto $bb5204;

  $bb5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6055} ___udelay(4295000);
    goto corral_source_split_16656;

  corral_source_split_16656:
    assume {:verifier.code 0} true;
    goto $bb5205;

  $bb5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6056} ___udelay(4295000);
    goto corral_source_split_16658;

  corral_source_split_16658:
    assume {:verifier.code 0} true;
    goto $bb5206;

  $bb5206:
    assume {:verifier.code 0} true;
    goto $bb5207;

  $bb5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6057} $i895 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16660;

  corral_source_split_16660:
    assume {:verifier.code 0} true;
    $i896 := $eq.i32($i892, $i895);
    goto corral_source_split_16661;

  corral_source_split_16661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i896} true;
    goto $bb5208, $bb5209;

  $bb5209:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    goto $bb5210;

  $bb5210:
    assume {:verifier.code 0} true;
    goto $bb5214;

  $bb5214:
    assume {:verifier.code 0} true;
    goto $bb5215;

  $bb5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6058} ___udelay(4295000);
    goto corral_source_split_16666;

  corral_source_split_16666:
    assume {:verifier.code 0} true;
    goto $bb5216;

  $bb5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6059} ___udelay(4295000);
    goto corral_source_split_16668;

  corral_source_split_16668:
    assume {:verifier.code 0} true;
    goto $bb5217;

  $bb5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6060} ___udelay(4295000);
    goto corral_source_split_16670;

  corral_source_split_16670:
    assume {:verifier.code 0} true;
    goto $bb5218;

  $bb5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6061} ___udelay(4295000);
    goto corral_source_split_16672;

  corral_source_split_16672:
    assume {:verifier.code 0} true;
    goto $bb5219;

  $bb5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6062} ___udelay(4295000);
    goto corral_source_split_16674;

  corral_source_split_16674:
    assume {:verifier.code 0} true;
    goto $bb5220;

  $bb5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6063} ___udelay(4295000);
    goto corral_source_split_16676;

  corral_source_split_16676:
    assume {:verifier.code 0} true;
    goto $bb5221;

  $bb5221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6064} ___udelay(4295000);
    goto corral_source_split_16678;

  corral_source_split_16678:
    assume {:verifier.code 0} true;
    goto $bb5222;

  $bb5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6065} ___udelay(4295000);
    goto corral_source_split_16680;

  corral_source_split_16680:
    assume {:verifier.code 0} true;
    goto $bb5223;

  $bb5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6066} ___udelay(4295000);
    goto corral_source_split_16682;

  corral_source_split_16682:
    assume {:verifier.code 0} true;
    goto $bb5224;

  $bb5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6067} ___udelay(4295000);
    goto corral_source_split_16684;

  corral_source_split_16684:
    assume {:verifier.code 0} true;
    goto $bb5225;

  $bb5225:
    assume {:verifier.code 0} true;
    goto $bb5226;

  $bb5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6068} $i898 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16686;

  corral_source_split_16686:
    assume {:verifier.code 0} true;
    $i899 := $eq.i32($i895, $i898);
    goto corral_source_split_16687;

  corral_source_split_16687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i899} true;
    goto $bb5227, $bb5228;

  $bb5228:
    assume !($i899 == 1);
    assume {:verifier.code 0} true;
    goto $bb5229;

  $bb5229:
    assume {:verifier.code 0} true;
    goto $bb5233;

  $bb5233:
    assume {:verifier.code 0} true;
    goto $bb5234;

  $bb5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6069} ___udelay(4295000);
    goto corral_source_split_16692;

  corral_source_split_16692:
    assume {:verifier.code 0} true;
    goto $bb5235;

  $bb5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6070} ___udelay(4295000);
    goto corral_source_split_16694;

  corral_source_split_16694:
    assume {:verifier.code 0} true;
    goto $bb5236;

  $bb5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6071} ___udelay(4295000);
    goto corral_source_split_16696;

  corral_source_split_16696:
    assume {:verifier.code 0} true;
    goto $bb5237;

  $bb5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6072} ___udelay(4295000);
    goto corral_source_split_16698;

  corral_source_split_16698:
    assume {:verifier.code 0} true;
    goto $bb5238;

  $bb5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6073} ___udelay(4295000);
    goto corral_source_split_16700;

  corral_source_split_16700:
    assume {:verifier.code 0} true;
    goto $bb5239;

  $bb5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6074} ___udelay(4295000);
    goto corral_source_split_16702;

  corral_source_split_16702:
    assume {:verifier.code 0} true;
    goto $bb5240;

  $bb5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6075} ___udelay(4295000);
    goto corral_source_split_16704;

  corral_source_split_16704:
    assume {:verifier.code 0} true;
    goto $bb5241;

  $bb5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6076} ___udelay(4295000);
    goto corral_source_split_16706;

  corral_source_split_16706:
    assume {:verifier.code 0} true;
    goto $bb5242;

  $bb5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6077} ___udelay(4295000);
    goto corral_source_split_16708;

  corral_source_split_16708:
    assume {:verifier.code 0} true;
    goto $bb5243;

  $bb5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6078} ___udelay(4295000);
    goto corral_source_split_16710;

  corral_source_split_16710:
    assume {:verifier.code 0} true;
    goto $bb5244;

  $bb5244:
    assume {:verifier.code 0} true;
    goto $bb5245;

  $bb5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6079} $i901 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16712;

  corral_source_split_16712:
    assume {:verifier.code 0} true;
    $i902 := $eq.i32($i898, $i901);
    goto corral_source_split_16713;

  corral_source_split_16713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i902} true;
    goto $bb5246, $bb5247;

  $bb5247:
    assume !($i902 == 1);
    assume {:verifier.code 0} true;
    goto $bb5248;

  $bb5248:
    assume {:verifier.code 0} true;
    goto $bb5252;

  $bb5252:
    assume {:verifier.code 0} true;
    goto $bb5253;

  $bb5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6080} ___udelay(4295000);
    goto corral_source_split_16718;

  corral_source_split_16718:
    assume {:verifier.code 0} true;
    goto $bb5254;

  $bb5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6081} ___udelay(4295000);
    goto corral_source_split_16720;

  corral_source_split_16720:
    assume {:verifier.code 0} true;
    goto $bb5255;

  $bb5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6082} ___udelay(4295000);
    goto corral_source_split_16722;

  corral_source_split_16722:
    assume {:verifier.code 0} true;
    goto $bb5256;

  $bb5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6083} ___udelay(4295000);
    goto corral_source_split_16724;

  corral_source_split_16724:
    assume {:verifier.code 0} true;
    goto $bb5257;

  $bb5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6084} ___udelay(4295000);
    goto corral_source_split_16726;

  corral_source_split_16726:
    assume {:verifier.code 0} true;
    goto $bb5258;

  $bb5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6085} ___udelay(4295000);
    goto corral_source_split_16728;

  corral_source_split_16728:
    assume {:verifier.code 0} true;
    goto $bb5259;

  $bb5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6086} ___udelay(4295000);
    goto corral_source_split_16730;

  corral_source_split_16730:
    assume {:verifier.code 0} true;
    goto $bb5260;

  $bb5260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6087} ___udelay(4295000);
    goto corral_source_split_16732;

  corral_source_split_16732:
    assume {:verifier.code 0} true;
    goto $bb5261;

  $bb5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6088} ___udelay(4295000);
    goto corral_source_split_16734;

  corral_source_split_16734:
    assume {:verifier.code 0} true;
    goto $bb5262;

  $bb5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6089} ___udelay(4295000);
    goto corral_source_split_16736;

  corral_source_split_16736:
    assume {:verifier.code 0} true;
    goto $bb5263;

  $bb5263:
    assume {:verifier.code 0} true;
    goto $bb5264;

  $bb5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6090} $i904 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16738;

  corral_source_split_16738:
    assume {:verifier.code 0} true;
    $i905 := $eq.i32($i901, $i904);
    goto corral_source_split_16739;

  corral_source_split_16739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i905} true;
    goto $bb5265, $bb5266;

  $bb5266:
    assume !($i905 == 1);
    assume {:verifier.code 0} true;
    goto $bb5267;

  $bb5267:
    assume {:verifier.code 0} true;
    goto $bb5271;

  $bb5271:
    assume {:verifier.code 0} true;
    goto $bb5272;

  $bb5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6091} ___udelay(4295000);
    goto corral_source_split_16744;

  corral_source_split_16744:
    assume {:verifier.code 0} true;
    goto $bb5273;

  $bb5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6092} ___udelay(4295000);
    goto corral_source_split_16746;

  corral_source_split_16746:
    assume {:verifier.code 0} true;
    goto $bb5274;

  $bb5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6093} ___udelay(4295000);
    goto corral_source_split_16748;

  corral_source_split_16748:
    assume {:verifier.code 0} true;
    goto $bb5275;

  $bb5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6094} ___udelay(4295000);
    goto corral_source_split_16750;

  corral_source_split_16750:
    assume {:verifier.code 0} true;
    goto $bb5276;

  $bb5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6095} ___udelay(4295000);
    goto corral_source_split_16752;

  corral_source_split_16752:
    assume {:verifier.code 0} true;
    goto $bb5277;

  $bb5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6096} ___udelay(4295000);
    goto corral_source_split_16754;

  corral_source_split_16754:
    assume {:verifier.code 0} true;
    goto $bb5278;

  $bb5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6097} ___udelay(4295000);
    goto corral_source_split_16756;

  corral_source_split_16756:
    assume {:verifier.code 0} true;
    goto $bb5279;

  $bb5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6098} ___udelay(4295000);
    goto corral_source_split_16758;

  corral_source_split_16758:
    assume {:verifier.code 0} true;
    goto $bb5280;

  $bb5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6099} ___udelay(4295000);
    goto corral_source_split_16760;

  corral_source_split_16760:
    assume {:verifier.code 0} true;
    goto $bb5281;

  $bb5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6100} ___udelay(4295000);
    goto corral_source_split_16762;

  corral_source_split_16762:
    assume {:verifier.code 0} true;
    goto $bb5282;

  $bb5282:
    assume {:verifier.code 0} true;
    goto $bb5283;

  $bb5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6101} $i907 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16764;

  corral_source_split_16764:
    assume {:verifier.code 0} true;
    $i908 := $eq.i32($i904, $i907);
    goto corral_source_split_16765;

  corral_source_split_16765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i908} true;
    goto $bb5284, $bb5285;

  $bb5285:
    assume !($i908 == 1);
    assume {:verifier.code 0} true;
    goto $bb5286;

  $bb5286:
    assume {:verifier.code 0} true;
    goto $bb5290;

  $bb5290:
    assume {:verifier.code 0} true;
    goto $bb5291;

  $bb5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6102} ___udelay(4295000);
    goto corral_source_split_16770;

  corral_source_split_16770:
    assume {:verifier.code 0} true;
    goto $bb5292;

  $bb5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6103} ___udelay(4295000);
    goto corral_source_split_16772;

  corral_source_split_16772:
    assume {:verifier.code 0} true;
    goto $bb5293;

  $bb5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6104} ___udelay(4295000);
    goto corral_source_split_16774;

  corral_source_split_16774:
    assume {:verifier.code 0} true;
    goto $bb5294;

  $bb5294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6105} ___udelay(4295000);
    goto corral_source_split_16776;

  corral_source_split_16776:
    assume {:verifier.code 0} true;
    goto $bb5295;

  $bb5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6106} ___udelay(4295000);
    goto corral_source_split_16778;

  corral_source_split_16778:
    assume {:verifier.code 0} true;
    goto $bb5296;

  $bb5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6107} ___udelay(4295000);
    goto corral_source_split_16780;

  corral_source_split_16780:
    assume {:verifier.code 0} true;
    goto $bb5297;

  $bb5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6108} ___udelay(4295000);
    goto corral_source_split_16782;

  corral_source_split_16782:
    assume {:verifier.code 0} true;
    goto $bb5298;

  $bb5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6109} ___udelay(4295000);
    goto corral_source_split_16784;

  corral_source_split_16784:
    assume {:verifier.code 0} true;
    goto $bb5299;

  $bb5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6110} ___udelay(4295000);
    goto corral_source_split_16786;

  corral_source_split_16786:
    assume {:verifier.code 0} true;
    goto $bb5300;

  $bb5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6111} ___udelay(4295000);
    goto corral_source_split_16788;

  corral_source_split_16788:
    assume {:verifier.code 0} true;
    goto $bb5301;

  $bb5301:
    assume {:verifier.code 0} true;
    goto $bb5302;

  $bb5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6112} $i910 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16790;

  corral_source_split_16790:
    assume {:verifier.code 0} true;
    $i911 := $eq.i32($i907, $i910);
    goto corral_source_split_16791;

  corral_source_split_16791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i911} true;
    goto $bb5303, $bb5304;

  $bb5304:
    assume !($i911 == 1);
    assume {:verifier.code 0} true;
    goto $bb5305;

  $bb5305:
    assume {:verifier.code 0} true;
    goto $bb5309;

  $bb5309:
    assume {:verifier.code 0} true;
    goto $bb5310;

  $bb5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6113} ___udelay(4295000);
    goto corral_source_split_16796;

  corral_source_split_16796:
    assume {:verifier.code 0} true;
    goto $bb5311;

  $bb5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6114} ___udelay(4295000);
    goto corral_source_split_16798;

  corral_source_split_16798:
    assume {:verifier.code 0} true;
    goto $bb5312;

  $bb5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6115} ___udelay(4295000);
    goto corral_source_split_16800;

  corral_source_split_16800:
    assume {:verifier.code 0} true;
    goto $bb5313;

  $bb5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6116} ___udelay(4295000);
    goto corral_source_split_16802;

  corral_source_split_16802:
    assume {:verifier.code 0} true;
    goto $bb5314;

  $bb5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6117} ___udelay(4295000);
    goto corral_source_split_16804;

  corral_source_split_16804:
    assume {:verifier.code 0} true;
    goto $bb5315;

  $bb5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6118} ___udelay(4295000);
    goto corral_source_split_16806;

  corral_source_split_16806:
    assume {:verifier.code 0} true;
    goto $bb5316;

  $bb5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6119} ___udelay(4295000);
    goto corral_source_split_16808;

  corral_source_split_16808:
    assume {:verifier.code 0} true;
    goto $bb5317;

  $bb5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6120} ___udelay(4295000);
    goto corral_source_split_16810;

  corral_source_split_16810:
    assume {:verifier.code 0} true;
    goto $bb5318;

  $bb5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6121} ___udelay(4295000);
    goto corral_source_split_16812;

  corral_source_split_16812:
    assume {:verifier.code 0} true;
    goto $bb5319;

  $bb5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6122} ___udelay(4295000);
    goto corral_source_split_16814;

  corral_source_split_16814:
    assume {:verifier.code 0} true;
    goto $bb5320;

  $bb5320:
    assume {:verifier.code 0} true;
    goto $bb5321;

  $bb5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6123} $i913 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16816;

  corral_source_split_16816:
    assume {:verifier.code 0} true;
    $i914 := $eq.i32($i910, $i913);
    goto corral_source_split_16817;

  corral_source_split_16817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i914} true;
    goto $bb5322, $bb5323;

  $bb5323:
    assume !($i914 == 1);
    assume {:verifier.code 0} true;
    goto $bb5324;

  $bb5324:
    assume {:verifier.code 0} true;
    goto $bb5328;

  $bb5328:
    assume {:verifier.code 0} true;
    goto $bb5329;

  $bb5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6124} ___udelay(4295000);
    goto corral_source_split_16822;

  corral_source_split_16822:
    assume {:verifier.code 0} true;
    goto $bb5330;

  $bb5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6125} ___udelay(4295000);
    goto corral_source_split_16824;

  corral_source_split_16824:
    assume {:verifier.code 0} true;
    goto $bb5331;

  $bb5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6126} ___udelay(4295000);
    goto corral_source_split_16826;

  corral_source_split_16826:
    assume {:verifier.code 0} true;
    goto $bb5332;

  $bb5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6127} ___udelay(4295000);
    goto corral_source_split_16828;

  corral_source_split_16828:
    assume {:verifier.code 0} true;
    goto $bb5333;

  $bb5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6128} ___udelay(4295000);
    goto corral_source_split_16830;

  corral_source_split_16830:
    assume {:verifier.code 0} true;
    goto $bb5334;

  $bb5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6129} ___udelay(4295000);
    goto corral_source_split_16832;

  corral_source_split_16832:
    assume {:verifier.code 0} true;
    goto $bb5335;

  $bb5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6130} ___udelay(4295000);
    goto corral_source_split_16834;

  corral_source_split_16834:
    assume {:verifier.code 0} true;
    goto $bb5336;

  $bb5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6131} ___udelay(4295000);
    goto corral_source_split_16836;

  corral_source_split_16836:
    assume {:verifier.code 0} true;
    goto $bb5337;

  $bb5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6132} ___udelay(4295000);
    goto corral_source_split_16838;

  corral_source_split_16838:
    assume {:verifier.code 0} true;
    goto $bb5338;

  $bb5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6133} ___udelay(4295000);
    goto corral_source_split_16840;

  corral_source_split_16840:
    assume {:verifier.code 0} true;
    goto $bb5339;

  $bb5339:
    assume {:verifier.code 0} true;
    goto $bb5340;

  $bb5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6134} $i916 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16842;

  corral_source_split_16842:
    assume {:verifier.code 0} true;
    $i917 := $eq.i32($i913, $i916);
    goto corral_source_split_16843;

  corral_source_split_16843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i917} true;
    goto $bb5341, $bb5342;

  $bb5342:
    assume !($i917 == 1);
    assume {:verifier.code 0} true;
    goto $bb5343;

  $bb5343:
    assume {:verifier.code 0} true;
    goto $bb5347;

  $bb5347:
    assume {:verifier.code 0} true;
    goto $bb5348;

  $bb5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6135} ___udelay(4295000);
    goto corral_source_split_16848;

  corral_source_split_16848:
    assume {:verifier.code 0} true;
    goto $bb5349;

  $bb5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6136} ___udelay(4295000);
    goto corral_source_split_16850;

  corral_source_split_16850:
    assume {:verifier.code 0} true;
    goto $bb5350;

  $bb5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6137} ___udelay(4295000);
    goto corral_source_split_16852;

  corral_source_split_16852:
    assume {:verifier.code 0} true;
    goto $bb5351;

  $bb5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6138} ___udelay(4295000);
    goto corral_source_split_16854;

  corral_source_split_16854:
    assume {:verifier.code 0} true;
    goto $bb5352;

  $bb5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6139} ___udelay(4295000);
    goto corral_source_split_16856;

  corral_source_split_16856:
    assume {:verifier.code 0} true;
    goto $bb5353;

  $bb5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6140} ___udelay(4295000);
    goto corral_source_split_16858;

  corral_source_split_16858:
    assume {:verifier.code 0} true;
    goto $bb5354;

  $bb5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6141} ___udelay(4295000);
    goto corral_source_split_16860;

  corral_source_split_16860:
    assume {:verifier.code 0} true;
    goto $bb5355;

  $bb5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6142} ___udelay(4295000);
    goto corral_source_split_16862;

  corral_source_split_16862:
    assume {:verifier.code 0} true;
    goto $bb5356;

  $bb5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6143} ___udelay(4295000);
    goto corral_source_split_16864;

  corral_source_split_16864:
    assume {:verifier.code 0} true;
    goto $bb5357;

  $bb5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6144} ___udelay(4295000);
    goto corral_source_split_16866;

  corral_source_split_16866:
    assume {:verifier.code 0} true;
    goto $bb5358;

  $bb5358:
    assume {:verifier.code 0} true;
    goto $bb5359;

  $bb5359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6145} $i919 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16868;

  corral_source_split_16868:
    assume {:verifier.code 0} true;
    $i920 := $eq.i32($i916, $i919);
    goto corral_source_split_16869;

  corral_source_split_16869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i920} true;
    goto $bb5360, $bb5361;

  $bb5361:
    assume !($i920 == 1);
    assume {:verifier.code 0} true;
    goto $bb5362;

  $bb5362:
    assume {:verifier.code 0} true;
    goto $bb5366;

  $bb5366:
    assume {:verifier.code 0} true;
    goto $bb5367;

  $bb5367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6146} ___udelay(4295000);
    goto corral_source_split_16874;

  corral_source_split_16874:
    assume {:verifier.code 0} true;
    goto $bb5368;

  $bb5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6147} ___udelay(4295000);
    goto corral_source_split_16876;

  corral_source_split_16876:
    assume {:verifier.code 0} true;
    goto $bb5369;

  $bb5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6148} ___udelay(4295000);
    goto corral_source_split_16878;

  corral_source_split_16878:
    assume {:verifier.code 0} true;
    goto $bb5370;

  $bb5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6149} ___udelay(4295000);
    goto corral_source_split_16880;

  corral_source_split_16880:
    assume {:verifier.code 0} true;
    goto $bb5371;

  $bb5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6150} ___udelay(4295000);
    goto corral_source_split_16882;

  corral_source_split_16882:
    assume {:verifier.code 0} true;
    goto $bb5372;

  $bb5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6151} ___udelay(4295000);
    goto corral_source_split_16884;

  corral_source_split_16884:
    assume {:verifier.code 0} true;
    goto $bb5373;

  $bb5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6152} ___udelay(4295000);
    goto corral_source_split_16886;

  corral_source_split_16886:
    assume {:verifier.code 0} true;
    goto $bb5374;

  $bb5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6153} ___udelay(4295000);
    goto corral_source_split_16888;

  corral_source_split_16888:
    assume {:verifier.code 0} true;
    goto $bb5375;

  $bb5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6154} ___udelay(4295000);
    goto corral_source_split_16890;

  corral_source_split_16890:
    assume {:verifier.code 0} true;
    goto $bb5376;

  $bb5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6155} ___udelay(4295000);
    goto corral_source_split_16892;

  corral_source_split_16892:
    assume {:verifier.code 0} true;
    goto $bb5377;

  $bb5377:
    assume {:verifier.code 0} true;
    goto $bb5378;

  $bb5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6156} $i922 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16894;

  corral_source_split_16894:
    assume {:verifier.code 0} true;
    $i923 := $eq.i32($i919, $i922);
    goto corral_source_split_16895;

  corral_source_split_16895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i923} true;
    goto $bb5379, $bb5380;

  $bb5380:
    assume !($i923 == 1);
    assume {:verifier.code 0} true;
    goto $bb5381;

  $bb5381:
    assume {:verifier.code 0} true;
    goto $bb5385;

  $bb5385:
    assume {:verifier.code 0} true;
    goto $bb5386;

  $bb5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6157} ___udelay(4295000);
    goto corral_source_split_16900;

  corral_source_split_16900:
    assume {:verifier.code 0} true;
    goto $bb5387;

  $bb5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6158} ___udelay(4295000);
    goto corral_source_split_16902;

  corral_source_split_16902:
    assume {:verifier.code 0} true;
    goto $bb5388;

  $bb5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6159} ___udelay(4295000);
    goto corral_source_split_16904;

  corral_source_split_16904:
    assume {:verifier.code 0} true;
    goto $bb5389;

  $bb5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6160} ___udelay(4295000);
    goto corral_source_split_16906;

  corral_source_split_16906:
    assume {:verifier.code 0} true;
    goto $bb5390;

  $bb5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6161} ___udelay(4295000);
    goto corral_source_split_16908;

  corral_source_split_16908:
    assume {:verifier.code 0} true;
    goto $bb5391;

  $bb5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6162} ___udelay(4295000);
    goto corral_source_split_16910;

  corral_source_split_16910:
    assume {:verifier.code 0} true;
    goto $bb5392;

  $bb5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6163} ___udelay(4295000);
    goto corral_source_split_16912;

  corral_source_split_16912:
    assume {:verifier.code 0} true;
    goto $bb5393;

  $bb5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6164} ___udelay(4295000);
    goto corral_source_split_16914;

  corral_source_split_16914:
    assume {:verifier.code 0} true;
    goto $bb5394;

  $bb5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6165} ___udelay(4295000);
    goto corral_source_split_16916;

  corral_source_split_16916:
    assume {:verifier.code 0} true;
    goto $bb5395;

  $bb5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6166} ___udelay(4295000);
    goto corral_source_split_16918;

  corral_source_split_16918:
    assume {:verifier.code 0} true;
    goto $bb5396;

  $bb5396:
    assume {:verifier.code 0} true;
    goto $bb5397;

  $bb5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6167} $i925 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16920;

  corral_source_split_16920:
    assume {:verifier.code 0} true;
    $i926 := $eq.i32($i922, $i925);
    goto corral_source_split_16921;

  corral_source_split_16921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i926} true;
    goto $bb5398, $bb5399;

  $bb5399:
    assume !($i926 == 1);
    assume {:verifier.code 0} true;
    goto $bb5400;

  $bb5400:
    assume {:verifier.code 0} true;
    goto $bb5404;

  $bb5404:
    assume {:verifier.code 0} true;
    goto $bb5405;

  $bb5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6168} ___udelay(4295000);
    goto corral_source_split_16926;

  corral_source_split_16926:
    assume {:verifier.code 0} true;
    goto $bb5406;

  $bb5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6169} ___udelay(4295000);
    goto corral_source_split_16928;

  corral_source_split_16928:
    assume {:verifier.code 0} true;
    goto $bb5407;

  $bb5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6170} ___udelay(4295000);
    goto corral_source_split_16930;

  corral_source_split_16930:
    assume {:verifier.code 0} true;
    goto $bb5408;

  $bb5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6171} ___udelay(4295000);
    goto corral_source_split_16932;

  corral_source_split_16932:
    assume {:verifier.code 0} true;
    goto $bb5409;

  $bb5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6172} ___udelay(4295000);
    goto corral_source_split_16934;

  corral_source_split_16934:
    assume {:verifier.code 0} true;
    goto $bb5410;

  $bb5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6173} ___udelay(4295000);
    goto corral_source_split_16936;

  corral_source_split_16936:
    assume {:verifier.code 0} true;
    goto $bb5411;

  $bb5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6174} ___udelay(4295000);
    goto corral_source_split_16938;

  corral_source_split_16938:
    assume {:verifier.code 0} true;
    goto $bb5412;

  $bb5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6175} ___udelay(4295000);
    goto corral_source_split_16940;

  corral_source_split_16940:
    assume {:verifier.code 0} true;
    goto $bb5413;

  $bb5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6176} ___udelay(4295000);
    goto corral_source_split_16942;

  corral_source_split_16942:
    assume {:verifier.code 0} true;
    goto $bb5414;

  $bb5414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6177} ___udelay(4295000);
    goto corral_source_split_16944;

  corral_source_split_16944:
    assume {:verifier.code 0} true;
    goto $bb5415;

  $bb5415:
    assume {:verifier.code 0} true;
    goto $bb5416;

  $bb5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6178} $i928 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16946;

  corral_source_split_16946:
    assume {:verifier.code 0} true;
    $i929 := $eq.i32($i925, $i928);
    goto corral_source_split_16947;

  corral_source_split_16947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i929} true;
    goto $bb5417, $bb5418;

  $bb5418:
    assume !($i929 == 1);
    assume {:verifier.code 0} true;
    goto $bb5419;

  $bb5419:
    assume {:verifier.code 0} true;
    goto $bb5423;

  $bb5423:
    assume {:verifier.code 0} true;
    goto $bb5424;

  $bb5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6179} ___udelay(4295000);
    goto corral_source_split_16952;

  corral_source_split_16952:
    assume {:verifier.code 0} true;
    goto $bb5425;

  $bb5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6180} ___udelay(4295000);
    goto corral_source_split_16954;

  corral_source_split_16954:
    assume {:verifier.code 0} true;
    goto $bb5426;

  $bb5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6181} ___udelay(4295000);
    goto corral_source_split_16956;

  corral_source_split_16956:
    assume {:verifier.code 0} true;
    goto $bb5427;

  $bb5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6182} ___udelay(4295000);
    goto corral_source_split_16958;

  corral_source_split_16958:
    assume {:verifier.code 0} true;
    goto $bb5428;

  $bb5428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6183} ___udelay(4295000);
    goto corral_source_split_16960;

  corral_source_split_16960:
    assume {:verifier.code 0} true;
    goto $bb5429;

  $bb5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6184} ___udelay(4295000);
    goto corral_source_split_16962;

  corral_source_split_16962:
    assume {:verifier.code 0} true;
    goto $bb5430;

  $bb5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6185} ___udelay(4295000);
    goto corral_source_split_16964;

  corral_source_split_16964:
    assume {:verifier.code 0} true;
    goto $bb5431;

  $bb5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6186} ___udelay(4295000);
    goto corral_source_split_16966;

  corral_source_split_16966:
    assume {:verifier.code 0} true;
    goto $bb5432;

  $bb5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6187} ___udelay(4295000);
    goto corral_source_split_16968;

  corral_source_split_16968:
    assume {:verifier.code 0} true;
    goto $bb5433;

  $bb5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6188} ___udelay(4295000);
    goto corral_source_split_16970;

  corral_source_split_16970:
    assume {:verifier.code 0} true;
    goto $bb5434;

  $bb5434:
    assume {:verifier.code 0} true;
    goto $bb5435;

  $bb5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6189} $i931 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16972;

  corral_source_split_16972:
    assume {:verifier.code 0} true;
    $i932 := $eq.i32($i928, $i931);
    goto corral_source_split_16973;

  corral_source_split_16973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i932} true;
    goto $bb5436, $bb5437;

  $bb5437:
    assume !($i932 == 1);
    assume {:verifier.code 0} true;
    goto $bb5438;

  $bb5438:
    assume {:verifier.code 0} true;
    goto $bb5442;

  $bb5442:
    assume {:verifier.code 0} true;
    goto $bb5443;

  $bb5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6190} ___udelay(4295000);
    goto corral_source_split_16978;

  corral_source_split_16978:
    assume {:verifier.code 0} true;
    goto $bb5444;

  $bb5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6191} ___udelay(4295000);
    goto corral_source_split_16980;

  corral_source_split_16980:
    assume {:verifier.code 0} true;
    goto $bb5445;

  $bb5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6192} ___udelay(4295000);
    goto corral_source_split_16982;

  corral_source_split_16982:
    assume {:verifier.code 0} true;
    goto $bb5446;

  $bb5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6193} ___udelay(4295000);
    goto corral_source_split_16984;

  corral_source_split_16984:
    assume {:verifier.code 0} true;
    goto $bb5447;

  $bb5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6194} ___udelay(4295000);
    goto corral_source_split_16986;

  corral_source_split_16986:
    assume {:verifier.code 0} true;
    goto $bb5448;

  $bb5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6195} ___udelay(4295000);
    goto corral_source_split_16988;

  corral_source_split_16988:
    assume {:verifier.code 0} true;
    goto $bb5449;

  $bb5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6196} ___udelay(4295000);
    goto corral_source_split_16990;

  corral_source_split_16990:
    assume {:verifier.code 0} true;
    goto $bb5450;

  $bb5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6197} ___udelay(4295000);
    goto corral_source_split_16992;

  corral_source_split_16992:
    assume {:verifier.code 0} true;
    goto $bb5451;

  $bb5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6198} ___udelay(4295000);
    goto corral_source_split_16994;

  corral_source_split_16994:
    assume {:verifier.code 0} true;
    goto $bb5452;

  $bb5452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6199} ___udelay(4295000);
    goto corral_source_split_16996;

  corral_source_split_16996:
    assume {:verifier.code 0} true;
    goto $bb5453;

  $bb5453:
    assume {:verifier.code 0} true;
    goto $bb5454;

  $bb5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6200} $i934 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_16998;

  corral_source_split_16998:
    assume {:verifier.code 0} true;
    $i935 := $eq.i32($i931, $i934);
    goto corral_source_split_16999;

  corral_source_split_16999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i935} true;
    goto $bb5455, $bb5456;

  $bb5456:
    assume !($i935 == 1);
    assume {:verifier.code 0} true;
    goto $bb5457;

  $bb5457:
    assume {:verifier.code 0} true;
    goto $bb5461;

  $bb5461:
    assume {:verifier.code 0} true;
    goto $bb5462;

  $bb5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6201} ___udelay(4295000);
    goto corral_source_split_17004;

  corral_source_split_17004:
    assume {:verifier.code 0} true;
    goto $bb5463;

  $bb5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6202} ___udelay(4295000);
    goto corral_source_split_17006;

  corral_source_split_17006:
    assume {:verifier.code 0} true;
    goto $bb5464;

  $bb5464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6203} ___udelay(4295000);
    goto corral_source_split_17008;

  corral_source_split_17008:
    assume {:verifier.code 0} true;
    goto $bb5465;

  $bb5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6204} ___udelay(4295000);
    goto corral_source_split_17010;

  corral_source_split_17010:
    assume {:verifier.code 0} true;
    goto $bb5466;

  $bb5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6205} ___udelay(4295000);
    goto corral_source_split_17012;

  corral_source_split_17012:
    assume {:verifier.code 0} true;
    goto $bb5467;

  $bb5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6206} ___udelay(4295000);
    goto corral_source_split_17014;

  corral_source_split_17014:
    assume {:verifier.code 0} true;
    goto $bb5468;

  $bb5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6207} ___udelay(4295000);
    goto corral_source_split_17016;

  corral_source_split_17016:
    assume {:verifier.code 0} true;
    goto $bb5469;

  $bb5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6208} ___udelay(4295000);
    goto corral_source_split_17018;

  corral_source_split_17018:
    assume {:verifier.code 0} true;
    goto $bb5470;

  $bb5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6209} ___udelay(4295000);
    goto corral_source_split_17020;

  corral_source_split_17020:
    assume {:verifier.code 0} true;
    goto $bb5471;

  $bb5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6210} ___udelay(4295000);
    goto corral_source_split_17022;

  corral_source_split_17022:
    assume {:verifier.code 0} true;
    goto $bb5472;

  $bb5472:
    assume {:verifier.code 0} true;
    goto $bb5473;

  $bb5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6211} $i937 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17024;

  corral_source_split_17024:
    assume {:verifier.code 0} true;
    $i938 := $eq.i32($i934, $i937);
    goto corral_source_split_17025;

  corral_source_split_17025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i938} true;
    goto $bb5474, $bb5475;

  $bb5475:
    assume !($i938 == 1);
    assume {:verifier.code 0} true;
    goto $bb5476;

  $bb5476:
    assume {:verifier.code 0} true;
    goto $bb5480;

  $bb5480:
    assume {:verifier.code 0} true;
    goto $bb5481;

  $bb5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6212} ___udelay(4295000);
    goto corral_source_split_17030;

  corral_source_split_17030:
    assume {:verifier.code 0} true;
    goto $bb5482;

  $bb5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6213} ___udelay(4295000);
    goto corral_source_split_17032;

  corral_source_split_17032:
    assume {:verifier.code 0} true;
    goto $bb5483;

  $bb5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6214} ___udelay(4295000);
    goto corral_source_split_17034;

  corral_source_split_17034:
    assume {:verifier.code 0} true;
    goto $bb5484;

  $bb5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6215} ___udelay(4295000);
    goto corral_source_split_17036;

  corral_source_split_17036:
    assume {:verifier.code 0} true;
    goto $bb5485;

  $bb5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6216} ___udelay(4295000);
    goto corral_source_split_17038;

  corral_source_split_17038:
    assume {:verifier.code 0} true;
    goto $bb5486;

  $bb5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6217} ___udelay(4295000);
    goto corral_source_split_17040;

  corral_source_split_17040:
    assume {:verifier.code 0} true;
    goto $bb5487;

  $bb5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6218} ___udelay(4295000);
    goto corral_source_split_17042;

  corral_source_split_17042:
    assume {:verifier.code 0} true;
    goto $bb5488;

  $bb5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6219} ___udelay(4295000);
    goto corral_source_split_17044;

  corral_source_split_17044:
    assume {:verifier.code 0} true;
    goto $bb5489;

  $bb5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6220} ___udelay(4295000);
    goto corral_source_split_17046;

  corral_source_split_17046:
    assume {:verifier.code 0} true;
    goto $bb5490;

  $bb5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6221} ___udelay(4295000);
    goto corral_source_split_17048;

  corral_source_split_17048:
    assume {:verifier.code 0} true;
    goto $bb5491;

  $bb5491:
    assume {:verifier.code 0} true;
    goto $bb5492;

  $bb5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6222} $i940 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17050;

  corral_source_split_17050:
    assume {:verifier.code 0} true;
    $i941 := $eq.i32($i937, $i940);
    goto corral_source_split_17051;

  corral_source_split_17051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i941} true;
    goto $bb5493, $bb5494;

  $bb5494:
    assume !($i941 == 1);
    assume {:verifier.code 0} true;
    goto $bb5495;

  $bb5495:
    assume {:verifier.code 0} true;
    goto $bb5499;

  $bb5499:
    assume {:verifier.code 0} true;
    goto $bb5500;

  $bb5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6223} ___udelay(4295000);
    goto corral_source_split_17056;

  corral_source_split_17056:
    assume {:verifier.code 0} true;
    goto $bb5501;

  $bb5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6224} ___udelay(4295000);
    goto corral_source_split_17058;

  corral_source_split_17058:
    assume {:verifier.code 0} true;
    goto $bb5502;

  $bb5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6225} ___udelay(4295000);
    goto corral_source_split_17060;

  corral_source_split_17060:
    assume {:verifier.code 0} true;
    goto $bb5503;

  $bb5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6226} ___udelay(4295000);
    goto corral_source_split_17062;

  corral_source_split_17062:
    assume {:verifier.code 0} true;
    goto $bb5504;

  $bb5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6227} ___udelay(4295000);
    goto corral_source_split_17064;

  corral_source_split_17064:
    assume {:verifier.code 0} true;
    goto $bb5505;

  $bb5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6228} ___udelay(4295000);
    goto corral_source_split_17066;

  corral_source_split_17066:
    assume {:verifier.code 0} true;
    goto $bb5506;

  $bb5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6229} ___udelay(4295000);
    goto corral_source_split_17068;

  corral_source_split_17068:
    assume {:verifier.code 0} true;
    goto $bb5507;

  $bb5507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6230} ___udelay(4295000);
    goto corral_source_split_17070;

  corral_source_split_17070:
    assume {:verifier.code 0} true;
    goto $bb5508;

  $bb5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6231} ___udelay(4295000);
    goto corral_source_split_17072;

  corral_source_split_17072:
    assume {:verifier.code 0} true;
    goto $bb5509;

  $bb5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6232} ___udelay(4295000);
    goto corral_source_split_17074;

  corral_source_split_17074:
    assume {:verifier.code 0} true;
    goto $bb5510;

  $bb5510:
    assume {:verifier.code 0} true;
    goto $bb5511;

  $bb5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6233} $i943 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17076;

  corral_source_split_17076:
    assume {:verifier.code 0} true;
    $i944 := $eq.i32($i940, $i943);
    goto corral_source_split_17077;

  corral_source_split_17077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i944} true;
    goto $bb5512, $bb5513;

  $bb5513:
    assume !($i944 == 1);
    assume {:verifier.code 0} true;
    goto $bb5514;

  $bb5514:
    assume {:verifier.code 0} true;
    goto $bb5518;

  $bb5518:
    assume {:verifier.code 0} true;
    goto $bb5519;

  $bb5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6234} ___udelay(4295000);
    goto corral_source_split_17082;

  corral_source_split_17082:
    assume {:verifier.code 0} true;
    goto $bb5520;

  $bb5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6235} ___udelay(4295000);
    goto corral_source_split_17084;

  corral_source_split_17084:
    assume {:verifier.code 0} true;
    goto $bb5521;

  $bb5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6236} ___udelay(4295000);
    goto corral_source_split_17086;

  corral_source_split_17086:
    assume {:verifier.code 0} true;
    goto $bb5522;

  $bb5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6237} ___udelay(4295000);
    goto corral_source_split_17088;

  corral_source_split_17088:
    assume {:verifier.code 0} true;
    goto $bb5523;

  $bb5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6238} ___udelay(4295000);
    goto corral_source_split_17090;

  corral_source_split_17090:
    assume {:verifier.code 0} true;
    goto $bb5524;

  $bb5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6239} ___udelay(4295000);
    goto corral_source_split_17092;

  corral_source_split_17092:
    assume {:verifier.code 0} true;
    goto $bb5525;

  $bb5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6240} ___udelay(4295000);
    goto corral_source_split_17094;

  corral_source_split_17094:
    assume {:verifier.code 0} true;
    goto $bb5526;

  $bb5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6241} ___udelay(4295000);
    goto corral_source_split_17096;

  corral_source_split_17096:
    assume {:verifier.code 0} true;
    goto $bb5527;

  $bb5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6242} ___udelay(4295000);
    goto corral_source_split_17098;

  corral_source_split_17098:
    assume {:verifier.code 0} true;
    goto $bb5528;

  $bb5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6243} ___udelay(4295000);
    goto corral_source_split_17100;

  corral_source_split_17100:
    assume {:verifier.code 0} true;
    goto $bb5529;

  $bb5529:
    assume {:verifier.code 0} true;
    goto $bb5530;

  $bb5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6244} $i946 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17102;

  corral_source_split_17102:
    assume {:verifier.code 0} true;
    $i947 := $eq.i32($i943, $i946);
    goto corral_source_split_17103;

  corral_source_split_17103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb5531, $bb5532;

  $bb5532:
    assume !($i947 == 1);
    assume {:verifier.code 0} true;
    goto $bb5533;

  $bb5533:
    assume {:verifier.code 0} true;
    goto $bb5537;

  $bb5537:
    assume {:verifier.code 0} true;
    goto $bb5538;

  $bb5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6245} ___udelay(4295000);
    goto corral_source_split_17108;

  corral_source_split_17108:
    assume {:verifier.code 0} true;
    goto $bb5539;

  $bb5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6246} ___udelay(4295000);
    goto corral_source_split_17110;

  corral_source_split_17110:
    assume {:verifier.code 0} true;
    goto $bb5540;

  $bb5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6247} ___udelay(4295000);
    goto corral_source_split_17112;

  corral_source_split_17112:
    assume {:verifier.code 0} true;
    goto $bb5541;

  $bb5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6248} ___udelay(4295000);
    goto corral_source_split_17114;

  corral_source_split_17114:
    assume {:verifier.code 0} true;
    goto $bb5542;

  $bb5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6249} ___udelay(4295000);
    goto corral_source_split_17116;

  corral_source_split_17116:
    assume {:verifier.code 0} true;
    goto $bb5543;

  $bb5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6250} ___udelay(4295000);
    goto corral_source_split_17118;

  corral_source_split_17118:
    assume {:verifier.code 0} true;
    goto $bb5544;

  $bb5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6251} ___udelay(4295000);
    goto corral_source_split_17120;

  corral_source_split_17120:
    assume {:verifier.code 0} true;
    goto $bb5545;

  $bb5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6252} ___udelay(4295000);
    goto corral_source_split_17122;

  corral_source_split_17122:
    assume {:verifier.code 0} true;
    goto $bb5546;

  $bb5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6253} ___udelay(4295000);
    goto corral_source_split_17124;

  corral_source_split_17124:
    assume {:verifier.code 0} true;
    goto $bb5547;

  $bb5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6254} ___udelay(4295000);
    goto corral_source_split_17126;

  corral_source_split_17126:
    assume {:verifier.code 0} true;
    goto $bb5548;

  $bb5548:
    assume {:verifier.code 0} true;
    goto $bb5549;

  $bb5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6255} $i949 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17128;

  corral_source_split_17128:
    assume {:verifier.code 0} true;
    $i950 := $eq.i32($i946, $i949);
    goto corral_source_split_17129;

  corral_source_split_17129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i950} true;
    goto $bb5550, $bb5551;

  $bb5551:
    assume !($i950 == 1);
    assume {:verifier.code 0} true;
    goto $bb5552;

  $bb5552:
    assume {:verifier.code 0} true;
    goto $bb5556;

  $bb5556:
    assume {:verifier.code 0} true;
    goto $bb5557;

  $bb5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6256} ___udelay(4295000);
    goto corral_source_split_17134;

  corral_source_split_17134:
    assume {:verifier.code 0} true;
    goto $bb5558;

  $bb5558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6257} ___udelay(4295000);
    goto corral_source_split_17136;

  corral_source_split_17136:
    assume {:verifier.code 0} true;
    goto $bb5559;

  $bb5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6258} ___udelay(4295000);
    goto corral_source_split_17138;

  corral_source_split_17138:
    assume {:verifier.code 0} true;
    goto $bb5560;

  $bb5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6259} ___udelay(4295000);
    goto corral_source_split_17140;

  corral_source_split_17140:
    assume {:verifier.code 0} true;
    goto $bb5561;

  $bb5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6260} ___udelay(4295000);
    goto corral_source_split_17142;

  corral_source_split_17142:
    assume {:verifier.code 0} true;
    goto $bb5562;

  $bb5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6261} ___udelay(4295000);
    goto corral_source_split_17144;

  corral_source_split_17144:
    assume {:verifier.code 0} true;
    goto $bb5563;

  $bb5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6262} ___udelay(4295000);
    goto corral_source_split_17146;

  corral_source_split_17146:
    assume {:verifier.code 0} true;
    goto $bb5564;

  $bb5564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6263} ___udelay(4295000);
    goto corral_source_split_17148;

  corral_source_split_17148:
    assume {:verifier.code 0} true;
    goto $bb5565;

  $bb5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6264} ___udelay(4295000);
    goto corral_source_split_17150;

  corral_source_split_17150:
    assume {:verifier.code 0} true;
    goto $bb5566;

  $bb5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6265} ___udelay(4295000);
    goto corral_source_split_17152;

  corral_source_split_17152:
    assume {:verifier.code 0} true;
    goto $bb5567;

  $bb5567:
    assume {:verifier.code 0} true;
    goto $bb5568;

  $bb5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6266} $i952 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17154;

  corral_source_split_17154:
    assume {:verifier.code 0} true;
    $i953 := $eq.i32($i949, $i952);
    goto corral_source_split_17155;

  corral_source_split_17155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i953} true;
    goto $bb5569, $bb5570;

  $bb5570:
    assume !($i953 == 1);
    assume {:verifier.code 0} true;
    goto $bb5571;

  $bb5571:
    assume {:verifier.code 0} true;
    goto $bb5575;

  $bb5575:
    assume {:verifier.code 0} true;
    goto $bb5576;

  $bb5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6267} ___udelay(4295000);
    goto corral_source_split_17160;

  corral_source_split_17160:
    assume {:verifier.code 0} true;
    goto $bb5577;

  $bb5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6268} ___udelay(4295000);
    goto corral_source_split_17162;

  corral_source_split_17162:
    assume {:verifier.code 0} true;
    goto $bb5578;

  $bb5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6269} ___udelay(4295000);
    goto corral_source_split_17164;

  corral_source_split_17164:
    assume {:verifier.code 0} true;
    goto $bb5579;

  $bb5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6270} ___udelay(4295000);
    goto corral_source_split_17166;

  corral_source_split_17166:
    assume {:verifier.code 0} true;
    goto $bb5580;

  $bb5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6271} ___udelay(4295000);
    goto corral_source_split_17168;

  corral_source_split_17168:
    assume {:verifier.code 0} true;
    goto $bb5581;

  $bb5581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6272} ___udelay(4295000);
    goto corral_source_split_17170;

  corral_source_split_17170:
    assume {:verifier.code 0} true;
    goto $bb5582;

  $bb5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6273} ___udelay(4295000);
    goto corral_source_split_17172;

  corral_source_split_17172:
    assume {:verifier.code 0} true;
    goto $bb5583;

  $bb5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6274} ___udelay(4295000);
    goto corral_source_split_17174;

  corral_source_split_17174:
    assume {:verifier.code 0} true;
    goto $bb5584;

  $bb5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6275} ___udelay(4295000);
    goto corral_source_split_17176;

  corral_source_split_17176:
    assume {:verifier.code 0} true;
    goto $bb5585;

  $bb5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6276} ___udelay(4295000);
    goto corral_source_split_17178;

  corral_source_split_17178:
    assume {:verifier.code 0} true;
    goto $bb5586;

  $bb5586:
    assume {:verifier.code 0} true;
    goto $bb5587;

  $bb5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6277} $i955 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17180;

  corral_source_split_17180:
    assume {:verifier.code 0} true;
    $i956 := $eq.i32($i952, $i955);
    goto corral_source_split_17181;

  corral_source_split_17181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i956} true;
    goto $bb5588, $bb5589;

  $bb5589:
    assume !($i956 == 1);
    assume {:verifier.code 0} true;
    goto $bb5590;

  $bb5590:
    assume {:verifier.code 0} true;
    goto $bb5594;

  $bb5594:
    assume {:verifier.code 0} true;
    goto $bb5595;

  $bb5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6278} ___udelay(4295000);
    goto corral_source_split_17186;

  corral_source_split_17186:
    assume {:verifier.code 0} true;
    goto $bb5596;

  $bb5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6279} ___udelay(4295000);
    goto corral_source_split_17188;

  corral_source_split_17188:
    assume {:verifier.code 0} true;
    goto $bb5597;

  $bb5597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6280} ___udelay(4295000);
    goto corral_source_split_17190;

  corral_source_split_17190:
    assume {:verifier.code 0} true;
    goto $bb5598;

  $bb5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6281} ___udelay(4295000);
    goto corral_source_split_17192;

  corral_source_split_17192:
    assume {:verifier.code 0} true;
    goto $bb5599;

  $bb5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6282} ___udelay(4295000);
    goto corral_source_split_17194;

  corral_source_split_17194:
    assume {:verifier.code 0} true;
    goto $bb5600;

  $bb5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6283} ___udelay(4295000);
    goto corral_source_split_17196;

  corral_source_split_17196:
    assume {:verifier.code 0} true;
    goto $bb5601;

  $bb5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6284} ___udelay(4295000);
    goto corral_source_split_17198;

  corral_source_split_17198:
    assume {:verifier.code 0} true;
    goto $bb5602;

  $bb5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6285} ___udelay(4295000);
    goto corral_source_split_17200;

  corral_source_split_17200:
    assume {:verifier.code 0} true;
    goto $bb5603;

  $bb5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6286} ___udelay(4295000);
    goto corral_source_split_17202;

  corral_source_split_17202:
    assume {:verifier.code 0} true;
    goto $bb5604;

  $bb5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6287} ___udelay(4295000);
    goto corral_source_split_17204;

  corral_source_split_17204:
    assume {:verifier.code 0} true;
    goto $bb5605;

  $bb5605:
    assume {:verifier.code 0} true;
    goto $bb5606;

  $bb5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6288} $i958 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17206;

  corral_source_split_17206:
    assume {:verifier.code 0} true;
    $i959 := $eq.i32($i955, $i958);
    goto corral_source_split_17207;

  corral_source_split_17207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i959} true;
    goto $bb5607, $bb5608;

  $bb5608:
    assume !($i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb5609;

  $bb5609:
    assume {:verifier.code 0} true;
    goto $bb5613;

  $bb5613:
    assume {:verifier.code 0} true;
    goto $bb5614;

  $bb5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6289} ___udelay(4295000);
    goto corral_source_split_17212;

  corral_source_split_17212:
    assume {:verifier.code 0} true;
    goto $bb5615;

  $bb5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6290} ___udelay(4295000);
    goto corral_source_split_17214;

  corral_source_split_17214:
    assume {:verifier.code 0} true;
    goto $bb5616;

  $bb5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6291} ___udelay(4295000);
    goto corral_source_split_17216;

  corral_source_split_17216:
    assume {:verifier.code 0} true;
    goto $bb5617;

  $bb5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6292} ___udelay(4295000);
    goto corral_source_split_17218;

  corral_source_split_17218:
    assume {:verifier.code 0} true;
    goto $bb5618;

  $bb5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6293} ___udelay(4295000);
    goto corral_source_split_17220;

  corral_source_split_17220:
    assume {:verifier.code 0} true;
    goto $bb5619;

  $bb5619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6294} ___udelay(4295000);
    goto corral_source_split_17222;

  corral_source_split_17222:
    assume {:verifier.code 0} true;
    goto $bb5620;

  $bb5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6295} ___udelay(4295000);
    goto corral_source_split_17224;

  corral_source_split_17224:
    assume {:verifier.code 0} true;
    goto $bb5621;

  $bb5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6296} ___udelay(4295000);
    goto corral_source_split_17226;

  corral_source_split_17226:
    assume {:verifier.code 0} true;
    goto $bb5622;

  $bb5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6297} ___udelay(4295000);
    goto corral_source_split_17228;

  corral_source_split_17228:
    assume {:verifier.code 0} true;
    goto $bb5623;

  $bb5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6298} ___udelay(4295000);
    goto corral_source_split_17230;

  corral_source_split_17230:
    assume {:verifier.code 0} true;
    goto $bb5624;

  $bb5624:
    assume {:verifier.code 0} true;
    goto $bb5625;

  $bb5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6299} $i961 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17232;

  corral_source_split_17232:
    assume {:verifier.code 0} true;
    $i962 := $eq.i32($i958, $i961);
    goto corral_source_split_17233;

  corral_source_split_17233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i962} true;
    goto $bb5626, $bb5627;

  $bb5627:
    assume !($i962 == 1);
    assume {:verifier.code 0} true;
    goto $bb5628;

  $bb5628:
    assume {:verifier.code 0} true;
    goto $bb5632;

  $bb5632:
    assume {:verifier.code 0} true;
    goto $bb5633;

  $bb5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6300} ___udelay(4295000);
    goto corral_source_split_17238;

  corral_source_split_17238:
    assume {:verifier.code 0} true;
    goto $bb5634;

  $bb5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6301} ___udelay(4295000);
    goto corral_source_split_17240;

  corral_source_split_17240:
    assume {:verifier.code 0} true;
    goto $bb5635;

  $bb5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6302} ___udelay(4295000);
    goto corral_source_split_17242;

  corral_source_split_17242:
    assume {:verifier.code 0} true;
    goto $bb5636;

  $bb5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6303} ___udelay(4295000);
    goto corral_source_split_17244;

  corral_source_split_17244:
    assume {:verifier.code 0} true;
    goto $bb5637;

  $bb5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6304} ___udelay(4295000);
    goto corral_source_split_17246;

  corral_source_split_17246:
    assume {:verifier.code 0} true;
    goto $bb5638;

  $bb5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6305} ___udelay(4295000);
    goto corral_source_split_17248;

  corral_source_split_17248:
    assume {:verifier.code 0} true;
    goto $bb5639;

  $bb5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6306} ___udelay(4295000);
    goto corral_source_split_17250;

  corral_source_split_17250:
    assume {:verifier.code 0} true;
    goto $bb5640;

  $bb5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6307} ___udelay(4295000);
    goto corral_source_split_17252;

  corral_source_split_17252:
    assume {:verifier.code 0} true;
    goto $bb5641;

  $bb5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6308} ___udelay(4295000);
    goto corral_source_split_17254;

  corral_source_split_17254:
    assume {:verifier.code 0} true;
    goto $bb5642;

  $bb5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6309} ___udelay(4295000);
    goto corral_source_split_17256;

  corral_source_split_17256:
    assume {:verifier.code 0} true;
    goto $bb5643;

  $bb5643:
    assume {:verifier.code 0} true;
    goto $bb5644;

  $bb5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6310} $i964 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17258;

  corral_source_split_17258:
    assume {:verifier.code 0} true;
    $i965 := $eq.i32($i961, $i964);
    goto corral_source_split_17259;

  corral_source_split_17259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i965} true;
    goto $bb5645, $bb5646;

  $bb5646:
    assume !($i965 == 1);
    assume {:verifier.code 0} true;
    goto $bb5647;

  $bb5647:
    assume {:verifier.code 0} true;
    goto $bb5651;

  $bb5651:
    assume {:verifier.code 0} true;
    goto $bb5652;

  $bb5652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6311} ___udelay(4295000);
    goto corral_source_split_17264;

  corral_source_split_17264:
    assume {:verifier.code 0} true;
    goto $bb5653;

  $bb5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6312} ___udelay(4295000);
    goto corral_source_split_17266;

  corral_source_split_17266:
    assume {:verifier.code 0} true;
    goto $bb5654;

  $bb5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6313} ___udelay(4295000);
    goto corral_source_split_17268;

  corral_source_split_17268:
    assume {:verifier.code 0} true;
    goto $bb5655;

  $bb5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6314} ___udelay(4295000);
    goto corral_source_split_17270;

  corral_source_split_17270:
    assume {:verifier.code 0} true;
    goto $bb5656;

  $bb5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6315} ___udelay(4295000);
    goto corral_source_split_17272;

  corral_source_split_17272:
    assume {:verifier.code 0} true;
    goto $bb5657;

  $bb5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6316} ___udelay(4295000);
    goto corral_source_split_17274;

  corral_source_split_17274:
    assume {:verifier.code 0} true;
    goto $bb5658;

  $bb5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6317} ___udelay(4295000);
    goto corral_source_split_17276;

  corral_source_split_17276:
    assume {:verifier.code 0} true;
    goto $bb5659;

  $bb5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6318} ___udelay(4295000);
    goto corral_source_split_17278;

  corral_source_split_17278:
    assume {:verifier.code 0} true;
    goto $bb5660;

  $bb5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6319} ___udelay(4295000);
    goto corral_source_split_17280;

  corral_source_split_17280:
    assume {:verifier.code 0} true;
    goto $bb5661;

  $bb5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6320} ___udelay(4295000);
    goto corral_source_split_17282;

  corral_source_split_17282:
    assume {:verifier.code 0} true;
    goto $bb5662;

  $bb5662:
    assume {:verifier.code 0} true;
    goto $bb5663;

  $bb5663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6321} $i967 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17284;

  corral_source_split_17284:
    assume {:verifier.code 0} true;
    $i968 := $eq.i32($i964, $i967);
    goto corral_source_split_17285;

  corral_source_split_17285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i968} true;
    goto $bb5664, $bb5665;

  $bb5665:
    assume !($i968 == 1);
    assume {:verifier.code 0} true;
    goto $bb5666;

  $bb5666:
    assume {:verifier.code 0} true;
    goto $bb5670;

  $bb5670:
    assume {:verifier.code 0} true;
    goto $bb5671;

  $bb5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6322} ___udelay(4295000);
    goto corral_source_split_17290;

  corral_source_split_17290:
    assume {:verifier.code 0} true;
    goto $bb5672;

  $bb5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6323} ___udelay(4295000);
    goto corral_source_split_17292;

  corral_source_split_17292:
    assume {:verifier.code 0} true;
    goto $bb5673;

  $bb5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6324} ___udelay(4295000);
    goto corral_source_split_17294;

  corral_source_split_17294:
    assume {:verifier.code 0} true;
    goto $bb5674;

  $bb5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6325} ___udelay(4295000);
    goto corral_source_split_17296;

  corral_source_split_17296:
    assume {:verifier.code 0} true;
    goto $bb5675;

  $bb5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6326} ___udelay(4295000);
    goto corral_source_split_17298;

  corral_source_split_17298:
    assume {:verifier.code 0} true;
    goto $bb5676;

  $bb5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6327} ___udelay(4295000);
    goto corral_source_split_17300;

  corral_source_split_17300:
    assume {:verifier.code 0} true;
    goto $bb5677;

  $bb5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6328} ___udelay(4295000);
    goto corral_source_split_17302;

  corral_source_split_17302:
    assume {:verifier.code 0} true;
    goto $bb5678;

  $bb5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6329} ___udelay(4295000);
    goto corral_source_split_17304;

  corral_source_split_17304:
    assume {:verifier.code 0} true;
    goto $bb5679;

  $bb5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6330} ___udelay(4295000);
    goto corral_source_split_17306;

  corral_source_split_17306:
    assume {:verifier.code 0} true;
    goto $bb5680;

  $bb5680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6331} ___udelay(4295000);
    goto corral_source_split_17308;

  corral_source_split_17308:
    assume {:verifier.code 0} true;
    goto $bb5681;

  $bb5681:
    assume {:verifier.code 0} true;
    goto $bb5682;

  $bb5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6332} $i970 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17310;

  corral_source_split_17310:
    assume {:verifier.code 0} true;
    $i971 := $eq.i32($i967, $i970);
    goto corral_source_split_17311;

  corral_source_split_17311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i971} true;
    goto $bb5683, $bb5684;

  $bb5684:
    assume !($i971 == 1);
    assume {:verifier.code 0} true;
    goto $bb5685;

  $bb5685:
    assume {:verifier.code 0} true;
    goto $bb5689;

  $bb5689:
    assume {:verifier.code 0} true;
    goto $bb5690;

  $bb5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6333} ___udelay(4295000);
    goto corral_source_split_17316;

  corral_source_split_17316:
    assume {:verifier.code 0} true;
    goto $bb5691;

  $bb5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6334} ___udelay(4295000);
    goto corral_source_split_17318;

  corral_source_split_17318:
    assume {:verifier.code 0} true;
    goto $bb5692;

  $bb5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6335} ___udelay(4295000);
    goto corral_source_split_17320;

  corral_source_split_17320:
    assume {:verifier.code 0} true;
    goto $bb5693;

  $bb5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6336} ___udelay(4295000);
    goto corral_source_split_17322;

  corral_source_split_17322:
    assume {:verifier.code 0} true;
    goto $bb5694;

  $bb5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6337} ___udelay(4295000);
    goto corral_source_split_17324;

  corral_source_split_17324:
    assume {:verifier.code 0} true;
    goto $bb5695;

  $bb5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6338} ___udelay(4295000);
    goto corral_source_split_17326;

  corral_source_split_17326:
    assume {:verifier.code 0} true;
    goto $bb5696;

  $bb5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6339} ___udelay(4295000);
    goto corral_source_split_17328;

  corral_source_split_17328:
    assume {:verifier.code 0} true;
    goto $bb5697;

  $bb5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6340} ___udelay(4295000);
    goto corral_source_split_17330;

  corral_source_split_17330:
    assume {:verifier.code 0} true;
    goto $bb5698;

  $bb5698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6341} ___udelay(4295000);
    goto corral_source_split_17332;

  corral_source_split_17332:
    assume {:verifier.code 0} true;
    goto $bb5699;

  $bb5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6342} ___udelay(4295000);
    goto corral_source_split_17334;

  corral_source_split_17334:
    assume {:verifier.code 0} true;
    goto $bb5700;

  $bb5700:
    assume {:verifier.code 0} true;
    goto $bb5701;

  $bb5701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6343} $i973 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_17336;

  corral_source_split_17336:
    assume {:verifier.code 0} true;
    $i974 := $eq.i32($i970, $i973);
    goto corral_source_split_17337;

  corral_source_split_17337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i974} true;
    goto $bb5702, $bb5703;

  $bb5703:
    assume !($i974 == 1);
    assume {:verifier.code 0} true;
    goto $bb5704;

  $bb5704:
    assume {:verifier.code 0} true;
    goto $bb5708;

  $bb5708:
    assume {:verifier.code 0} true;
    goto $bb5709;

  $bb5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6344} ___udelay(4295000);
    goto corral_source_split_17342;

  corral_source_split_17342:
    assume {:verifier.code 0} true;
    goto $bb5710;

  $bb5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6345} ___udelay(4295000);
    goto corral_source_split_17344;

  corral_source_split_17344:
    assume {:verifier.code 0} true;
    goto $bb5711;

  $bb5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6346} ___udelay(4295000);
    goto corral_source_split_17346;

  corral_source_split_17346:
    assume {:verifier.code 0} true;
    goto $bb5712;

  $bb5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6347} ___udelay(4295000);
    goto corral_source_split_17348;

  corral_source_split_17348:
    assume {:verifier.code 0} true;
    goto $bb5713;

  $bb5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6348} ___udelay(4295000);
    goto corral_source_split_17350;

  corral_source_split_17350:
    assume {:verifier.code 0} true;
    goto $bb5714;

  $bb5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6349} ___udelay(4295000);
    goto corral_source_split_17352;

  corral_source_split_17352:
    assume {:verifier.code 0} true;
    goto $bb5715;

  $bb5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6350} ___udelay(4295000);
    goto corral_source_split_17354;

  corral_source_split_17354:
    assume {:verifier.code 0} true;
    goto $bb5716;

  $bb5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6351} ___udelay(4295000);
    goto corral_source_split_17356;

  corral_source_split_17356:
    assume {:verifier.code 0} true;
    goto $bb5717;

  $bb5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6352} ___udelay(4295000);
    goto corral_source_split_17358;

  corral_source_split_17358:
    assume {:verifier.code 0} true;
    goto $bb5718;

  $bb5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6353} ___udelay(4295000);
    goto corral_source_split_17360;

  corral_source_split_17360:
    assume {:verifier.code 0} true;
    goto $bb5719;

  $bb5719:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5702:
    assume $i974 == 1;
    goto corral_source_split_17339;

  corral_source_split_17339:
    assume {:verifier.code 0} true;
    $i975 := $eq.i32($i973, 0);
    goto corral_source_split_17340;

  corral_source_split_17340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i975} true;
    goto $bb5705, $bb5706;

  $bb5706:
    assume !($i975 == 1);
    assume {:verifier.code 0} true;
    goto $bb5707;

  $bb5707:
    assume {:verifier.code 0} true;
    goto $bb5704;

  $bb5705:
    assume {:verifier.code 0} true;
    assume $i975 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 8);
    call {:si_unique_call 3019} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i16);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str.68);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 16);
    call {:si_unique_call 3020} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, .str.69);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 24);
    call {:si_unique_call 3021} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, .str.70);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p1);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 32);
    call {:si_unique_call 3022} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, 1313);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 35);
    call {:si_unique_call 3023} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i28);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, 1);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p1);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 35);
    call {:si_unique_call 3024} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i31);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    call {:si_unique_call 3025} {:cexpr "__cil_tmp25"} boogie_si_record_i8($i33);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    call {:si_unique_call 3026} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i34);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    call {:si_unique_call 3027} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i35);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} $i36 := __builtinx_expect.i64.i64($i35, 0);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    call {:si_unique_call 3029} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3035} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i47);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p5);
    call {:si_unique_call 3036} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i48);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 1208);
    call {:si_unique_call 3037} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i49);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    call {:si_unique_call 3038} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i52);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, $i47);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p5);
    call {:si_unique_call 3050} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i74);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 6244);
    call {:si_unique_call 3051} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i75);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    call {:si_unique_call 3052} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i77);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i78 == 1);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} pch_udc_reconnect($p5);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21:
    assume $i78 == 1;
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} pch_udc_init($p5);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i53 == 1;
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3039} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i54);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p5);
    call {:si_unique_call 3040} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i55);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 1208);
    call {:si_unique_call 3041} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i56);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    call {:si_unique_call 3042} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i59);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 32);
    call {:si_unique_call 3043} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i60);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    call {:si_unique_call 3044} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i63);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, $i54);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i64 == 1;
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p5);
    call {:si_unique_call 3045} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i65);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 1208);
    call {:si_unique_call 3046} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i66);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    call {:si_unique_call 3047} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i69);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 32);
    call {:si_unique_call 3048} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i70);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p5);
    call {:si_unique_call 3049} devirtbounce($p72, $p73);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p5);
    call {:si_unique_call 3030} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i39);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 1216);
    call {:si_unique_call 3031} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i40);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    call {:si_unique_call 3032} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i43);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 144);
    call {:si_unique_call 3033} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i44);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} vslice_dummy_var_87 := __dynamic_dev_dbg.ref.ref.ref($p1, $p45, .str.70);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5683:
    assume $i971 == 1;
    goto corral_source_split_17313;

  corral_source_split_17313:
    assume {:verifier.code 0} true;
    $i972 := $eq.i32($i970, 0);
    goto corral_source_split_17314;

  corral_source_split_17314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i972} true;
    goto $bb5686, $bb5687;

  $bb5687:
    assume !($i972 == 1);
    assume {:verifier.code 0} true;
    goto $bb5688;

  $bb5688:
    assume {:verifier.code 0} true;
    goto $bb5685;

  $bb5686:
    assume {:verifier.code 0} true;
    assume $i972 == 1;
    goto $bb10;

  $bb5664:
    assume $i968 == 1;
    goto corral_source_split_17287;

  corral_source_split_17287:
    assume {:verifier.code 0} true;
    $i969 := $eq.i32($i967, 0);
    goto corral_source_split_17288;

  corral_source_split_17288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i969} true;
    goto $bb5667, $bb5668;

  $bb5668:
    assume !($i969 == 1);
    assume {:verifier.code 0} true;
    goto $bb5669;

  $bb5669:
    assume {:verifier.code 0} true;
    goto $bb5666;

  $bb5667:
    assume {:verifier.code 0} true;
    assume $i969 == 1;
    goto $bb10;

  $bb5645:
    assume $i965 == 1;
    goto corral_source_split_17261;

  corral_source_split_17261:
    assume {:verifier.code 0} true;
    $i966 := $eq.i32($i964, 0);
    goto corral_source_split_17262;

  corral_source_split_17262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i966} true;
    goto $bb5648, $bb5649;

  $bb5649:
    assume !($i966 == 1);
    assume {:verifier.code 0} true;
    goto $bb5650;

  $bb5650:
    assume {:verifier.code 0} true;
    goto $bb5647;

  $bb5648:
    assume {:verifier.code 0} true;
    assume $i966 == 1;
    goto $bb10;

  $bb5626:
    assume $i962 == 1;
    goto corral_source_split_17235;

  corral_source_split_17235:
    assume {:verifier.code 0} true;
    $i963 := $eq.i32($i961, 0);
    goto corral_source_split_17236;

  corral_source_split_17236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i963} true;
    goto $bb5629, $bb5630;

  $bb5630:
    assume !($i963 == 1);
    assume {:verifier.code 0} true;
    goto $bb5631;

  $bb5631:
    assume {:verifier.code 0} true;
    goto $bb5628;

  $bb5629:
    assume {:verifier.code 0} true;
    assume $i963 == 1;
    goto $bb10;

  $bb5607:
    assume $i959 == 1;
    goto corral_source_split_17209;

  corral_source_split_17209:
    assume {:verifier.code 0} true;
    $i960 := $eq.i32($i958, 0);
    goto corral_source_split_17210;

  corral_source_split_17210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i960} true;
    goto $bb5610, $bb5611;

  $bb5611:
    assume !($i960 == 1);
    assume {:verifier.code 0} true;
    goto $bb5612;

  $bb5612:
    assume {:verifier.code 0} true;
    goto $bb5609;

  $bb5610:
    assume {:verifier.code 0} true;
    assume $i960 == 1;
    goto $bb10;

  $bb5588:
    assume $i956 == 1;
    goto corral_source_split_17183;

  corral_source_split_17183:
    assume {:verifier.code 0} true;
    $i957 := $eq.i32($i955, 0);
    goto corral_source_split_17184;

  corral_source_split_17184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i957} true;
    goto $bb5591, $bb5592;

  $bb5592:
    assume !($i957 == 1);
    assume {:verifier.code 0} true;
    goto $bb5593;

  $bb5593:
    assume {:verifier.code 0} true;
    goto $bb5590;

  $bb5591:
    assume {:verifier.code 0} true;
    assume $i957 == 1;
    goto $bb10;

  $bb5569:
    assume $i953 == 1;
    goto corral_source_split_17157;

  corral_source_split_17157:
    assume {:verifier.code 0} true;
    $i954 := $eq.i32($i952, 0);
    goto corral_source_split_17158;

  corral_source_split_17158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i954} true;
    goto $bb5572, $bb5573;

  $bb5573:
    assume !($i954 == 1);
    assume {:verifier.code 0} true;
    goto $bb5574;

  $bb5574:
    assume {:verifier.code 0} true;
    goto $bb5571;

  $bb5572:
    assume {:verifier.code 0} true;
    assume $i954 == 1;
    goto $bb10;

  $bb5550:
    assume $i950 == 1;
    goto corral_source_split_17131;

  corral_source_split_17131:
    assume {:verifier.code 0} true;
    $i951 := $eq.i32($i949, 0);
    goto corral_source_split_17132;

  corral_source_split_17132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i951} true;
    goto $bb5553, $bb5554;

  $bb5554:
    assume !($i951 == 1);
    assume {:verifier.code 0} true;
    goto $bb5555;

  $bb5555:
    assume {:verifier.code 0} true;
    goto $bb5552;

  $bb5553:
    assume {:verifier.code 0} true;
    assume $i951 == 1;
    goto $bb10;

  $bb5531:
    assume $i947 == 1;
    goto corral_source_split_17105;

  corral_source_split_17105:
    assume {:verifier.code 0} true;
    $i948 := $eq.i32($i946, 0);
    goto corral_source_split_17106;

  corral_source_split_17106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i948} true;
    goto $bb5534, $bb5535;

  $bb5535:
    assume !($i948 == 1);
    assume {:verifier.code 0} true;
    goto $bb5536;

  $bb5536:
    assume {:verifier.code 0} true;
    goto $bb5533;

  $bb5534:
    assume {:verifier.code 0} true;
    assume $i948 == 1;
    goto $bb10;

  $bb5512:
    assume $i944 == 1;
    goto corral_source_split_17079;

  corral_source_split_17079:
    assume {:verifier.code 0} true;
    $i945 := $eq.i32($i943, 0);
    goto corral_source_split_17080;

  corral_source_split_17080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i945} true;
    goto $bb5515, $bb5516;

  $bb5516:
    assume !($i945 == 1);
    assume {:verifier.code 0} true;
    goto $bb5517;

  $bb5517:
    assume {:verifier.code 0} true;
    goto $bb5514;

  $bb5515:
    assume {:verifier.code 0} true;
    assume $i945 == 1;
    goto $bb10;

  $bb5493:
    assume $i941 == 1;
    goto corral_source_split_17053;

  corral_source_split_17053:
    assume {:verifier.code 0} true;
    $i942 := $eq.i32($i940, 0);
    goto corral_source_split_17054;

  corral_source_split_17054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i942} true;
    goto $bb5496, $bb5497;

  $bb5497:
    assume !($i942 == 1);
    assume {:verifier.code 0} true;
    goto $bb5498;

  $bb5498:
    assume {:verifier.code 0} true;
    goto $bb5495;

  $bb5496:
    assume {:verifier.code 0} true;
    assume $i942 == 1;
    goto $bb10;

  $bb5474:
    assume $i938 == 1;
    goto corral_source_split_17027;

  corral_source_split_17027:
    assume {:verifier.code 0} true;
    $i939 := $eq.i32($i937, 0);
    goto corral_source_split_17028;

  corral_source_split_17028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i939} true;
    goto $bb5477, $bb5478;

  $bb5478:
    assume !($i939 == 1);
    assume {:verifier.code 0} true;
    goto $bb5479;

  $bb5479:
    assume {:verifier.code 0} true;
    goto $bb5476;

  $bb5477:
    assume {:verifier.code 0} true;
    assume $i939 == 1;
    goto $bb10;

  $bb5455:
    assume $i935 == 1;
    goto corral_source_split_17001;

  corral_source_split_17001:
    assume {:verifier.code 0} true;
    $i936 := $eq.i32($i934, 0);
    goto corral_source_split_17002;

  corral_source_split_17002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i936} true;
    goto $bb5458, $bb5459;

  $bb5459:
    assume !($i936 == 1);
    assume {:verifier.code 0} true;
    goto $bb5460;

  $bb5460:
    assume {:verifier.code 0} true;
    goto $bb5457;

  $bb5458:
    assume {:verifier.code 0} true;
    assume $i936 == 1;
    goto $bb10;

  $bb5436:
    assume $i932 == 1;
    goto corral_source_split_16975;

  corral_source_split_16975:
    assume {:verifier.code 0} true;
    $i933 := $eq.i32($i931, 0);
    goto corral_source_split_16976;

  corral_source_split_16976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i933} true;
    goto $bb5439, $bb5440;

  $bb5440:
    assume !($i933 == 1);
    assume {:verifier.code 0} true;
    goto $bb5441;

  $bb5441:
    assume {:verifier.code 0} true;
    goto $bb5438;

  $bb5439:
    assume {:verifier.code 0} true;
    assume $i933 == 1;
    goto $bb10;

  $bb5417:
    assume $i929 == 1;
    goto corral_source_split_16949;

  corral_source_split_16949:
    assume {:verifier.code 0} true;
    $i930 := $eq.i32($i928, 0);
    goto corral_source_split_16950;

  corral_source_split_16950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i930} true;
    goto $bb5420, $bb5421;

  $bb5421:
    assume !($i930 == 1);
    assume {:verifier.code 0} true;
    goto $bb5422;

  $bb5422:
    assume {:verifier.code 0} true;
    goto $bb5419;

  $bb5420:
    assume {:verifier.code 0} true;
    assume $i930 == 1;
    goto $bb10;

  $bb5398:
    assume $i926 == 1;
    goto corral_source_split_16923;

  corral_source_split_16923:
    assume {:verifier.code 0} true;
    $i927 := $eq.i32($i925, 0);
    goto corral_source_split_16924;

  corral_source_split_16924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i927} true;
    goto $bb5401, $bb5402;

  $bb5402:
    assume !($i927 == 1);
    assume {:verifier.code 0} true;
    goto $bb5403;

  $bb5403:
    assume {:verifier.code 0} true;
    goto $bb5400;

  $bb5401:
    assume {:verifier.code 0} true;
    assume $i927 == 1;
    goto $bb10;

  $bb5379:
    assume $i923 == 1;
    goto corral_source_split_16897;

  corral_source_split_16897:
    assume {:verifier.code 0} true;
    $i924 := $eq.i32($i922, 0);
    goto corral_source_split_16898;

  corral_source_split_16898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i924} true;
    goto $bb5382, $bb5383;

  $bb5383:
    assume !($i924 == 1);
    assume {:verifier.code 0} true;
    goto $bb5384;

  $bb5384:
    assume {:verifier.code 0} true;
    goto $bb5381;

  $bb5382:
    assume {:verifier.code 0} true;
    assume $i924 == 1;
    goto $bb10;

  $bb5360:
    assume $i920 == 1;
    goto corral_source_split_16871;

  corral_source_split_16871:
    assume {:verifier.code 0} true;
    $i921 := $eq.i32($i919, 0);
    goto corral_source_split_16872;

  corral_source_split_16872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i921} true;
    goto $bb5363, $bb5364;

  $bb5364:
    assume !($i921 == 1);
    assume {:verifier.code 0} true;
    goto $bb5365;

  $bb5365:
    assume {:verifier.code 0} true;
    goto $bb5362;

  $bb5363:
    assume {:verifier.code 0} true;
    assume $i921 == 1;
    goto $bb10;

  $bb5341:
    assume $i917 == 1;
    goto corral_source_split_16845;

  corral_source_split_16845:
    assume {:verifier.code 0} true;
    $i918 := $eq.i32($i916, 0);
    goto corral_source_split_16846;

  corral_source_split_16846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i918} true;
    goto $bb5344, $bb5345;

  $bb5345:
    assume !($i918 == 1);
    assume {:verifier.code 0} true;
    goto $bb5346;

  $bb5346:
    assume {:verifier.code 0} true;
    goto $bb5343;

  $bb5344:
    assume {:verifier.code 0} true;
    assume $i918 == 1;
    goto $bb10;

  $bb5322:
    assume $i914 == 1;
    goto corral_source_split_16819;

  corral_source_split_16819:
    assume {:verifier.code 0} true;
    $i915 := $eq.i32($i913, 0);
    goto corral_source_split_16820;

  corral_source_split_16820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i915} true;
    goto $bb5325, $bb5326;

  $bb5326:
    assume !($i915 == 1);
    assume {:verifier.code 0} true;
    goto $bb5327;

  $bb5327:
    assume {:verifier.code 0} true;
    goto $bb5324;

  $bb5325:
    assume {:verifier.code 0} true;
    assume $i915 == 1;
    goto $bb10;

  $bb5303:
    assume $i911 == 1;
    goto corral_source_split_16793;

  corral_source_split_16793:
    assume {:verifier.code 0} true;
    $i912 := $eq.i32($i910, 0);
    goto corral_source_split_16794;

  corral_source_split_16794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i912} true;
    goto $bb5306, $bb5307;

  $bb5307:
    assume !($i912 == 1);
    assume {:verifier.code 0} true;
    goto $bb5308;

  $bb5308:
    assume {:verifier.code 0} true;
    goto $bb5305;

  $bb5306:
    assume {:verifier.code 0} true;
    assume $i912 == 1;
    goto $bb10;

  $bb5284:
    assume $i908 == 1;
    goto corral_source_split_16767;

  corral_source_split_16767:
    assume {:verifier.code 0} true;
    $i909 := $eq.i32($i907, 0);
    goto corral_source_split_16768;

  corral_source_split_16768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i909} true;
    goto $bb5287, $bb5288;

  $bb5288:
    assume !($i909 == 1);
    assume {:verifier.code 0} true;
    goto $bb5289;

  $bb5289:
    assume {:verifier.code 0} true;
    goto $bb5286;

  $bb5287:
    assume {:verifier.code 0} true;
    assume $i909 == 1;
    goto $bb10;

  $bb5265:
    assume $i905 == 1;
    goto corral_source_split_16741;

  corral_source_split_16741:
    assume {:verifier.code 0} true;
    $i906 := $eq.i32($i904, 0);
    goto corral_source_split_16742;

  corral_source_split_16742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i906} true;
    goto $bb5268, $bb5269;

  $bb5269:
    assume !($i906 == 1);
    assume {:verifier.code 0} true;
    goto $bb5270;

  $bb5270:
    assume {:verifier.code 0} true;
    goto $bb5267;

  $bb5268:
    assume {:verifier.code 0} true;
    assume $i906 == 1;
    goto $bb10;

  $bb5246:
    assume $i902 == 1;
    goto corral_source_split_16715;

  corral_source_split_16715:
    assume {:verifier.code 0} true;
    $i903 := $eq.i32($i901, 0);
    goto corral_source_split_16716;

  corral_source_split_16716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i903} true;
    goto $bb5249, $bb5250;

  $bb5250:
    assume !($i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb5251;

  $bb5251:
    assume {:verifier.code 0} true;
    goto $bb5248;

  $bb5249:
    assume {:verifier.code 0} true;
    assume $i903 == 1;
    goto $bb10;

  $bb5227:
    assume $i899 == 1;
    goto corral_source_split_16689;

  corral_source_split_16689:
    assume {:verifier.code 0} true;
    $i900 := $eq.i32($i898, 0);
    goto corral_source_split_16690;

  corral_source_split_16690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i900} true;
    goto $bb5230, $bb5231;

  $bb5231:
    assume !($i900 == 1);
    assume {:verifier.code 0} true;
    goto $bb5232;

  $bb5232:
    assume {:verifier.code 0} true;
    goto $bb5229;

  $bb5230:
    assume {:verifier.code 0} true;
    assume $i900 == 1;
    goto $bb10;

  $bb5208:
    assume $i896 == 1;
    goto corral_source_split_16663;

  corral_source_split_16663:
    assume {:verifier.code 0} true;
    $i897 := $eq.i32($i895, 0);
    goto corral_source_split_16664;

  corral_source_split_16664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i897} true;
    goto $bb5211, $bb5212;

  $bb5212:
    assume !($i897 == 1);
    assume {:verifier.code 0} true;
    goto $bb5213;

  $bb5213:
    assume {:verifier.code 0} true;
    goto $bb5210;

  $bb5211:
    assume {:verifier.code 0} true;
    assume $i897 == 1;
    goto $bb10;

  $bb5189:
    assume $i893 == 1;
    goto corral_source_split_16637;

  corral_source_split_16637:
    assume {:verifier.code 0} true;
    $i894 := $eq.i32($i892, 0);
    goto corral_source_split_16638;

  corral_source_split_16638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i894} true;
    goto $bb5192, $bb5193;

  $bb5193:
    assume !($i894 == 1);
    assume {:verifier.code 0} true;
    goto $bb5194;

  $bb5194:
    assume {:verifier.code 0} true;
    goto $bb5191;

  $bb5192:
    assume {:verifier.code 0} true;
    assume $i894 == 1;
    goto $bb10;

  $bb5170:
    assume $i890 == 1;
    goto corral_source_split_16611;

  corral_source_split_16611:
    assume {:verifier.code 0} true;
    $i891 := $eq.i32($i889, 0);
    goto corral_source_split_16612;

  corral_source_split_16612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i891} true;
    goto $bb5173, $bb5174;

  $bb5174:
    assume !($i891 == 1);
    assume {:verifier.code 0} true;
    goto $bb5175;

  $bb5175:
    assume {:verifier.code 0} true;
    goto $bb5172;

  $bb5173:
    assume {:verifier.code 0} true;
    assume $i891 == 1;
    goto $bb10;

  $bb5151:
    assume $i887 == 1;
    goto corral_source_split_16585;

  corral_source_split_16585:
    assume {:verifier.code 0} true;
    $i888 := $eq.i32($i886, 0);
    goto corral_source_split_16586;

  corral_source_split_16586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i888} true;
    goto $bb5154, $bb5155;

  $bb5155:
    assume !($i888 == 1);
    assume {:verifier.code 0} true;
    goto $bb5156;

  $bb5156:
    assume {:verifier.code 0} true;
    goto $bb5153;

  $bb5154:
    assume {:verifier.code 0} true;
    assume $i888 == 1;
    goto $bb10;

  $bb5132:
    assume $i884 == 1;
    goto corral_source_split_16559;

  corral_source_split_16559:
    assume {:verifier.code 0} true;
    $i885 := $eq.i32($i883, 0);
    goto corral_source_split_16560;

  corral_source_split_16560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i885} true;
    goto $bb5135, $bb5136;

  $bb5136:
    assume !($i885 == 1);
    assume {:verifier.code 0} true;
    goto $bb5137;

  $bb5137:
    assume {:verifier.code 0} true;
    goto $bb5134;

  $bb5135:
    assume {:verifier.code 0} true;
    assume $i885 == 1;
    goto $bb10;

  $bb5113:
    assume $i881 == 1;
    goto corral_source_split_16533;

  corral_source_split_16533:
    assume {:verifier.code 0} true;
    $i882 := $eq.i32($i880, 0);
    goto corral_source_split_16534;

  corral_source_split_16534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i882} true;
    goto $bb5116, $bb5117;

  $bb5117:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb5118;

  $bb5118:
    assume {:verifier.code 0} true;
    goto $bb5115;

  $bb5116:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb10;

  $bb5094:
    assume $i878 == 1;
    goto corral_source_split_16507;

  corral_source_split_16507:
    assume {:verifier.code 0} true;
    $i879 := $eq.i32($i877, 0);
    goto corral_source_split_16508;

  corral_source_split_16508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i879} true;
    goto $bb5097, $bb5098;

  $bb5098:
    assume !($i879 == 1);
    assume {:verifier.code 0} true;
    goto $bb5099;

  $bb5099:
    assume {:verifier.code 0} true;
    goto $bb5096;

  $bb5097:
    assume {:verifier.code 0} true;
    assume $i879 == 1;
    goto $bb10;

  $bb5075:
    assume $i875 == 1;
    goto corral_source_split_16481;

  corral_source_split_16481:
    assume {:verifier.code 0} true;
    $i876 := $eq.i32($i874, 0);
    goto corral_source_split_16482;

  corral_source_split_16482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i876} true;
    goto $bb5078, $bb5079;

  $bb5079:
    assume !($i876 == 1);
    assume {:verifier.code 0} true;
    goto $bb5080;

  $bb5080:
    assume {:verifier.code 0} true;
    goto $bb5077;

  $bb5078:
    assume {:verifier.code 0} true;
    assume $i876 == 1;
    goto $bb10;

  $bb5056:
    assume $i872 == 1;
    goto corral_source_split_16455;

  corral_source_split_16455:
    assume {:verifier.code 0} true;
    $i873 := $eq.i32($i871, 0);
    goto corral_source_split_16456;

  corral_source_split_16456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i873} true;
    goto $bb5059, $bb5060;

  $bb5060:
    assume !($i873 == 1);
    assume {:verifier.code 0} true;
    goto $bb5061;

  $bb5061:
    assume {:verifier.code 0} true;
    goto $bb5058;

  $bb5059:
    assume {:verifier.code 0} true;
    assume $i873 == 1;
    goto $bb10;

  $bb5037:
    assume $i869 == 1;
    goto corral_source_split_16429;

  corral_source_split_16429:
    assume {:verifier.code 0} true;
    $i870 := $eq.i32($i868, 0);
    goto corral_source_split_16430;

  corral_source_split_16430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i870} true;
    goto $bb5040, $bb5041;

  $bb5041:
    assume !($i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb5042;

  $bb5042:
    assume {:verifier.code 0} true;
    goto $bb5039;

  $bb5040:
    assume {:verifier.code 0} true;
    assume $i870 == 1;
    goto $bb10;

  $bb5018:
    assume $i866 == 1;
    goto corral_source_split_16403;

  corral_source_split_16403:
    assume {:verifier.code 0} true;
    $i867 := $eq.i32($i865, 0);
    goto corral_source_split_16404;

  corral_source_split_16404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i867} true;
    goto $bb5021, $bb5022;

  $bb5022:
    assume !($i867 == 1);
    assume {:verifier.code 0} true;
    goto $bb5023;

  $bb5023:
    assume {:verifier.code 0} true;
    goto $bb5020;

  $bb5021:
    assume {:verifier.code 0} true;
    assume $i867 == 1;
    goto $bb10;

  $bb4999:
    assume $i863 == 1;
    goto corral_source_split_16377;

  corral_source_split_16377:
    assume {:verifier.code 0} true;
    $i864 := $eq.i32($i862, 0);
    goto corral_source_split_16378;

  corral_source_split_16378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i864} true;
    goto $bb5002, $bb5003;

  $bb5003:
    assume !($i864 == 1);
    assume {:verifier.code 0} true;
    goto $bb5004;

  $bb5004:
    assume {:verifier.code 0} true;
    goto $bb5001;

  $bb5002:
    assume {:verifier.code 0} true;
    assume $i864 == 1;
    goto $bb10;

  $bb4980:
    assume $i860 == 1;
    goto corral_source_split_16351;

  corral_source_split_16351:
    assume {:verifier.code 0} true;
    $i861 := $eq.i32($i859, 0);
    goto corral_source_split_16352;

  corral_source_split_16352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i861} true;
    goto $bb4983, $bb4984;

  $bb4984:
    assume !($i861 == 1);
    assume {:verifier.code 0} true;
    goto $bb4985;

  $bb4985:
    assume {:verifier.code 0} true;
    goto $bb4982;

  $bb4983:
    assume {:verifier.code 0} true;
    assume $i861 == 1;
    goto $bb10;

  $bb4961:
    assume $i857 == 1;
    goto corral_source_split_16325;

  corral_source_split_16325:
    assume {:verifier.code 0} true;
    $i858 := $eq.i32($i856, 0);
    goto corral_source_split_16326;

  corral_source_split_16326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i858} true;
    goto $bb4964, $bb4965;

  $bb4965:
    assume !($i858 == 1);
    assume {:verifier.code 0} true;
    goto $bb4966;

  $bb4966:
    assume {:verifier.code 0} true;
    goto $bb4963;

  $bb4964:
    assume {:verifier.code 0} true;
    assume $i858 == 1;
    goto $bb10;

  $bb4942:
    assume $i854 == 1;
    goto corral_source_split_16299;

  corral_source_split_16299:
    assume {:verifier.code 0} true;
    $i855 := $eq.i32($i853, 0);
    goto corral_source_split_16300;

  corral_source_split_16300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i855} true;
    goto $bb4945, $bb4946;

  $bb4946:
    assume !($i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb4947;

  $bb4947:
    assume {:verifier.code 0} true;
    goto $bb4944;

  $bb4945:
    assume {:verifier.code 0} true;
    assume $i855 == 1;
    goto $bb10;

  $bb4923:
    assume $i851 == 1;
    goto corral_source_split_16273;

  corral_source_split_16273:
    assume {:verifier.code 0} true;
    $i852 := $eq.i32($i850, 0);
    goto corral_source_split_16274;

  corral_source_split_16274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i852} true;
    goto $bb4926, $bb4927;

  $bb4927:
    assume !($i852 == 1);
    assume {:verifier.code 0} true;
    goto $bb4928;

  $bb4928:
    assume {:verifier.code 0} true;
    goto $bb4925;

  $bb4926:
    assume {:verifier.code 0} true;
    assume $i852 == 1;
    goto $bb10;

  $bb4904:
    assume $i848 == 1;
    goto corral_source_split_16247;

  corral_source_split_16247:
    assume {:verifier.code 0} true;
    $i849 := $eq.i32($i847, 0);
    goto corral_source_split_16248;

  corral_source_split_16248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i849} true;
    goto $bb4907, $bb4908;

  $bb4908:
    assume !($i849 == 1);
    assume {:verifier.code 0} true;
    goto $bb4909;

  $bb4909:
    assume {:verifier.code 0} true;
    goto $bb4906;

  $bb4907:
    assume {:verifier.code 0} true;
    assume $i849 == 1;
    goto $bb10;

  $bb4885:
    assume $i845 == 1;
    goto corral_source_split_16221;

  corral_source_split_16221:
    assume {:verifier.code 0} true;
    $i846 := $eq.i32($i844, 0);
    goto corral_source_split_16222;

  corral_source_split_16222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i846} true;
    goto $bb4888, $bb4889;

  $bb4889:
    assume !($i846 == 1);
    assume {:verifier.code 0} true;
    goto $bb4890;

  $bb4890:
    assume {:verifier.code 0} true;
    goto $bb4887;

  $bb4888:
    assume {:verifier.code 0} true;
    assume $i846 == 1;
    goto $bb10;

  $bb4866:
    assume $i842 == 1;
    goto corral_source_split_16195;

  corral_source_split_16195:
    assume {:verifier.code 0} true;
    $i843 := $eq.i32($i841, 0);
    goto corral_source_split_16196;

  corral_source_split_16196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i843} true;
    goto $bb4869, $bb4870;

  $bb4870:
    assume !($i843 == 1);
    assume {:verifier.code 0} true;
    goto $bb4871;

  $bb4871:
    assume {:verifier.code 0} true;
    goto $bb4868;

  $bb4869:
    assume {:verifier.code 0} true;
    assume $i843 == 1;
    goto $bb10;

  $bb4847:
    assume $i839 == 1;
    goto corral_source_split_16169;

  corral_source_split_16169:
    assume {:verifier.code 0} true;
    $i840 := $eq.i32($i838, 0);
    goto corral_source_split_16170;

  corral_source_split_16170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb4850, $bb4851;

  $bb4851:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb4852;

  $bb4852:
    assume {:verifier.code 0} true;
    goto $bb4849;

  $bb4850:
    assume {:verifier.code 0} true;
    assume $i840 == 1;
    goto $bb10;

  $bb4828:
    assume $i836 == 1;
    goto corral_source_split_16143;

  corral_source_split_16143:
    assume {:verifier.code 0} true;
    $i837 := $eq.i32($i835, 0);
    goto corral_source_split_16144;

  corral_source_split_16144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i837} true;
    goto $bb4831, $bb4832;

  $bb4832:
    assume !($i837 == 1);
    assume {:verifier.code 0} true;
    goto $bb4833;

  $bb4833:
    assume {:verifier.code 0} true;
    goto $bb4830;

  $bb4831:
    assume {:verifier.code 0} true;
    assume $i837 == 1;
    goto $bb10;

  $bb4809:
    assume $i833 == 1;
    goto corral_source_split_16117;

  corral_source_split_16117:
    assume {:verifier.code 0} true;
    $i834 := $eq.i32($i832, 0);
    goto corral_source_split_16118;

  corral_source_split_16118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i834} true;
    goto $bb4812, $bb4813;

  $bb4813:
    assume !($i834 == 1);
    assume {:verifier.code 0} true;
    goto $bb4814;

  $bb4814:
    assume {:verifier.code 0} true;
    goto $bb4811;

  $bb4812:
    assume {:verifier.code 0} true;
    assume $i834 == 1;
    goto $bb10;

  $bb4790:
    assume $i830 == 1;
    goto corral_source_split_16091;

  corral_source_split_16091:
    assume {:verifier.code 0} true;
    $i831 := $eq.i32($i829, 0);
    goto corral_source_split_16092;

  corral_source_split_16092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i831} true;
    goto $bb4793, $bb4794;

  $bb4794:
    assume !($i831 == 1);
    assume {:verifier.code 0} true;
    goto $bb4795;

  $bb4795:
    assume {:verifier.code 0} true;
    goto $bb4792;

  $bb4793:
    assume {:verifier.code 0} true;
    assume $i831 == 1;
    goto $bb10;

  $bb4771:
    assume $i827 == 1;
    goto corral_source_split_16065;

  corral_source_split_16065:
    assume {:verifier.code 0} true;
    $i828 := $eq.i32($i826, 0);
    goto corral_source_split_16066;

  corral_source_split_16066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i828} true;
    goto $bb4774, $bb4775;

  $bb4775:
    assume !($i828 == 1);
    assume {:verifier.code 0} true;
    goto $bb4776;

  $bb4776:
    assume {:verifier.code 0} true;
    goto $bb4773;

  $bb4774:
    assume {:verifier.code 0} true;
    assume $i828 == 1;
    goto $bb10;

  $bb4752:
    assume $i824 == 1;
    goto corral_source_split_16039;

  corral_source_split_16039:
    assume {:verifier.code 0} true;
    $i825 := $eq.i32($i823, 0);
    goto corral_source_split_16040;

  corral_source_split_16040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i825} true;
    goto $bb4755, $bb4756;

  $bb4756:
    assume !($i825 == 1);
    assume {:verifier.code 0} true;
    goto $bb4757;

  $bb4757:
    assume {:verifier.code 0} true;
    goto $bb4754;

  $bb4755:
    assume {:verifier.code 0} true;
    assume $i825 == 1;
    goto $bb10;

  $bb4733:
    assume $i821 == 1;
    goto corral_source_split_16013;

  corral_source_split_16013:
    assume {:verifier.code 0} true;
    $i822 := $eq.i32($i820, 0);
    goto corral_source_split_16014;

  corral_source_split_16014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i822} true;
    goto $bb4736, $bb4737;

  $bb4737:
    assume !($i822 == 1);
    assume {:verifier.code 0} true;
    goto $bb4738;

  $bb4738:
    assume {:verifier.code 0} true;
    goto $bb4735;

  $bb4736:
    assume {:verifier.code 0} true;
    assume $i822 == 1;
    goto $bb10;

  $bb4714:
    assume $i818 == 1;
    goto corral_source_split_15987;

  corral_source_split_15987:
    assume {:verifier.code 0} true;
    $i819 := $eq.i32($i817, 0);
    goto corral_source_split_15988;

  corral_source_split_15988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i819} true;
    goto $bb4717, $bb4718;

  $bb4718:
    assume !($i819 == 1);
    assume {:verifier.code 0} true;
    goto $bb4719;

  $bb4719:
    assume {:verifier.code 0} true;
    goto $bb4716;

  $bb4717:
    assume {:verifier.code 0} true;
    assume $i819 == 1;
    goto $bb10;

  $bb4695:
    assume $i815 == 1;
    goto corral_source_split_15961;

  corral_source_split_15961:
    assume {:verifier.code 0} true;
    $i816 := $eq.i32($i814, 0);
    goto corral_source_split_15962;

  corral_source_split_15962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i816} true;
    goto $bb4698, $bb4699;

  $bb4699:
    assume !($i816 == 1);
    assume {:verifier.code 0} true;
    goto $bb4700;

  $bb4700:
    assume {:verifier.code 0} true;
    goto $bb4697;

  $bb4698:
    assume {:verifier.code 0} true;
    assume $i816 == 1;
    goto $bb10;

  $bb4676:
    assume $i812 == 1;
    goto corral_source_split_15935;

  corral_source_split_15935:
    assume {:verifier.code 0} true;
    $i813 := $eq.i32($i811, 0);
    goto corral_source_split_15936;

  corral_source_split_15936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i813} true;
    goto $bb4679, $bb4680;

  $bb4680:
    assume !($i813 == 1);
    assume {:verifier.code 0} true;
    goto $bb4681;

  $bb4681:
    assume {:verifier.code 0} true;
    goto $bb4678;

  $bb4679:
    assume {:verifier.code 0} true;
    assume $i813 == 1;
    goto $bb10;

  $bb4657:
    assume $i809 == 1;
    goto corral_source_split_15909;

  corral_source_split_15909:
    assume {:verifier.code 0} true;
    $i810 := $eq.i32($i808, 0);
    goto corral_source_split_15910;

  corral_source_split_15910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i810} true;
    goto $bb4660, $bb4661;

  $bb4661:
    assume !($i810 == 1);
    assume {:verifier.code 0} true;
    goto $bb4662;

  $bb4662:
    assume {:verifier.code 0} true;
    goto $bb4659;

  $bb4660:
    assume {:verifier.code 0} true;
    assume $i810 == 1;
    goto $bb10;

  $bb4638:
    assume $i806 == 1;
    goto corral_source_split_15883;

  corral_source_split_15883:
    assume {:verifier.code 0} true;
    $i807 := $eq.i32($i805, 0);
    goto corral_source_split_15884;

  corral_source_split_15884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i807} true;
    goto $bb4641, $bb4642;

  $bb4642:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb4643;

  $bb4643:
    assume {:verifier.code 0} true;
    goto $bb4640;

  $bb4641:
    assume {:verifier.code 0} true;
    assume $i807 == 1;
    goto $bb10;

  $bb4619:
    assume $i803 == 1;
    goto corral_source_split_15857;

  corral_source_split_15857:
    assume {:verifier.code 0} true;
    $i804 := $eq.i32($i802, 0);
    goto corral_source_split_15858;

  corral_source_split_15858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i804} true;
    goto $bb4622, $bb4623;

  $bb4623:
    assume !($i804 == 1);
    assume {:verifier.code 0} true;
    goto $bb4624;

  $bb4624:
    assume {:verifier.code 0} true;
    goto $bb4621;

  $bb4622:
    assume {:verifier.code 0} true;
    assume $i804 == 1;
    goto $bb10;

  $bb4600:
    assume $i800 == 1;
    goto corral_source_split_15831;

  corral_source_split_15831:
    assume {:verifier.code 0} true;
    $i801 := $eq.i32($i799, 0);
    goto corral_source_split_15832;

  corral_source_split_15832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i801} true;
    goto $bb4603, $bb4604;

  $bb4604:
    assume !($i801 == 1);
    assume {:verifier.code 0} true;
    goto $bb4605;

  $bb4605:
    assume {:verifier.code 0} true;
    goto $bb4602;

  $bb4603:
    assume {:verifier.code 0} true;
    assume $i801 == 1;
    goto $bb10;

  $bb4581:
    assume $i797 == 1;
    goto corral_source_split_15805;

  corral_source_split_15805:
    assume {:verifier.code 0} true;
    $i798 := $eq.i32($i796, 0);
    goto corral_source_split_15806;

  corral_source_split_15806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i798} true;
    goto $bb4584, $bb4585;

  $bb4585:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb4586;

  $bb4586:
    assume {:verifier.code 0} true;
    goto $bb4583;

  $bb4584:
    assume {:verifier.code 0} true;
    assume $i798 == 1;
    goto $bb10;

  $bb4562:
    assume $i794 == 1;
    goto corral_source_split_15779;

  corral_source_split_15779:
    assume {:verifier.code 0} true;
    $i795 := $eq.i32($i793, 0);
    goto corral_source_split_15780;

  corral_source_split_15780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i795} true;
    goto $bb4565, $bb4566;

  $bb4566:
    assume !($i795 == 1);
    assume {:verifier.code 0} true;
    goto $bb4567;

  $bb4567:
    assume {:verifier.code 0} true;
    goto $bb4564;

  $bb4565:
    assume {:verifier.code 0} true;
    assume $i795 == 1;
    goto $bb10;

  $bb4543:
    assume $i791 == 1;
    goto corral_source_split_15753;

  corral_source_split_15753:
    assume {:verifier.code 0} true;
    $i792 := $eq.i32($i790, 0);
    goto corral_source_split_15754;

  corral_source_split_15754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i792} true;
    goto $bb4546, $bb4547;

  $bb4547:
    assume !($i792 == 1);
    assume {:verifier.code 0} true;
    goto $bb4548;

  $bb4548:
    assume {:verifier.code 0} true;
    goto $bb4545;

  $bb4546:
    assume {:verifier.code 0} true;
    assume $i792 == 1;
    goto $bb10;

  $bb4524:
    assume $i788 == 1;
    goto corral_source_split_15727;

  corral_source_split_15727:
    assume {:verifier.code 0} true;
    $i789 := $eq.i32($i787, 0);
    goto corral_source_split_15728;

  corral_source_split_15728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i789} true;
    goto $bb4527, $bb4528;

  $bb4528:
    assume !($i789 == 1);
    assume {:verifier.code 0} true;
    goto $bb4529;

  $bb4529:
    assume {:verifier.code 0} true;
    goto $bb4526;

  $bb4527:
    assume {:verifier.code 0} true;
    assume $i789 == 1;
    goto $bb10;

  $bb4505:
    assume $i785 == 1;
    goto corral_source_split_15701;

  corral_source_split_15701:
    assume {:verifier.code 0} true;
    $i786 := $eq.i32($i784, 0);
    goto corral_source_split_15702;

  corral_source_split_15702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i786} true;
    goto $bb4508, $bb4509;

  $bb4509:
    assume !($i786 == 1);
    assume {:verifier.code 0} true;
    goto $bb4510;

  $bb4510:
    assume {:verifier.code 0} true;
    goto $bb4507;

  $bb4508:
    assume {:verifier.code 0} true;
    assume $i786 == 1;
    goto $bb10;

  $bb4486:
    assume $i782 == 1;
    goto corral_source_split_15675;

  corral_source_split_15675:
    assume {:verifier.code 0} true;
    $i783 := $eq.i32($i781, 0);
    goto corral_source_split_15676;

  corral_source_split_15676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i783} true;
    goto $bb4489, $bb4490;

  $bb4490:
    assume !($i783 == 1);
    assume {:verifier.code 0} true;
    goto $bb4491;

  $bb4491:
    assume {:verifier.code 0} true;
    goto $bb4488;

  $bb4489:
    assume {:verifier.code 0} true;
    assume $i783 == 1;
    goto $bb10;

  $bb4467:
    assume $i779 == 1;
    goto corral_source_split_15649;

  corral_source_split_15649:
    assume {:verifier.code 0} true;
    $i780 := $eq.i32($i778, 0);
    goto corral_source_split_15650;

  corral_source_split_15650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i780} true;
    goto $bb4470, $bb4471;

  $bb4471:
    assume !($i780 == 1);
    assume {:verifier.code 0} true;
    goto $bb4472;

  $bb4472:
    assume {:verifier.code 0} true;
    goto $bb4469;

  $bb4470:
    assume {:verifier.code 0} true;
    assume $i780 == 1;
    goto $bb10;

  $bb4448:
    assume $i776 == 1;
    goto corral_source_split_15623;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    $i777 := $eq.i32($i775, 0);
    goto corral_source_split_15624;

  corral_source_split_15624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i777} true;
    goto $bb4451, $bb4452;

  $bb4452:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb4453;

  $bb4453:
    assume {:verifier.code 0} true;
    goto $bb4450;

  $bb4451:
    assume {:verifier.code 0} true;
    assume $i777 == 1;
    goto $bb10;

  $bb4429:
    assume $i773 == 1;
    goto corral_source_split_15597;

  corral_source_split_15597:
    assume {:verifier.code 0} true;
    $i774 := $eq.i32($i772, 0);
    goto corral_source_split_15598;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i774} true;
    goto $bb4432, $bb4433;

  $bb4433:
    assume !($i774 == 1);
    assume {:verifier.code 0} true;
    goto $bb4434;

  $bb4434:
    assume {:verifier.code 0} true;
    goto $bb4431;

  $bb4432:
    assume {:verifier.code 0} true;
    assume $i774 == 1;
    goto $bb10;

  $bb4410:
    assume $i770 == 1;
    goto corral_source_split_15571;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    $i771 := $eq.i32($i769, 0);
    goto corral_source_split_15572;

  corral_source_split_15572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i771} true;
    goto $bb4413, $bb4414;

  $bb4414:
    assume !($i771 == 1);
    assume {:verifier.code 0} true;
    goto $bb4415;

  $bb4415:
    assume {:verifier.code 0} true;
    goto $bb4412;

  $bb4413:
    assume {:verifier.code 0} true;
    assume $i771 == 1;
    goto $bb10;

  $bb4391:
    assume $i767 == 1;
    goto corral_source_split_15545;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    $i768 := $eq.i32($i766, 0);
    goto corral_source_split_15546;

  corral_source_split_15546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i768} true;
    goto $bb4394, $bb4395;

  $bb4395:
    assume !($i768 == 1);
    assume {:verifier.code 0} true;
    goto $bb4396;

  $bb4396:
    assume {:verifier.code 0} true;
    goto $bb4393;

  $bb4394:
    assume {:verifier.code 0} true;
    assume $i768 == 1;
    goto $bb10;

  $bb4372:
    assume $i764 == 1;
    goto corral_source_split_15519;

  corral_source_split_15519:
    assume {:verifier.code 0} true;
    $i765 := $eq.i32($i763, 0);
    goto corral_source_split_15520;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i765} true;
    goto $bb4375, $bb4376;

  $bb4376:
    assume !($i765 == 1);
    assume {:verifier.code 0} true;
    goto $bb4377;

  $bb4377:
    assume {:verifier.code 0} true;
    goto $bb4374;

  $bb4375:
    assume {:verifier.code 0} true;
    assume $i765 == 1;
    goto $bb10;

  $bb4353:
    assume $i761 == 1;
    goto corral_source_split_15493;

  corral_source_split_15493:
    assume {:verifier.code 0} true;
    $i762 := $eq.i32($i760, 0);
    goto corral_source_split_15494;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i762} true;
    goto $bb4356, $bb4357;

  $bb4357:
    assume !($i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb4358;

  $bb4358:
    assume {:verifier.code 0} true;
    goto $bb4355;

  $bb4356:
    assume {:verifier.code 0} true;
    assume $i762 == 1;
    goto $bb10;

  $bb4334:
    assume $i758 == 1;
    goto corral_source_split_15467;

  corral_source_split_15467:
    assume {:verifier.code 0} true;
    $i759 := $eq.i32($i757, 0);
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i759} true;
    goto $bb4337, $bb4338;

  $bb4338:
    assume !($i759 == 1);
    assume {:verifier.code 0} true;
    goto $bb4339;

  $bb4339:
    assume {:verifier.code 0} true;
    goto $bb4336;

  $bb4337:
    assume {:verifier.code 0} true;
    assume $i759 == 1;
    goto $bb10;

  $bb4315:
    assume $i755 == 1;
    goto corral_source_split_15441;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    $i756 := $eq.i32($i754, 0);
    goto corral_source_split_15442;

  corral_source_split_15442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i756} true;
    goto $bb4318, $bb4319;

  $bb4319:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb4320;

  $bb4320:
    assume {:verifier.code 0} true;
    goto $bb4317;

  $bb4318:
    assume {:verifier.code 0} true;
    assume $i756 == 1;
    goto $bb10;

  $bb4296:
    assume $i752 == 1;
    goto corral_source_split_15415;

  corral_source_split_15415:
    assume {:verifier.code 0} true;
    $i753 := $eq.i32($i751, 0);
    goto corral_source_split_15416;

  corral_source_split_15416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i753} true;
    goto $bb4299, $bb4300;

  $bb4300:
    assume !($i753 == 1);
    assume {:verifier.code 0} true;
    goto $bb4301;

  $bb4301:
    assume {:verifier.code 0} true;
    goto $bb4298;

  $bb4299:
    assume {:verifier.code 0} true;
    assume $i753 == 1;
    goto $bb10;

  $bb4277:
    assume $i749 == 1;
    goto corral_source_split_15389;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    $i750 := $eq.i32($i748, 0);
    goto corral_source_split_15390;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i750} true;
    goto $bb4280, $bb4281;

  $bb4281:
    assume !($i750 == 1);
    assume {:verifier.code 0} true;
    goto $bb4282;

  $bb4282:
    assume {:verifier.code 0} true;
    goto $bb4279;

  $bb4280:
    assume {:verifier.code 0} true;
    assume $i750 == 1;
    goto $bb10;

  $bb4258:
    assume $i746 == 1;
    goto corral_source_split_15363;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    $i747 := $eq.i32($i745, 0);
    goto corral_source_split_15364;

  corral_source_split_15364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i747} true;
    goto $bb4261, $bb4262;

  $bb4262:
    assume !($i747 == 1);
    assume {:verifier.code 0} true;
    goto $bb4263;

  $bb4263:
    assume {:verifier.code 0} true;
    goto $bb4260;

  $bb4261:
    assume {:verifier.code 0} true;
    assume $i747 == 1;
    goto $bb10;

  $bb4239:
    assume $i743 == 1;
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    $i744 := $eq.i32($i742, 0);
    goto corral_source_split_15338;

  corral_source_split_15338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i744} true;
    goto $bb4242, $bb4243;

  $bb4243:
    assume !($i744 == 1);
    assume {:verifier.code 0} true;
    goto $bb4244;

  $bb4244:
    assume {:verifier.code 0} true;
    goto $bb4241;

  $bb4242:
    assume {:verifier.code 0} true;
    assume $i744 == 1;
    goto $bb10;

  $bb4220:
    assume $i740 == 1;
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    $i741 := $eq.i32($i739, 0);
    goto corral_source_split_15312;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i741} true;
    goto $bb4223, $bb4224;

  $bb4224:
    assume !($i741 == 1);
    assume {:verifier.code 0} true;
    goto $bb4225;

  $bb4225:
    assume {:verifier.code 0} true;
    goto $bb4222;

  $bb4223:
    assume {:verifier.code 0} true;
    assume $i741 == 1;
    goto $bb10;

  $bb4201:
    assume $i737 == 1;
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $i738 := $eq.i32($i736, 0);
    goto corral_source_split_15286;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i738} true;
    goto $bb4204, $bb4205;

  $bb4205:
    assume !($i738 == 1);
    assume {:verifier.code 0} true;
    goto $bb4206;

  $bb4206:
    assume {:verifier.code 0} true;
    goto $bb4203;

  $bb4204:
    assume {:verifier.code 0} true;
    assume $i738 == 1;
    goto $bb10;

  $bb4182:
    assume $i734 == 1;
    goto corral_source_split_15259;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    $i735 := $eq.i32($i733, 0);
    goto corral_source_split_15260;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i735} true;
    goto $bb4185, $bb4186;

  $bb4186:
    assume !($i735 == 1);
    assume {:verifier.code 0} true;
    goto $bb4187;

  $bb4187:
    assume {:verifier.code 0} true;
    goto $bb4184;

  $bb4185:
    assume {:verifier.code 0} true;
    assume $i735 == 1;
    goto $bb10;

  $bb4163:
    assume $i731 == 1;
    goto corral_source_split_15233;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    $i732 := $eq.i32($i730, 0);
    goto corral_source_split_15234;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i732} true;
    goto $bb4166, $bb4167;

  $bb4167:
    assume !($i732 == 1);
    assume {:verifier.code 0} true;
    goto $bb4168;

  $bb4168:
    assume {:verifier.code 0} true;
    goto $bb4165;

  $bb4166:
    assume {:verifier.code 0} true;
    assume $i732 == 1;
    goto $bb10;

  $bb4144:
    assume $i728 == 1;
    goto corral_source_split_15207;

  corral_source_split_15207:
    assume {:verifier.code 0} true;
    $i729 := $eq.i32($i727, 0);
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i729} true;
    goto $bb4147, $bb4148;

  $bb4148:
    assume !($i729 == 1);
    assume {:verifier.code 0} true;
    goto $bb4149;

  $bb4149:
    assume {:verifier.code 0} true;
    goto $bb4146;

  $bb4147:
    assume {:verifier.code 0} true;
    assume $i729 == 1;
    goto $bb10;

  $bb4125:
    assume $i725 == 1;
    goto corral_source_split_15181;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    $i726 := $eq.i32($i724, 0);
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i726} true;
    goto $bb4128, $bb4129;

  $bb4129:
    assume !($i726 == 1);
    assume {:verifier.code 0} true;
    goto $bb4130;

  $bb4130:
    assume {:verifier.code 0} true;
    goto $bb4127;

  $bb4128:
    assume {:verifier.code 0} true;
    assume $i726 == 1;
    goto $bb10;

  $bb4106:
    assume $i722 == 1;
    goto corral_source_split_15155;

  corral_source_split_15155:
    assume {:verifier.code 0} true;
    $i723 := $eq.i32($i721, 0);
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i723} true;
    goto $bb4109, $bb4110;

  $bb4110:
    assume !($i723 == 1);
    assume {:verifier.code 0} true;
    goto $bb4111;

  $bb4111:
    assume {:verifier.code 0} true;
    goto $bb4108;

  $bb4109:
    assume {:verifier.code 0} true;
    assume $i723 == 1;
    goto $bb10;

  $bb4087:
    assume $i719 == 1;
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    $i720 := $eq.i32($i718, 0);
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb4090, $bb4091;

  $bb4091:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb4092;

  $bb4092:
    assume {:verifier.code 0} true;
    goto $bb4089;

  $bb4090:
    assume {:verifier.code 0} true;
    assume $i720 == 1;
    goto $bb10;

  $bb4068:
    assume $i716 == 1;
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    $i717 := $eq.i32($i715, 0);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i717} true;
    goto $bb4071, $bb4072;

  $bb4072:
    assume !($i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb4073;

  $bb4073:
    assume {:verifier.code 0} true;
    goto $bb4070;

  $bb4071:
    assume {:verifier.code 0} true;
    assume $i717 == 1;
    goto $bb10;

  $bb4049:
    assume $i713 == 1;
    goto corral_source_split_15077;

  corral_source_split_15077:
    assume {:verifier.code 0} true;
    $i714 := $eq.i32($i712, 0);
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i714} true;
    goto $bb4052, $bb4053;

  $bb4053:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb4054;

  $bb4054:
    assume {:verifier.code 0} true;
    goto $bb4051;

  $bb4052:
    assume {:verifier.code 0} true;
    assume $i714 == 1;
    goto $bb10;

  $bb4030:
    assume $i710 == 1;
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 0} true;
    $i711 := $eq.i32($i709, 0);
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i711} true;
    goto $bb4033, $bb4034;

  $bb4034:
    assume !($i711 == 1);
    assume {:verifier.code 0} true;
    goto $bb4035;

  $bb4035:
    assume {:verifier.code 0} true;
    goto $bb4032;

  $bb4033:
    assume {:verifier.code 0} true;
    assume $i711 == 1;
    goto $bb10;

  $bb4011:
    assume $i707 == 1;
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    $i708 := $eq.i32($i706, 0);
    goto corral_source_split_15026;

  corral_source_split_15026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i708} true;
    goto $bb4014, $bb4015;

  $bb4015:
    assume !($i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb4016;

  $bb4016:
    assume {:verifier.code 0} true;
    goto $bb4013;

  $bb4014:
    assume {:verifier.code 0} true;
    assume $i708 == 1;
    goto $bb10;

  $bb3992:
    assume $i704 == 1;
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    $i705 := $eq.i32($i703, 0);
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i705} true;
    goto $bb3995, $bb3996;

  $bb3996:
    assume !($i705 == 1);
    assume {:verifier.code 0} true;
    goto $bb3997;

  $bb3997:
    assume {:verifier.code 0} true;
    goto $bb3994;

  $bb3995:
    assume {:verifier.code 0} true;
    assume $i705 == 1;
    goto $bb10;

  $bb3973:
    assume $i701 == 1;
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    $i702 := $eq.i32($i700, 0);
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i702} true;
    goto $bb3976, $bb3977;

  $bb3977:
    assume !($i702 == 1);
    assume {:verifier.code 0} true;
    goto $bb3978;

  $bb3978:
    assume {:verifier.code 0} true;
    goto $bb3975;

  $bb3976:
    assume {:verifier.code 0} true;
    assume $i702 == 1;
    goto $bb10;

  $bb3954:
    assume $i698 == 1;
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $i699 := $eq.i32($i697, 0);
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i699} true;
    goto $bb3957, $bb3958;

  $bb3958:
    assume !($i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb3959;

  $bb3959:
    assume {:verifier.code 0} true;
    goto $bb3956;

  $bb3957:
    assume {:verifier.code 0} true;
    assume $i699 == 1;
    goto $bb10;

  $bb3935:
    assume $i695 == 1;
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    $i696 := $eq.i32($i694, 0);
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i696} true;
    goto $bb3938, $bb3939;

  $bb3939:
    assume !($i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb3940;

  $bb3940:
    assume {:verifier.code 0} true;
    goto $bb3937;

  $bb3938:
    assume {:verifier.code 0} true;
    assume $i696 == 1;
    goto $bb10;

  $bb3916:
    assume $i692 == 1;
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    $i693 := $eq.i32($i691, 0);
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i693} true;
    goto $bb3919, $bb3920;

  $bb3920:
    assume !($i693 == 1);
    assume {:verifier.code 0} true;
    goto $bb3921;

  $bb3921:
    assume {:verifier.code 0} true;
    goto $bb3918;

  $bb3919:
    assume {:verifier.code 0} true;
    assume $i693 == 1;
    goto $bb10;

  $bb3897:
    assume $i689 == 1;
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    $i690 := $eq.i32($i688, 0);
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i690} true;
    goto $bb3900, $bb3901;

  $bb3901:
    assume !($i690 == 1);
    assume {:verifier.code 0} true;
    goto $bb3902;

  $bb3902:
    assume {:verifier.code 0} true;
    goto $bb3899;

  $bb3900:
    assume {:verifier.code 0} true;
    assume $i690 == 1;
    goto $bb10;

  $bb3878:
    assume $i686 == 1;
    goto corral_source_split_14843;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    $i687 := $eq.i32($i685, 0);
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i687} true;
    goto $bb3881, $bb3882;

  $bb3882:
    assume !($i687 == 1);
    assume {:verifier.code 0} true;
    goto $bb3883;

  $bb3883:
    assume {:verifier.code 0} true;
    goto $bb3880;

  $bb3881:
    assume {:verifier.code 0} true;
    assume $i687 == 1;
    goto $bb10;

  $bb3859:
    assume $i683 == 1;
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    $i684 := $eq.i32($i682, 0);
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i684} true;
    goto $bb3862, $bb3863;

  $bb3863:
    assume !($i684 == 1);
    assume {:verifier.code 0} true;
    goto $bb3864;

  $bb3864:
    assume {:verifier.code 0} true;
    goto $bb3861;

  $bb3862:
    assume {:verifier.code 0} true;
    assume $i684 == 1;
    goto $bb10;

  $bb3840:
    assume $i680 == 1;
    goto corral_source_split_14791;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    $i681 := $eq.i32($i679, 0);
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i681} true;
    goto $bb3843, $bb3844;

  $bb3844:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb3845;

  $bb3845:
    assume {:verifier.code 0} true;
    goto $bb3842;

  $bb3843:
    assume {:verifier.code 0} true;
    assume $i681 == 1;
    goto $bb10;

  $bb3821:
    assume $i677 == 1;
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    $i678 := $eq.i32($i676, 0);
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i678} true;
    goto $bb3824, $bb3825;

  $bb3825:
    assume !($i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb3826;

  $bb3826:
    assume {:verifier.code 0} true;
    goto $bb3823;

  $bb3824:
    assume {:verifier.code 0} true;
    assume $i678 == 1;
    goto $bb10;

  $bb3802:
    assume $i674 == 1;
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    $i675 := $eq.i32($i673, 0);
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i675} true;
    goto $bb3805, $bb3806;

  $bb3806:
    assume !($i675 == 1);
    assume {:verifier.code 0} true;
    goto $bb3807;

  $bb3807:
    assume {:verifier.code 0} true;
    goto $bb3804;

  $bb3805:
    assume {:verifier.code 0} true;
    assume $i675 == 1;
    goto $bb10;

  $bb3783:
    assume $i671 == 1;
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    $i672 := $eq.i32($i670, 0);
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i672} true;
    goto $bb3786, $bb3787;

  $bb3787:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb3788;

  $bb3788:
    assume {:verifier.code 0} true;
    goto $bb3785;

  $bb3786:
    assume {:verifier.code 0} true;
    assume $i672 == 1;
    goto $bb10;

  $bb3764:
    assume $i668 == 1;
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    $i669 := $eq.i32($i667, 0);
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i669} true;
    goto $bb3767, $bb3768;

  $bb3768:
    assume !($i669 == 1);
    assume {:verifier.code 0} true;
    goto $bb3769;

  $bb3769:
    assume {:verifier.code 0} true;
    goto $bb3766;

  $bb3767:
    assume {:verifier.code 0} true;
    assume $i669 == 1;
    goto $bb10;

  $bb3745:
    assume $i665 == 1;
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    $i666 := $eq.i32($i664, 0);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i666} true;
    goto $bb3748, $bb3749;

  $bb3749:
    assume !($i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb3750;

  $bb3750:
    assume {:verifier.code 0} true;
    goto $bb3747;

  $bb3748:
    assume {:verifier.code 0} true;
    assume $i666 == 1;
    goto $bb10;

  $bb3726:
    assume $i662 == 1;
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $i663 := $eq.i32($i661, 0);
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i663} true;
    goto $bb3729, $bb3730;

  $bb3730:
    assume !($i663 == 1);
    assume {:verifier.code 0} true;
    goto $bb3731;

  $bb3731:
    assume {:verifier.code 0} true;
    goto $bb3728;

  $bb3729:
    assume {:verifier.code 0} true;
    assume $i663 == 1;
    goto $bb10;

  $bb3707:
    assume $i659 == 1;
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    $i660 := $eq.i32($i658, 0);
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i660} true;
    goto $bb3710, $bb3711;

  $bb3711:
    assume !($i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb3712;

  $bb3712:
    assume {:verifier.code 0} true;
    goto $bb3709;

  $bb3710:
    assume {:verifier.code 0} true;
    assume $i660 == 1;
    goto $bb10;

  $bb3688:
    assume $i656 == 1;
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    $i657 := $eq.i32($i655, 0);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i657} true;
    goto $bb3691, $bb3692;

  $bb3692:
    assume !($i657 == 1);
    assume {:verifier.code 0} true;
    goto $bb3693;

  $bb3693:
    assume {:verifier.code 0} true;
    goto $bb3690;

  $bb3691:
    assume {:verifier.code 0} true;
    assume $i657 == 1;
    goto $bb10;

  $bb3669:
    assume $i653 == 1;
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    $i654 := $eq.i32($i652, 0);
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i654} true;
    goto $bb3672, $bb3673;

  $bb3673:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb3674;

  $bb3674:
    assume {:verifier.code 0} true;
    goto $bb3671;

  $bb3672:
    assume {:verifier.code 0} true;
    assume $i654 == 1;
    goto $bb10;

  $bb3650:
    assume $i650 == 1;
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    $i651 := $eq.i32($i649, 0);
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i651} true;
    goto $bb3653, $bb3654;

  $bb3654:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb3655;

  $bb3655:
    assume {:verifier.code 0} true;
    goto $bb3652;

  $bb3653:
    assume {:verifier.code 0} true;
    assume $i651 == 1;
    goto $bb10;

  $bb3631:
    assume $i647 == 1;
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    $i648 := $eq.i32($i646, 0);
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i648} true;
    goto $bb3634, $bb3635;

  $bb3635:
    assume !($i648 == 1);
    assume {:verifier.code 0} true;
    goto $bb3636;

  $bb3636:
    assume {:verifier.code 0} true;
    goto $bb3633;

  $bb3634:
    assume {:verifier.code 0} true;
    assume $i648 == 1;
    goto $bb10;

  $bb3612:
    assume $i644 == 1;
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    $i645 := $eq.i32($i643, 0);
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i645} true;
    goto $bb3615, $bb3616;

  $bb3616:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb3617;

  $bb3617:
    assume {:verifier.code 0} true;
    goto $bb3614;

  $bb3615:
    assume {:verifier.code 0} true;
    assume $i645 == 1;
    goto $bb10;

  $bb3593:
    assume $i641 == 1;
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $i642 := $eq.i32($i640, 0);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i642} true;
    goto $bb3596, $bb3597;

  $bb3597:
    assume !($i642 == 1);
    assume {:verifier.code 0} true;
    goto $bb3598;

  $bb3598:
    assume {:verifier.code 0} true;
    goto $bb3595;

  $bb3596:
    assume {:verifier.code 0} true;
    assume $i642 == 1;
    goto $bb10;

  $bb3574:
    assume $i638 == 1;
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $i639 := $eq.i32($i637, 0);
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i639} true;
    goto $bb3577, $bb3578;

  $bb3578:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb3579;

  $bb3579:
    assume {:verifier.code 0} true;
    goto $bb3576;

  $bb3577:
    assume {:verifier.code 0} true;
    assume $i639 == 1;
    goto $bb10;

  $bb3555:
    assume $i635 == 1;
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    $i636 := $eq.i32($i634, 0);
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i636} true;
    goto $bb3558, $bb3559;

  $bb3559:
    assume !($i636 == 1);
    assume {:verifier.code 0} true;
    goto $bb3560;

  $bb3560:
    assume {:verifier.code 0} true;
    goto $bb3557;

  $bb3558:
    assume {:verifier.code 0} true;
    assume $i636 == 1;
    goto $bb10;

  $bb3536:
    assume $i632 == 1;
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $i633 := $eq.i32($i631, 0);
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i633} true;
    goto $bb3539, $bb3540;

  $bb3540:
    assume !($i633 == 1);
    assume {:verifier.code 0} true;
    goto $bb3541;

  $bb3541:
    assume {:verifier.code 0} true;
    goto $bb3538;

  $bb3539:
    assume {:verifier.code 0} true;
    assume $i633 == 1;
    goto $bb10;

  $bb3517:
    assume $i629 == 1;
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $i630 := $eq.i32($i628, 0);
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb3520, $bb3521;

  $bb3521:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb3522;

  $bb3522:
    assume {:verifier.code 0} true;
    goto $bb3519;

  $bb3520:
    assume {:verifier.code 0} true;
    assume $i630 == 1;
    goto $bb10;

  $bb3498:
    assume $i626 == 1;
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    $i627 := $eq.i32($i625, 0);
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i627} true;
    goto $bb3501, $bb3502;

  $bb3502:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb3503;

  $bb3503:
    assume {:verifier.code 0} true;
    goto $bb3500;

  $bb3501:
    assume {:verifier.code 0} true;
    assume $i627 == 1;
    goto $bb10;

  $bb3479:
    assume $i623 == 1;
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    $i624 := $eq.i32($i622, 0);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i624} true;
    goto $bb3482, $bb3483;

  $bb3483:
    assume !($i624 == 1);
    assume {:verifier.code 0} true;
    goto $bb3484;

  $bb3484:
    assume {:verifier.code 0} true;
    goto $bb3481;

  $bb3482:
    assume {:verifier.code 0} true;
    assume $i624 == 1;
    goto $bb10;

  $bb3460:
    assume $i620 == 1;
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $i621 := $eq.i32($i619, 0);
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i621} true;
    goto $bb3463, $bb3464;

  $bb3464:
    assume !($i621 == 1);
    assume {:verifier.code 0} true;
    goto $bb3465;

  $bb3465:
    assume {:verifier.code 0} true;
    goto $bb3462;

  $bb3463:
    assume {:verifier.code 0} true;
    assume $i621 == 1;
    goto $bb10;

  $bb3441:
    assume $i617 == 1;
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $i618 := $eq.i32($i616, 0);
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i618} true;
    goto $bb3444, $bb3445;

  $bb3445:
    assume !($i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb3446;

  $bb3446:
    assume {:verifier.code 0} true;
    goto $bb3443;

  $bb3444:
    assume {:verifier.code 0} true;
    assume $i618 == 1;
    goto $bb10;

  $bb3422:
    assume $i614 == 1;
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    $i615 := $eq.i32($i613, 0);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i615} true;
    goto $bb3425, $bb3426;

  $bb3426:
    assume !($i615 == 1);
    assume {:verifier.code 0} true;
    goto $bb3427;

  $bb3427:
    assume {:verifier.code 0} true;
    goto $bb3424;

  $bb3425:
    assume {:verifier.code 0} true;
    assume $i615 == 1;
    goto $bb10;

  $bb3403:
    assume $i611 == 1;
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $i612 := $eq.i32($i610, 0);
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i612} true;
    goto $bb3406, $bb3407;

  $bb3407:
    assume !($i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb3408;

  $bb3408:
    assume {:verifier.code 0} true;
    goto $bb3405;

  $bb3406:
    assume {:verifier.code 0} true;
    assume $i612 == 1;
    goto $bb10;

  $bb3384:
    assume $i608 == 1;
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    $i609 := $eq.i32($i607, 0);
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i609} true;
    goto $bb3387, $bb3388;

  $bb3388:
    assume !($i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb3389;

  $bb3389:
    assume {:verifier.code 0} true;
    goto $bb3386;

  $bb3387:
    assume {:verifier.code 0} true;
    assume $i609 == 1;
    goto $bb10;

  $bb3365:
    assume $i605 == 1;
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $i606 := $eq.i32($i604, 0);
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i606} true;
    goto $bb3368, $bb3369;

  $bb3369:
    assume !($i606 == 1);
    assume {:verifier.code 0} true;
    goto $bb3370;

  $bb3370:
    assume {:verifier.code 0} true;
    goto $bb3367;

  $bb3368:
    assume {:verifier.code 0} true;
    assume $i606 == 1;
    goto $bb10;

  $bb3346:
    assume $i602 == 1;
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $i603 := $eq.i32($i601, 0);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i603} true;
    goto $bb3349, $bb3350;

  $bb3350:
    assume !($i603 == 1);
    assume {:verifier.code 0} true;
    goto $bb3351;

  $bb3351:
    assume {:verifier.code 0} true;
    goto $bb3348;

  $bb3349:
    assume {:verifier.code 0} true;
    assume $i603 == 1;
    goto $bb10;

  $bb3327:
    assume $i599 == 1;
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    $i600 := $eq.i32($i598, 0);
    goto corral_source_split_14090;

  corral_source_split_14090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i600} true;
    goto $bb3330, $bb3331;

  $bb3331:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb3332;

  $bb3332:
    assume {:verifier.code 0} true;
    goto $bb3329;

  $bb3330:
    assume {:verifier.code 0} true;
    assume $i600 == 1;
    goto $bb10;

  $bb3308:
    assume $i596 == 1;
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    $i597 := $eq.i32($i595, 0);
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb3311, $bb3312;

  $bb3312:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb3313;

  $bb3313:
    assume {:verifier.code 0} true;
    goto $bb3310;

  $bb3311:
    assume {:verifier.code 0} true;
    assume $i597 == 1;
    goto $bb10;

  $bb3289:
    assume $i593 == 1;
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $i594 := $eq.i32($i592, 0);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i594} true;
    goto $bb3292, $bb3293;

  $bb3293:
    assume !($i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb3294;

  $bb3294:
    assume {:verifier.code 0} true;
    goto $bb3291;

  $bb3292:
    assume {:verifier.code 0} true;
    assume $i594 == 1;
    goto $bb10;

  $bb3270:
    assume $i590 == 1;
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    $i591 := $eq.i32($i589, 0);
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i591} true;
    goto $bb3273, $bb3274;

  $bb3274:
    assume !($i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb3275;

  $bb3275:
    assume {:verifier.code 0} true;
    goto $bb3272;

  $bb3273:
    assume {:verifier.code 0} true;
    assume $i591 == 1;
    goto $bb10;

  $bb3251:
    assume $i587 == 1;
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    $i588 := $eq.i32($i586, 0);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb3254, $bb3255;

  $bb3255:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb3256;

  $bb3256:
    assume {:verifier.code 0} true;
    goto $bb3253;

  $bb3254:
    assume {:verifier.code 0} true;
    assume $i588 == 1;
    goto $bb10;

  $bb3232:
    assume $i584 == 1;
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $i585 := $eq.i32($i583, 0);
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb3235, $bb3236;

  $bb3236:
    assume !($i585 == 1);
    assume {:verifier.code 0} true;
    goto $bb3237;

  $bb3237:
    assume {:verifier.code 0} true;
    goto $bb3234;

  $bb3235:
    assume {:verifier.code 0} true;
    assume $i585 == 1;
    goto $bb10;

  $bb3213:
    assume $i581 == 1;
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i580, 0);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i582} true;
    goto $bb3216, $bb3217;

  $bb3217:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb3218;

  $bb3218:
    assume {:verifier.code 0} true;
    goto $bb3215;

  $bb3216:
    assume {:verifier.code 0} true;
    assume $i582 == 1;
    goto $bb10;

  $bb3194:
    assume $i578 == 1;
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $i579 := $eq.i32($i577, 0);
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i579} true;
    goto $bb3197, $bb3198;

  $bb3198:
    assume !($i579 == 1);
    assume {:verifier.code 0} true;
    goto $bb3199;

  $bb3199:
    assume {:verifier.code 0} true;
    goto $bb3196;

  $bb3197:
    assume {:verifier.code 0} true;
    assume $i579 == 1;
    goto $bb10;

  $bb3175:
    assume $i575 == 1;
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $i576 := $eq.i32($i574, 0);
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i576} true;
    goto $bb3178, $bb3179;

  $bb3179:
    assume !($i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb3180;

  $bb3180:
    assume {:verifier.code 0} true;
    goto $bb3177;

  $bb3178:
    assume {:verifier.code 0} true;
    assume $i576 == 1;
    goto $bb10;

  $bb3156:
    assume $i572 == 1;
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    $i573 := $eq.i32($i571, 0);
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i573} true;
    goto $bb3159, $bb3160;

  $bb3160:
    assume !($i573 == 1);
    assume {:verifier.code 0} true;
    goto $bb3161;

  $bb3161:
    assume {:verifier.code 0} true;
    goto $bb3158;

  $bb3159:
    assume {:verifier.code 0} true;
    assume $i573 == 1;
    goto $bb10;

  $bb3137:
    assume $i569 == 1;
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $i570 := $eq.i32($i568, 0);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i570} true;
    goto $bb3140, $bb3141;

  $bb3141:
    assume !($i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb3142;

  $bb3142:
    assume {:verifier.code 0} true;
    goto $bb3139;

  $bb3140:
    assume {:verifier.code 0} true;
    assume $i570 == 1;
    goto $bb10;

  $bb3118:
    assume $i566 == 1;
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    $i567 := $eq.i32($i565, 0);
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i567} true;
    goto $bb3121, $bb3122;

  $bb3122:
    assume !($i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb3123;

  $bb3123:
    assume {:verifier.code 0} true;
    goto $bb3120;

  $bb3121:
    assume {:verifier.code 0} true;
    assume $i567 == 1;
    goto $bb10;

  $bb3099:
    assume $i563 == 1;
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    $i564 := $eq.i32($i562, 0);
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb3102, $bb3103;

  $bb3103:
    assume !($i564 == 1);
    assume {:verifier.code 0} true;
    goto $bb3104;

  $bb3104:
    assume {:verifier.code 0} true;
    goto $bb3101;

  $bb3102:
    assume {:verifier.code 0} true;
    assume $i564 == 1;
    goto $bb10;

  $bb3080:
    assume $i560 == 1;
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    $i561 := $eq.i32($i559, 0);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i561} true;
    goto $bb3083, $bb3084;

  $bb3084:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb3085;

  $bb3085:
    assume {:verifier.code 0} true;
    goto $bb3082;

  $bb3083:
    assume {:verifier.code 0} true;
    assume $i561 == 1;
    goto $bb10;

  $bb3061:
    assume $i557 == 1;
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i556, 0);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i558} true;
    goto $bb3064, $bb3065;

  $bb3065:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb3066;

  $bb3066:
    assume {:verifier.code 0} true;
    goto $bb3063;

  $bb3064:
    assume {:verifier.code 0} true;
    assume $i558 == 1;
    goto $bb10;

  $bb3042:
    assume $i554 == 1;
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $i555 := $eq.i32($i553, 0);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i555} true;
    goto $bb3045, $bb3046;

  $bb3046:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb3047;

  $bb3047:
    assume {:verifier.code 0} true;
    goto $bb3044;

  $bb3045:
    assume {:verifier.code 0} true;
    assume $i555 == 1;
    goto $bb10;

  $bb3023:
    assume $i551 == 1;
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $i552 := $eq.i32($i550, 0);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i552} true;
    goto $bb3026, $bb3027;

  $bb3027:
    assume !($i552 == 1);
    assume {:verifier.code 0} true;
    goto $bb3028;

  $bb3028:
    assume {:verifier.code 0} true;
    goto $bb3025;

  $bb3026:
    assume {:verifier.code 0} true;
    assume $i552 == 1;
    goto $bb10;

  $bb3004:
    assume $i548 == 1;
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $i549 := $eq.i32($i547, 0);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i549} true;
    goto $bb3007, $bb3008;

  $bb3008:
    assume !($i549 == 1);
    assume {:verifier.code 0} true;
    goto $bb3009;

  $bb3009:
    assume {:verifier.code 0} true;
    goto $bb3006;

  $bb3007:
    assume {:verifier.code 0} true;
    assume $i549 == 1;
    goto $bb10;

  $bb2985:
    assume $i545 == 1;
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i544, 0);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb2988, $bb2989;

  $bb2989:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb2990;

  $bb2990:
    assume {:verifier.code 0} true;
    goto $bb2987;

  $bb2988:
    assume {:verifier.code 0} true;
    assume $i546 == 1;
    goto $bb10;

  $bb2966:
    assume $i542 == 1;
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    $i543 := $eq.i32($i541, 0);
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i543} true;
    goto $bb2969, $bb2970;

  $bb2970:
    assume !($i543 == 1);
    assume {:verifier.code 0} true;
    goto $bb2971;

  $bb2971:
    assume {:verifier.code 0} true;
    goto $bb2968;

  $bb2969:
    assume {:verifier.code 0} true;
    assume $i543 == 1;
    goto $bb10;

  $bb2947:
    assume $i539 == 1;
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $i540 := $eq.i32($i538, 0);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i540} true;
    goto $bb2950, $bb2951;

  $bb2951:
    assume !($i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb2952;

  $bb2952:
    assume {:verifier.code 0} true;
    goto $bb2949;

  $bb2950:
    assume {:verifier.code 0} true;
    assume $i540 == 1;
    goto $bb10;

  $bb2928:
    assume $i536 == 1;
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $i537 := $eq.i32($i535, 0);
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i537} true;
    goto $bb2931, $bb2932;

  $bb2932:
    assume !($i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb2933;

  $bb2933:
    assume {:verifier.code 0} true;
    goto $bb2930;

  $bb2931:
    assume {:verifier.code 0} true;
    assume $i537 == 1;
    goto $bb10;

  $bb2909:
    assume $i533 == 1;
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i532, 0);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i534} true;
    goto $bb2912, $bb2913;

  $bb2913:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb2914;

  $bb2914:
    assume {:verifier.code 0} true;
    goto $bb2911;

  $bb2912:
    assume {:verifier.code 0} true;
    assume $i534 == 1;
    goto $bb10;

  $bb2890:
    assume $i530 == 1;
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $i531 := $eq.i32($i529, 0);
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i531} true;
    goto $bb2893, $bb2894;

  $bb2894:
    assume !($i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb2895;

  $bb2895:
    assume {:verifier.code 0} true;
    goto $bb2892;

  $bb2893:
    assume {:verifier.code 0} true;
    assume $i531 == 1;
    goto $bb10;

  $bb2871:
    assume $i527 == 1;
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $i528 := $eq.i32($i526, 0);
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i528} true;
    goto $bb2874, $bb2875;

  $bb2875:
    assume !($i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb2876;

  $bb2876:
    assume {:verifier.code 0} true;
    goto $bb2873;

  $bb2874:
    assume {:verifier.code 0} true;
    assume $i528 == 1;
    goto $bb10;

  $bb2852:
    assume $i524 == 1;
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $i525 := $eq.i32($i523, 0);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i525} true;
    goto $bb2855, $bb2856;

  $bb2856:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb2857;

  $bb2857:
    assume {:verifier.code 0} true;
    goto $bb2854;

  $bb2855:
    assume {:verifier.code 0} true;
    assume $i525 == 1;
    goto $bb10;

  $bb2833:
    assume $i521 == 1;
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i520, 0);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb2836, $bb2837;

  $bb2837:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb2838;

  $bb2838:
    assume {:verifier.code 0} true;
    goto $bb2835;

  $bb2836:
    assume {:verifier.code 0} true;
    assume $i522 == 1;
    goto $bb10;

  $bb2814:
    assume $i518 == 1;
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    $i519 := $eq.i32($i517, 0);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i519} true;
    goto $bb2817, $bb2818;

  $bb2818:
    assume !($i519 == 1);
    assume {:verifier.code 0} true;
    goto $bb2819;

  $bb2819:
    assume {:verifier.code 0} true;
    goto $bb2816;

  $bb2817:
    assume {:verifier.code 0} true;
    assume $i519 == 1;
    goto $bb10;

  $bb2795:
    assume $i515 == 1;
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $i516 := $eq.i32($i514, 0);
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i516} true;
    goto $bb2798, $bb2799;

  $bb2799:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb2800;

  $bb2800:
    assume {:verifier.code 0} true;
    goto $bb2797;

  $bb2798:
    assume {:verifier.code 0} true;
    assume $i516 == 1;
    goto $bb10;

  $bb2776:
    assume $i512 == 1;
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $i513 := $eq.i32($i511, 0);
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb2779, $bb2780;

  $bb2780:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    goto $bb2781;

  $bb2781:
    assume {:verifier.code 0} true;
    goto $bb2778;

  $bb2779:
    assume {:verifier.code 0} true;
    assume $i513 == 1;
    goto $bb10;

  $bb2757:
    assume $i509 == 1;
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $i510 := $eq.i32($i508, 0);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i510} true;
    goto $bb2760, $bb2761;

  $bb2761:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb2762;

  $bb2762:
    assume {:verifier.code 0} true;
    goto $bb2759;

  $bb2760:
    assume {:verifier.code 0} true;
    assume $i510 == 1;
    goto $bb10;

  $bb2738:
    assume $i506 == 1;
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $i507 := $eq.i32($i505, 0);
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb2741, $bb2742;

  $bb2742:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb2743;

  $bb2743:
    assume {:verifier.code 0} true;
    goto $bb2740;

  $bb2741:
    assume {:verifier.code 0} true;
    assume $i507 == 1;
    goto $bb10;

  $bb2719:
    assume $i503 == 1;
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i502, 0);
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb2722, $bb2723;

  $bb2723:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb2724;

  $bb2724:
    assume {:verifier.code 0} true;
    goto $bb2721;

  $bb2722:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb10;

  $bb2700:
    assume $i500 == 1;
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i499, 0);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i501} true;
    goto $bb2703, $bb2704;

  $bb2704:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb2705;

  $bb2705:
    assume {:verifier.code 0} true;
    goto $bb2702;

  $bb2703:
    assume {:verifier.code 0} true;
    assume $i501 == 1;
    goto $bb10;

  $bb2681:
    assume $i497 == 1;
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $i498 := $eq.i32($i496, 0);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i498} true;
    goto $bb2684, $bb2685;

  $bb2685:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb2686;

  $bb2686:
    assume {:verifier.code 0} true;
    goto $bb2683;

  $bb2684:
    assume {:verifier.code 0} true;
    assume $i498 == 1;
    goto $bb10;

  $bb2662:
    assume $i494 == 1;
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    $i495 := $eq.i32($i493, 0);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i495} true;
    goto $bb2665, $bb2666;

  $bb2666:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb2667;

  $bb2667:
    assume {:verifier.code 0} true;
    goto $bb2664;

  $bb2665:
    assume {:verifier.code 0} true;
    assume $i495 == 1;
    goto $bb10;

  $bb2643:
    assume $i491 == 1;
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    $i492 := $eq.i32($i490, 0);
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb2646, $bb2647;

  $bb2647:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb2648;

  $bb2648:
    assume {:verifier.code 0} true;
    goto $bb2645;

  $bb2646:
    assume {:verifier.code 0} true;
    assume $i492 == 1;
    goto $bb10;

  $bb2624:
    assume $i488 == 1;
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    $i489 := $eq.i32($i487, 0);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i489} true;
    goto $bb2627, $bb2628;

  $bb2628:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb2629;

  $bb2629:
    assume {:verifier.code 0} true;
    goto $bb2626;

  $bb2627:
    assume {:verifier.code 0} true;
    assume $i489 == 1;
    goto $bb10;

  $bb2605:
    assume $i485 == 1;
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i484, 0);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i486} true;
    goto $bb2608, $bb2609;

  $bb2609:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb2610;

  $bb2610:
    assume {:verifier.code 0} true;
    goto $bb2607;

  $bb2608:
    assume {:verifier.code 0} true;
    assume $i486 == 1;
    goto $bb10;

  $bb2586:
    assume $i482 == 1;
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i481, 0);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb2589, $bb2590;

  $bb2590:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb2591;

  $bb2591:
    assume {:verifier.code 0} true;
    goto $bb2588;

  $bb2589:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb10;

  $bb2567:
    assume $i479 == 1;
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $i480 := $eq.i32($i478, 0);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb2570, $bb2571;

  $bb2571:
    assume !($i480 == 1);
    assume {:verifier.code 0} true;
    goto $bb2572;

  $bb2572:
    assume {:verifier.code 0} true;
    goto $bb2569;

  $bb2570:
    assume {:verifier.code 0} true;
    assume $i480 == 1;
    goto $bb10;

  $bb2548:
    assume $i476 == 1;
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    $i477 := $eq.i32($i475, 0);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i477} true;
    goto $bb2551, $bb2552;

  $bb2552:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb2553;

  $bb2553:
    assume {:verifier.code 0} true;
    goto $bb2550;

  $bb2551:
    assume {:verifier.code 0} true;
    assume $i477 == 1;
    goto $bb10;

  $bb2529:
    assume $i473 == 1;
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i472, 0);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb2532, $bb2533;

  $bb2533:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb2534;

  $bb2534:
    assume {:verifier.code 0} true;
    goto $bb2531;

  $bb2532:
    assume {:verifier.code 0} true;
    assume $i474 == 1;
    goto $bb10;

  $bb2510:
    assume $i470 == 1;
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    $i471 := $eq.i32($i469, 0);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i471} true;
    goto $bb2513, $bb2514;

  $bb2514:
    assume !($i471 == 1);
    assume {:verifier.code 0} true;
    goto $bb2515;

  $bb2515:
    assume {:verifier.code 0} true;
    goto $bb2512;

  $bb2513:
    assume {:verifier.code 0} true;
    assume $i471 == 1;
    goto $bb10;

  $bb2491:
    assume $i467 == 1;
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $i468 := $eq.i32($i466, 0);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i468} true;
    goto $bb2494, $bb2495;

  $bb2495:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb2496;

  $bb2496:
    assume {:verifier.code 0} true;
    goto $bb2493;

  $bb2494:
    assume {:verifier.code 0} true;
    assume $i468 == 1;
    goto $bb10;

  $bb2472:
    assume $i464 == 1;
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    $i465 := $eq.i32($i463, 0);
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb2475, $bb2476;

  $bb2476:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb2477;

  $bb2477:
    assume {:verifier.code 0} true;
    goto $bb2474;

  $bb2475:
    assume {:verifier.code 0} true;
    assume $i465 == 1;
    goto $bb10;

  $bb2453:
    assume $i461 == 1;
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i460, 0);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb2456, $bb2457;

  $bb2457:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb2458;

  $bb2458:
    assume {:verifier.code 0} true;
    goto $bb2455;

  $bb2456:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb10;

  $bb2434:
    assume $i458 == 1;
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    $i459 := $eq.i32($i457, 0);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i459} true;
    goto $bb2437, $bb2438;

  $bb2438:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb2439;

  $bb2439:
    assume {:verifier.code 0} true;
    goto $bb2436;

  $bb2437:
    assume {:verifier.code 0} true;
    assume $i459 == 1;
    goto $bb10;

  $bb2415:
    assume $i455 == 1;
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $i456 := $eq.i32($i454, 0);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i456} true;
    goto $bb2418, $bb2419;

  $bb2419:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb2420;

  $bb2420:
    assume {:verifier.code 0} true;
    goto $bb2417;

  $bb2418:
    assume {:verifier.code 0} true;
    assume $i456 == 1;
    goto $bb10;

  $bb2396:
    assume $i452 == 1;
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $i453 := $eq.i32($i451, 0);
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i453} true;
    goto $bb2399, $bb2400;

  $bb2400:
    assume !($i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb2401;

  $bb2401:
    assume {:verifier.code 0} true;
    goto $bb2398;

  $bb2399:
    assume {:verifier.code 0} true;
    assume $i453 == 1;
    goto $bb10;

  $bb2377:
    assume $i449 == 1;
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i448, 0);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb2380, $bb2381;

  $bb2381:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb2382;

  $bb2382:
    assume {:verifier.code 0} true;
    goto $bb2379;

  $bb2380:
    assume {:verifier.code 0} true;
    assume $i450 == 1;
    goto $bb10;

  $bb2358:
    assume $i446 == 1;
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i445, 0);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i447} true;
    goto $bb2361, $bb2362;

  $bb2362:
    assume !($i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb2363;

  $bb2363:
    assume {:verifier.code 0} true;
    goto $bb2360;

  $bb2361:
    assume {:verifier.code 0} true;
    assume $i447 == 1;
    goto $bb10;

  $bb2339:
    assume $i443 == 1;
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i442, 0);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i444} true;
    goto $bb2342, $bb2343;

  $bb2343:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb2344;

  $bb2344:
    assume {:verifier.code 0} true;
    goto $bb2341;

  $bb2342:
    assume {:verifier.code 0} true;
    assume $i444 == 1;
    goto $bb10;

  $bb2320:
    assume $i440 == 1;
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i439, 0);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb2323, $bb2324;

  $bb2324:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb2325;

  $bb2325:
    assume {:verifier.code 0} true;
    goto $bb2322;

  $bb2323:
    assume {:verifier.code 0} true;
    assume $i441 == 1;
    goto $bb10;

  $bb2301:
    assume $i437 == 1;
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i436, 0);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i438} true;
    goto $bb2304, $bb2305;

  $bb2305:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb2306;

  $bb2306:
    assume {:verifier.code 0} true;
    goto $bb2303;

  $bb2304:
    assume {:verifier.code 0} true;
    assume $i438 == 1;
    goto $bb10;

  $bb2282:
    assume $i434 == 1;
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i433, 0);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb2285, $bb2286;

  $bb2286:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb2287;

  $bb2287:
    assume {:verifier.code 0} true;
    goto $bb2284;

  $bb2285:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb10;

  $bb2263:
    assume $i431 == 1;
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i430, 0);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i432} true;
    goto $bb2266, $bb2267;

  $bb2267:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb2268;

  $bb2268:
    assume {:verifier.code 0} true;
    goto $bb2265;

  $bb2266:
    assume {:verifier.code 0} true;
    assume $i432 == 1;
    goto $bb10;

  $bb2244:
    assume $i428 == 1;
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i427, 0);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb2247, $bb2248;

  $bb2248:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb2249;

  $bb2249:
    assume {:verifier.code 0} true;
    goto $bb2246;

  $bb2247:
    assume {:verifier.code 0} true;
    assume $i429 == 1;
    goto $bb10;

  $bb2225:
    assume $i425 == 1;
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i426 := $eq.i32($i424, 0);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb2228, $bb2229;

  $bb2229:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb2230;

  $bb2230:
    assume {:verifier.code 0} true;
    goto $bb2227;

  $bb2228:
    assume {:verifier.code 0} true;
    assume $i426 == 1;
    goto $bb10;

  $bb2206:
    assume $i422 == 1;
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i421, 0);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb2209, $bb2210;

  $bb2210:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb2211;

  $bb2211:
    assume {:verifier.code 0} true;
    goto $bb2208;

  $bb2209:
    assume {:verifier.code 0} true;
    assume $i423 == 1;
    goto $bb10;

  $bb2187:
    assume $i419 == 1;
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i418, 0);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb2190, $bb2191;

  $bb2191:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb2192;

  $bb2192:
    assume {:verifier.code 0} true;
    goto $bb2189;

  $bb2190:
    assume {:verifier.code 0} true;
    assume $i420 == 1;
    goto $bb10;

  $bb2168:
    assume $i416 == 1;
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i415, 0);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb2171, $bb2172;

  $bb2172:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb2173;

  $bb2173:
    assume {:verifier.code 0} true;
    goto $bb2170;

  $bb2171:
    assume {:verifier.code 0} true;
    assume $i417 == 1;
    goto $bb10;

  $bb2149:
    assume $i413 == 1;
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i412, 0);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i414} true;
    goto $bb2152, $bb2153;

  $bb2153:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb2154;

  $bb2154:
    assume {:verifier.code 0} true;
    goto $bb2151;

  $bb2152:
    assume {:verifier.code 0} true;
    assume $i414 == 1;
    goto $bb10;

  $bb2130:
    assume $i410 == 1;
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $i411 := $eq.i32($i409, 0);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb2133, $bb2134;

  $bb2134:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb2135;

  $bb2135:
    assume {:verifier.code 0} true;
    goto $bb2132;

  $bb2133:
    assume {:verifier.code 0} true;
    assume $i411 == 1;
    goto $bb10;

  $bb2111:
    assume $i407 == 1;
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i406, 0);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb2114, $bb2115;

  $bb2115:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb2116;

  $bb2116:
    assume {:verifier.code 0} true;
    goto $bb2113;

  $bb2114:
    assume {:verifier.code 0} true;
    assume $i408 == 1;
    goto $bb10;

  $bb2092:
    assume $i404 == 1;
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i403, 0);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb2095, $bb2096;

  $bb2096:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb2097;

  $bb2097:
    assume {:verifier.code 0} true;
    goto $bb2094;

  $bb2095:
    assume {:verifier.code 0} true;
    assume $i405 == 1;
    goto $bb10;

  $bb2073:
    assume $i401 == 1;
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i400, 0);
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i402} true;
    goto $bb2076, $bb2077;

  $bb2077:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb2078;

  $bb2078:
    assume {:verifier.code 0} true;
    goto $bb2075;

  $bb2076:
    assume {:verifier.code 0} true;
    assume $i402 == 1;
    goto $bb10;

  $bb2054:
    assume $i398 == 1;
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i397, 0);
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb2057, $bb2058;

  $bb2058:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb2059;

  $bb2059:
    assume {:verifier.code 0} true;
    goto $bb2056;

  $bb2057:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb10;

  $bb2035:
    assume $i395 == 1;
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i394, 0);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb2038, $bb2039;

  $bb2039:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb2040;

  $bb2040:
    assume {:verifier.code 0} true;
    goto $bb2037;

  $bb2038:
    assume {:verifier.code 0} true;
    assume $i396 == 1;
    goto $bb10;

  $bb2016:
    assume $i392 == 1;
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i391, 0);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb2019, $bb2020;

  $bb2020:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb2021;

  $bb2021:
    assume {:verifier.code 0} true;
    goto $bb2018;

  $bb2019:
    assume {:verifier.code 0} true;
    assume $i393 == 1;
    goto $bb10;

  $bb1997:
    assume $i389 == 1;
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i388, 0);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb2000, $bb2001;

  $bb2001:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb2002;

  $bb2002:
    assume {:verifier.code 0} true;
    goto $bb1999;

  $bb2000:
    assume {:verifier.code 0} true;
    assume $i390 == 1;
    goto $bb10;

  $bb1978:
    assume $i386 == 1;
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i385, 0);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb1981, $bb1982;

  $bb1982:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb1983;

  $bb1983:
    assume {:verifier.code 0} true;
    goto $bb1980;

  $bb1981:
    assume {:verifier.code 0} true;
    assume $i387 == 1;
    goto $bb10;

  $bb1959:
    assume $i383 == 1;
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i382, 0);
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb1962, $bb1963;

  $bb1963:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb1964;

  $bb1964:
    assume {:verifier.code 0} true;
    goto $bb1961;

  $bb1962:
    assume {:verifier.code 0} true;
    assume $i384 == 1;
    goto $bb10;

  $bb1940:
    assume $i380 == 1;
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i379, 0);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb1943, $bb1944;

  $bb1944:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb1945;

  $bb1945:
    assume {:verifier.code 0} true;
    goto $bb1942;

  $bb1943:
    assume {:verifier.code 0} true;
    assume $i381 == 1;
    goto $bb10;

  $bb1921:
    assume $i377 == 1;
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i376, 0);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i378} true;
    goto $bb1924, $bb1925;

  $bb1925:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb1926;

  $bb1926:
    assume {:verifier.code 0} true;
    goto $bb1923;

  $bb1924:
    assume {:verifier.code 0} true;
    assume $i378 == 1;
    goto $bb10;

  $bb1902:
    assume $i374 == 1;
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i373, 0);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb1905, $bb1906;

  $bb1906:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb1907;

  $bb1907:
    assume {:verifier.code 0} true;
    goto $bb1904;

  $bb1905:
    assume {:verifier.code 0} true;
    assume $i375 == 1;
    goto $bb10;

  $bb1883:
    assume $i371 == 1;
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i370, 0);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb1886, $bb1887;

  $bb1887:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb1888;

  $bb1888:
    assume {:verifier.code 0} true;
    goto $bb1885;

  $bb1886:
    assume {:verifier.code 0} true;
    assume $i372 == 1;
    goto $bb10;

  $bb1864:
    assume $i368 == 1;
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i367, 0);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i369} true;
    goto $bb1867, $bb1868;

  $bb1868:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb1869;

  $bb1869:
    assume {:verifier.code 0} true;
    goto $bb1866;

  $bb1867:
    assume {:verifier.code 0} true;
    assume $i369 == 1;
    goto $bb10;

  $bb1845:
    assume $i365 == 1;
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i364, 0);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb1848, $bb1849;

  $bb1849:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb1850;

  $bb1850:
    assume {:verifier.code 0} true;
    goto $bb1847;

  $bb1848:
    assume {:verifier.code 0} true;
    assume $i366 == 1;
    goto $bb10;

  $bb1826:
    assume $i362 == 1;
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i361, 0);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i363} true;
    goto $bb1829, $bb1830;

  $bb1830:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb1831;

  $bb1831:
    assume {:verifier.code 0} true;
    goto $bb1828;

  $bb1829:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb10;

  $bb1807:
    assume $i359 == 1;
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i358, 0);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb1810, $bb1811;

  $bb1811:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb1812;

  $bb1812:
    assume {:verifier.code 0} true;
    goto $bb1809;

  $bb1810:
    assume {:verifier.code 0} true;
    assume $i360 == 1;
    goto $bb10;

  $bb1788:
    assume $i356 == 1;
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i355, 0);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb1791, $bb1792;

  $bb1792:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb1793;

  $bb1793:
    assume {:verifier.code 0} true;
    goto $bb1790;

  $bb1791:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb10;

  $bb1769:
    assume $i353 == 1;
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i352, 0);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb1772, $bb1773;

  $bb1773:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb1774;

  $bb1774:
    assume {:verifier.code 0} true;
    goto $bb1771;

  $bb1772:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb10;

  $bb1750:
    assume $i350 == 1;
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i349, 0);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb1753, $bb1754;

  $bb1754:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb1755;

  $bb1755:
    assume {:verifier.code 0} true;
    goto $bb1752;

  $bb1753:
    assume {:verifier.code 0} true;
    assume $i351 == 1;
    goto $bb10;

  $bb1731:
    assume $i347 == 1;
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i346, 0);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb1734, $bb1735;

  $bb1735:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb1736;

  $bb1736:
    assume {:verifier.code 0} true;
    goto $bb1733;

  $bb1734:
    assume {:verifier.code 0} true;
    assume $i348 == 1;
    goto $bb10;

  $bb1712:
    assume $i344 == 1;
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i343, 0);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb1715, $bb1716;

  $bb1716:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb1717;

  $bb1717:
    assume {:verifier.code 0} true;
    goto $bb1714;

  $bb1715:
    assume {:verifier.code 0} true;
    assume $i345 == 1;
    goto $bb10;

  $bb1693:
    assume $i341 == 1;
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i340, 0);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb1696, $bb1697;

  $bb1697:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb1698;

  $bb1698:
    assume {:verifier.code 0} true;
    goto $bb1695;

  $bb1696:
    assume {:verifier.code 0} true;
    assume $i342 == 1;
    goto $bb10;

  $bb1674:
    assume $i338 == 1;
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i337, 0);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb1677, $bb1678;

  $bb1678:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb1679;

  $bb1679:
    assume {:verifier.code 0} true;
    goto $bb1676;

  $bb1677:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb10;

  $bb1655:
    assume $i335 == 1;
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i334, 0);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb1658, $bb1659;

  $bb1659:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb1660;

  $bb1660:
    assume {:verifier.code 0} true;
    goto $bb1657;

  $bb1658:
    assume {:verifier.code 0} true;
    assume $i336 == 1;
    goto $bb10;

  $bb1636:
    assume $i332 == 1;
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i331, 0);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb1639, $bb1640;

  $bb1640:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb1641;

  $bb1641:
    assume {:verifier.code 0} true;
    goto $bb1638;

  $bb1639:
    assume {:verifier.code 0} true;
    assume $i333 == 1;
    goto $bb10;

  $bb1617:
    assume $i329 == 1;
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i328, 0);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb1620, $bb1621;

  $bb1621:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb1622;

  $bb1622:
    assume {:verifier.code 0} true;
    goto $bb1619;

  $bb1620:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb10;

  $bb1598:
    assume $i326 == 1;
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i325, 0);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb1601, $bb1602;

  $bb1602:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb1603;

  $bb1603:
    assume {:verifier.code 0} true;
    goto $bb1600;

  $bb1601:
    assume {:verifier.code 0} true;
    assume $i327 == 1;
    goto $bb10;

  $bb1579:
    assume $i323 == 1;
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i322, 0);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb1582, $bb1583;

  $bb1583:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb1584;

  $bb1584:
    assume {:verifier.code 0} true;
    goto $bb1581;

  $bb1582:
    assume {:verifier.code 0} true;
    assume $i324 == 1;
    goto $bb10;

  $bb1560:
    assume $i320 == 1;
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i319, 0);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb1563, $bb1564;

  $bb1564:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb1565;

  $bb1565:
    assume {:verifier.code 0} true;
    goto $bb1562;

  $bb1563:
    assume {:verifier.code 0} true;
    assume $i321 == 1;
    goto $bb10;

  $bb1541:
    assume $i317 == 1;
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i316, 0);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb1544, $bb1545;

  $bb1545:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb1546;

  $bb1546:
    assume {:verifier.code 0} true;
    goto $bb1543;

  $bb1544:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb10;

  $bb1522:
    assume $i314 == 1;
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i313, 0);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb1525, $bb1526;

  $bb1526:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb1527;

  $bb1527:
    assume {:verifier.code 0} true;
    goto $bb1524;

  $bb1525:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb10;

  $bb1503:
    assume $i311 == 1;
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i310, 0);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb1506, $bb1507;

  $bb1507:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb1508;

  $bb1508:
    assume {:verifier.code 0} true;
    goto $bb1505;

  $bb1506:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb10;

  $bb1484:
    assume $i308 == 1;
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i307, 0);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb1487, $bb1488;

  $bb1488:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb1489;

  $bb1489:
    assume {:verifier.code 0} true;
    goto $bb1486;

  $bb1487:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb10;

  $bb1465:
    assume $i305 == 1;
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i304, 0);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb1468, $bb1469;

  $bb1469:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb1470;

  $bb1470:
    assume {:verifier.code 0} true;
    goto $bb1467;

  $bb1468:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb10;

  $bb1446:
    assume $i302 == 1;
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i301, 0);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb1449, $bb1450;

  $bb1450:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb1451;

  $bb1451:
    assume {:verifier.code 0} true;
    goto $bb1448;

  $bb1449:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb10;

  $bb1427:
    assume $i299 == 1;
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i298, 0);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb1430, $bb1431;

  $bb1431:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb1432;

  $bb1432:
    assume {:verifier.code 0} true;
    goto $bb1429;

  $bb1430:
    assume {:verifier.code 0} true;
    assume $i300 == 1;
    goto $bb10;

  $bb1408:
    assume $i296 == 1;
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i295, 0);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb1411, $bb1412;

  $bb1412:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb1413;

  $bb1413:
    assume {:verifier.code 0} true;
    goto $bb1410;

  $bb1411:
    assume {:verifier.code 0} true;
    assume $i297 == 1;
    goto $bb10;

  $bb1389:
    assume $i293 == 1;
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i292, 0);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb1392, $bb1393;

  $bb1393:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb1394;

  $bb1394:
    assume {:verifier.code 0} true;
    goto $bb1391;

  $bb1392:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb10;

  $bb1370:
    assume $i290 == 1;
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i289, 0);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb1373, $bb1374;

  $bb1374:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb1375;

  $bb1375:
    assume {:verifier.code 0} true;
    goto $bb1372;

  $bb1373:
    assume {:verifier.code 0} true;
    assume $i291 == 1;
    goto $bb10;

  $bb1351:
    assume $i287 == 1;
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i286, 0);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb1354, $bb1355;

  $bb1355:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb1356;

  $bb1356:
    assume {:verifier.code 0} true;
    goto $bb1353;

  $bb1354:
    assume {:verifier.code 0} true;
    assume $i288 == 1;
    goto $bb10;

  $bb1332:
    assume $i284 == 1;
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i283, 0);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb1335, $bb1336;

  $bb1336:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb1337;

  $bb1337:
    assume {:verifier.code 0} true;
    goto $bb1334;

  $bb1335:
    assume {:verifier.code 0} true;
    assume $i285 == 1;
    goto $bb10;

  $bb1313:
    assume $i281 == 1;
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i280, 0);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb1316, $bb1317;

  $bb1317:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb1318;

  $bb1318:
    assume {:verifier.code 0} true;
    goto $bb1315;

  $bb1316:
    assume {:verifier.code 0} true;
    assume $i282 == 1;
    goto $bb10;

  $bb1294:
    assume $i278 == 1;
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i277, 0);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb1297, $bb1298;

  $bb1298:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb1299;

  $bb1299:
    assume {:verifier.code 0} true;
    goto $bb1296;

  $bb1297:
    assume {:verifier.code 0} true;
    assume $i279 == 1;
    goto $bb10;

  $bb1275:
    assume $i275 == 1;
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i274, 0);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb1278, $bb1279;

  $bb1279:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb1280;

  $bb1280:
    assume {:verifier.code 0} true;
    goto $bb1277;

  $bb1278:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb10;

  $bb1256:
    assume $i272 == 1;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i271, 0);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb1259, $bb1260;

  $bb1260:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb1261;

  $bb1261:
    assume {:verifier.code 0} true;
    goto $bb1258;

  $bb1259:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb10;

  $bb1237:
    assume $i269 == 1;
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i268, 0);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb1240, $bb1241;

  $bb1241:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb1242;

  $bb1242:
    assume {:verifier.code 0} true;
    goto $bb1239;

  $bb1240:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb10;

  $bb1218:
    assume $i266 == 1;
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i265, 0);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb1221, $bb1222;

  $bb1222:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb1223;

  $bb1223:
    assume {:verifier.code 0} true;
    goto $bb1220;

  $bb1221:
    assume {:verifier.code 0} true;
    assume $i267 == 1;
    goto $bb10;

  $bb1199:
    assume $i263 == 1;
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i262, 0);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb1202, $bb1203;

  $bb1203:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb1204;

  $bb1204:
    assume {:verifier.code 0} true;
    goto $bb1201;

  $bb1202:
    assume {:verifier.code 0} true;
    assume $i264 == 1;
    goto $bb10;

  $bb1180:
    assume $i260 == 1;
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i259, 0);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb1183, $bb1184;

  $bb1184:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb1185;

  $bb1185:
    assume {:verifier.code 0} true;
    goto $bb1182;

  $bb1183:
    assume {:verifier.code 0} true;
    assume $i261 == 1;
    goto $bb10;

  $bb1161:
    assume $i257 == 1;
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i256, 0);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb1164, $bb1165;

  $bb1165:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb1166;

  $bb1166:
    assume {:verifier.code 0} true;
    goto $bb1163;

  $bb1164:
    assume {:verifier.code 0} true;
    assume $i258 == 1;
    goto $bb10;

  $bb1142:
    assume $i254 == 1;
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i253, 0);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb1145, $bb1146;

  $bb1146:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb1147;

  $bb1147:
    assume {:verifier.code 0} true;
    goto $bb1144;

  $bb1145:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb10;

  $bb1123:
    assume $i251 == 1;
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i250, 0);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb1126, $bb1127;

  $bb1127:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb1128;

  $bb1128:
    assume {:verifier.code 0} true;
    goto $bb1125;

  $bb1126:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb10;

  $bb1104:
    assume $i248 == 1;
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i247, 0);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i249} true;
    goto $bb1107, $bb1108;

  $bb1108:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb1109;

  $bb1109:
    assume {:verifier.code 0} true;
    goto $bb1106;

  $bb1107:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb10;

  $bb1085:
    assume $i245 == 1;
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i244, 0);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb1088, $bb1089;

  $bb1089:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb1090;

  $bb1090:
    assume {:verifier.code 0} true;
    goto $bb1087;

  $bb1088:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb10;

  $bb1066:
    assume $i242 == 1;
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i241, 0);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb1069, $bb1070;

  $bb1070:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb1071;

  $bb1071:
    assume {:verifier.code 0} true;
    goto $bb1068;

  $bb1069:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb10;

  $bb1047:
    assume $i239 == 1;
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i238, 0);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb1050, $bb1051;

  $bb1051:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb1052;

  $bb1052:
    assume {:verifier.code 0} true;
    goto $bb1049;

  $bb1050:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb10;

  $bb1028:
    assume $i236 == 1;
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i235, 0);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb1031, $bb1032;

  $bb1032:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb1033;

  $bb1033:
    assume {:verifier.code 0} true;
    goto $bb1030;

  $bb1031:
    assume {:verifier.code 0} true;
    assume $i237 == 1;
    goto $bb10;

  $bb1009:
    assume $i233 == 1;
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i232, 0);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb1012, $bb1013;

  $bb1013:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1012:
    assume {:verifier.code 0} true;
    assume $i234 == 1;
    goto $bb10;

  $bb990:
    assume $i230 == 1;
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i229, 0);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb993, $bb994;

  $bb994:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb993:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb10;

  $bb971:
    assume $i227 == 1;
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i226, 0);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb974, $bb975;

  $bb975:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    goto $bb973;

  $bb974:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb10;

  $bb952:
    assume $i224 == 1;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i223, 0);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb955, $bb956;

  $bb956:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb955:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb10;

  $bb933:
    assume $i221 == 1;
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i220, 0);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb936, $bb937;

  $bb937:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb936:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb10;

  $bb914:
    assume $i218 == 1;
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i217, 0);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb917, $bb918;

  $bb918:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb919;

  $bb919:
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb917:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb10;

  $bb895:
    assume $i215 == 1;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i214, 0);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb898, $bb899;

  $bb899:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb898:
    assume {:verifier.code 0} true;
    assume $i216 == 1;
    goto $bb10;

  $bb876:
    assume $i212 == 1;
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i211, 0);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb879, $bb880;

  $bb880:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    goto $bb878;

  $bb879:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb10;

  $bb857:
    assume $i209 == 1;
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i208, 0);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb860, $bb861;

  $bb861:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb860:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb10;

  $bb838:
    assume $i206 == 1;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i205, 0);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb841, $bb842;

  $bb842:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb841:
    assume {:verifier.code 0} true;
    assume $i207 == 1;
    goto $bb10;

  $bb819:
    assume $i203 == 1;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i202, 0);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb822, $bb823;

  $bb823:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb822:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb10;

  $bb800:
    assume $i200 == 1;
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i199, 0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb803, $bb804;

  $bb804:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb803:
    assume {:verifier.code 0} true;
    assume $i201 == 1;
    goto $bb10;

  $bb781:
    assume $i197 == 1;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i196, 0);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb784, $bb785;

  $bb785:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb784:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb10;

  $bb762:
    assume $i194 == 1;
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i193, 0);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb765, $bb766;

  $bb766:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb765:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb10;

  $bb743:
    assume $i191 == 1;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i190, 0);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb746, $bb747;

  $bb747:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb746:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb10;

  $bb724:
    assume $i188 == 1;
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i187, 0);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb727, $bb728;

  $bb728:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb727:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb10;

  $bb705:
    assume $i185 == 1;
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i184, 0);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb708, $bb709;

  $bb709:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb708:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb10;

  $bb686:
    assume $i182 == 1;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i181, 0);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb689, $bb690;

  $bb690:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb689:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb10;

  $bb667:
    assume $i179 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i178, 0);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb670, $bb671;

  $bb671:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb670:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb10;

  $bb648:
    assume $i176 == 1;
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i175, 0);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb651, $bb652;

  $bb652:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb651:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb10;

  $bb629:
    assume $i173 == 1;
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i172, 0);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb632, $bb633;

  $bb633:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb632:
    assume {:verifier.code 0} true;
    assume $i174 == 1;
    goto $bb10;

  $bb610:
    assume $i170 == 1;
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i169, 0);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb613, $bb614;

  $bb614:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb613:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb10;

  $bb591:
    assume $i167 == 1;
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i166, 0);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb594, $bb595;

  $bb595:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb594:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb10;

  $bb572:
    assume $i164 == 1;
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i163, 0);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb575:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb10;

  $bb553:
    assume $i161 == 1;
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i160, 0);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb556:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb10;

  $bb534:
    assume $i158 == 1;
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i157, 0);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb537, $bb538;

  $bb538:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb537:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb10;

  $bb515:
    assume $i155 == 1;
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i154, 0);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb518:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb10;

  $bb496:
    assume $i152 == 1;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i151, 0);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb10;

  $bb477:
    assume $i149 == 1;
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i148, 0);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb480:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb10;

  $bb458:
    assume $i146 == 1;
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i145, 0);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb461:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb10;

  $bb439:
    assume $i143 == 1;
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i142, 0);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb442, $bb443;

  $bb443:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb442:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb10;

  $bb420:
    assume $i140 == 1;
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i139, 0);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb10;

  $bb401:
    assume $i137 == 1;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i136, 0);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb404:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb10;

  $bb382:
    assume $i134 == 1;
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i133, 0);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb385:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb10;

  $bb363:
    assume $i131 == 1;
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i130, 0);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb366:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb10;

  $bb344:
    assume $i128 == 1;
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i127, 0);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb10;

  $bb325:
    assume $i125 == 1;
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i124, 0);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb328:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb10;

  $bb306:
    assume $i122 == 1;
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i121, 0);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb10;

  $bb287:
    assume $i119 == 1;
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i118, 0);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb290:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb10;

  $bb268:
    assume $i116 == 1;
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i115, 0);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb10;

  $bb249:
    assume $i113 == 1;
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i112, 0);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb10;

  $bb230:
    assume $i110 == 1;
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i109, 0);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb10;

  $bb211:
    assume $i107 == 1;
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i106, 0);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb10;

  $bb192:
    assume $i104 == 1;
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i103, 0);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb10;

  $bb173:
    assume $i101 == 1;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i100, 0);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb10;

  $bb154:
    assume $i98 == 1;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i97, 0);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb10;

  $bb135:
    assume $i95 == 1;
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i94, 0);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb10;

  $bb116:
    assume $i92 == 1;
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i91, 0);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb10;

  $bb97:
    assume $i89 == 1;
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i88, 0);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb10;

  $bb78:
    assume $i86 == 1;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i85, 0);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb10;

  $bb59:
    assume $i83 == 1;
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i82, 0);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb10;

  $bb40:
    assume $i80 == 1;
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i79, 0);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb10;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, 0);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb10;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gpio_to_irq: ref;

axiom gpio_to_irq == $sub.ref(0, 311436);

procedure gpio_to_irq($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_to_irq($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6354} {:cexpr "gpio_to_irq:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_17362;

  corral_source_split_17362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6355} $i1 := __gpio_to_irq($i0);
    call {:si_unique_call 6356} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_17363;

  corral_source_split_17363:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const irq_set_irq_type: ref;

axiom irq_set_irq_type == $sub.ref(0, 312468);

procedure irq_set_irq_type($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation irq_set_irq_type($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6357} {:cexpr "irq_set_irq_type:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 6358} {:cexpr "irq_set_irq_type:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_17365;

  corral_source_split_17365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6359} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 6360} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_17366;

  corral_source_split_17366:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pch_vbus_gpio_work_rise: ref;

axiom pch_vbus_gpio_work_rise == $sub.ref(0, 313500);

procedure pch_vbus_gpio_work_rise($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.1, $CurrAddr;



implementation pch_vbus_gpio_work_rise($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 6361} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_17368;

  corral_source_split_17368:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_17369;

  corral_source_split_17369:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 88), 168));
    goto corral_source_split_17370;

  corral_source_split_17370:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_17371;

  corral_source_split_17371:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 6240), 6408));
    goto corral_source_split_17372;

  corral_source_split_17372:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 6362} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i6);
    goto corral_source_split_17373;

  corral_source_split_17373:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 6240);
    call {:si_unique_call 6363} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i7);
    goto corral_source_split_17374;

  corral_source_split_17374:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_17375;

  corral_source_split_17375:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    call {:si_unique_call 6364} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i9);
    goto corral_source_split_17376;

  corral_source_split_17376:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_17377;

  corral_source_split_17377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6365} ___udelay(4295000);
    goto corral_source_split_17381;

  corral_source_split_17381:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6366} ___udelay(4295000);
    goto corral_source_split_17383;

  corral_source_split_17383:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6386} ___udelay(4295000);
    goto corral_source_split_17433;

  corral_source_split_17433:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6387} ___udelay(4295000);
    goto corral_source_split_17435;

  corral_source_split_17435:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6388} ___udelay(4295000);
    goto corral_source_split_17437;

  corral_source_split_17437:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6389} ___udelay(4295000);
    goto corral_source_split_17439;

  corral_source_split_17439:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6390} ___udelay(4295000);
    goto corral_source_split_17441;

  corral_source_split_17441:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6391} ___udelay(4295000);
    goto corral_source_split_17443;

  corral_source_split_17443:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6392} ___udelay(4295000);
    goto corral_source_split_17445;

  corral_source_split_17445:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6393} ___udelay(4295000);
    goto corral_source_split_17447;

  corral_source_split_17447:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6367} $i11 := pch_vbus_gpio_get_value($p5);
    call {:si_unique_call 6368} {:cexpr "vbus"} boogie_si_record_i32($i11);
    goto corral_source_split_17385;

  corral_source_split_17385:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_17386;

  corral_source_split_17386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_17388;

  corral_source_split_17388:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_17389;

  corral_source_split_17389:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str);
    goto corral_source_split_17390;

  corral_source_split_17390:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_17391;

  corral_source_split_17391:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 6369} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_17392;

  corral_source_split_17392:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_17393;

  corral_source_split_17393:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.71);
    goto corral_source_split_17394;

  corral_source_split_17394:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    goto corral_source_split_17395;

  corral_source_split_17395:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 16);
    call {:si_unique_call 6370} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_17396;

  corral_source_split_17396:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_17397;

  corral_source_split_17397:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str.69);
    goto corral_source_split_17398;

  corral_source_split_17398:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_17399;

  corral_source_split_17399:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 24);
    call {:si_unique_call 6371} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i21);
    goto corral_source_split_17400;

  corral_source_split_17400:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_17401;

  corral_source_split_17401:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, .str.72);
    goto corral_source_split_17402;

  corral_source_split_17402:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_17403;

  corral_source_split_17403:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 32);
    call {:si_unique_call 6372} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i24);
    goto corral_source_split_17404;

  corral_source_split_17404:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_17405;

  corral_source_split_17405:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, 1351);
    goto corral_source_split_17406;

  corral_source_split_17406:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_17407;

  corral_source_split_17407:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 35);
    call {:si_unique_call 6373} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i27);
    goto corral_source_split_17408;

  corral_source_split_17408:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_17409;

  corral_source_split_17409:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, 1);
    goto corral_source_split_17410;

  corral_source_split_17410:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    goto corral_source_split_17411;

  corral_source_split_17411:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 35);
    call {:si_unique_call 6374} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i30);
    goto corral_source_split_17412;

  corral_source_split_17412:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_17413;

  corral_source_split_17413:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    call {:si_unique_call 6375} {:cexpr "__cil_tmp23"} boogie_si_record_i8($i32);
    goto corral_source_split_17414;

  corral_source_split_17414:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    call {:si_unique_call 6376} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i33);
    goto corral_source_split_17415;

  corral_source_split_17415:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    call {:si_unique_call 6377} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i34);
    goto corral_source_split_17416;

  corral_source_split_17416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6378} $i35 := __builtinx_expect.i64.i64($i34, 0);
    goto corral_source_split_17417;

  corral_source_split_17417:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    call {:si_unique_call 6379} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_17418;

  corral_source_split_17418:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_17419;

  corral_source_split_17419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6385} pch_udc_reconnect($p5);
    goto corral_source_split_17431;

  corral_source_split_17431:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_17421;

  corral_source_split_17421:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p5);
    call {:si_unique_call 6380} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i38);
    goto corral_source_split_17422;

  corral_source_split_17422:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 1216);
    call {:si_unique_call 6381} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i39);
    goto corral_source_split_17423;

  corral_source_split_17423:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_17424;

  corral_source_split_17424:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_17425;

  corral_source_split_17425:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    call {:si_unique_call 6382} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i42);
    goto corral_source_split_17426;

  corral_source_split_17426:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 144);
    call {:si_unique_call 6383} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i43);
    goto corral_source_split_17427;

  corral_source_split_17427:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_17428;

  corral_source_split_17428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6384} vslice_dummy_var_88 := __dynamic_dev_dbg.ref.ref.ref($p1, $p44, .str.72);
    goto corral_source_split_17429;

  corral_source_split_17429:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_17379;

  corral_source_split_17379:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __gpio_to_irq: ref;

axiom __gpio_to_irq == $sub.ref(0, 314532);

procedure __gpio_to_irq($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __gpio_to_irq($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6394} {:cexpr "__gpio_to_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_17449;

  corral_source_split_17449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6395} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 6396} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_17450;

  corral_source_split_17450:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 315564);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17452;

  corral_source_split_17452:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 6397} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_17453;

  corral_source_split_17453:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    call {:si_unique_call 6398} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_17454;

  corral_source_split_17454:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_17455;

  corral_source_split_17455:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_17456;

  corral_source_split_17456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6399} __list_add($p0, $p5, $p1);
    goto corral_source_split_17457;

  corral_source_split_17457:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 316596);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17459;

  corral_source_split_17459:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 317628);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.4;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6400} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_17461;

  corral_source_split_17461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6401} ldv_spin_unlock();
    goto corral_source_split_17462;

  corral_source_split_17462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6402} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_17463;

  corral_source_split_17463:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 318660);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6403} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_17465;

  corral_source_split_17465:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_17466;

  corral_source_split_17466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6404} _raw_spin_unlock_irqrestore($p2, $i1);
    goto corral_source_split_17467;

  corral_source_split_17467:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 319692);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6405} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_17469;

  corral_source_split_17469:
    assume {:verifier.code 0} true;
    return;
}



const prepare_dma: ref;

axiom prepare_dma == $sub.ref(0, 320724);

procedure prepare_dma($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, assertsPassed;



implementation prepare_dma($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i16;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i11: i32;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6406} {:cexpr "prepare_dma:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_17471;

  corral_source_split_17471:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 6407} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_17472;

  corral_source_split_17472:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 40);
    call {:si_unique_call 6408} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_17473;

  corral_source_split_17473:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_17474;

  corral_source_split_17474:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.1, $p5);
    call {:si_unique_call 6409} {:cexpr "__cil_tmp8"} boogie_si_record_i16($i6);
    goto corral_source_split_17475;

  corral_source_split_17475:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i64($i6);
    call {:si_unique_call 6410} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_17476;

  corral_source_split_17476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6411} $i8 := pch_udc_create_dma_chain($p0, $p1, $i7, $i2);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 6412} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_17477;

  corral_source_split_17477:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_17478;

  corral_source_split_17478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_17485;

  corral_source_split_17485:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(136, 1));
    goto corral_source_split_17486;

  corral_source_split_17486:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    call {:si_unique_call 6414} {:cexpr "__cil_tmp12"} boogie_si_record_i8($i14);
    goto corral_source_split_17487;

  corral_source_split_17487:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    call {:si_unique_call 6415} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i15);
    goto corral_source_split_17488;

  corral_source_split_17488:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_17489;

  corral_source_split_17489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17483;

  corral_source_split_17483:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_17491;

  corral_source_split_17491:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    call {:si_unique_call 6416} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i17);
    goto corral_source_split_17492;

  corral_source_split_17492:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 96);
    call {:si_unique_call 6417} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i18);
    goto corral_source_split_17493;

  corral_source_split_17493:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_17494;

  corral_source_split_17494:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_17495;

  corral_source_split_17495:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    call {:si_unique_call 6418} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_17496;

  corral_source_split_17496:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 96);
    call {:si_unique_call 6419} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_17497;

  corral_source_split_17497:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_17498;

  corral_source_split_17498:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_17499;

  corral_source_split_17499:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_17500;

  corral_source_split_17500:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    call {:si_unique_call 6420} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i26);
    goto corral_source_split_17501;

  corral_source_split_17501:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 1073741823);
    goto corral_source_split_17502;

  corral_source_split_17502:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p20);
    goto corral_source_split_17503;

  corral_source_split_17503:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $i27);
    goto corral_source_split_17504;

  corral_source_split_17504:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_17480;

  corral_source_split_17480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6413} vslice_dummy_var_89 := printk.ref.ref.i32(.str.10, .str.11, $i8);
    goto corral_source_split_17481;

  corral_source_split_17481:
    assume {:verifier.code 0} true;
    $i11 := $i8;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const process_zlp: ref;

axiom process_zlp == $sub.ref(0, 321756);

procedure process_zlp($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.4;



implementation process_zlp($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17506;

  corral_source_split_17506:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 6421} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_17507;

  corral_source_split_17507:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 96);
    call {:si_unique_call 6422} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_17508;

  corral_source_split_17508:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_17509;

  corral_source_split_17509:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_17510;

  corral_source_split_17510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6423} complete_req($p0, $p1, 0);
    goto corral_source_split_17511;

  corral_source_split_17511:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_17512;

  corral_source_split_17512:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(6161, 1));
    goto corral_source_split_17513;

  corral_source_split_17513:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    call {:si_unique_call 6424} {:cexpr "__cil_tmp8"} boogie_si_record_i8($i8);
    goto corral_source_split_17514;

  corral_source_split_17514:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 6425} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_17515;

  corral_source_split_17515:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_17516;

  corral_source_split_17516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p5);
    goto corral_source_split_17525;

  corral_source_split_17525:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(6160, 1));
    goto corral_source_split_17526;

  corral_source_split_17526:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    call {:si_unique_call 6427} {:cexpr "__cil_tmp12"} boogie_si_record_i8($i16);
    goto corral_source_split_17527;

  corral_source_split_17527:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    call {:si_unique_call 6428} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i17);
    goto corral_source_split_17528;

  corral_source_split_17528:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_17529;

  corral_source_split_17529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_17531;

  corral_source_split_17531:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p5);
    goto corral_source_split_17532;

  corral_source_split_17532:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(6161, 1));
    goto corral_source_split_17533;

  corral_source_split_17533:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    call {:si_unique_call 6429} {:cexpr "__cil_tmp16"} boogie_si_record_i8($i21);
    goto corral_source_split_17534;

  corral_source_split_17534:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    call {:si_unique_call 6430} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i22);
    goto corral_source_split_17535;

  corral_source_split_17535:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_17536;

  corral_source_split_17536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_17538;

  corral_source_split_17538:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p5);
    call {:si_unique_call 6431} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i24);
    goto corral_source_split_17539;

  corral_source_split_17539:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 1224);
    call {:si_unique_call 6432} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i25);
    goto corral_source_split_17540;

  corral_source_split_17540:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_17541;

  corral_source_split_17541:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_17542;

  corral_source_split_17542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6433} pch_udc_ep_clear_nak($p27);
    goto corral_source_split_17543;

  corral_source_split_17543:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_17544;

  corral_source_split_17544:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_17545;

  corral_source_split_17545:
    assume {:verifier.code 0} true;
    $i30 := $and.i16($i29, $sub.i16(0, 1025));
    goto corral_source_split_17546;

  corral_source_split_17546:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p28, $i30);
    goto corral_source_split_17547;

  corral_source_split_17547:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_17518;

  corral_source_split_17518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6426} pch_udc_set_csr_done($p5);
    goto corral_source_split_17519;

  corral_source_split_17519:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_17520;

  corral_source_split_17520:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_17521;

  corral_source_split_17521:
    assume {:verifier.code 0} true;
    $i13 := $and.i16($i12, $sub.i16(0, 513));
    goto corral_source_split_17522;

  corral_source_split_17522:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, $i13);
    goto corral_source_split_17523;

  corral_source_split_17523:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_set_csr_done: ref;

axiom pch_udc_set_csr_done == $sub.ref(0, 322788);

procedure pch_udc_set_csr_done($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_csr_done($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17549;

  corral_source_split_17549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6434} pch_udc_bit_set($p0, 1028, 8192);
    goto corral_source_split_17550;

  corral_source_split_17550:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_create_dma_chain: ref;

axiom pch_udc_create_dma_chain == $sub.ref(0, 323820);

procedure pch_udc_create_dma_chain($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, assertsPassed;



implementation pch_udc_create_dma_chain($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $i50: i64;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i32;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i32;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i111: i1;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $i110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 6435} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 6436} {:cexpr "pch_udc_create_dma_chain:arg:buf_len"} boogie_si_record_i64($i2);
    call {:si_unique_call 6437} {:cexpr "pch_udc_create_dma_chain:arg:gfp_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_17552;

  corral_source_split_17552:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 6438} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i5);
    goto corral_source_split_17553;

  corral_source_split_17553:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 96);
    call {:si_unique_call 6439} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i6);
    goto corral_source_split_17554;

  corral_source_split_17554:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_17555;

  corral_source_split_17555:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_17556;

  corral_source_split_17556:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    call {:si_unique_call 6440} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i9);
    goto corral_source_split_17557;

  corral_source_split_17557:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 8);
    call {:si_unique_call 6441} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i10);
    goto corral_source_split_17558;

  corral_source_split_17558:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_17559;

  corral_source_split_17559:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    call {:si_unique_call 6442} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i12);
    goto corral_source_split_17560;

  corral_source_split_17560:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    call {:si_unique_call 6443} {:cexpr "bytes"} boogie_si_record_i64($i13);
    goto corral_source_split_17561;

  corral_source_split_17561:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 6444} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i14);
    goto corral_source_split_17562;

  corral_source_split_17562:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 132);
    call {:si_unique_call 6445} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i15);
    goto corral_source_split_17563;

  corral_source_split_17563:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_17564;

  corral_source_split_17564:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    call {:si_unique_call 6446} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i17);
    goto corral_source_split_17565;

  corral_source_split_17565:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 1);
    goto corral_source_split_17566;

  corral_source_split_17566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    call {:si_unique_call 6450} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i23);
    goto corral_source_split_17575;

  corral_source_split_17575:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 144);
    call {:si_unique_call 6451} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i24);
    goto corral_source_split_17576;

  corral_source_split_17576:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_17577;

  corral_source_split_17577:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.1, $p25);
    call {:si_unique_call 6452} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i26);
    goto corral_source_split_17578;

  corral_source_split_17578:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, $sub.i64(0, 1));
    goto corral_source_split_17579;

  corral_source_split_17579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    goto corral_source_split_17592;

  corral_source_split_17592:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p8);
    call {:si_unique_call 6458} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i36);
    goto corral_source_split_17593;

  corral_source_split_17593:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 8);
    call {:si_unique_call 6459} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i37);
    goto corral_source_split_17594;

  corral_source_split_17594:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p1);
    call {:si_unique_call 6460} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i38);
    goto corral_source_split_17595;

  corral_source_split_17595:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 144);
    call {:si_unique_call 6461} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i39);
    goto corral_source_split_17596;

  corral_source_split_17596:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_17597;

  corral_source_split_17597:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.1, $p40);
    call {:si_unique_call 6462} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i41);
    goto corral_source_split_17598;

  corral_source_split_17598:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    goto corral_source_split_17599;

  corral_source_split_17599:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i37);
    goto corral_source_split_17600;

  corral_source_split_17600:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, $i42);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p8);
    goto corral_source_split_17602;

  corral_source_split_17602:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, $sub.i32(0, 1073741824));
    goto corral_source_split_17603;

  corral_source_split_17603:
    assume {:verifier.code 0} true;
    $p45, $i46, $i47, $i48 := $p8, $i13, 0, 1;
    goto $bb7;

  $bb7:
    call $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $p55, $i56, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $p89, $i90, $i91 := pch_udc_create_dma_chain_loop_$bb7($p0, $p1, $i2, $i3, $p4, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $p55, $i56, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $p89, $i90, $i91);
    goto $bb7_last;

  corral_source_split_17605:
    assume {:verifier.code 0} true;
    $i49 := $ult.i64($i2, $i46);
    goto corral_source_split_17606;

  corral_source_split_17606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i46;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_17610;

  corral_source_split_17610:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    call {:si_unique_call 6465} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i51);
    goto corral_source_split_17611;

  corral_source_split_17611:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, $sub.i32(0, 1073741824));
    goto corral_source_split_17612;

  corral_source_split_17612:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p45);
    goto corral_source_split_17613;

  corral_source_split_17613:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, $i52);
    goto corral_source_split_17614;

  corral_source_split_17614:
    assume {:verifier.code 0} true;
    $i54 := $ule.i64($i46, $i2);
    goto corral_source_split_17615;

  corral_source_split_17615:
    assume {:verifier.code 0} true;
    $p55, $i56 := $p45, $i48;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p0);
    call {:si_unique_call 6476} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i57);
    goto corral_source_split_17642;

  corral_source_split_17642:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 96);
    call {:si_unique_call 6477} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i58);
    goto corral_source_split_17643;

  corral_source_split_17643:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_17644;

  corral_source_split_17644:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_17645;

  corral_source_split_17645:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    call {:si_unique_call 6478} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i61);
    goto corral_source_split_17646;

  corral_source_split_17646:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 6168);
    call {:si_unique_call 6479} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i62);
    goto corral_source_split_17647;

  corral_source_split_17647:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_17648;

  corral_source_split_17648:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_17649;

  corral_source_split_17649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6480} $p65 := ldv_dma_pool_alloc_19($p64, $i3, $p4);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_17650;

  corral_source_split_17650:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_17651;

  corral_source_split_17651:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6481} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i67);
    goto corral_source_split_17652;

  corral_source_split_17652:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p66);
    call {:si_unique_call 6482} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i68);
    goto corral_source_split_17653;

  corral_source_split_17653:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, $i67);
    goto corral_source_split_17654;

  corral_source_split_17654:
    assume {:verifier.code 0} true;
    $i70 := $i48;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i47, $i2);
    call {:si_unique_call 6483} {:cexpr "i"} boogie_si_record_i64($i71);
    goto corral_source_split_17660;

  corral_source_split_17660:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p66);
    call {:si_unique_call 6484} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i72);
    goto corral_source_split_17661;

  corral_source_split_17661:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 8);
    call {:si_unique_call 6485} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i73);
    goto corral_source_split_17662;

  corral_source_split_17662:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i71);
    call {:si_unique_call 6486} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i74);
    goto corral_source_split_17663;

  corral_source_split_17663:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p1);
    call {:si_unique_call 6487} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i75);
    goto corral_source_split_17664;

  corral_source_split_17664:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 96);
    call {:si_unique_call 6488} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i76);
    goto corral_source_split_17665;

  corral_source_split_17665:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_17666;

  corral_source_split_17666:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_17667;

  corral_source_split_17667:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    call {:si_unique_call 6489} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i79);
    goto corral_source_split_17668;

  corral_source_split_17668:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 8);
    call {:si_unique_call 6490} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i80);
    goto corral_source_split_17669;

  corral_source_split_17669:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_17670;

  corral_source_split_17670:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    call {:si_unique_call 6491} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i82);
    goto corral_source_split_17671;

  corral_source_split_17671:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, $i74);
    goto corral_source_split_17672;

  corral_source_split_17672:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i73);
    goto corral_source_split_17673;

  corral_source_split_17673:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p84, $i83);
    goto corral_source_split_17674;

  corral_source_split_17674:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p45);
    call {:si_unique_call 6492} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i85);
    goto corral_source_split_17675;

  corral_source_split_17675:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 12);
    call {:si_unique_call 6493} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i86);
    goto corral_source_split_17676;

  corral_source_split_17676:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.1, $p4);
    call {:si_unique_call 6494} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i87);
    goto corral_source_split_17677;

  corral_source_split_17677:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i87);
    goto corral_source_split_17678;

  corral_source_split_17678:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i86);
    goto corral_source_split_17679;

  corral_source_split_17679:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p89, $i88);
    goto corral_source_split_17680;

  corral_source_split_17680:
    assume {:verifier.code 0} true;
    $i90 := $sub.i64($i46, $i2);
    call {:si_unique_call 6495} {:cexpr "bytes"} boogie_si_record_i64($i90);
    goto corral_source_split_17681;

  corral_source_split_17681:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i48, 1);
    call {:si_unique_call 6496} {:cexpr "len"} boogie_si_record_i32($i91);
    goto corral_source_split_17682;

  corral_source_split_17682:
    assume {:verifier.code 0} true;
    $p45, $i46, $i47, $i48 := $p65, $i90, $i71, $i91;
    goto corral_source_split_17682_dummy;

  $bb15:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_17656;

  corral_source_split_17656:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i111 := $ugt.i32($i70, 1);
    goto corral_source_split_17658;

  corral_source_split_17658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p1);
    call {:si_unique_call 6502} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i119);
    goto corral_source_split_17697;

  corral_source_split_17697:
    assume {:verifier.code 0} true;
    $i120 := $add.i64($i119, 132);
    call {:si_unique_call 6503} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i120);
    goto corral_source_split_17698;

  corral_source_split_17698:
    assume {:verifier.code 0} true;
    $p121 := $i2p.i64.ref($i120);
    goto corral_source_split_17699;

  corral_source_split_17699:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p121, 1);
    goto corral_source_split_17700;

  corral_source_split_17700:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32(0, 12);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_17684;

  corral_source_split_17684:
    assume {:verifier.code 0} true;
    $r := $i110;
    return;

  $bb20:
    assume $i111 == 1;
    goto corral_source_split_17686;

  corral_source_split_17686:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p1);
    call {:si_unique_call 6497} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i112);
    goto corral_source_split_17687;

  corral_source_split_17687:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 132);
    call {:si_unique_call 6498} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i113);
    goto corral_source_split_17688;

  corral_source_split_17688:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i113);
    goto corral_source_split_17689;

  corral_source_split_17689:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p114, $i70);
    goto corral_source_split_17690;

  corral_source_split_17690:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p0);
    call {:si_unique_call 6499} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i115);
    goto corral_source_split_17691;

  corral_source_split_17691:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 96);
    call {:si_unique_call 6500} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i116);
    goto corral_source_split_17692;

  corral_source_split_17692:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_17693;

  corral_source_split_17693:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.1, $p117);
    goto corral_source_split_17694;

  corral_source_split_17694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6501} pch_udc_free_dma_chain($p118, $p1);
    goto corral_source_split_17695;

  corral_source_split_17695:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_17617;

  corral_source_split_17617:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p1);
    call {:si_unique_call 6466} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i92);
    goto corral_source_split_17619;

  corral_source_split_17619:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 104);
    call {:si_unique_call 6467} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i93);
    goto corral_source_split_17620;

  corral_source_split_17620:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_17621;

  corral_source_split_17621:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p94, $p55);
    goto corral_source_split_17622;

  corral_source_split_17622:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p55);
    goto corral_source_split_17623;

  corral_source_split_17623:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.1, $p95);
    call {:si_unique_call 6468} {:cexpr "__cil_tmp66"} boogie_si_record_i32($i96);
    goto corral_source_split_17624;

  corral_source_split_17624:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 134217728);
    goto corral_source_split_17625;

  corral_source_split_17625:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p55);
    goto corral_source_split_17626;

  corral_source_split_17626:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p98, $i97);
    goto corral_source_split_17627;

  corral_source_split_17627:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p55);
    call {:si_unique_call 6469} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i99);
    goto corral_source_split_17628;

  corral_source_split_17628:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 12);
    call {:si_unique_call 6470} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i100);
    goto corral_source_split_17629;

  corral_source_split_17629:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p1);
    call {:si_unique_call 6471} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i101);
    goto corral_source_split_17630;

  corral_source_split_17630:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 88);
    call {:si_unique_call 6472} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i102);
    goto corral_source_split_17631;

  corral_source_split_17631:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_17632;

  corral_source_split_17632:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.1, $p103);
    call {:si_unique_call 6473} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i104);
    goto corral_source_split_17633;

  corral_source_split_17633:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i104);
    goto corral_source_split_17634;

  corral_source_split_17634:
    assume {:verifier.code 0} true;
    $p106 := $i2p.i64.ref($i100);
    goto corral_source_split_17635;

  corral_source_split_17635:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p106, $i105);
    goto corral_source_split_17636;

  corral_source_split_17636:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p1);
    call {:si_unique_call 6474} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i107);
    goto corral_source_split_17637;

  corral_source_split_17637:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 132);
    call {:si_unique_call 6475} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i108);
    goto corral_source_split_17638;

  corral_source_split_17638:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_17639;

  corral_source_split_17639:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p109, $i56);
    goto corral_source_split_17640;

  corral_source_split_17640:
    assume {:verifier.code 0} true;
    $i110 := 0;
    goto $bb19;

  $bb8:
    assume $i49 == 1;
    call {:si_unique_call 6464} {:cexpr "pch_udc_create_dma_chain:arg:tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_17608;

  corral_source_split_17608:
    assume {:verifier.code 0} true;
    $i50 := $i2;
    goto $bb10;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_17581;

  corral_source_split_17581:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p8);
    call {:si_unique_call 6453} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i28);
    goto corral_source_split_17582;

  corral_source_split_17582:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 8);
    call {:si_unique_call 6454} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i29);
    goto corral_source_split_17583;

  corral_source_split_17583:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p1);
    call {:si_unique_call 6455} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i30);
    goto corral_source_split_17584;

  corral_source_split_17584:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 16);
    call {:si_unique_call 6456} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i31);
    goto corral_source_split_17585;

  corral_source_split_17585:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_17586;

  corral_source_split_17586:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    call {:si_unique_call 6457} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i33);
    goto corral_source_split_17587;

  corral_source_split_17587:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    goto corral_source_split_17588;

  corral_source_split_17588:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i29);
    goto corral_source_split_17589;

  corral_source_split_17589:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, $i34);
    goto corral_source_split_17590;

  corral_source_split_17590:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_17568;

  corral_source_split_17568:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 6447} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i19);
    goto corral_source_split_17569;

  corral_source_split_17569:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 96);
    call {:si_unique_call 6448} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i20);
    goto corral_source_split_17570;

  corral_source_split_17570:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_17571;

  corral_source_split_17571:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_17572;

  corral_source_split_17572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6449} pch_udc_free_dma_chain($p22, $p1);
    goto corral_source_split_17573;

  corral_source_split_17573:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_17682_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 6463} {:cexpr "pch_udc_create_dma_chain:arg:_min1"} boogie_si_record_i64($i2);
    goto corral_source_split_17605;
}



const pch_udc_free_dma_chain: ref;

axiom pch_udc_free_dma_chain == $sub.ref(0, 324852);

procedure pch_udc_free_dma_chain($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_free_dma_chain($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i19: i64;
  var $i20: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17702;

  corral_source_split_17702:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 6504} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_17703;

  corral_source_split_17703:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 96);
    call {:si_unique_call 6505} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i3);
    goto corral_source_split_17704;

  corral_source_split_17704:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_17705;

  corral_source_split_17705:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_17706;

  corral_source_split_17706:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    call {:si_unique_call 6506} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_17707;

  corral_source_split_17707:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 132);
    call {:si_unique_call 6507} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i7);
    goto corral_source_split_17708;

  corral_source_split_17708:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_17709;

  corral_source_split_17709:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    call {:si_unique_call 6508} {:cexpr "i"} boogie_si_record_i32($i9);
    goto corral_source_split_17710;

  corral_source_split_17710:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p5);
    call {:si_unique_call 6509} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_17711;

  corral_source_split_17711:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 12);
    call {:si_unique_call 6510} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_17712;

  corral_source_split_17712:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_17713;

  corral_source_split_17713:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    call {:si_unique_call 6511} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i13);
    goto corral_source_split_17714;

  corral_source_split_17714:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    call {:si_unique_call 6512} {:cexpr "addr"} boogie_si_record_i64($i14);
    goto corral_source_split_17715;

  corral_source_split_17715:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p5);
    call {:si_unique_call 6513} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i15);
    goto corral_source_split_17716;

  corral_source_split_17716:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 12);
    call {:si_unique_call 6514} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i16);
    goto corral_source_split_17717;

  corral_source_split_17717:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_17718;

  corral_source_split_17718:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, 0);
    goto corral_source_split_17719;

  corral_source_split_17719:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i9, 1);
    goto corral_source_split_17720;

  corral_source_split_17720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p1);
    call {:si_unique_call 6526} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i38);
    goto corral_source_split_17748;

  corral_source_split_17748:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 132);
    call {:si_unique_call 6527} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i39);
    goto corral_source_split_17749;

  corral_source_split_17749:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_17750;

  corral_source_split_17750:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 1);
    goto corral_source_split_17751;

  corral_source_split_17751:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_17722;

  corral_source_split_17722:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i14, $i9;
    goto $bb4;

  $bb4:
    call $p21, $p22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $p32, $i33, $i34, $p35, $i36, $i37, $i19, $i20 := pch_udc_free_dma_chain_loop_$bb4($p0, $p21, $p22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $p32, $i33, $i34, $p35, $i36, $i37, $i19, $i20);
    goto $bb4_last;

  corral_source_split_17724:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6515} $p21 := phys_to_virt($i19);
    goto corral_source_split_17726;

  corral_source_split_17726:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_17727;

  corral_source_split_17727:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 6516} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i23);
    goto corral_source_split_17728;

  corral_source_split_17728:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 12);
    call {:si_unique_call 6517} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i24);
    goto corral_source_split_17729;

  corral_source_split_17729:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_17730;

  corral_source_split_17730:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    call {:si_unique_call 6518} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i26);
    goto corral_source_split_17731;

  corral_source_split_17731:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    call {:si_unique_call 6519} {:cexpr "addr2"} boogie_si_record_i64($i27);
    goto corral_source_split_17732;

  corral_source_split_17732:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 6520} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i28);
    goto corral_source_split_17733;

  corral_source_split_17733:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 6168);
    call {:si_unique_call 6521} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i29);
    goto corral_source_split_17734;

  corral_source_split_17734:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_17735;

  corral_source_split_17735:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_17736;

  corral_source_split_17736:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p22);
    goto corral_source_split_17737;

  corral_source_split_17737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6522} dma_pool_free($p31, $p32, $i19);
    goto corral_source_split_17738;

  corral_source_split_17738:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p22);
    call {:si_unique_call 6523} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i33);
    goto corral_source_split_17739;

  corral_source_split_17739:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 12);
    call {:si_unique_call 6524} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i34);
    goto corral_source_split_17740;

  corral_source_split_17740:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_17741;

  corral_source_split_17741:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, 0);
    goto corral_source_split_17742;

  corral_source_split_17742:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i20, 1);
    call {:si_unique_call 6525} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_17743;

  corral_source_split_17743:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i36, 1);
    goto corral_source_split_17744;

  corral_source_split_17744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i37 == 1);
    goto corral_source_split_17746;

  corral_source_split_17746:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i19, $i20 := $i27, $i36;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_17724;
}



const ldv_dma_pool_alloc_19: ref;

axiom ldv_dma_pool_alloc_19 == $sub.ref(0, 325884);

procedure ldv_dma_pool_alloc_19($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_19($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var vslice_dummy_var_90: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6528} {:cexpr "ldv_dma_pool_alloc_19:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_17753;

  corral_source_split_17753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6529} ldv_check_alloc_flags($i1);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_17754;

  corral_source_split_17754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6530} vslice_dummy_var_90 := dma_pool_alloc($p0, $i1, $p2);
    goto corral_source_split_17755;

  corral_source_split_17755:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const ldv_dma_pool_alloc_20: ref;

axiom ldv_dma_pool_alloc_20 == $sub.ref(0, 326916);

procedure ldv_dma_pool_alloc_20($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_20($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var vslice_dummy_var_91: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6531} {:cexpr "ldv_dma_pool_alloc_20:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_17757;

  corral_source_split_17757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6532} ldv_check_alloc_flags($i1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_17758;

  corral_source_split_17758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6533} vslice_dummy_var_91 := dma_pool_alloc($p0, $i1, $p2);
    goto corral_source_split_17759;

  corral_source_split_17759:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const pch_udc_ep_disable: ref;

axiom pch_udc_ep_disable == $sub.ref(0, 327948);

procedure pch_udc_ep_disable($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17761;

  corral_source_split_17761:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_17762;

  corral_source_split_17762:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(136, 1));
    goto corral_source_split_17763;

  corral_source_split_17763:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    call {:si_unique_call 6534} {:cexpr "__cil_tmp4"} boogie_si_record_i8($i3);
    goto corral_source_split_17764;

  corral_source_split_17764:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    call {:si_unique_call 6535} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i4);
    goto corral_source_split_17765;

  corral_source_split_17765:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_17766;

  corral_source_split_17766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_17773;

  corral_source_split_17773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6539} pch_udc_ep_writel($p0, 128, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6540} pch_udc_ep_writel($p0, 0, 20);
    goto corral_source_split_17775;

  corral_source_split_17775:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_17768;

  corral_source_split_17768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6536} pch_udc_ep_writel($p0, 2, 0);
    goto corral_source_split_17769;

  corral_source_split_17769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6537} pch_udc_ep_writel($p0, 128, 0);
    goto corral_source_split_17770;

  corral_source_split_17770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6538} pch_udc_ep_bit_set($p0, 4, 64);
    goto corral_source_split_17771;

  corral_source_split_17771:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_enable: ref;

axiom pch_udc_ep_enable == $sub.ref(0, 328980);

procedure pch_udc_ep_enable($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation pch_udc_ep_enable($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i8;
  var $i52: i8;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17777;

  corral_source_split_17777:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 6541} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_17778;

  corral_source_split_17778:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 3);
    call {:si_unique_call 6542} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_17779;

  corral_source_split_17779:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_17780;

  corral_source_split_17780:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    call {:si_unique_call 6543} {:cexpr "__cil_tmp10"} boogie_si_record_i8($i6);
    goto corral_source_split_17781;

  corral_source_split_17781:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 6544} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i7);
    goto corral_source_split_17782;

  corral_source_split_17782:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 6545} {:cexpr "__cil_tmp12"} boogie_si_record_i8($i8);
    goto corral_source_split_17783;

  corral_source_split_17783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6546} pch_udc_ep_set_trfr_type($p0, $i8);
    goto corral_source_split_17784;

  corral_source_split_17784:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_17785;

  corral_source_split_17785:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(136, 1));
    goto corral_source_split_17786;

  corral_source_split_17786:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    call {:si_unique_call 6547} {:cexpr "__cil_tmp15"} boogie_si_record_i8($i11);
    goto corral_source_split_17787;

  corral_source_split_17787:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    call {:si_unique_call 6548} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i12);
    goto corral_source_split_17788;

  corral_source_split_17788:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_17789;

  corral_source_split_17789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_17793;

  corral_source_split_17793:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_17794;

  corral_source_split_17794:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i8($i15, 5);
    goto corral_source_split_17795;

  corral_source_split_17795:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, 1);
    call {:si_unique_call 6549} {:cexpr "__cil_tmp17"} boogie_si_record_i8($i17);
    goto corral_source_split_17796;

  corral_source_split_17796:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 6550} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i18);
    goto corral_source_split_17797;

  corral_source_split_17797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6551} pch_udc_ep_set_bufsz($p0, 256, $i18);
    goto corral_source_split_17798;

  corral_source_split_17798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6552} $i19 := usb_endpoint_maxp($p2);
    call {:si_unique_call 6553} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_17799;

  corral_source_split_17799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6554} pch_udc_ep_set_maxpkt($p0, $i19);
    goto corral_source_split_17800;

  corral_source_split_17800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6555} pch_udc_ep_set_nak($p0);
    goto corral_source_split_17801;

  corral_source_split_17801:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_17802;

  corral_source_split_17802:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_17803;

  corral_source_split_17803:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i8($i21, 5);
    goto corral_source_split_17804;

  corral_source_split_17804:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 1);
    call {:si_unique_call 6556} {:cexpr "__cil_tmp20"} boogie_si_record_i8($i23);
    goto corral_source_split_17805;

  corral_source_split_17805:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    call {:si_unique_call 6557} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i24);
    goto corral_source_split_17806;

  corral_source_split_17806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6558} pch_udc_ep_fifo_flush($p0, $i24);
    goto corral_source_split_17807;

  corral_source_split_17807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6559} $i25 := usb_endpoint_maxp($p2);
    call {:si_unique_call 6560} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_17808;

  corral_source_split_17808:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 19);
    call {:si_unique_call 6561} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i26);
    goto corral_source_split_17809;

  corral_source_split_17809:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    call {:si_unique_call 6562} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_17810;

  corral_source_split_17810:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 4);
    call {:si_unique_call 6563} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_17811;

  corral_source_split_17811:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_17812;

  corral_source_split_17812:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    call {:si_unique_call 6564} {:cexpr "__cil_tmp25"} boogie_si_record_i16($i30);
    goto corral_source_split_17813;

  corral_source_split_17813:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    call {:si_unique_call 6565} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i31);
    goto corral_source_split_17814;

  corral_source_split_17814:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32($i31, 15);
    call {:si_unique_call 6566} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i32);
    goto corral_source_split_17815;

  corral_source_split_17815:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p1);
    call {:si_unique_call 6567} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i33);
    goto corral_source_split_17816;

  corral_source_split_17816:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 2);
    call {:si_unique_call 6568} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i34);
    goto corral_source_split_17817;

  corral_source_split_17817:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_17818;

  corral_source_split_17818:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.1, $p35);
    call {:si_unique_call 6569} {:cexpr "__cil_tmp30"} boogie_si_record_i16($i36);
    goto corral_source_split_17819;

  corral_source_split_17819:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    call {:si_unique_call 6570} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i37);
    goto corral_source_split_17820;

  corral_source_split_17820:
    assume {:verifier.code 0} true;
    $i38 := $shl.i32($i37, 11);
    call {:si_unique_call 6571} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i38);
    goto corral_source_split_17821;

  corral_source_split_17821:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_17822;

  corral_source_split_17822:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.1, $p39);
    call {:si_unique_call 6572} {:cexpr "__cil_tmp33"} boogie_si_record_i16($i40);
    goto corral_source_split_17823;

  corral_source_split_17823:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    call {:si_unique_call 6573} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i41);
    goto corral_source_split_17824;

  corral_source_split_17824:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i41, 7);
    call {:si_unique_call 6574} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i42);
    goto corral_source_split_17825;

  corral_source_split_17825:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p2);
    call {:si_unique_call 6575} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i43);
    goto corral_source_split_17826;

  corral_source_split_17826:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 3);
    call {:si_unique_call 6576} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i44);
    goto corral_source_split_17827;

  corral_source_split_17827:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_17828;

  corral_source_split_17828:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    call {:si_unique_call 6577} {:cexpr "__cil_tmp38"} boogie_si_record_i8($i46);
    goto corral_source_split_17829;

  corral_source_split_17829:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    call {:si_unique_call 6578} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i47);
    goto corral_source_split_17830;

  corral_source_split_17830:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 3);
    call {:si_unique_call 6579} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i48);
    goto corral_source_split_17831;

  corral_source_split_17831:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32($i48, 5);
    call {:si_unique_call 6580} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i49);
    goto corral_source_split_17832;

  corral_source_split_17832:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_17833;

  corral_source_split_17833:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_17834;

  corral_source_split_17834:
    assume {:verifier.code 0} true;
    $i52 := $lshr.i8($i51, 5);
    goto corral_source_split_17835;

  corral_source_split_17835:
    assume {:verifier.code 0} true;
    $i53 := $and.i8($i52, 1);
    call {:si_unique_call 6581} {:cexpr "__cil_tmp42"} boogie_si_record_i8($i53);
    goto corral_source_split_17836;

  corral_source_split_17836:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    call {:si_unique_call 6582} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i54);
    goto corral_source_split_17837;

  corral_source_split_17837:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32($i54, 4);
    call {:si_unique_call 6583} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i55);
    goto corral_source_split_17838;

  corral_source_split_17838:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p0);
    call {:si_unique_call 6584} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i56);
    goto corral_source_split_17839;

  corral_source_split_17839:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 136);
    call {:si_unique_call 6585} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i57);
    goto corral_source_split_17840;

  corral_source_split_17840:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_17841;

  corral_source_split_17841:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    call {:si_unique_call 6586} {:cexpr "__cil_tmp47"} boogie_si_record_i8($i59);
    goto corral_source_split_17842;

  corral_source_split_17842:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    call {:si_unique_call 6587} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i60);
    goto corral_source_split_17843;

  corral_source_split_17843:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, $i55);
    call {:si_unique_call 6588} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i61);
    goto corral_source_split_17844;

  corral_source_split_17844:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, $i49);
    call {:si_unique_call 6589} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i62);
    goto corral_source_split_17845;

  corral_source_split_17845:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, $i42);
    call {:si_unique_call 6590} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i63);
    goto corral_source_split_17846;

  corral_source_split_17846:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, $i38);
    call {:si_unique_call 6591} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i64);
    goto corral_source_split_17847;

  corral_source_split_17847:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, $i32);
    call {:si_unique_call 6592} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i65);
    goto corral_source_split_17848;

  corral_source_split_17848:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, $i26);
    call {:si_unique_call 6593} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i66);
    goto corral_source_split_17849;

  corral_source_split_17849:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p0);
    goto corral_source_split_17850;

  corral_source_split_17850:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(136, 1));
    goto corral_source_split_17851;

  corral_source_split_17851:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    call {:si_unique_call 6594} {:cexpr "__cil_tmp57"} boogie_si_record_i8($i69);
    goto corral_source_split_17852;

  corral_source_split_17852:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    call {:si_unique_call 6595} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i70);
    goto corral_source_split_17853;

  corral_source_split_17853:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_17854;

  corral_source_split_17854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i71 == 1);
    goto corral_source_split_17870;

  corral_source_split_17870:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p0);
    call {:si_unique_call 6605} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i83);
    goto corral_source_split_17871;

  corral_source_split_17871:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 96);
    call {:si_unique_call 6606} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i84);
    goto corral_source_split_17872;

  corral_source_split_17872:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_17873;

  corral_source_split_17873:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.1, $p85);
    goto corral_source_split_17874;

  corral_source_split_17874:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i66);
    call {:si_unique_call 6607} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i87);
    goto corral_source_split_17875;

  corral_source_split_17875:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p0);
    call {:si_unique_call 6608} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i88);
    goto corral_source_split_17876;

  corral_source_split_17876:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 136);
    call {:si_unique_call 6609} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i89);
    goto corral_source_split_17877;

  corral_source_split_17877:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_17878;

  corral_source_split_17878:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.1, $p90);
    call {:si_unique_call 6610} {:cexpr "__cil_tmp75"} boogie_si_record_i8($i91);
    goto corral_source_split_17879;

  corral_source_split_17879:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    call {:si_unique_call 6611} {:cexpr "__cil_tmp76"} boogie_si_record_i32($i92);
    goto corral_source_split_17880;

  corral_source_split_17880:
    assume {:verifier.code 0} true;
    $i93 := $mul.i32($i92, 2);
    call {:si_unique_call 6612} {:cexpr "__cil_tmp77"} boogie_si_record_i32($i93);
    goto corral_source_split_17881;

  corral_source_split_17881:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 1);
    call {:si_unique_call 6613} {:cexpr "__cil_tmp78"} boogie_si_record_i32($i94);
    goto corral_source_split_17882;

  corral_source_split_17882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6614} pch_udc_write_csr($p86, $i87, $i94);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i71 == 1;
    goto corral_source_split_17856;

  corral_source_split_17856:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p0);
    call {:si_unique_call 6596} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i72);
    goto corral_source_split_17857;

  corral_source_split_17857:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 96);
    call {:si_unique_call 6597} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i73);
    goto corral_source_split_17858;

  corral_source_split_17858:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_17859;

  corral_source_split_17859:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_17860;

  corral_source_split_17860:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i66);
    call {:si_unique_call 6598} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i76);
    goto corral_source_split_17861;

  corral_source_split_17861:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p0);
    call {:si_unique_call 6599} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i77);
    goto corral_source_split_17862;

  corral_source_split_17862:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 136);
    call {:si_unique_call 6600} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i78);
    goto corral_source_split_17863;

  corral_source_split_17863:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_17864;

  corral_source_split_17864:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.1, $p79);
    call {:si_unique_call 6601} {:cexpr "__cil_tmp65"} boogie_si_record_i8($i80);
    goto corral_source_split_17865;

  corral_source_split_17865:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    call {:si_unique_call 6602} {:cexpr "__cil_tmp66"} boogie_si_record_i32($i81);
    goto corral_source_split_17866;

  corral_source_split_17866:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i81, 2);
    call {:si_unique_call 6603} {:cexpr "__cil_tmp67"} boogie_si_record_i32($i82);
    goto corral_source_split_17867;

  corral_source_split_17867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6604} pch_udc_write_csr($p75, $i76, $i82);
    goto corral_source_split_17868;

  corral_source_split_17868:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_17791;

  corral_source_split_17791:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 330012);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17884;

  corral_source_split_17884:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 6615} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_17885;

  corral_source_split_17885:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 4);
    call {:si_unique_call 6616} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_17886;

  corral_source_split_17886:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_17887;

  corral_source_split_17887:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    call {:si_unique_call 6617} {:cexpr "__cil_tmp4"} boogie_si_record_i16($i4);
    goto corral_source_split_17888;

  corral_source_split_17888:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_17889;

  corral_source_split_17889:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const pch_udc_ep_set_trfr_type: ref;

axiom pch_udc_ep_set_trfr_type == $sub.ref(0, 331044);

procedure pch_udc_ep_set_trfr_type($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation pch_udc_ep_set_trfr_type($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6618} {:cexpr "pch_udc_ep_set_trfr_type:arg:type"} boogie_si_record_i8($i1);
    goto corral_source_split_17891;

  corral_source_split_17891:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    call {:si_unique_call 6619} {:cexpr "__cil_tmp3"} boogie_si_record_i32($i2);
    goto corral_source_split_17892;

  corral_source_split_17892:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i2, 4);
    call {:si_unique_call 6620} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i3);
    goto corral_source_split_17893;

  corral_source_split_17893:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 6621} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_17894;

  corral_source_split_17894:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 48);
    call {:si_unique_call 6622} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_17895;

  corral_source_split_17895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6623} pch_udc_ep_writel($p0, $i5, 0);
    goto corral_source_split_17896;

  corral_source_split_17896:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_vbus_session: ref;

axiom pch_udc_vbus_session == $sub.ref(0, 332076);

procedure pch_udc_vbus_session($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.3, $CurrAddr;



implementation pch_udc_vbus_session($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6624} {:cexpr "pch_udc_vbus_session:arg:is_active"} boogie_si_record_i32($i1);
    goto corral_source_split_17898;

  corral_source_split_17898:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_17899;

  corral_source_split_17899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_17908;

  corral_source_split_17908:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6628} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_17909;

  corral_source_split_17909:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 6629} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_17910;

  corral_source_split_17910:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1208);
    call {:si_unique_call 6630} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_17911;

  corral_source_split_17911:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_17912;

  corral_source_split_17912:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_17913;

  corral_source_split_17913:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 6631} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_17914;

  corral_source_split_17914:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $i6);
    goto corral_source_split_17915;

  corral_source_split_17915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6649} pch_udc_set_disconnect($p0);
    goto corral_source_split_17949;

  corral_source_split_17949:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    call {:si_unique_call 6650} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i39);
    goto corral_source_split_17950;

  corral_source_split_17950:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 6161);
    call {:si_unique_call 6651} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i40);
    goto corral_source_split_17951;

  corral_source_split_17951:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_17952;

  corral_source_split_17952:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_17917;

  corral_source_split_17917:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6632} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_17918;

  corral_source_split_17918:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 6633} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i14);
    goto corral_source_split_17919;

  corral_source_split_17919:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 1208);
    call {:si_unique_call 6634} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i15);
    goto corral_source_split_17920;

  corral_source_split_17920:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_17921;

  corral_source_split_17921:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_17922;

  corral_source_split_17922:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    call {:si_unique_call 6635} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i18);
    goto corral_source_split_17923;

  corral_source_split_17923:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 32);
    call {:si_unique_call 6636} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i19);
    goto corral_source_split_17924;

  corral_source_split_17924:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_17925;

  corral_source_split_17925:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_17926;

  corral_source_split_17926:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    call {:si_unique_call 6637} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i22);
    goto corral_source_split_17927;

  corral_source_split_17927:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $i13);
    goto corral_source_split_17928;

  corral_source_split_17928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_17930;

  corral_source_split_17930:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 6638} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i24);
    goto corral_source_split_17931;

  corral_source_split_17931:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 6088);
    call {:si_unique_call 6639} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i25);
    goto corral_source_split_17932;

  corral_source_split_17932:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_17933;

  corral_source_split_17933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6640} spin_unlock($p26);
    goto corral_source_split_17934;

  corral_source_split_17934:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    call {:si_unique_call 6641} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_17935;

  corral_source_split_17935:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 1208);
    call {:si_unique_call 6642} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_17936;

  corral_source_split_17936:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_17937;

  corral_source_split_17937:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_17938;

  corral_source_split_17938:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    call {:si_unique_call 6643} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_17939;

  corral_source_split_17939:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 32);
    call {:si_unique_call 6644} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_17940;

  corral_source_split_17940:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_17941;

  corral_source_split_17941:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_17942;

  corral_source_split_17942:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p0);
    call {:si_unique_call 6645} devirtbounce($p34, $p35);
    goto corral_source_split_17943;

  corral_source_split_17943:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 6646} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i36);
    goto corral_source_split_17944;

  corral_source_split_17944:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 6088);
    call {:si_unique_call 6647} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i37);
    goto corral_source_split_17945;

  corral_source_split_17945:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_17946;

  corral_source_split_17946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6648} spin_lock($p38);
    goto corral_source_split_17947;

  corral_source_split_17947:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_17901;

  corral_source_split_17901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6625} pch_udc_reconnect($p0);
    goto corral_source_split_17902;

  corral_source_split_17902:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 6626} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i3);
    goto corral_source_split_17903;

  corral_source_split_17903:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 6161);
    call {:si_unique_call 6627} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_17904;

  corral_source_split_17904:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_17905;

  corral_source_split_17905:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, 1);
    goto corral_source_split_17906;

  corral_source_split_17906:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_set_selfpowered: ref;

axiom pch_udc_set_selfpowered == $sub.ref(0, 333108);

procedure pch_udc_set_selfpowered($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_selfpowered($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17954;

  corral_source_split_17954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6652} pch_udc_bit_set($p0, 1024, 8);
    goto corral_source_split_17955;

  corral_source_split_17955:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_selfpowered: ref;

axiom pch_udc_clear_selfpowered == $sub.ref(0, 334140);

procedure pch_udc_clear_selfpowered($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_selfpowered($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17957;

  corral_source_split_17957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6653} pch_udc_bit_clr($p0, 1024, 8);
    goto corral_source_split_17958;

  corral_source_split_17958:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_rmt_wakeup: ref;

axiom pch_udc_rmt_wakeup == $sub.ref(0, 335172);

procedure pch_udc_rmt_wakeup($p0: ref);
  free requires assertsPassed;



implementation pch_udc_rmt_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17960;

  corral_source_split_17960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6654} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_17961;

  corral_source_split_17961:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_17966;

  corral_source_split_17966:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6657} ___udelay(4295000);
    goto corral_source_split_17970;

  corral_source_split_17970:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6656} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_17968;

  corral_source_split_17968:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_17963;

  corral_source_split_17963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6655} ___udelay(4295000);
    goto corral_source_split_17964;

  corral_source_split_17964:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_get_frame: ref;

axiom pch_udc_get_frame == $sub.ref(0, 336204);

procedure pch_udc_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_get_frame($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17972;

  corral_source_split_17972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6658} $i1 := pch_udc_readl($p0, 1032);
    call {:si_unique_call 6659} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_17973;

  corral_source_split_17973:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 18);
    call {:si_unique_call 6660} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i2);
    goto corral_source_split_17974;

  corral_source_split_17974:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 337236);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17976;

  corral_source_split_17976:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6661} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 6662} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_17977;

  corral_source_split_17977:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_udc_start: ref;

axiom pch_udc_start == $sub.ref(0, 338268);

procedure pch_udc_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.3, $CurrAddr;



implementation pch_udc_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $i135: i64;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $i139: i64;
  var $i140: i64;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i16;
  var $i146: i16;
  var $i147: i16;
  var $i14: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17979;

  corral_source_split_17979:
    assume {:verifier.code 0} true;
    $p2 := $M.2;
    goto corral_source_split_17980;

  corral_source_split_17980:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6663} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_17981;

  corral_source_split_17981:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 6664} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i4);
    goto corral_source_split_17982;

  corral_source_split_17982:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $i3);
    goto corral_source_split_17983;

  corral_source_split_17983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_17995;

  corral_source_split_17995:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 6670} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i15);
    goto corral_source_split_17996;

  corral_source_split_17996:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 8);
    call {:si_unique_call 6671} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_17997;

  corral_source_split_17997:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_17998;

  corral_source_split_17998:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    call {:si_unique_call 6672} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i18);
    goto corral_source_split_17999;

  corral_source_split_17999:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_18000;

  corral_source_split_18000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_18014;

  corral_source_split_18014:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6678} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i28);
    goto corral_source_split_18015;

  corral_source_split_18015:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    call {:si_unique_call 6679} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i29);
    goto corral_source_split_18016;

  corral_source_split_18016:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, $i28);
    goto corral_source_split_18017;

  corral_source_split_18017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    goto corral_source_split_18029;

  corral_source_split_18029:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6685} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i39);
    goto corral_source_split_18030;

  corral_source_split_18030:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 6686} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i40);
    goto corral_source_split_18031;

  corral_source_split_18031:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 24);
    call {:si_unique_call 6687} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i41);
    goto corral_source_split_18032;

  corral_source_split_18032:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_18033;

  corral_source_split_18033:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_18034;

  corral_source_split_18034:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    call {:si_unique_call 6688} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i44);
    goto corral_source_split_18035;

  corral_source_split_18035:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, $i39);
    goto corral_source_split_18036;

  corral_source_split_18036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i45 == 1);
    goto corral_source_split_18048;

  corral_source_split_18048:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6694} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i54);
    goto corral_source_split_18049;

  corral_source_split_18049:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p0);
    call {:si_unique_call 6695} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i55);
    goto corral_source_split_18050;

  corral_source_split_18050:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 16);
    call {:si_unique_call 6696} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i56);
    goto corral_source_split_18051;

  corral_source_split_18051:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_18052;

  corral_source_split_18052:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_18053;

  corral_source_split_18053:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    call {:si_unique_call 6697} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i59);
    goto corral_source_split_18054;

  corral_source_split_18054:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, $i54);
    goto corral_source_split_18055;

  corral_source_split_18055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i60 == 1);
    goto corral_source_split_18067;

  corral_source_split_18067:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6703} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i69);
    goto corral_source_split_18068;

  corral_source_split_18068:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p0);
    call {:si_unique_call 6704} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i70);
    goto corral_source_split_18069;

  corral_source_split_18069:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 32);
    call {:si_unique_call 6705} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i71);
    goto corral_source_split_18070;

  corral_source_split_18070:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_18071;

  corral_source_split_18071:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_18072;

  corral_source_split_18072:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    call {:si_unique_call 6706} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i74);
    goto corral_source_split_18073;

  corral_source_split_18073:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, $i69);
    goto corral_source_split_18074;

  corral_source_split_18074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6712} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i84);
    goto corral_source_split_18086;

  corral_source_split_18086:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p2);
    call {:si_unique_call 6713} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i85);
    goto corral_source_split_18087;

  corral_source_split_18087:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, $i84);
    goto corral_source_split_18088;

  corral_source_split_18088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6714} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i87);
    goto corral_source_split_18092;

  corral_source_split_18092:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p2);
    call {:si_unique_call 6715} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i88);
    goto corral_source_split_18093;

  corral_source_split_18093:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 1208);
    call {:si_unique_call 6716} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i89);
    goto corral_source_split_18094;

  corral_source_split_18094:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_18095;

  corral_source_split_18095:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_18096;

  corral_source_split_18096:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    call {:si_unique_call 6717} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i92);
    goto corral_source_split_18097;

  corral_source_split_18097:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, $i87);
    goto corral_source_split_18098;

  corral_source_split_18098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p0);
    call {:si_unique_call 6723} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i102);
    goto corral_source_split_18110;

  corral_source_split_18110:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 64);
    call {:si_unique_call 6724} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i103);
    goto corral_source_split_18111;

  corral_source_split_18111:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_18112;

  corral_source_split_18112:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p104, $0.ref);
    goto corral_source_split_18113;

  corral_source_split_18113:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p2);
    call {:si_unique_call 6725} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i105);
    goto corral_source_split_18114;

  corral_source_split_18114:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 1208);
    call {:si_unique_call 6726} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i106);
    goto corral_source_split_18115;

  corral_source_split_18115:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_18116;

  corral_source_split_18116:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p107, $p0);
    goto corral_source_split_18117;

  corral_source_split_18117:
    assume {:verifier.code 0} true;
    $i108 := $add.i64(0, 328);
    call {:si_unique_call 6727} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i108);
    goto corral_source_split_18118;

  corral_source_split_18118:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p2);
    call {:si_unique_call 6728} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i109);
    goto corral_source_split_18119;

  corral_source_split_18119:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, $i108);
    call {:si_unique_call 6729} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i110);
    goto corral_source_split_18120;

  corral_source_split_18120:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p0);
    call {:si_unique_call 6730} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i111);
    goto corral_source_split_18121;

  corral_source_split_18121:
    assume {:verifier.code 0} true;
    $i112 := $add.i64($i111, 56);
    call {:si_unique_call 6731} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i112);
    goto corral_source_split_18122;

  corral_source_split_18122:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i112);
    goto corral_source_split_18123;

  corral_source_split_18123:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i110);
    goto corral_source_split_18124;

  corral_source_split_18124:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p114, $p113);
    goto corral_source_split_18125;

  corral_source_split_18125:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p2);
    call {:si_unique_call 6732} $i116 := devirtbounce.7($p1, $p115);
    call {:si_unique_call 6733} {:cexpr "retval"} boogie_si_record_i32($i116);
    goto corral_source_split_18126;

  corral_source_split_18126:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_18127;

  corral_source_split_18127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6746} pch_udc_setup_ep0($p2);
    goto corral_source_split_18152;

  corral_source_split_18152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6747} $i137 := pch_vbus_gpio_get_value($p2);
    call {:si_unique_call 6748} {:cexpr "tmp"} boogie_si_record_i32($i137);
    goto corral_source_split_18153;

  corral_source_split_18153:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_18154;

  corral_source_split_18154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i138 == 1);
    goto corral_source_split_18159;

  corral_source_split_18159:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p2);
    call {:si_unique_call 6750} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i139);
    goto corral_source_split_18160;

  corral_source_split_18160:
    assume {:verifier.code 0} true;
    $i140 := $add.i64($i139, 6244);
    call {:si_unique_call 6751} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i140);
    goto corral_source_split_18161;

  corral_source_split_18161:
    assume {:verifier.code 0} true;
    $p141 := $i2p.i64.ref($i140);
    goto corral_source_split_18162;

  corral_source_split_18162:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.1, $p141);
    call {:si_unique_call 6752} {:cexpr "__cil_tmp123"} boogie_si_record_i32($i142);
    goto corral_source_split_18163;

  corral_source_split_18163:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_18164;

  corral_source_split_18164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 6408)), $mul.ref(6160, 1));
    goto corral_source_split_18166;

  corral_source_split_18166:
    assume {:verifier.code 0} true;
    $i145 := $load.i16($M.1, $p144);
    goto corral_source_split_18167;

  corral_source_split_18167:
    assume {:verifier.code 0} true;
    $i146 := $and.i16($i145, $sub.i16(0, 129));
    goto corral_source_split_18168;

  corral_source_split_18168:
    assume {:verifier.code 0} true;
    $i147 := $or.i16($i146, 128);
    goto corral_source_split_18169;

  corral_source_split_18169:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p144, $i147);
    goto corral_source_split_18170;

  corral_source_split_18170:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_18002;

  corral_source_split_18002:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb32:
    assume $i143 == 1;
    goto corral_source_split_18172;

  corral_source_split_18172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6753} pch_udc_clear_disconnect($p2);
    goto corral_source_split_18173;

  corral_source_split_18173:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i138 == 1;
    goto corral_source_split_18156;

  corral_source_split_18156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6749} pch_udc_clear_disconnect($p2);
    goto corral_source_split_18157;

  corral_source_split_18157:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i117 == 1;
    goto corral_source_split_18129;

  corral_source_split_18129:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p2);
    call {:si_unique_call 6734} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i118);
    goto corral_source_split_18130;

  corral_source_split_18130:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 1216);
    call {:si_unique_call 6735} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i119);
    goto corral_source_split_18131;

  corral_source_split_18131:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_18132;

  corral_source_split_18132:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.1, $p120);
    goto corral_source_split_18133;

  corral_source_split_18133:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    call {:si_unique_call 6736} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i122);
    goto corral_source_split_18134;

  corral_source_split_18134:
    assume {:verifier.code 0} true;
    $i123 := $add.i64($i122, 144);
    call {:si_unique_call 6737} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i123);
    goto corral_source_split_18135;

  corral_source_split_18135:
    assume {:verifier.code 0} true;
    $p124 := $i2p.i64.ref($i123);
    goto corral_source_split_18136;

  corral_source_split_18136:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p0);
    call {:si_unique_call 6738} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i125);
    goto corral_source_split_18137;

  corral_source_split_18137:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, 56);
    call {:si_unique_call 6739} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i126);
    goto corral_source_split_18138;

  corral_source_split_18138:
    assume {:verifier.code 0} true;
    $p127 := $i2p.i64.ref($i126);
    goto corral_source_split_18139;

  corral_source_split_18139:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.1, $p127);
    goto corral_source_split_18140;

  corral_source_split_18140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6740} vslice_dummy_var_99 := dev_err.ref.ref.ref.ref.i32($p124, .str.75, .str.73, $p128, $i116);
    goto corral_source_split_18141;

  corral_source_split_18141:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p2);
    call {:si_unique_call 6741} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i130);
    goto corral_source_split_18142;

  corral_source_split_18142:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i130, 1208);
    call {:si_unique_call 6742} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i131);
    goto corral_source_split_18143;

  corral_source_split_18143:
    assume {:verifier.code 0} true;
    $p132 := $i2p.i64.ref($i131);
    goto corral_source_split_18144;

  corral_source_split_18144:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p132, $0.ref);
    goto corral_source_split_18145;

  corral_source_split_18145:
    assume {:verifier.code 0} true;
    $i133 := $add.i64(0, 328);
    call {:si_unique_call 6743} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i133);
    goto corral_source_split_18146;

  corral_source_split_18146:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p2);
    call {:si_unique_call 6744} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i134);
    goto corral_source_split_18147;

  corral_source_split_18147:
    assume {:verifier.code 0} true;
    $i135 := $add.i64($i134, $i133);
    call {:si_unique_call 6745} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i135);
    goto corral_source_split_18148;

  corral_source_split_18148:
    assume {:verifier.code 0} true;
    $p136 := $i2p.i64.ref($i135);
    goto corral_source_split_18149;

  corral_source_split_18149:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p136, $0.ref);
    goto corral_source_split_18150;

  corral_source_split_18150:
    assume {:verifier.code 0} true;
    $i14 := $i116;
    goto $bb3;

  $bb23:
    assume $i93 == 1;
    goto corral_source_split_18100;

  corral_source_split_18100:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p2);
    call {:si_unique_call 6718} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i94);
    goto corral_source_split_18101;

  corral_source_split_18101:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 1216);
    call {:si_unique_call 6719} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i95);
    goto corral_source_split_18102;

  corral_source_split_18102:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_18103;

  corral_source_split_18103:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_18104;

  corral_source_split_18104:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    call {:si_unique_call 6720} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i98);
    goto corral_source_split_18105;

  corral_source_split_18105:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 144);
    call {:si_unique_call 6721} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i99);
    goto corral_source_split_18106;

  corral_source_split_18106:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_18107;

  corral_source_split_18107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6722} vslice_dummy_var_98 := dev_err.ref.ref.ref($p100, .str.74, .str.73);
    goto corral_source_split_18108;

  corral_source_split_18108:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb3;

  $bb20:
    assume $i86 == 1;
    goto corral_source_split_18090;

  corral_source_split_18090:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;

  $bb12:
    assume $i75 == 1;
    goto corral_source_split_18076;

  corral_source_split_18076:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p2);
    call {:si_unique_call 6707} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i76);
    goto corral_source_split_18077;

  corral_source_split_18077:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 1216);
    call {:si_unique_call 6708} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i77);
    goto corral_source_split_18078;

  corral_source_split_18078:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_18079;

  corral_source_split_18079:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_18080;

  corral_source_split_18080:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    call {:si_unique_call 6709} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i80);
    goto corral_source_split_18081;

  corral_source_split_18081:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 144);
    call {:si_unique_call 6710} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i81);
    goto corral_source_split_18082;

  corral_source_split_18082:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_18083;

  corral_source_split_18083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6711} vslice_dummy_var_97 := dev_err.ref.ref.ref($p82, .str.3, .str.73);
    goto corral_source_split_18084;

  corral_source_split_18084:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb10:
    assume $i60 == 1;
    goto corral_source_split_18057;

  corral_source_split_18057:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p2);
    call {:si_unique_call 6698} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i61);
    goto corral_source_split_18058;

  corral_source_split_18058:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 1216);
    call {:si_unique_call 6699} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i62);
    goto corral_source_split_18059;

  corral_source_split_18059:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_18060;

  corral_source_split_18060:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_18061;

  corral_source_split_18061:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    call {:si_unique_call 6700} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i65);
    goto corral_source_split_18062;

  corral_source_split_18062:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 144);
    call {:si_unique_call 6701} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i66);
    goto corral_source_split_18063;

  corral_source_split_18063:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_18064;

  corral_source_split_18064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6702} vslice_dummy_var_96 := dev_err.ref.ref.ref($p67, .str.3, .str.73);
    goto corral_source_split_18065;

  corral_source_split_18065:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i45 == 1;
    goto corral_source_split_18038;

  corral_source_split_18038:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p2);
    call {:si_unique_call 6689} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i46);
    goto corral_source_split_18039;

  corral_source_split_18039:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1216);
    call {:si_unique_call 6690} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i47);
    goto corral_source_split_18040;

  corral_source_split_18040:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_18041;

  corral_source_split_18041:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_18042;

  corral_source_split_18042:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    call {:si_unique_call 6691} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i50);
    goto corral_source_split_18043;

  corral_source_split_18043:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 144);
    call {:si_unique_call 6692} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i51);
    goto corral_source_split_18044;

  corral_source_split_18044:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_18045;

  corral_source_split_18045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6693} vslice_dummy_var_95 := dev_err.ref.ref.ref($p52, .str.3, .str.73);
    goto corral_source_split_18046;

  corral_source_split_18046:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_18019;

  corral_source_split_18019:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p2);
    call {:si_unique_call 6680} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i31);
    goto corral_source_split_18020;

  corral_source_split_18020:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 1216);
    call {:si_unique_call 6681} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i32);
    goto corral_source_split_18021;

  corral_source_split_18021:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_18022;

  corral_source_split_18022:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_18023;

  corral_source_split_18023:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    call {:si_unique_call 6682} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i35);
    goto corral_source_split_18024;

  corral_source_split_18024:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 144);
    call {:si_unique_call 6683} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i36);
    goto corral_source_split_18025;

  corral_source_split_18025:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_18026;

  corral_source_split_18026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6684} vslice_dummy_var_94 := dev_err.ref.ref.ref($p37, .str.3, .str.73);
    goto corral_source_split_18027;

  corral_source_split_18027:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_18004;

  corral_source_split_18004:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p2);
    call {:si_unique_call 6673} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_18005;

  corral_source_split_18005:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 1216);
    call {:si_unique_call 6674} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i21);
    goto corral_source_split_18006;

  corral_source_split_18006:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_18007;

  corral_source_split_18007:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_18008;

  corral_source_split_18008:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 6675} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i24);
    goto corral_source_split_18009;

  corral_source_split_18009:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 144);
    call {:si_unique_call 6676} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i25);
    goto corral_source_split_18010;

  corral_source_split_18010:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_18011;

  corral_source_split_18011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6677} vslice_dummy_var_93 := dev_err.ref.ref.ref($p26, .str.3, .str.73);
    goto corral_source_split_18012;

  corral_source_split_18012:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_17985;

  corral_source_split_17985:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    call {:si_unique_call 6665} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_17986;

  corral_source_split_17986:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 1216);
    call {:si_unique_call 6666} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_17987;

  corral_source_split_17987:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_17988;

  corral_source_split_17988:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_17989;

  corral_source_split_17989:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 6667} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_17990;

  corral_source_split_17990:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 144);
    call {:si_unique_call 6668} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_17991;

  corral_source_split_17991:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_17992;

  corral_source_split_17992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6669} vslice_dummy_var_92 := dev_err.ref.ref.ref($p12, .str.3, .str.73);
    goto corral_source_split_17993;

  corral_source_split_17993:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_setup_ep0: ref;

axiom pch_udc_setup_ep0 == $sub.ref(0, 339300);

procedure pch_udc_setup_ep0($p0: ref);
  free requires assertsPassed;



implementation pch_udc_setup_ep0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_18175;

  corral_source_split_18175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6754} pch_udc_enable_ep_interrupts($p0, 65537);
    goto corral_source_split_18176;

  corral_source_split_18176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6755} pch_udc_enable_interrupts($p0, 95);
    goto corral_source_split_18177;

  corral_source_split_18177:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_disconnect: ref;

axiom pch_udc_clear_disconnect == $sub.ref(0, 340332);

procedure pch_udc_clear_disconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_18179;

  corral_source_split_18179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6756} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_18180;

  corral_source_split_18180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6757} pch_udc_bit_clr($p0, 1028, 1024);
    goto corral_source_split_18181;

  corral_source_split_18181:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_18186;

  corral_source_split_18186:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6760} ___udelay(4295000);
    goto corral_source_split_18190;

  corral_source_split_18190:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6759} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_18188;

  corral_source_split_18188:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_18183;

  corral_source_split_18183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6758} ___udelay(4295000);
    goto corral_source_split_18184;

  corral_source_split_18184:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 341364);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6761} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_18192;

  corral_source_split_18192:
    assume {:verifier.code 1} true;
    goto corral_source_split_18193;

  corral_source_split_18193:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_18194;

  corral_source_split_18194:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 342396);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 343428);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 344460);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_18196;

  corral_source_split_18196:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_18197;

  corral_source_split_18197:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 345492);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 346524);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 347556);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 348588);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 349620);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 350652);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 351684);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 352716);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 353748);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 354780);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_18199;

  corral_source_split_18199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6762} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 6763} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 6764} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_18200;

  corral_source_split_18200:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_18201;

  corral_source_split_18201:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_18205;

  corral_source_split_18205:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_18206;

  corral_source_split_18206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6765} __VERIFIER_assume($i4);
    goto corral_source_split_18207;

  corral_source_split_18207:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_18203;

  corral_source_split_18203:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 355812);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 356844);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 357876);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 358908);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_18209;

  corral_source_split_18209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6766} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 6767} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 6768} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_18210;

  corral_source_split_18210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6769} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 6770} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6771} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_18211;

  corral_source_split_18211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6772} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 6773} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 6774} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_18212;

  corral_source_split_18212:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_18213;

  corral_source_split_18213:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_18218;

  corral_source_split_18218:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_18219;

  corral_source_split_18219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6775} __VERIFIER_assume($i7);
    goto corral_source_split_18220;

  corral_source_split_18220:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_18221;

  corral_source_split_18221:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_18227;

  corral_source_split_18227:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_18228;

  corral_source_split_18228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6776} __VERIFIER_assume($i11);
    goto corral_source_split_18229;

  corral_source_split_18229:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_18225;

  corral_source_split_18225:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_18215;

  corral_source_split_18215:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_18216;

  corral_source_split_18216:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_18223;

  corral_source_split_18223:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 359940);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 360972);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 362004);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 363036);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 364068);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 365100);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_18231;

  corral_source_split_18231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6777} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 6778} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 6779} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_18232;

  corral_source_split_18232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6780} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 6781} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 6782} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_18233;

  corral_source_split_18233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6783} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 6784} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 6785} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_18234;

  corral_source_split_18234:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_18235;

  corral_source_split_18235:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_18240;

  corral_source_split_18240:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_18241;

  corral_source_split_18241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6786} __VERIFIER_assume($i7);
    goto corral_source_split_18242;

  corral_source_split_18242:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_18243;

  corral_source_split_18243:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_18249;

  corral_source_split_18249:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_18250;

  corral_source_split_18250:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6787} __VERIFIER_assume($i11);
    goto corral_source_split_18251;

  corral_source_split_18251:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_18247;

  corral_source_split_18247:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_18237;

  corral_source_split_18237:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_18238;

  corral_source_split_18238:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_18245;

  corral_source_split_18245:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 366132);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 367164);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 368196);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 369228);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 370260);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 371292);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 372324);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 373356);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 374388);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_18253;

  corral_source_split_18253:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6788} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 6789} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 6790} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_18254;

  corral_source_split_18254:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 375420);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_18256;

  corral_source_split_18256:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6791} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 6792} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 6793} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_18257;

  corral_source_split_18257:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 376452);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_18259;

  corral_source_split_18259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6794} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 6795} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_18260;

  corral_source_split_18260:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 377484);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 378516);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 6796} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 379548);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 380580);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_18262;

  corral_source_split_18262:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_18263;

  corral_source_split_18263:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 381612);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 382644);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.4, $M.2, $M.1, $M.6, $M.5, $M.14;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 6797} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 6798} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.2 := $0.ref;
    $M.1 := $store.ref($M.1, pch_udc_ops, pch_udc_pcd_get_frame);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(8, 1)), pch_udc_pcd_wakeup);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(16, 1)), pch_udc_pcd_selfpowered);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(24, 1)), pch_udc_pcd_vbus_session);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(32, 1)), pch_udc_pcd_vbus_draw);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(40, 1)), pch_udc_pcd_pullup);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(80, 1)), pch_udc_start);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 96)), $mul.ref(88, 1)), pch_udc_stop);
    $M.6 := $sub.i32(0, 1);
    call {:si_unique_call 6799} {:cexpr "vbus_gpio_port"} boogie_si_record_i32($sub.i32(0, 1));
    $M.1 := $store.ref($M.1, pch_udc_ep_ops, pch_udc_pcd_ep_enable);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), pch_udc_pcd_ep_disable);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), pch_udc_alloc_request);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), pch_udc_free_request);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), pch_udc_pcd_queue);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), pch_udc_pcd_dequeue);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), pch_udc_pcd_set_halt);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), pch_udc_pcd_set_wedge);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), pch_udc_pcd_fifo_flush);
    $M.1 := $store.i32($M.1, udc_stall_spinlock, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.18);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i8($M.1, ep0_string, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(2, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.5 := 0;
    call {:si_unique_call 6800} {:cexpr "speed_fs"} boogie_si_record_i8(0);
    $M.1 := $store.i32($M.1, pch_udc_pcidev_id, 32902);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(4, 1)), 34824);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(16, 1)), 787454);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4315);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(4, 1)), 32797);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(16, 1)), 787454);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(0, 1)), 4315);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(4, 1)), 34824);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(16, 1)), 787454);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.14 := $store.ref($M.14, pch_udc_driver, $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(16, 1)), .str);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(24, 1)), pch_udc_pcidev_id);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(32, 1)), pch_udc_probe);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(40, 1)), pch_udc_remove);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), pch_udc_suspend);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(56, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(64, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(72, 1)), pch_udc_resume);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), pch_udc_shutdown);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(88, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(0, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(8, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(16, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(24, 1)), $0.ref);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(32, 1)), 0);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(40, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(56, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(64, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(72, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(80, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(88, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.14 := $store.i64($M.14, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.14 := $store.ref($M.14, $add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i8($M.1, .str.9, 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(2, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(8, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(15, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(16, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(18, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    call {:si_unique_call 6801} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 383676);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.3, $M.1, $CurrAddr;



implementation devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(pch_udc_remove, $p0);
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i16 == 1);
    $i15 := $eq.ref(pch_vbus_gpio_work_fall, $p0);
    assume true;
    goto $bb20, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_udc_remove, $p0);
    assume true;
    goto $bb18, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(pch_vbus_gpio_work_fall, $p0);
    assume true;
    goto $bb16, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(pch_vbus_gpio_work_rise, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(gadget_release, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(pch_udc_shutdown, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(pch_udc_pcd_fifo_flush, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6802} pch_udc_pcd_fifo_flush($p1);
    return;

  $bb3:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6803} pch_udc_shutdown($p2);
    return;

  $bb4:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6804} gadget_release($p3);
    return;

  $bb5:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6805} pch_vbus_gpio_work_rise($p4);
    return;

  $bb16:
    assume $i13 == 1;
    goto $bb8;

  $bb8:
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6808} pch_vbus_gpio_work_fall($p7);
    return;

  $bb18:
    assume $i14 == 1;
    goto $bb9;

  $bb9:
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6809} pch_udc_remove($p8);
    return;

  $bb20:
    assume $i15 == 1;
    goto $bb8;

  $bb21:
    assume $i16 == 1;
    goto $bb9;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 384708);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.4, $M.3, $CurrAddr, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i28 := $eq.ref(pch_udc_pcd_dequeue, $p0);
    assume {:branchcond $i28} true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i28 == 1);
    $i27 := $eq.ref(pch_udc_probe, $p0);
    assume {:branchcond $i27} true;
    goto $bb20, $bb17;

  $bb17:
    assume !($i27 == 1);
    $i26 := $eq.ref(pch_udc_start, $p0);
    assume true;
    goto $bb18, $bb15;

  $bb15:
    assume !($i26 == 1);
    $i25 := $eq.ref(pch_udc_pcd_dequeue, $p0);
    assume true;
    goto $bb16, $bb13;

  $bb13:
    assume !($i25 == 1);
    $i24 := $eq.ref(pch_udc_probe, $p0);
    assume true;
    goto $bb14, $bb11;

  $bb11:
    assume !($i24 == 1);
    $i23 := $eq.ref(pch_udc_start, $p0);
    assume true;
    goto $bb12, $bb10;

  $bb10:
    assume !($i23 == 1);
    $i22 := $eq.ref(pch_udc_pcd_ep_enable, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6810} $i3 := pch_udc_pcd_ep_enable($p1, $p2);
    $r := $i3;
    return;

  $bb12:
    assume $i23 == 1;
    goto $bb6;

  $bb6:
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6814} $i15 := pch_udc_start($p13, $p14);
    $r := $i15;
    return;

  $bb14:
    assume $i24 == 1;
    goto $bb7;

  $bb7:
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6815} $i18 := pch_udc_probe($p16, $p17);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    $r := $i18;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i25 == 1;
    goto $bb8;

  $bb8:
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6816} $i21 := pch_udc_pcd_dequeue($p19, $p20);
    $r := $i21;
    return;

  $bb18:
    assume $i26 == 1;
    goto $bb6;

  $bb20:
    assume $i27 == 1;
    goto $bb7;

  $bb21:
    assume $i28 == 1;
    goto $bb8;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 385740);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(pch_udc_free_request, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 6817} pch_udc_free_request(arg, arg1);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 386772);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 387804);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 388836);

procedure devirtbounce.5(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 389868);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 390900);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.3, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(__builtinx_expect, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i18 == 1);
    $i17 := $eq.ref(pch_udc_resume, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i17 == 1);
    $i16 := $eq.ref(pch_udc_pcd_set_wedge, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i16 == 1);
    $i15 := $eq.ref(pch_udc_pcd_ep_disable, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_udc_stop, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(pch_udc_pcd_wakeup, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(pch_udc_pcd_get_frame, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    call {:si_unique_call 6818} $i1 := pch_udc_pcd_get_frame(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i13 == 1;
    call {:si_unique_call 6819} $i2 := pch_udc_pcd_wakeup(arg);
    $r := $i2;
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6820} $i4 := pch_udc_stop($p3);
    $r := $i4;
    return;

  $bb5:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6821} $i6 := pch_udc_pcd_ep_disable($p5);
    $r := $i6;
    return;

  $bb6:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6822} $i8 := pch_udc_pcd_set_wedge($p7);
    $r := $i8;
    return;

  $bb7:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6823} $i10 := pch_udc_resume($p9);
    $r := $i10;
    return;

  $bb8:
    assume $i18 == 1;
    call {:si_unique_call 6824} $i11 := __builtinx_expect();
    $r := $i11;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i32;

const $u2: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.4, $M.2, $M.1, $M.6, $M.5, $M.14, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 6825} __SMACK_static_init();
    call {:si_unique_call 6826} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr();
  free requires assertsPassed;
  modifies assertsPassed, $M.4, $M.2, $M.1, $M.6, $M.5, $M.14, $CurrAddr, $M.3;



implementation {:entrypoint} main_SeqInstr()
{

  start:
    assertsPassed := true;
    call main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i28: i32, in_$i2: i32, in_$i50: i32, in_$i51: i1, in_$i52: i1, in_vslice_dummy_var_17: i32, in_vslice_dummy_var_18: i32, in_vslice_dummy_var_19: i32, in_vslice_dummy_var_20: i32, in_vslice_dummy_var_21: i32, in_vslice_dummy_var_22: i32, in_vslice_dummy_var_23: i32, in_vslice_dummy_var_24: i32, in_vslice_dummy_var_25: i32, in_vslice_dummy_var_26: ref, in_vslice_dummy_var_27: i32, in_vslice_dummy_var_28: i32, in_vslice_dummy_var_29: i32, in_vslice_dummy_var_30: i32, in_vslice_dummy_var_31: i32, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i28: i32, out_$i2: i32, out_$i50: i32, out_$i51: i1, out_$i52: i1, out_vslice_dummy_var_17: i32, out_vslice_dummy_var_18: i32, out_vslice_dummy_var_19: i32, out_vslice_dummy_var_20: i32, out_vslice_dummy_var_21: i32, out_vslice_dummy_var_22: i32, out_vslice_dummy_var_23: i32, out_vslice_dummy_var_24: i32, out_vslice_dummy_var_25: i32, out_vslice_dummy_var_26: ref, out_vslice_dummy_var_27: i32, out_vslice_dummy_var_28: i32, out_vslice_dummy_var_29: i32, out_vslice_dummy_var_30: i32, out_vslice_dummy_var_31: i32, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i42, out_$i43, out_$i44, out_$i45, out_$i28, out_$i2, out_$i50, out_$i51, out_$i52, out_vslice_dummy_var_17, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i42, in_$i43, in_$i44, in_$i45, in_$i28, in_$i2, in_$i50, in_$i51, in_$i52, in_vslice_dummy_var_17, in_vslice_dummy_var_18, in_vslice_dummy_var_19, in_vslice_dummy_var_20, in_vslice_dummy_var_21, in_vslice_dummy_var_22, in_vslice_dummy_var_23, in_vslice_dummy_var_24, in_vslice_dummy_var_25, in_vslice_dummy_var_26, in_vslice_dummy_var_27, in_vslice_dummy_var_28, in_vslice_dummy_var_29, in_vslice_dummy_var_30, in_vslice_dummy_var_31, in_vslice_dummy_var_32, in_vslice_dummy_var_33, in_vslice_dummy_var_34;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_12;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$i2 := out_$i28;
    goto corral_source_split_185_dummy;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i45;
    goto $bb80;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i2;
    goto $bb80;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} out_vslice_dummy_var_17 := pch_udc_pcd_get_frame($u0);
    goto corral_source_split_24;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i4 == 1;
    goto corral_source_split_19;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i3, 0);
    goto corral_source_split_17;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 10} out_$i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 11} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i3);
    call {:si_unique_call 12} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_16;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb113:
    assume out_$i51 == 1;
    goto corral_source_split_198;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_14;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    call {:si_unique_call 7} out_$i50 := __VERIFIER_nondet_int();
    call {:si_unique_call 8} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i50);
    call {:si_unique_call 9} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_13;

  $bb115:
    assume out_$i52 == 1;
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i2, 0);
    goto corral_source_split_201;

  $bb114:
    assume !(out_$i51 == 1);
    goto corral_source_split_200;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} out_vslice_dummy_var_18 := pch_udc_pcd_wakeup($u0);
    goto corral_source_split_31;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i5 == 1;
    goto corral_source_split_26;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i3, 1);
    goto corral_source_split_22;

  $bb8:
    assume !(out_$i4 == 1);
    goto corral_source_split_21;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} out_vslice_dummy_var_19 := pch_udc_pcd_selfpowered($u0, $u1);
    goto corral_source_split_38;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i6 == 1;
    goto corral_source_split_33;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i3, 2);
    goto corral_source_split_29;

  $bb11:
    assume !(out_$i5 == 1);
    goto corral_source_split_28;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_vslice_dummy_var_20 := pch_udc_pcd_pullup($u0, $u1);
    goto corral_source_split_45;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i7 == 1;
    goto corral_source_split_40;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i3, 3);
    goto corral_source_split_36;

  $bb14:
    assume !(out_$i6 == 1);
    goto corral_source_split_35;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} out_vslice_dummy_var_21 := pch_udc_pcd_vbus_session($u0, $u1);
    goto corral_source_split_52;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i8 == 1;
    goto corral_source_split_47;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i3, 4);
    goto corral_source_split_43;

  $bb17:
    assume !(out_$i7 == 1);
    goto corral_source_split_42;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} out_vslice_dummy_var_22 := pch_udc_pcd_vbus_draw($u0, $u1);
    goto corral_source_split_59;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i9 == 1;
    goto corral_source_split_54;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i3, 5);
    goto corral_source_split_50;

  $bb20:
    assume !(out_$i8 == 1);
    goto corral_source_split_49;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} out_vslice_dummy_var_23 := pch_udc_stop($u2);
    goto corral_source_split_66;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i10 == 1;
    goto corral_source_split_61;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i3, 6);
    goto corral_source_split_57;

  $bb23:
    assume !(out_$i9 == 1);
    goto corral_source_split_56;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_vslice_dummy_var_24 := pch_udc_pcd_ep_enable($u3, $u4);
    goto corral_source_split_73;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i11 == 1;
    goto corral_source_split_68;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i3, 7);
    goto corral_source_split_64;

  $bb26:
    assume !(out_$i10 == 1);
    goto corral_source_split_63;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} out_vslice_dummy_var_25 := pch_udc_pcd_ep_disable($u3);
    goto corral_source_split_80;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i12 == 1;
    goto corral_source_split_75;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i3, 8);
    goto corral_source_split_71;

  $bb29:
    assume !(out_$i11 == 1);
    goto corral_source_split_70;

  SeqInstr_3:
    goto corral_source_split_87;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} out_vslice_dummy_var_26 := pch_udc_alloc_request($u3, $u1);
    goto SeqInstr_2;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i13 == 1;
    goto corral_source_split_82;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i3, 9);
    goto corral_source_split_78;

  $bb32:
    assume !(out_$i12 == 1);
    goto corral_source_split_77;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} pch_udc_free_request($u3, $u5);
    goto corral_source_split_94;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i14 == 1;
    goto corral_source_split_89;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i3, 10);
    goto corral_source_split_85;

  $bb35:
    assume !(out_$i13 == 1);
    goto corral_source_split_84;

  SeqInstr_6:
    goto corral_source_split_101;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} out_vslice_dummy_var_27 := pch_udc_pcd_queue($u3, $u5, $u1);
    goto SeqInstr_5;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i15 == 1;
    goto corral_source_split_96;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i3, 11);
    goto corral_source_split_92;

  $bb38:
    assume !(out_$i14 == 1);
    goto corral_source_split_91;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} out_vslice_dummy_var_28 := pch_udc_pcd_dequeue($u3, $u5);
    goto corral_source_split_108;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i16 == 1;
    goto corral_source_split_103;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i3, 12);
    goto corral_source_split_99;

  $bb41:
    assume !(out_$i15 == 1);
    goto corral_source_split_98;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} out_vslice_dummy_var_29 := pch_udc_pcd_set_halt($u3, $u1);
    goto corral_source_split_115;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i17 == 1;
    goto corral_source_split_110;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i3, 13);
    goto corral_source_split_106;

  $bb44:
    assume !(out_$i16 == 1);
    goto corral_source_split_105;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} out_vslice_dummy_var_30 := pch_udc_pcd_set_wedge($u3);
    goto corral_source_split_122;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume out_$i18 == 1;
    goto corral_source_split_117;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i3, 14);
    goto corral_source_split_113;

  $bb47:
    assume !(out_$i17 == 1);
    goto corral_source_split_112;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} pch_udc_pcd_fifo_flush($u3);
    goto corral_source_split_129;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i19 == 1;
    goto corral_source_split_124;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i3, 15);
    goto corral_source_split_120;

  $bb50:
    assume !(out_$i18 == 1);
    goto corral_source_split_119;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  $bb82:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := out_$i2;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i45 := 0;
    goto $bb87;

  $bb84:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} ldv_check_return_value(out_$i43);
    goto corral_source_split_189;

  SeqInstr_12:
    call {:si_unique_call 40} {:cexpr "res_pch_udc_probe_108"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_188;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} out_$i43 := pch_udc_probe($u6, $u7);
    goto SeqInstr_11;

  $bb81:
    assume out_$i42 == 1;
    goto corral_source_split_187;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i2, 0);
    goto corral_source_split_136;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i20 == 1;
    goto corral_source_split_131;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i3, 16);
    goto corral_source_split_127;

  $bb53:
    assume !(out_$i19 == 1);
    goto corral_source_split_126;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} pch_udc_remove($u6);
    goto corral_source_split_143;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume out_$i21 == 1;
    goto corral_source_split_138;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i3, 17);
    goto corral_source_split_134;

  $bb56:
    assume !(out_$i20 == 1);
    goto corral_source_split_133;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} out_vslice_dummy_var_31 := pch_udc_suspend($u6, $u1);
    goto corral_source_split_150;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume out_$i22 == 1;
    goto corral_source_split_145;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i3, 18);
    goto corral_source_split_141;

  $bb59:
    assume !(out_$i21 == 1);
    goto corral_source_split_140;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} out_vslice_dummy_var_32 := pch_udc_resume($u6);
    goto corral_source_split_157;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i23 == 1;
    goto corral_source_split_152;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i3, 19);
    goto corral_source_split_148;

  $bb62:
    assume !(out_$i22 == 1);
    goto corral_source_split_147;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} pch_udc_shutdown($u6);
    goto corral_source_split_164;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume out_$i24 == 1;
    goto corral_source_split_159;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i3, 20);
    goto corral_source_split_155;

  $bb65:
    assume !(out_$i23 == 1);
    goto corral_source_split_154;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_173;

  SeqInstr_9:
    goto corral_source_split_172;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} out_vslice_dummy_var_33 := pch_udc_isr($u1, $u8);
    goto SeqInstr_8;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_171;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume out_$i25 == 1;
    goto corral_source_split_166;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i3, 21);
    goto corral_source_split_162;

  $bb68:
    assume !(out_$i24 == 1);
    goto corral_source_split_161;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_vslice_dummy_var_34 := pch_vbus_gpio_irq($u1, $u8);
    goto corral_source_split_180;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_179;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume out_$i26 == 1;
    goto corral_source_split_175;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i3, 22);
    goto corral_source_split_169;

  $bb71:
    assume !(out_$i25 == 1);
    goto corral_source_split_168;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume !(out_$i26 == 1);
    goto corral_source_split_177;

  corral_source_split_185_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i42, out_$i43, out_$i44, out_$i45, out_$i28, out_$i2, out_$i50, out_$i51, out_$i52, out_vslice_dummy_var_17, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34 := main_loop_$bb5(out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i42, out_$i43, out_$i44, out_$i45, out_$i28, out_$i2, out_$i50, out_$i51, out_$i52, out_vslice_dummy_var_17, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i28: i32, in_$i2: i32, in_$i50: i32, in_$i51: i1, in_$i52: i1, in_vslice_dummy_var_17: i32, in_vslice_dummy_var_18: i32, in_vslice_dummy_var_19: i32, in_vslice_dummy_var_20: i32, in_vslice_dummy_var_21: i32, in_vslice_dummy_var_22: i32, in_vslice_dummy_var_23: i32, in_vslice_dummy_var_24: i32, in_vslice_dummy_var_25: i32, in_vslice_dummy_var_26: ref, in_vslice_dummy_var_27: i32, in_vslice_dummy_var_28: i32, in_vslice_dummy_var_29: i32, in_vslice_dummy_var_30: i32, in_vslice_dummy_var_31: i32, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i28: i32, out_$i2: i32, out_$i50: i32, out_$i51: i1, out_$i52: i1, out_vslice_dummy_var_17: i32, out_vslice_dummy_var_18: i32, out_vslice_dummy_var_19: i32, out_vslice_dummy_var_20: i32, out_vslice_dummy_var_21: i32, out_vslice_dummy_var_22: i32, out_vslice_dummy_var_23: i32, out_vslice_dummy_var_24: i32, out_vslice_dummy_var_25: i32, out_vslice_dummy_var_26: ref, out_vslice_dummy_var_27: i32, out_vslice_dummy_var_28: i32, out_vslice_dummy_var_29: i32, out_vslice_dummy_var_30: i32, out_vslice_dummy_var_31: i32, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32);
  modifies $M.4, $M.3, $M.1, $CurrAddr, assertsPassed, $M.2;



implementation pch_udc_pcd_dequeue_loop_$bb17(in_$p1: ref, in_$i31: i64, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p37: ref) returns (out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p37: ref)
{

  entry:
    out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p37 := in_$i38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p37;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  $bb26:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p54;
    goto $bb26_dummy;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, in_$i31);
    goto corral_source_split_1206;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    call {:si_unique_call 475} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$p57 := $i2p.i64.ref(out_$i56);
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i64(out_$i55, 112);
    call {:si_unique_call 474} {:cexpr "__cil_tmp51"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    call {:si_unique_call 473} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p53, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_1200;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    out_$p51 := $i2p.i64.ref(out_$i50);
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i64(out_$i49, 112);
    call {:si_unique_call 472} {:cexpr "__cil_tmp43"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_1197;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p37);
    call {:si_unique_call 471} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_1196;

  $bb20:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p37;
    assume true;
    goto $bb20;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i40, out_$i38);
    goto corral_source_split_1173;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    call {:si_unique_call 459} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_1172;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_1171;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(in_$p1);
    call {:si_unique_call 458} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_1170;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p37 := pch_udc_pcd_dequeue_loop_$bb17(in_$p1, in_$i31, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p37);
    return;

  exit:
    return;
}



procedure pch_udc_pcd_dequeue_loop_$bb17(in_$p1: ref, in_$i31: i64, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p37: ref) returns (out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p37: ref);



implementation {:SIextraRecBound 3} pch_udc_isr_loop_$bb34(in_$p3: ref, in_$i5: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i56: i32) returns (out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i56: i32)
{

  entry:
    out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i56 := in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i56;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  $bb39:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := out_$i60;
    goto $bb39_dummy;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    out_$i61 := $sle.i32(out_$i60, 3);
    goto corral_source_split_2144;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i56, 1);
    call {:si_unique_call 916} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2143;

  $bb37:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} pch_udc_postsvc_epinters(in_$p3, out_$i56);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} pch_udc_svc_data_in(in_$p3, out_$i56);
    goto corral_source_split_2140;

  $bb36:
    assume out_$i59 == 1;
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i32(out_$i57, in_$i5);
    call {:si_unique_call 913} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2136;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i57 := $shl.i32(1, out_$i56);
    call {:si_unique_call 912} {:cexpr "__cil_tmp32"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i56 := pch_udc_isr_loop_$bb34(in_$p3, in_$i5, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i56);
    return;

  exit:
    return;
}



procedure pch_udc_isr_loop_$bb34(in_$p3: ref, in_$i5: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i56: i32) returns (out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i56: i32);
  modifies $M.1, $M.4;



implementation pch_udc_start_rxrequest_loop_$bb4(in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1) returns (out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33 := in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$p18 := out_$p24;
    goto $bb8_dummy;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 134217728);
    call {:si_unique_call 1532} {:cexpr "__cil_tmp12"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.1, out_$p30);
    call {:si_unique_call 1531} {:cexpr "__cil_tmp11"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_3624;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p29, out_$i28);
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_3622;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i27, 1073741823);
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.1, out_$p26);
    call {:si_unique_call 1530} {:cexpr "__cil_tmp10"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} out_$p24 := phys_to_virt(out_$i23);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i22);
    call {:si_unique_call 1528} {:cexpr "__cil_tmp16"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.1, out_$p21);
    call {:si_unique_call 1527} {:cexpr "__cil_tmp15"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$p21 := $i2p.i64.ref(out_$i20);
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i64(out_$i19, 12);
    call {:si_unique_call 1526} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_3613;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    call {:si_unique_call 1525} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_3612;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33 := pch_udc_start_rxrequest_loop_$bb4(out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33);
    return;

  exit:
    return;
}



procedure pch_udc_start_rxrequest_loop_$bb4(in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1) returns (out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1);
  modifies $M.1;



implementation pch_udc_complete_receiver_loop_$bb11(in_$p15: ref, in_$p41: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i70: i64, in_$i71: i64, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i64, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1) returns (out_$p41: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i70: i64, out_$i71: i64, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i64, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1)
{

  entry:
    out_$p41, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95 := in_$p41, in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$i76, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb21:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$p41 := out_$p90;
    goto $bb21_dummy;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$i94 := $and.i32(out_$i93, 805306368);
    call {:si_unique_call 1597} {:cexpr "__cil_tmp35"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.1, out_$p92);
    call {:si_unique_call 1596} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p90);
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} out_$p90 := phys_to_virt(out_$i89);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i32.i64(out_$i88);
    call {:si_unique_call 1594} {:cexpr "addr"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.1, out_$p87);
    call {:si_unique_call 1593} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 12);
    call {:si_unique_call 1592} {:cexpr "__cil_tmp68"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_3757;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p41);
    call {:si_unique_call 1591} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_3756;

  $bb19:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i64(out_$i75, out_$i70);
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    call {:si_unique_call 1585} {:cexpr "__cil_tmp59"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_3743;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.1, out_$p73);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$p73 := $i2p.i64.ref(out_$i72);
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i64(out_$i71, 104);
    call {:si_unique_call 1584} {:cexpr "__cil_tmp57"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(in_$p15);
    call {:si_unique_call 1583} {:cexpr "__cil_tmp56"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_3739;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p41);
    call {:si_unique_call 1582} {:cexpr "__cil_tmp55"} boogie_si_record_i64(out_$i70);
    goto corral_source_split_3738;

  $bb15:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$p66 := out_$p41;
    assume true;
    goto $bb15;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, $sub.i32(0, 2147483648));
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, $sub.i32(0, 1073741824));
    call {:si_unique_call 1579} {:cexpr "__cil_tmp53"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.1, out_$p62);
    call {:si_unique_call 1578} {:cexpr "__cil_tmp52"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3727;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_3726;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p41, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95 := pch_udc_complete_receiver_loop_$bb11(in_$p15, out_$p41, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95);
    return;

  exit:
    return;
}



procedure pch_udc_complete_receiver_loop_$bb11(in_$p15: ref, in_$p41: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i70: i64, in_$i71: i64, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i64, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1) returns (out_$p41: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i70: i64, out_$i71: i64, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i64, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1);



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation pch_udc_ep_clear_nak_loop_$bb24(in_$p0: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i39: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i43: i32) returns (out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i39: i32, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i43: i32)
{

  entry:
    out_$i40, out_$i41, out_$i42, out_$i39, out_$i44, out_$i45, out_$i46, out_$i43 := in_$i40, in_$i41, in_$i42, in_$i39, in_$i44, in_$i45, in_$i46, in_$i43;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4300;

  $bb26:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i44;
    goto $bb26_dummy;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i44;
    assume true;
    goto $bb26;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_4308;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 64);
    call {:si_unique_call 1870} {:cexpr "__cil_tmp23"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4307;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} out_$i40 := pch_udc_read_ep_control(in_$p0);
    call {:si_unique_call 1869} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} ___udelay(21475);
    goto corral_source_split_4305;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} pch_udc_ep_bit_set(in_$p0, 0, 256);
    goto corral_source_split_4304;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume out_$i45 == 1;
    goto corral_source_split_4312;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i44;
    assume true;
    goto $bb28;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i39, 1);
    call {:si_unique_call 1865} {:cexpr "loopcnt"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_4301;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$i42, out_$i39, out_$i44, out_$i45, out_$i46, out_$i43 := pch_udc_ep_clear_nak_loop_$bb24(in_$p0, out_$i40, out_$i41, out_$i42, out_$i39, out_$i44, out_$i45, out_$i46, out_$i43);
    return;

  exit:
    return;
}



procedure pch_udc_ep_clear_nak_loop_$bb24(in_$p0: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i39: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i43: i32) returns (out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i39: i32, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i43: i32);



implementation pch_udc_ep_clear_nak_loop_$bb10(in_$p0: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i17: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i21: i32) returns (out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i17: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i21: i32)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i17, out_$i22, out_$i23, out_$i24, out_$i21 := in_$i18, in_$i19, in_$i20, in_$i17, in_$i22, in_$i23, in_$i24, in_$i21;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4264;

  $bb12:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i22;
    goto $bb12_dummy;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i22;
    assume true;
    goto $bb12;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 0);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(out_$i18, 256);
    call {:si_unique_call 1856} {:cexpr "__cil_tmp15"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} out_$i18 := pch_udc_read_ep_status(in_$p0);
    call {:si_unique_call 1855} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_4269;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} ___udelay(21475);
    goto corral_source_split_4268;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume out_$i23 == 1;
    goto corral_source_split_4275;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    assume true;
    goto $bb14;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_4266;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i32(out_$i17, 1);
    call {:si_unique_call 1852} {:cexpr "loopcnt"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4265;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i17, out_$i22, out_$i23, out_$i24, out_$i21 := pch_udc_ep_clear_nak_loop_$bb10(in_$p0, out_$i18, out_$i19, out_$i20, out_$i17, out_$i22, out_$i23, out_$i24, out_$i21);
    return;

  exit:
    return;
}



procedure pch_udc_ep_clear_nak_loop_$bb10(in_$p0: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i17: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i21: i32) returns (out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i17: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i21: i32);



implementation pch_udc_start_next_txrequest_loop_$bb17(in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i1) returns (out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i1)
{

  entry:
    out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57 := in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$p42 := out_$p48;
    goto $bb21_dummy;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i32(out_$i55, 134217728);
    call {:si_unique_call 1998} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.1, out_$p54);
    call {:si_unique_call 1997} {:cexpr "__cil_tmp33"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p53, out_$i52);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$i52 := $and.i32(out_$i51, 1073741823);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.1, out_$p50);
    call {:si_unique_call 1996} {:cexpr "__cil_tmp32"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} out_$p48 := phys_to_virt(out_$i47);
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i32.i64(out_$i46);
    call {:si_unique_call 1994} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.1, out_$p45);
    call {:si_unique_call 1993} {:cexpr "__cil_tmp37"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$p45 := $i2p.i64.ref(out_$i44);
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i43, 12);
    call {:si_unique_call 1992} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_4575;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    call {:si_unique_call 1991} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_4574;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57 := pch_udc_start_next_txrequest_loop_$bb17(out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57);
    return;

  exit:
    return;
}



procedure pch_udc_start_next_txrequest_loop_$bb17(in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i1) returns (out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i1);
  modifies $M.1;



implementation pch_udc_wait_ep_stall_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := in_$i6, in_$i7, in_$i8, in_$i5, in_$i10, in_$i11, in_$i12, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4617;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i10;
    assume true;
    goto $bb6;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i7 := $and.i32(out_$i6, 1);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} out_$i6 := pch_udc_read_ep_control(in_$p0);
    call {:si_unique_call 2014} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_4622;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} ___udelay(21475);
    goto corral_source_split_4621;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_4628;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb8;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 2011} {:cexpr "count"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_4618;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := pch_udc_wait_ep_stall_loop_$bb4(in_$p0, out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9);
    return;

  exit:
    return;
}



procedure pch_udc_wait_ep_stall_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32);



implementation pch_udc_svc_enum_interrupt_loop_$bb15()
{

  entry:
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} pch_udc_svc_enum_interrupt_loop_$bb15();
    return;

  exit:
    return;
}



procedure pch_udc_svc_enum_interrupt_loop_$bb15();



implementation pch_udc_csr_busy_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := in_$i6, in_$i7, in_$i8, in_$i5, in_$i10, in_$i11, in_$i12, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5831;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i10;
    assume true;
    goto $bb6;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$i7 := $and.i32(out_$i6, 1);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} out_$i6 := pch_udc_readl(in_$p0, 1264);
    call {:si_unique_call 2415} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_5836;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} cpu_relax();
    goto corral_source_split_5835;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_5842;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb8;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 2412} {:cexpr "count"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_5832;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := pch_udc_csr_busy_loop_$bb4(in_$p0, out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9);
    return;

  exit:
    return;
}



procedure pch_udc_csr_busy_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32);



implementation empty_req_queue_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i10: i64, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1) returns (out_$i10: i64, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1)
{

  entry:
    out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17 := in_$i10, in_$i11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i17 == 1;
    goto $bb6_dummy;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} out_$i16 := list_empty(in_$p7);
    call {:si_unique_call 2524} {:cexpr "tmp"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} complete_req(in_$p0, out_$p15, $sub.i32(0, 108));
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p14, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_6033;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$p12 := $i2p.i64.ref(out_$i11);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i64(out_$i10, 120);
    call {:si_unique_call 2521} {:cexpr "__cil_tmp6"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_6029;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 2520} {:cexpr "__cil_tmp5"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_6028;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17 := empty_req_queue_loop_$bb4(in_$p0, in_$p7, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17);
    return;

  exit:
    return;
}



procedure empty_req_queue_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i10: i64, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1) returns (out_$i10: i64, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1);
  modifies $M.1, $M.4;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation pch_udc_create_dma_chain_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i32, in_$p4: ref, in_$p45: ref, in_$i46: i64, in_$i47: i64, in_$i48: i32, in_$i49: i1, in_$i50: i64, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$i69: i1, in_$i70: i32, in_$i71: i64, in_$i72: i64, in_$i73: i64, in_$i74: i32, in_$i75: i64, in_$i76: i64, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$i87: i64, in_$i88: i32, in_$p89: ref, in_$i90: i64, in_$i91: i32) returns (out_$p45: ref, out_$i46: i64, out_$i47: i64, out_$i48: i32, out_$i49: i1, out_$i50: i64, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$i69: i1, out_$i70: i32, out_$i71: i64, out_$i72: i64, out_$i73: i64, out_$i74: i32, out_$i75: i64, out_$i76: i64, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$i87: i64, out_$i88: i32, out_$p89: ref, out_$i90: i64, out_$i91: i32)
{

  entry:
    out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91 := in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 6463} {:cexpr "pch_udc_create_dma_chain:arg:_min1"} boogie_si_record_i64(in_$i2);
    goto corral_source_split_17605;

  corral_source_split_17682:
    assume {:verifier.code 0} true;
    out_$p45, out_$i46, out_$i47, out_$i48 := out_$p65, out_$i90, out_$i71, out_$i91;
    goto corral_source_split_17682_dummy;

  corral_source_split_17681:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i48, 1);
    call {:si_unique_call 6496} {:cexpr "len"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_17682;

  corral_source_split_17680:
    assume {:verifier.code 0} true;
    out_$i90 := $sub.i64(out_$i46, in_$i2);
    call {:si_unique_call 6495} {:cexpr "bytes"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_17681;

  corral_source_split_17679:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p89, out_$i88);
    goto corral_source_split_17680;

  corral_source_split_17678:
    assume {:verifier.code 0} true;
    out_$p89 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_17679;

  corral_source_split_17677:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i64.i32(out_$i87);
    goto corral_source_split_17678;

  corral_source_split_17676:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i64($M.1, in_$p4);
    call {:si_unique_call 6494} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_17677;

  corral_source_split_17675:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 12);
    call {:si_unique_call 6493} {:cexpr "__cil_tmp61"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_17676;

  corral_source_split_17674:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 6492} {:cexpr "__cil_tmp60"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_17675;

  corral_source_split_17673:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p84, out_$i83);
    goto corral_source_split_17674;

  corral_source_split_17672:
    assume {:verifier.code 0} true;
    out_$p84 := $i2p.i64.ref(out_$i73);
    goto corral_source_split_17673;

  corral_source_split_17671:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, out_$i74);
    goto corral_source_split_17672;

  corral_source_split_17670:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.1, out_$p81);
    call {:si_unique_call 6491} {:cexpr "__cil_tmp59"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_17671;

  corral_source_split_17669:
    assume {:verifier.code 0} true;
    out_$p81 := $i2p.i64.ref(out_$i80);
    goto corral_source_split_17670;

  corral_source_split_17668:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i64(out_$i79, 8);
    call {:si_unique_call 6490} {:cexpr "__cil_tmp58"} boogie_si_record_i64(out_$i80);
    goto corral_source_split_17669;

  corral_source_split_17667:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p78);
    call {:si_unique_call 6489} {:cexpr "__cil_tmp57"} boogie_si_record_i64(out_$i79);
    goto corral_source_split_17668;

  corral_source_split_17666:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.1, out_$p77);
    goto corral_source_split_17667;

  corral_source_split_17665:
    assume {:verifier.code 0} true;
    out_$p77 := $i2p.i64.ref(out_$i76);
    goto corral_source_split_17666;

  corral_source_split_17664:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i64(out_$i75, 96);
    call {:si_unique_call 6488} {:cexpr "__cil_tmp55"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_17665;

  corral_source_split_17663:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(in_$p1);
    call {:si_unique_call 6487} {:cexpr "__cil_tmp54"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_17664;

  corral_source_split_17662:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i64.i32(out_$i71);
    call {:si_unique_call 6486} {:cexpr "__cil_tmp53"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_17663;

  corral_source_split_17661:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i64(out_$i72, 8);
    call {:si_unique_call 6485} {:cexpr "__cil_tmp52"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_17662;

  corral_source_split_17660:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p66);
    call {:si_unique_call 6484} {:cexpr "__cil_tmp51"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_17661;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(out_$i47, in_$i2);
    call {:si_unique_call 6483} {:cexpr "i"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_17660;

  $bb16:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_17654:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i48;
    assume true;
    goto $bb16;

  corral_source_split_17653:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i64(out_$i68, out_$i67);
    goto corral_source_split_17654;

  corral_source_split_17652:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p66);
    call {:si_unique_call 6482} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_17653;

  corral_source_split_17651:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6481} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_17652;

  corral_source_split_17650:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_17651;

  SeqInstr_81:
    goto corral_source_split_17650;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  corral_source_split_17649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6480} out_$p65 := ldv_dma_pool_alloc_19(out_$p64, in_$i3, in_$p4);
    goto SeqInstr_80;

  corral_source_split_17648:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.1, out_$p63);
    goto corral_source_split_17649;

  corral_source_split_17647:
    assume {:verifier.code 0} true;
    out_$p63 := $i2p.i64.ref(out_$i62);
    goto corral_source_split_17648;

  corral_source_split_17646:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(out_$i61, 6168);
    call {:si_unique_call 6479} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_17647;

  corral_source_split_17645:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    call {:si_unique_call 6478} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_17646;

  corral_source_split_17644:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.1, out_$p59);
    goto corral_source_split_17645;

  corral_source_split_17643:
    assume {:verifier.code 0} true;
    out_$p59 := $i2p.i64.ref(out_$i58);
    goto corral_source_split_17644;

  corral_source_split_17642:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, 96);
    call {:si_unique_call 6477} {:cexpr "__cil_tmp43"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_17643;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 6476} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_17642;

  $bb12:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_17615:
    assume {:verifier.code 0} true;
    out_$p55, out_$i56 := out_$p45, out_$i48;
    assume true;
    goto $bb12;

  corral_source_split_17614:
    assume {:verifier.code 0} true;
    out_$i54 := $ule.i64(out_$i46, in_$i2);
    goto corral_source_split_17615;

  corral_source_split_17613:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p53, out_$i52);
    goto corral_source_split_17614;

  corral_source_split_17612:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_17613;

  corral_source_split_17611:
    assume {:verifier.code 0} true;
    out_$i52 := $or.i32(out_$i51, $sub.i32(0, 1073741824));
    goto corral_source_split_17612;

  corral_source_split_17610:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i64.i32(out_$i50);
    call {:si_unique_call 6465} {:cexpr "__cil_tmp41"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_17611;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_17610;

  $bb9:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i46;
    goto $bb10;

  corral_source_split_17608:
    assume {:verifier.code 0} true;
    out_$i50 := in_$i2;
    goto $bb10;

  $bb8:
    assume out_$i49 == 1;
    call {:si_unique_call 6464} {:cexpr "pch_udc_create_dma_chain:arg:tmp"} boogie_si_record_i64(in_$i2);
    goto corral_source_split_17608;

  corral_source_split_17606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_17605:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i64(in_$i2, out_$i46);
    goto corral_source_split_17606;

  corral_source_split_17682_dummy:
    call {:si_unique_call 1} out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91 := pch_udc_create_dma_chain_loop_$bb7(in_$p0, in_$p1, in_$i2, in_$i3, in_$p4, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91);
    return;

  exit:
    return;
}



procedure pch_udc_create_dma_chain_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i32, in_$p4: ref, in_$p45: ref, in_$i46: i64, in_$i47: i64, in_$i48: i32, in_$i49: i1, in_$i50: i64, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$i69: i1, in_$i70: i32, in_$i71: i64, in_$i72: i64, in_$i73: i64, in_$i74: i32, in_$i75: i64, in_$i76: i64, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$i87: i64, in_$i88: i32, in_$p89: ref, in_$i90: i64, in_$i91: i32) returns (out_$p45: ref, out_$i46: i64, out_$i47: i64, out_$i48: i32, out_$i49: i1, out_$i50: i64, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$i69: i1, out_$i70: i32, out_$i71: i64, out_$i72: i64, out_$i73: i64, out_$i74: i32, out_$i75: i64, out_$i76: i64, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$i87: i64, out_$i88: i32, out_$p89: ref, out_$i90: i64, out_$i91: i32);
  modifies $M.1, assertsPassed;



implementation pch_udc_free_dma_chain_loop_$bb4(in_$p0: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i19: i64, in_$i20: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i19: i64, out_$i20: i32)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i19, out_$i20 := in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i19, in_$i20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_17724;

  $bb6:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$i20 := out_$i27, out_$i36;
    goto $bb6_dummy;

  corral_source_split_17744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_17743:
    assume {:verifier.code 0} true;
    out_$i37 := $ugt.i32(out_$i36, 1);
    goto corral_source_split_17744;

  corral_source_split_17742:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i20, 1);
    call {:si_unique_call 6525} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_17743;

  corral_source_split_17741:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p35, 0);
    goto corral_source_split_17742;

  corral_source_split_17740:
    assume {:verifier.code 0} true;
    out_$p35 := $i2p.i64.ref(out_$i34);
    goto corral_source_split_17741;

  corral_source_split_17739:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i64(out_$i33, 12);
    call {:si_unique_call 6524} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_17740;

  corral_source_split_17738:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p22);
    call {:si_unique_call 6523} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_17739;

  corral_source_split_17737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6522} dma_pool_free(out_$p31, out_$p32, out_$i19);
    goto corral_source_split_17738;

  corral_source_split_17736:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_17737;

  corral_source_split_17735:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_17736;

  corral_source_split_17734:
    assume {:verifier.code 0} true;
    out_$p30 := $i2p.i64.ref(out_$i29);
    goto corral_source_split_17735;

  corral_source_split_17733:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i64(out_$i28, 6168);
    call {:si_unique_call 6521} {:cexpr "__cil_tmp21"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_17734;

  corral_source_split_17732:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 6520} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_17733;

  corral_source_split_17731:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i26);
    call {:si_unique_call 6519} {:cexpr "addr2"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_17732;

  corral_source_split_17730:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.1, out_$p25);
    call {:si_unique_call 6518} {:cexpr "__cil_tmp19"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_17731;

  corral_source_split_17729:
    assume {:verifier.code 0} true;
    out_$p25 := $i2p.i64.ref(out_$i24);
    goto corral_source_split_17730;

  corral_source_split_17728:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i23, 12);
    call {:si_unique_call 6517} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_17729;

  corral_source_split_17727:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    call {:si_unique_call 6516} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_17728;

  corral_source_split_17726:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_17727;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6515} out_$p21 := phys_to_virt(out_$i19);
    goto corral_source_split_17726;

  corral_source_split_17724:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i19, out_$i20 := pch_udc_free_dma_chain_loop_$bb4(in_$p0, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure pch_udc_free_dma_chain_loop_$bb4(in_$p0: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i19: i64, in_$i20: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i19: i64, out_$i20: i32);
  modifies $M.1;


